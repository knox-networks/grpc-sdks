// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: wallet_api/v1/wallet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace WalletApi.V1 {
  /// <summary>
  /// Transacts and holds digital banknotes and bank customer information required for financial compliance, in the form of
  /// a W3C Verifiable Credential (https://www.w3.org/TR/vc-data-model).  This is a server side wallet solution in lieu of
  /// a mobile wallet, hosted by the bank on behalf of the customer who opts in to do so. Can also be used by institutions,
  /// e.g. a financial institution vault.
  /// </summary>
  public static partial class WalletService
  {
    static readonly string __ServiceName = "wallet_api.v1.WalletService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.TransferRequest> __Marshaller_wallet_api_v1_TransferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.TransferRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.TransferResponse> __Marshaller_wallet_api_v1_TransferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.TransferResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.CreateOwnerRequest> __Marshaller_wallet_api_v1_CreateOwnerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.CreateOwnerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.CreateOwnerResponse> __Marshaller_wallet_api_v1_CreateOwnerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.CreateOwnerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.CreateWalletRequest> __Marshaller_wallet_api_v1_CreateWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.CreateWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.CreateWalletResponse> __Marshaller_wallet_api_v1_CreateWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.CreateWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListWalletsRequest> __Marshaller_wallet_api_v1_ListWalletsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListWalletsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListWalletsResponse> __Marshaller_wallet_api_v1_ListWalletsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListWalletsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListFundsRequest> __Marshaller_wallet_api_v1_ListFundsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListFundsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListFundsResponse> __Marshaller_wallet_api_v1_ListFundsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListFundsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListWalletBalancesRequest> __Marshaller_wallet_api_v1_ListWalletBalancesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListWalletBalancesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListWalletBalancesResponse> __Marshaller_wallet_api_v1_ListWalletBalancesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListWalletBalancesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.RedeemRequest> __Marshaller_wallet_api_v1_RedeemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.RedeemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.RedeemResponse> __Marshaller_wallet_api_v1_RedeemResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.RedeemResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListCredentialsRequest> __Marshaller_wallet_api_v1_ListCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListCredentialsResponse> __Marshaller_wallet_api_v1_ListCredentialsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListCredentialsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.AddCredentialRequest> __Marshaller_wallet_api_v1_AddCredentialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.AddCredentialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.AddCredentialResponse> __Marshaller_wallet_api_v1_AddCredentialResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.AddCredentialResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.AssociateWalletRequest> __Marshaller_wallet_api_v1_AssociateWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.AssociateWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.AssociateWalletResponse> __Marshaller_wallet_api_v1_AssociateWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.AssociateWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.RequestPresentationRequest> __Marshaller_wallet_api_v1_RequestPresentationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.RequestPresentationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.RequestPresentationResponse> __Marshaller_wallet_api_v1_RequestPresentationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.RequestPresentationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.PrepareSimplePaymentRequest> __Marshaller_wallet_api_v1_PrepareSimplePaymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.PrepareSimplePaymentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.PrepareSimplePaymentResponse> __Marshaller_wallet_api_v1_PrepareSimplePaymentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.PrepareSimplePaymentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.PrepareFundsChangeRequest> __Marshaller_wallet_api_v1_PrepareFundsChangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.PrepareFundsChangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.PrepareFundsChangeResponse> __Marshaller_wallet_api_v1_PrepareFundsChangeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.PrepareFundsChangeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.GetTransactionRequest> __Marshaller_wallet_api_v1_GetTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.GetTransactionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.GetTransactionResponse> __Marshaller_wallet_api_v1_GetTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.GetTransactionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListTransactionsRequest> __Marshaller_wallet_api_v1_ListTransactionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListTransactionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListTransactionsResponse> __Marshaller_wallet_api_v1_ListTransactionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListTransactionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.GetTransactionSnapshotRequest> __Marshaller_wallet_api_v1_GetTransactionSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.GetTransactionSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.GetTransactionSnapshotResponse> __Marshaller_wallet_api_v1_GetTransactionSnapshotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.GetTransactionSnapshotResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListTransactionSnapshotsRequest> __Marshaller_wallet_api_v1_ListTransactionSnapshotsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListTransactionSnapshotsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::WalletApi.V1.ListTransactionSnapshotsResponse> __Marshaller_wallet_api_v1_ListTransactionSnapshotsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WalletApi.V1.ListTransactionSnapshotsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.TransferRequest, global::WalletApi.V1.TransferResponse> __Method_Transfer = new grpc::Method<global::WalletApi.V1.TransferRequest, global::WalletApi.V1.TransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Transfer",
        __Marshaller_wallet_api_v1_TransferRequest,
        __Marshaller_wallet_api_v1_TransferResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.CreateOwnerRequest, global::WalletApi.V1.CreateOwnerResponse> __Method_CreateOwner = new grpc::Method<global::WalletApi.V1.CreateOwnerRequest, global::WalletApi.V1.CreateOwnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOwner",
        __Marshaller_wallet_api_v1_CreateOwnerRequest,
        __Marshaller_wallet_api_v1_CreateOwnerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.CreateWalletRequest, global::WalletApi.V1.CreateWalletResponse> __Method_CreateWallet = new grpc::Method<global::WalletApi.V1.CreateWalletRequest, global::WalletApi.V1.CreateWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWallet",
        __Marshaller_wallet_api_v1_CreateWalletRequest,
        __Marshaller_wallet_api_v1_CreateWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.ListWalletsRequest, global::WalletApi.V1.ListWalletsResponse> __Method_ListWallets = new grpc::Method<global::WalletApi.V1.ListWalletsRequest, global::WalletApi.V1.ListWalletsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWallets",
        __Marshaller_wallet_api_v1_ListWalletsRequest,
        __Marshaller_wallet_api_v1_ListWalletsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.ListFundsRequest, global::WalletApi.V1.ListFundsResponse> __Method_ListFunds = new grpc::Method<global::WalletApi.V1.ListFundsRequest, global::WalletApi.V1.ListFundsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFunds",
        __Marshaller_wallet_api_v1_ListFundsRequest,
        __Marshaller_wallet_api_v1_ListFundsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.ListWalletBalancesRequest, global::WalletApi.V1.ListWalletBalancesResponse> __Method_ListWalletBalances = new grpc::Method<global::WalletApi.V1.ListWalletBalancesRequest, global::WalletApi.V1.ListWalletBalancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWalletBalances",
        __Marshaller_wallet_api_v1_ListWalletBalancesRequest,
        __Marshaller_wallet_api_v1_ListWalletBalancesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.RedeemRequest, global::WalletApi.V1.RedeemResponse> __Method_Redeem = new grpc::Method<global::WalletApi.V1.RedeemRequest, global::WalletApi.V1.RedeemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Redeem",
        __Marshaller_wallet_api_v1_RedeemRequest,
        __Marshaller_wallet_api_v1_RedeemResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.ListCredentialsRequest, global::WalletApi.V1.ListCredentialsResponse> __Method_ListCredentials = new grpc::Method<global::WalletApi.V1.ListCredentialsRequest, global::WalletApi.V1.ListCredentialsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCredentials",
        __Marshaller_wallet_api_v1_ListCredentialsRequest,
        __Marshaller_wallet_api_v1_ListCredentialsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.AddCredentialRequest, global::WalletApi.V1.AddCredentialResponse> __Method_AddCredential = new grpc::Method<global::WalletApi.V1.AddCredentialRequest, global::WalletApi.V1.AddCredentialResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCredential",
        __Marshaller_wallet_api_v1_AddCredentialRequest,
        __Marshaller_wallet_api_v1_AddCredentialResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.AssociateWalletRequest, global::WalletApi.V1.AssociateWalletResponse> __Method_AssociateWallet = new grpc::Method<global::WalletApi.V1.AssociateWalletRequest, global::WalletApi.V1.AssociateWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AssociateWallet",
        __Marshaller_wallet_api_v1_AssociateWalletRequest,
        __Marshaller_wallet_api_v1_AssociateWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.RequestPresentationRequest, global::WalletApi.V1.RequestPresentationResponse> __Method_RequestPresentation = new grpc::Method<global::WalletApi.V1.RequestPresentationRequest, global::WalletApi.V1.RequestPresentationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestPresentation",
        __Marshaller_wallet_api_v1_RequestPresentationRequest,
        __Marshaller_wallet_api_v1_RequestPresentationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.PrepareSimplePaymentRequest, global::WalletApi.V1.PrepareSimplePaymentResponse> __Method_PrepareSimplePayment = new grpc::Method<global::WalletApi.V1.PrepareSimplePaymentRequest, global::WalletApi.V1.PrepareSimplePaymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareSimplePayment",
        __Marshaller_wallet_api_v1_PrepareSimplePaymentRequest,
        __Marshaller_wallet_api_v1_PrepareSimplePaymentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.PrepareFundsChangeRequest, global::WalletApi.V1.PrepareFundsChangeResponse> __Method_PrepareFundsChange = new grpc::Method<global::WalletApi.V1.PrepareFundsChangeRequest, global::WalletApi.V1.PrepareFundsChangeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareFundsChange",
        __Marshaller_wallet_api_v1_PrepareFundsChangeRequest,
        __Marshaller_wallet_api_v1_PrepareFundsChangeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.GetTransactionRequest, global::WalletApi.V1.GetTransactionResponse> __Method_GetTransaction = new grpc::Method<global::WalletApi.V1.GetTransactionRequest, global::WalletApi.V1.GetTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransaction",
        __Marshaller_wallet_api_v1_GetTransactionRequest,
        __Marshaller_wallet_api_v1_GetTransactionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.ListTransactionsRequest, global::WalletApi.V1.ListTransactionsResponse> __Method_ListTransactions = new grpc::Method<global::WalletApi.V1.ListTransactionsRequest, global::WalletApi.V1.ListTransactionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTransactions",
        __Marshaller_wallet_api_v1_ListTransactionsRequest,
        __Marshaller_wallet_api_v1_ListTransactionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.GetTransactionSnapshotRequest, global::WalletApi.V1.GetTransactionSnapshotResponse> __Method_GetTransactionSnapshot = new grpc::Method<global::WalletApi.V1.GetTransactionSnapshotRequest, global::WalletApi.V1.GetTransactionSnapshotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionSnapshot",
        __Marshaller_wallet_api_v1_GetTransactionSnapshotRequest,
        __Marshaller_wallet_api_v1_GetTransactionSnapshotResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::WalletApi.V1.ListTransactionSnapshotsRequest, global::WalletApi.V1.ListTransactionSnapshotsResponse> __Method_ListTransactionSnapshots = new grpc::Method<global::WalletApi.V1.ListTransactionSnapshotsRequest, global::WalletApi.V1.ListTransactionSnapshotsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTransactionSnapshots",
        __Marshaller_wallet_api_v1_ListTransactionSnapshotsRequest,
        __Marshaller_wallet_api_v1_ListTransactionSnapshotsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::WalletApi.V1.WalletReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WalletService</summary>
    [grpc::BindServiceMethod(typeof(WalletService), "BindService")]
    public abstract partial class WalletServiceBase
    {
      /// <summary>
      /// Transfers digital banknotes from a custodial wallet to a given recipient public key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.TransferResponse> Transfer(global::WalletApi.V1.TransferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
      /// manage many customer custodial wallets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.CreateOwnerResponse> CreateOwner(global::WalletApi.V1.CreateOwnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a wallet for a given owner, which can manage the wallet.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.CreateWalletResponse> CreateWallet(global::WalletApi.V1.CreateWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all wallets for a given owner.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.ListWalletsResponse> ListWallets(global::WalletApi.V1.ListWalletsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the digital banknotes for a wallet.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.ListFundsResponse> ListFunds(global::WalletApi.V1.ListFundsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the balances of each currency in the wallet.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.ListWalletBalancesResponse> ListWalletBalances(global::WalletApi.V1.ListWalletBalancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
      /// issuance limit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.RedeemResponse> Redeem(global::WalletApi.V1.RedeemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the W3C Verifiable Credentials of the wallet subject.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.ListCredentialsResponse> ListCredentials(global::WalletApi.V1.ListCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
      /// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.AddCredentialResponse> AddCredential(global::WalletApi.V1.AddCredentialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.AssociateWalletResponse> AssociateWallet(global::WalletApi.V1.AssociateWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the JSON Verifiable Presentation containing the PII of the subject.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.RequestPresentationResponse> RequestPresentation(global::WalletApi.V1.RequestPresentationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Attempts to start a `StartSimplePaymentRequest`. The call immediately returns with a `status` and `uetr` that can
      /// be used to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.PrepareSimplePaymentResponse> PrepareSimplePayment(global::WalletApi.V1.PrepareSimplePaymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
      /// to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.PrepareFundsChangeResponse> PrepareFundsChange(global::WalletApi.V1.PrepareFundsChangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains metadata about a transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.GetTransactionResponse> GetTransaction(global::WalletApi.V1.GetTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all transactions of a given wallet.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.ListTransactionsResponse> ListTransactions(global::WalletApi.V1.ListTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains current snapshot of a transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.GetTransactionSnapshotResponse> GetTransactionSnapshot(global::WalletApi.V1.GetTransactionSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains the history of a transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::WalletApi.V1.ListTransactionSnapshotsResponse> ListTransactionSnapshots(global::WalletApi.V1.ListTransactionSnapshotsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WalletService</summary>
    public partial class WalletServiceClient : grpc::ClientBase<WalletServiceClient>
    {
      /// <summary>Creates a new client for WalletService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WalletServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WalletServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WalletServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WalletServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Transfers digital banknotes from a custodial wallet to a given recipient public key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.TransferResponse Transfer(global::WalletApi.V1.TransferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Transfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers digital banknotes from a custodial wallet to a given recipient public key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.TransferResponse Transfer(global::WalletApi.V1.TransferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Transfer, null, options, request);
      }
      /// <summary>
      /// Transfers digital banknotes from a custodial wallet to a given recipient public key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.TransferResponse> TransferAsync(global::WalletApi.V1.TransferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers digital banknotes from a custodial wallet to a given recipient public key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.TransferResponse> TransferAsync(global::WalletApi.V1.TransferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Transfer, null, options, request);
      }
      /// <summary>
      /// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
      /// manage many customer custodial wallets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.CreateOwnerResponse CreateOwner(global::WalletApi.V1.CreateOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOwner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
      /// manage many customer custodial wallets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.CreateOwnerResponse CreateOwner(global::WalletApi.V1.CreateOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOwner, null, options, request);
      }
      /// <summary>
      /// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
      /// manage many customer custodial wallets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.CreateOwnerResponse> CreateOwnerAsync(global::WalletApi.V1.CreateOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
      /// manage many customer custodial wallets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.CreateOwnerResponse> CreateOwnerAsync(global::WalletApi.V1.CreateOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOwner, null, options, request);
      }
      /// <summary>
      /// Creates a wallet for a given owner, which can manage the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.CreateWalletResponse CreateWallet(global::WalletApi.V1.CreateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a wallet for a given owner, which can manage the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.CreateWalletResponse CreateWallet(global::WalletApi.V1.CreateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWallet, null, options, request);
      }
      /// <summary>
      /// Creates a wallet for a given owner, which can manage the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.CreateWalletResponse> CreateWalletAsync(global::WalletApi.V1.CreateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a wallet for a given owner, which can manage the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.CreateWalletResponse> CreateWalletAsync(global::WalletApi.V1.CreateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWallet, null, options, request);
      }
      /// <summary>
      /// List all wallets for a given owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListWalletsResponse ListWallets(global::WalletApi.V1.ListWalletsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWallets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all wallets for a given owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListWalletsResponse ListWallets(global::WalletApi.V1.ListWalletsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWallets, null, options, request);
      }
      /// <summary>
      /// List all wallets for a given owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListWalletsResponse> ListWalletsAsync(global::WalletApi.V1.ListWalletsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWalletsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all wallets for a given owner.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListWalletsResponse> ListWalletsAsync(global::WalletApi.V1.ListWalletsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWallets, null, options, request);
      }
      /// <summary>
      /// List the digital banknotes for a wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListFundsResponse ListFunds(global::WalletApi.V1.ListFundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFunds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the digital banknotes for a wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListFundsResponse ListFunds(global::WalletApi.V1.ListFundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFunds, null, options, request);
      }
      /// <summary>
      /// List the digital banknotes for a wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListFundsResponse> ListFundsAsync(global::WalletApi.V1.ListFundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFundsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the digital banknotes for a wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListFundsResponse> ListFundsAsync(global::WalletApi.V1.ListFundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFunds, null, options, request);
      }
      /// <summary>
      /// List the balances of each currency in the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListWalletBalancesResponse ListWalletBalances(global::WalletApi.V1.ListWalletBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWalletBalances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the balances of each currency in the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListWalletBalancesResponse ListWalletBalances(global::WalletApi.V1.ListWalletBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWalletBalances, null, options, request);
      }
      /// <summary>
      /// List the balances of each currency in the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListWalletBalancesResponse> ListWalletBalancesAsync(global::WalletApi.V1.ListWalletBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWalletBalancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the balances of each currency in the wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListWalletBalancesResponse> ListWalletBalancesAsync(global::WalletApi.V1.ListWalletBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWalletBalances, null, options, request);
      }
      /// <summary>
      /// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
      /// issuance limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.RedeemResponse Redeem(global::WalletApi.V1.RedeemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Redeem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
      /// issuance limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.RedeemResponse Redeem(global::WalletApi.V1.RedeemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Redeem, null, options, request);
      }
      /// <summary>
      /// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
      /// issuance limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.RedeemResponse> RedeemAsync(global::WalletApi.V1.RedeemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RedeemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
      /// issuance limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.RedeemResponse> RedeemAsync(global::WalletApi.V1.RedeemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Redeem, null, options, request);
      }
      /// <summary>
      /// Lists the W3C Verifiable Credentials of the wallet subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListCredentialsResponse ListCredentials(global::WalletApi.V1.ListCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the W3C Verifiable Credentials of the wallet subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListCredentialsResponse ListCredentials(global::WalletApi.V1.ListCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCredentials, null, options, request);
      }
      /// <summary>
      /// Lists the W3C Verifiable Credentials of the wallet subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListCredentialsResponse> ListCredentialsAsync(global::WalletApi.V1.ListCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the W3C Verifiable Credentials of the wallet subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListCredentialsResponse> ListCredentialsAsync(global::WalletApi.V1.ListCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCredentials, null, options, request);
      }
      /// <summary>
      /// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
      /// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.AddCredentialResponse AddCredential(global::WalletApi.V1.AddCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCredential(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
      /// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.AddCredentialResponse AddCredential(global::WalletApi.V1.AddCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddCredential, null, options, request);
      }
      /// <summary>
      /// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
      /// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.AddCredentialResponse> AddCredentialAsync(global::WalletApi.V1.AddCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCredentialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
      /// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.AddCredentialResponse> AddCredentialAsync(global::WalletApi.V1.AddCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddCredential, null, options, request);
      }
      /// <summary>
      /// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.AssociateWalletResponse AssociateWallet(global::WalletApi.V1.AssociateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssociateWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.AssociateWalletResponse AssociateWallet(global::WalletApi.V1.AssociateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AssociateWallet, null, options, request);
      }
      /// <summary>
      /// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.AssociateWalletResponse> AssociateWalletAsync(global::WalletApi.V1.AssociateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssociateWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.AssociateWalletResponse> AssociateWalletAsync(global::WalletApi.V1.AssociateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AssociateWallet, null, options, request);
      }
      /// <summary>
      /// Returns the JSON Verifiable Presentation containing the PII of the subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.RequestPresentationResponse RequestPresentation(global::WalletApi.V1.RequestPresentationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestPresentation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the JSON Verifiable Presentation containing the PII of the subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.RequestPresentationResponse RequestPresentation(global::WalletApi.V1.RequestPresentationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestPresentation, null, options, request);
      }
      /// <summary>
      /// Returns the JSON Verifiable Presentation containing the PII of the subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.RequestPresentationResponse> RequestPresentationAsync(global::WalletApi.V1.RequestPresentationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestPresentationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the JSON Verifiable Presentation containing the PII of the subject.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.RequestPresentationResponse> RequestPresentationAsync(global::WalletApi.V1.RequestPresentationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestPresentation, null, options, request);
      }
      /// <summary>
      /// Attempts to start a `StartSimplePaymentRequest`. The call immediately returns with a `status` and `uetr` that can
      /// be used to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.PrepareSimplePaymentResponse PrepareSimplePayment(global::WalletApi.V1.PrepareSimplePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareSimplePayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attempts to start a `StartSimplePaymentRequest`. The call immediately returns with a `status` and `uetr` that can
      /// be used to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.PrepareSimplePaymentResponse PrepareSimplePayment(global::WalletApi.V1.PrepareSimplePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareSimplePayment, null, options, request);
      }
      /// <summary>
      /// Attempts to start a `StartSimplePaymentRequest`. The call immediately returns with a `status` and `uetr` that can
      /// be used to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.PrepareSimplePaymentResponse> PrepareSimplePaymentAsync(global::WalletApi.V1.PrepareSimplePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareSimplePaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attempts to start a `StartSimplePaymentRequest`. The call immediately returns with a `status` and `uetr` that can
      /// be used to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.PrepareSimplePaymentResponse> PrepareSimplePaymentAsync(global::WalletApi.V1.PrepareSimplePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareSimplePayment, null, options, request);
      }
      /// <summary>
      /// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
      /// to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.PrepareFundsChangeResponse PrepareFundsChange(global::WalletApi.V1.PrepareFundsChangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareFundsChange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
      /// to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.PrepareFundsChangeResponse PrepareFundsChange(global::WalletApi.V1.PrepareFundsChangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareFundsChange, null, options, request);
      }
      /// <summary>
      /// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
      /// to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.PrepareFundsChangeResponse> PrepareFundsChangeAsync(global::WalletApi.V1.PrepareFundsChangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareFundsChangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
      /// to query more information about the transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.PrepareFundsChangeResponse> PrepareFundsChangeAsync(global::WalletApi.V1.PrepareFundsChangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareFundsChange, null, options, request);
      }
      /// <summary>
      /// Obtains metadata about a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.GetTransactionResponse GetTransaction(global::WalletApi.V1.GetTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains metadata about a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.GetTransactionResponse GetTransaction(global::WalletApi.V1.GetTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransaction, null, options, request);
      }
      /// <summary>
      /// Obtains metadata about a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.GetTransactionResponse> GetTransactionAsync(global::WalletApi.V1.GetTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains metadata about a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.GetTransactionResponse> GetTransactionAsync(global::WalletApi.V1.GetTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransaction, null, options, request);
      }
      /// <summary>
      /// List all transactions of a given wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListTransactionsResponse ListTransactions(global::WalletApi.V1.ListTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all transactions of a given wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListTransactionsResponse ListTransactions(global::WalletApi.V1.ListTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTransactions, null, options, request);
      }
      /// <summary>
      /// List all transactions of a given wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListTransactionsResponse> ListTransactionsAsync(global::WalletApi.V1.ListTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all transactions of a given wallet.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListTransactionsResponse> ListTransactionsAsync(global::WalletApi.V1.ListTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTransactions, null, options, request);
      }
      /// <summary>
      /// Obtains current snapshot of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.GetTransactionSnapshotResponse GetTransactionSnapshot(global::WalletApi.V1.GetTransactionSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains current snapshot of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.GetTransactionSnapshotResponse GetTransactionSnapshot(global::WalletApi.V1.GetTransactionSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionSnapshot, null, options, request);
      }
      /// <summary>
      /// Obtains current snapshot of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.GetTransactionSnapshotResponse> GetTransactionSnapshotAsync(global::WalletApi.V1.GetTransactionSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains current snapshot of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.GetTransactionSnapshotResponse> GetTransactionSnapshotAsync(global::WalletApi.V1.GetTransactionSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionSnapshot, null, options, request);
      }
      /// <summary>
      /// Obtains the history of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListTransactionSnapshotsResponse ListTransactionSnapshots(global::WalletApi.V1.ListTransactionSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransactionSnapshots(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains the history of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::WalletApi.V1.ListTransactionSnapshotsResponse ListTransactionSnapshots(global::WalletApi.V1.ListTransactionSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTransactionSnapshots, null, options, request);
      }
      /// <summary>
      /// Obtains the history of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListTransactionSnapshotsResponse> ListTransactionSnapshotsAsync(global::WalletApi.V1.ListTransactionSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransactionSnapshotsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains the history of a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::WalletApi.V1.ListTransactionSnapshotsResponse> ListTransactionSnapshotsAsync(global::WalletApi.V1.ListTransactionSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTransactionSnapshots, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WalletServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WalletServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Transfer, serviceImpl.Transfer)
          .AddMethod(__Method_CreateOwner, serviceImpl.CreateOwner)
          .AddMethod(__Method_CreateWallet, serviceImpl.CreateWallet)
          .AddMethod(__Method_ListWallets, serviceImpl.ListWallets)
          .AddMethod(__Method_ListFunds, serviceImpl.ListFunds)
          .AddMethod(__Method_ListWalletBalances, serviceImpl.ListWalletBalances)
          .AddMethod(__Method_Redeem, serviceImpl.Redeem)
          .AddMethod(__Method_ListCredentials, serviceImpl.ListCredentials)
          .AddMethod(__Method_AddCredential, serviceImpl.AddCredential)
          .AddMethod(__Method_AssociateWallet, serviceImpl.AssociateWallet)
          .AddMethod(__Method_RequestPresentation, serviceImpl.RequestPresentation)
          .AddMethod(__Method_PrepareSimplePayment, serviceImpl.PrepareSimplePayment)
          .AddMethod(__Method_PrepareFundsChange, serviceImpl.PrepareFundsChange)
          .AddMethod(__Method_GetTransaction, serviceImpl.GetTransaction)
          .AddMethod(__Method_ListTransactions, serviceImpl.ListTransactions)
          .AddMethod(__Method_GetTransactionSnapshot, serviceImpl.GetTransactionSnapshot)
          .AddMethod(__Method_ListTransactionSnapshots, serviceImpl.ListTransactionSnapshots).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WalletServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Transfer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.TransferRequest, global::WalletApi.V1.TransferResponse>(serviceImpl.Transfer));
      serviceBinder.AddMethod(__Method_CreateOwner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.CreateOwnerRequest, global::WalletApi.V1.CreateOwnerResponse>(serviceImpl.CreateOwner));
      serviceBinder.AddMethod(__Method_CreateWallet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.CreateWalletRequest, global::WalletApi.V1.CreateWalletResponse>(serviceImpl.CreateWallet));
      serviceBinder.AddMethod(__Method_ListWallets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.ListWalletsRequest, global::WalletApi.V1.ListWalletsResponse>(serviceImpl.ListWallets));
      serviceBinder.AddMethod(__Method_ListFunds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.ListFundsRequest, global::WalletApi.V1.ListFundsResponse>(serviceImpl.ListFunds));
      serviceBinder.AddMethod(__Method_ListWalletBalances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.ListWalletBalancesRequest, global::WalletApi.V1.ListWalletBalancesResponse>(serviceImpl.ListWalletBalances));
      serviceBinder.AddMethod(__Method_Redeem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.RedeemRequest, global::WalletApi.V1.RedeemResponse>(serviceImpl.Redeem));
      serviceBinder.AddMethod(__Method_ListCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.ListCredentialsRequest, global::WalletApi.V1.ListCredentialsResponse>(serviceImpl.ListCredentials));
      serviceBinder.AddMethod(__Method_AddCredential, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.AddCredentialRequest, global::WalletApi.V1.AddCredentialResponse>(serviceImpl.AddCredential));
      serviceBinder.AddMethod(__Method_AssociateWallet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.AssociateWalletRequest, global::WalletApi.V1.AssociateWalletResponse>(serviceImpl.AssociateWallet));
      serviceBinder.AddMethod(__Method_RequestPresentation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.RequestPresentationRequest, global::WalletApi.V1.RequestPresentationResponse>(serviceImpl.RequestPresentation));
      serviceBinder.AddMethod(__Method_PrepareSimplePayment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.PrepareSimplePaymentRequest, global::WalletApi.V1.PrepareSimplePaymentResponse>(serviceImpl.PrepareSimplePayment));
      serviceBinder.AddMethod(__Method_PrepareFundsChange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.PrepareFundsChangeRequest, global::WalletApi.V1.PrepareFundsChangeResponse>(serviceImpl.PrepareFundsChange));
      serviceBinder.AddMethod(__Method_GetTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.GetTransactionRequest, global::WalletApi.V1.GetTransactionResponse>(serviceImpl.GetTransaction));
      serviceBinder.AddMethod(__Method_ListTransactions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.ListTransactionsRequest, global::WalletApi.V1.ListTransactionsResponse>(serviceImpl.ListTransactions));
      serviceBinder.AddMethod(__Method_GetTransactionSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.GetTransactionSnapshotRequest, global::WalletApi.V1.GetTransactionSnapshotResponse>(serviceImpl.GetTransactionSnapshot));
      serviceBinder.AddMethod(__Method_ListTransactionSnapshots, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WalletApi.V1.ListTransactionSnapshotsRequest, global::WalletApi.V1.ListTransactionSnapshotsResponse>(serviceImpl.ListTransactionSnapshots));
    }

  }
}
#endregion
