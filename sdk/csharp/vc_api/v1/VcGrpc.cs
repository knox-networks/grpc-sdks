// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vc_api/v1/vc.proto
// </auto-generated>
// Original file comments:
// protoc --go_out=plugins=grpc:. *.proto
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace VcApi.V1 {
  /// <summary>
  ///Enables existing systems to support W3C Verifiable Credential (VC) interactions between holders, VC issuers and verifiers as per https://www.w3.org/TR/vc-data-model/.  It is either used by credential providers (VC Issuer) or verifiers as required.  It provides predefined interfaces to expose (Example Bank customer info APIs) but allows for custom integrations as required.
  /// </summary>
  public static partial class CredentialAdapter
  {
    static readonly string __ServiceName = "vc_api.v1.CredentialAdapter";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.CreateIssuanceChallengeRequest> __Marshaller_vc_api_v1_CreateIssuanceChallengeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.CreateIssuanceChallengeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.CreateIssuanceChallengeResponse> __Marshaller_vc_api_v1_CreateIssuanceChallengeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.CreateIssuanceChallengeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.IssueVerifiableCredentialRequest> __Marshaller_vc_api_v1_IssueVerifiableCredentialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.IssueVerifiableCredentialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.IssueVerifiableCredentialResponse> __Marshaller_vc_api_v1_IssueVerifiableCredentialResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.IssueVerifiableCredentialResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.CreatePresentationChallengeRequest> __Marshaller_vc_api_v1_CreatePresentationChallengeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.CreatePresentationChallengeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.CreatePresentationChallengeResponse> __Marshaller_vc_api_v1_CreatePresentationChallengeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.CreatePresentationChallengeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.PresentVerifiableCredentialRequest> __Marshaller_vc_api_v1_PresentVerifiableCredentialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.PresentVerifiableCredentialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.PresentVerifiableCredentialResponse> __Marshaller_vc_api_v1_PresentVerifiableCredentialResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.PresentVerifiableCredentialResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.WaitForCompletionRequest> __Marshaller_vc_api_v1_WaitForCompletionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.WaitForCompletionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VcApi.V1.WaitForCompletionResponse> __Marshaller_vc_api_v1_WaitForCompletionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VcApi.V1.WaitForCompletionResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VcApi.V1.CreateIssuanceChallengeRequest, global::VcApi.V1.CreateIssuanceChallengeResponse> __Method_CreateIssuanceChallenge = new grpc::Method<global::VcApi.V1.CreateIssuanceChallengeRequest, global::VcApi.V1.CreateIssuanceChallengeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIssuanceChallenge",
        __Marshaller_vc_api_v1_CreateIssuanceChallengeRequest,
        __Marshaller_vc_api_v1_CreateIssuanceChallengeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VcApi.V1.IssueVerifiableCredentialRequest, global::VcApi.V1.IssueVerifiableCredentialResponse> __Method_IssueVerifiableCredential = new grpc::Method<global::VcApi.V1.IssueVerifiableCredentialRequest, global::VcApi.V1.IssueVerifiableCredentialResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IssueVerifiableCredential",
        __Marshaller_vc_api_v1_IssueVerifiableCredentialRequest,
        __Marshaller_vc_api_v1_IssueVerifiableCredentialResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VcApi.V1.CreatePresentationChallengeRequest, global::VcApi.V1.CreatePresentationChallengeResponse> __Method_CreatePresentationChallenge = new grpc::Method<global::VcApi.V1.CreatePresentationChallengeRequest, global::VcApi.V1.CreatePresentationChallengeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePresentationChallenge",
        __Marshaller_vc_api_v1_CreatePresentationChallengeRequest,
        __Marshaller_vc_api_v1_CreatePresentationChallengeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VcApi.V1.PresentVerifiableCredentialRequest, global::VcApi.V1.PresentVerifiableCredentialResponse> __Method_PresentVerifiableCredential = new grpc::Method<global::VcApi.V1.PresentVerifiableCredentialRequest, global::VcApi.V1.PresentVerifiableCredentialResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PresentVerifiableCredential",
        __Marshaller_vc_api_v1_PresentVerifiableCredentialRequest,
        __Marshaller_vc_api_v1_PresentVerifiableCredentialResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VcApi.V1.WaitForCompletionRequest, global::VcApi.V1.WaitForCompletionResponse> __Method_WaitForCompletion = new grpc::Method<global::VcApi.V1.WaitForCompletionRequest, global::VcApi.V1.WaitForCompletionResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WaitForCompletion",
        __Marshaller_vc_api_v1_WaitForCompletionRequest,
        __Marshaller_vc_api_v1_WaitForCompletionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::VcApi.V1.VcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CredentialAdapter</summary>
    [grpc::BindServiceMethod(typeof(CredentialAdapter), "BindService")]
    public abstract partial class CredentialAdapterBase
    {
      /// <summary>
      /// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VcApi.V1.CreateIssuanceChallengeResponse> CreateIssuanceChallenge(global::VcApi.V1.CreateIssuanceChallengeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the holder to the VC issuer to answer the challenge and receive the credential.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VcApi.V1.IssueVerifiableCredentialResponse> IssueVerifiableCredential(global::VcApi.V1.IssueVerifiableCredentialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VcApi.V1.CreatePresentationChallengeResponse> CreatePresentationChallenge(global::VcApi.V1.CreatePresentationChallengeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the holder to the verifier to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VcApi.V1.PresentVerifiableCredentialResponse> PresentVerifiableCredential(global::VcApi.V1.PresentVerifiableCredentialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task WaitForCompletion(global::VcApi.V1.WaitForCompletionRequest request, grpc::IServerStreamWriter<global::VcApi.V1.WaitForCompletionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CredentialAdapter</summary>
    public partial class CredentialAdapterClient : grpc::ClientBase<CredentialAdapterClient>
    {
      /// <summary>Creates a new client for CredentialAdapter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CredentialAdapterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CredentialAdapter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CredentialAdapterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CredentialAdapterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CredentialAdapterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.CreateIssuanceChallengeResponse CreateIssuanceChallenge(global::VcApi.V1.CreateIssuanceChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIssuanceChallenge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.CreateIssuanceChallengeResponse CreateIssuanceChallenge(global::VcApi.V1.CreateIssuanceChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIssuanceChallenge, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.CreateIssuanceChallengeResponse> CreateIssuanceChallengeAsync(global::VcApi.V1.CreateIssuanceChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIssuanceChallengeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.CreateIssuanceChallengeResponse> CreateIssuanceChallengeAsync(global::VcApi.V1.CreateIssuanceChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIssuanceChallenge, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the VC issuer to answer the challenge and receive the credential.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.IssueVerifiableCredentialResponse IssueVerifiableCredential(global::VcApi.V1.IssueVerifiableCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IssueVerifiableCredential(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the VC issuer to answer the challenge and receive the credential.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.IssueVerifiableCredentialResponse IssueVerifiableCredential(global::VcApi.V1.IssueVerifiableCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IssueVerifiableCredential, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the VC issuer to answer the challenge and receive the credential.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.IssueVerifiableCredentialResponse> IssueVerifiableCredentialAsync(global::VcApi.V1.IssueVerifiableCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IssueVerifiableCredentialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the VC issuer to answer the challenge and receive the credential.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.IssueVerifiableCredentialResponse> IssueVerifiableCredentialAsync(global::VcApi.V1.IssueVerifiableCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IssueVerifiableCredential, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.CreatePresentationChallengeResponse CreatePresentationChallenge(global::VcApi.V1.CreatePresentationChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePresentationChallenge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.CreatePresentationChallengeResponse CreatePresentationChallenge(global::VcApi.V1.CreatePresentationChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePresentationChallenge, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.CreatePresentationChallengeResponse> CreatePresentationChallengeAsync(global::VcApi.V1.CreatePresentationChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePresentationChallengeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.CreatePresentationChallengeResponse> CreatePresentationChallengeAsync(global::VcApi.V1.CreatePresentationChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePresentationChallenge, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the verifier to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.PresentVerifiableCredentialResponse PresentVerifiableCredential(global::VcApi.V1.PresentVerifiableCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PresentVerifiableCredential(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the verifier to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VcApi.V1.PresentVerifiableCredentialResponse PresentVerifiableCredential(global::VcApi.V1.PresentVerifiableCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PresentVerifiableCredential, null, options, request);
      }
      /// <summary>
      /// Called by the holder to the verifier to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.PresentVerifiableCredentialResponse> PresentVerifiableCredentialAsync(global::VcApi.V1.PresentVerifiableCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PresentVerifiableCredentialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the holder to the verifier to verify the presentation with the verifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VcApi.V1.PresentVerifiableCredentialResponse> PresentVerifiableCredentialAsync(global::VcApi.V1.PresentVerifiableCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PresentVerifiableCredential, null, options, request);
      }
      /// <summary>
      /// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::VcApi.V1.WaitForCompletionResponse> WaitForCompletion(global::VcApi.V1.WaitForCompletionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitForCompletion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::VcApi.V1.WaitForCompletionResponse> WaitForCompletion(global::VcApi.V1.WaitForCompletionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WaitForCompletion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CredentialAdapterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CredentialAdapterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CredentialAdapterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateIssuanceChallenge, serviceImpl.CreateIssuanceChallenge)
          .AddMethod(__Method_IssueVerifiableCredential, serviceImpl.IssueVerifiableCredential)
          .AddMethod(__Method_CreatePresentationChallenge, serviceImpl.CreatePresentationChallenge)
          .AddMethod(__Method_PresentVerifiableCredential, serviceImpl.PresentVerifiableCredential)
          .AddMethod(__Method_WaitForCompletion, serviceImpl.WaitForCompletion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CredentialAdapterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateIssuanceChallenge, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VcApi.V1.CreateIssuanceChallengeRequest, global::VcApi.V1.CreateIssuanceChallengeResponse>(serviceImpl.CreateIssuanceChallenge));
      serviceBinder.AddMethod(__Method_IssueVerifiableCredential, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VcApi.V1.IssueVerifiableCredentialRequest, global::VcApi.V1.IssueVerifiableCredentialResponse>(serviceImpl.IssueVerifiableCredential));
      serviceBinder.AddMethod(__Method_CreatePresentationChallenge, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VcApi.V1.CreatePresentationChallengeRequest, global::VcApi.V1.CreatePresentationChallengeResponse>(serviceImpl.CreatePresentationChallenge));
      serviceBinder.AddMethod(__Method_PresentVerifiableCredential, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VcApi.V1.PresentVerifiableCredentialRequest, global::VcApi.V1.PresentVerifiableCredentialResponse>(serviceImpl.PresentVerifiableCredential));
      serviceBinder.AddMethod(__Method_WaitForCompletion, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::VcApi.V1.WaitForCompletionRequest, global::VcApi.V1.WaitForCompletionResponse>(serviceImpl.WaitForCompletion));
    }

  }
}
#endregion
