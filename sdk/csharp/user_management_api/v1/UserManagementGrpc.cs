// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: user_management_api/v1/user_management.proto
// </auto-generated>
// Original file comments:
// protoc --go_out=plugins=grpc:. *.proto
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace UserApi.V1 {
  /// <summary>
  ///This service integrates with existing identity systems (Ex. Bank accounts) to bridge traditional account identifiers to DID/public key identifiers used in the Knox ecosytem. Leverages existing KYC/AML data to enable financial transaction compliance.  Supports OIDC, SAML and other traditional AuthN/Z standards. 
  /// </summary>
  public static partial class UserManagement
  {
    static readonly string __ServiceName = "user_api.v1.UserManagement";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnWithPasswordRequest> __Marshaller_user_api_v1_AuthnWithPasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnWithPasswordRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnWithPasswordResponse> __Marshaller_user_api_v1_AuthnWithPasswordResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnWithPasswordResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.RefreshAccessTokenRequest> __Marshaller_user_api_v1_RefreshAccessTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.RefreshAccessTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.RefreshAccessTokenResponse> __Marshaller_user_api_v1_RefreshAccessTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.RefreshAccessTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnWithProviderRequest> __Marshaller_user_api_v1_AuthnWithProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnWithProviderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnWithProviderResponse> __Marshaller_user_api_v1_AuthnWithProviderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnWithProviderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.HandleOIDCCallbackRequest> __Marshaller_user_api_v1_HandleOIDCCallbackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.HandleOIDCCallbackRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.HandleOIDCCallbackResponse> __Marshaller_user_api_v1_HandleOIDCCallbackResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.HandleOIDCCallbackResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.HandleSAMLCallbackRequest> __Marshaller_user_api_v1_HandleSAMLCallbackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.HandleSAMLCallbackRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.HandleSAMLCallbackResponse> __Marshaller_user_api_v1_HandleSAMLCallbackResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.HandleSAMLCallbackResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.SAMLSPMetadataRequest> __Marshaller_user_api_v1_SAMLSPMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.SAMLSPMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.SAMLSPMetadataResponse> __Marshaller_user_api_v1_SAMLSPMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.SAMLSPMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest> __Marshaller_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse> __Marshaller_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnBrowserWithWalletRequest> __Marshaller_user_api_v1_AuthnBrowserWithWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnBrowserWithWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnBrowserWithWalletResponse> __Marshaller_user_api_v1_AuthnBrowserWithWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnBrowserWithWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.CreateAuthnWalletChallengeRequest> __Marshaller_user_api_v1_CreateAuthnWalletChallengeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.CreateAuthnWalletChallengeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.CreateAuthnWalletChallengeResponse> __Marshaller_user_api_v1_CreateAuthnWalletChallengeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.CreateAuthnWalletChallengeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnWalletRequest> __Marshaller_user_api_v1_AuthnWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AuthnWalletResponse> __Marshaller_user_api_v1_AuthnWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AuthnWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.CreateRegisterWalletChallengeRequest> __Marshaller_user_api_v1_CreateRegisterWalletChallengeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.CreateRegisterWalletChallengeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.CreateRegisterWalletChallengeResponse> __Marshaller_user_api_v1_CreateRegisterWalletChallengeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.CreateRegisterWalletChallengeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.RegisterWalletRequest> __Marshaller_user_api_v1_RegisterWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.RegisterWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.RegisterWalletResponse> __Marshaller_user_api_v1_RegisterWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.RegisterWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AssociateWalletRequest> __Marshaller_user_api_v1_AssociateWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AssociateWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.AssociateWalletResponse> __Marshaller_user_api_v1_AssociateWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.AssociateWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.GetAppSettingsRequest> __Marshaller_user_api_v1_GetAppSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.GetAppSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.GetAppSettingsResponse> __Marshaller_user_api_v1_GetAppSettingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.GetAppSettingsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.RegisterUserRequest> __Marshaller_user_api_v1_RegisterUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.RegisterUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.RegisterUserResponse> __Marshaller_user_api_v1_RegisterUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.RegisterUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.ConfirmUserRequest> __Marshaller_user_api_v1_ConfirmUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.ConfirmUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.ConfirmUserResponse> __Marshaller_user_api_v1_ConfirmUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.ConfirmUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.FindByEmailRequest> __Marshaller_user_api_v1_FindByEmailRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.FindByEmailRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.FindByEmailResponse> __Marshaller_user_api_v1_FindByEmailResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.FindByEmailResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.FindByIDRequest> __Marshaller_user_api_v1_FindByIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.FindByIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.FindByIDResponse> __Marshaller_user_api_v1_FindByIDResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.FindByIDResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.GetMeRequest> __Marshaller_user_api_v1_GetMeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.GetMeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.GetMeResponse> __Marshaller_user_api_v1_GetMeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.GetMeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.GetUserByDIDRequest> __Marshaller_user_api_v1_GetUserByDIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.GetUserByDIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::UserApi.V1.GetUserByDIDResponse> __Marshaller_user_api_v1_GetUserByDIDResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::UserApi.V1.GetUserByDIDResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.AuthnWithPasswordRequest, global::UserApi.V1.AuthnWithPasswordResponse> __Method_AuthnWithPassword = new grpc::Method<global::UserApi.V1.AuthnWithPasswordRequest, global::UserApi.V1.AuthnWithPasswordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthnWithPassword",
        __Marshaller_user_api_v1_AuthnWithPasswordRequest,
        __Marshaller_user_api_v1_AuthnWithPasswordResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.RefreshAccessTokenRequest, global::UserApi.V1.RefreshAccessTokenResponse> __Method_RefreshAccessToken = new grpc::Method<global::UserApi.V1.RefreshAccessTokenRequest, global::UserApi.V1.RefreshAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RefreshAccessToken",
        __Marshaller_user_api_v1_RefreshAccessTokenRequest,
        __Marshaller_user_api_v1_RefreshAccessTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.AuthnWithProviderRequest, global::UserApi.V1.AuthnWithProviderResponse> __Method_AuthnWithProvider = new grpc::Method<global::UserApi.V1.AuthnWithProviderRequest, global::UserApi.V1.AuthnWithProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthnWithProvider",
        __Marshaller_user_api_v1_AuthnWithProviderRequest,
        __Marshaller_user_api_v1_AuthnWithProviderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.HandleOIDCCallbackRequest, global::UserApi.V1.HandleOIDCCallbackResponse> __Method_HandleOIDCCallback = new grpc::Method<global::UserApi.V1.HandleOIDCCallbackRequest, global::UserApi.V1.HandleOIDCCallbackResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleOIDCCallback",
        __Marshaller_user_api_v1_HandleOIDCCallbackRequest,
        __Marshaller_user_api_v1_HandleOIDCCallbackResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.HandleSAMLCallbackRequest, global::UserApi.V1.HandleSAMLCallbackResponse> __Method_HandleSAMLCallback = new grpc::Method<global::UserApi.V1.HandleSAMLCallbackRequest, global::UserApi.V1.HandleSAMLCallbackResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleSAMLCallback",
        __Marshaller_user_api_v1_HandleSAMLCallbackRequest,
        __Marshaller_user_api_v1_HandleSAMLCallbackResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.SAMLSPMetadataRequest, global::UserApi.V1.SAMLSPMetadataResponse> __Method_SAMLSPMetadata = new grpc::Method<global::UserApi.V1.SAMLSPMetadataRequest, global::UserApi.V1.SAMLSPMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SAMLSPMetadata",
        __Marshaller_user_api_v1_SAMLSPMetadataRequest,
        __Marshaller_user_api_v1_SAMLSPMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest, global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse> __Method_CreateAuthnBrowserWithWalletChallenge = new grpc::Method<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest, global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CreateAuthnBrowserWithWalletChallenge",
        __Marshaller_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest,
        __Marshaller_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.AuthnBrowserWithWalletRequest, global::UserApi.V1.AuthnBrowserWithWalletResponse> __Method_AuthnBrowserWithWallet = new grpc::Method<global::UserApi.V1.AuthnBrowserWithWalletRequest, global::UserApi.V1.AuthnBrowserWithWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthnBrowserWithWallet",
        __Marshaller_user_api_v1_AuthnBrowserWithWalletRequest,
        __Marshaller_user_api_v1_AuthnBrowserWithWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.CreateAuthnWalletChallengeRequest, global::UserApi.V1.CreateAuthnWalletChallengeResponse> __Method_CreateAuthnWalletChallenge = new grpc::Method<global::UserApi.V1.CreateAuthnWalletChallengeRequest, global::UserApi.V1.CreateAuthnWalletChallengeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAuthnWalletChallenge",
        __Marshaller_user_api_v1_CreateAuthnWalletChallengeRequest,
        __Marshaller_user_api_v1_CreateAuthnWalletChallengeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.AuthnWalletRequest, global::UserApi.V1.AuthnWalletResponse> __Method_AuthnWallet = new grpc::Method<global::UserApi.V1.AuthnWalletRequest, global::UserApi.V1.AuthnWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthnWallet",
        __Marshaller_user_api_v1_AuthnWalletRequest,
        __Marshaller_user_api_v1_AuthnWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.CreateRegisterWalletChallengeRequest, global::UserApi.V1.CreateRegisterWalletChallengeResponse> __Method_CreateRegisterWalletChallenge = new grpc::Method<global::UserApi.V1.CreateRegisterWalletChallengeRequest, global::UserApi.V1.CreateRegisterWalletChallengeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CreateRegisterWalletChallenge",
        __Marshaller_user_api_v1_CreateRegisterWalletChallengeRequest,
        __Marshaller_user_api_v1_CreateRegisterWalletChallengeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.RegisterWalletRequest, global::UserApi.V1.RegisterWalletResponse> __Method_RegisterWallet = new grpc::Method<global::UserApi.V1.RegisterWalletRequest, global::UserApi.V1.RegisterWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterWallet",
        __Marshaller_user_api_v1_RegisterWalletRequest,
        __Marshaller_user_api_v1_RegisterWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.AssociateWalletRequest, global::UserApi.V1.AssociateWalletResponse> __Method_AssociateWallet = new grpc::Method<global::UserApi.V1.AssociateWalletRequest, global::UserApi.V1.AssociateWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AssociateWallet",
        __Marshaller_user_api_v1_AssociateWalletRequest,
        __Marshaller_user_api_v1_AssociateWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.GetAppSettingsRequest, global::UserApi.V1.GetAppSettingsResponse> __Method_GetAppSettings = new grpc::Method<global::UserApi.V1.GetAppSettingsRequest, global::UserApi.V1.GetAppSettingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppSettings",
        __Marshaller_user_api_v1_GetAppSettingsRequest,
        __Marshaller_user_api_v1_GetAppSettingsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.RegisterUserRequest, global::UserApi.V1.RegisterUserResponse> __Method_RegisterUser = new grpc::Method<global::UserApi.V1.RegisterUserRequest, global::UserApi.V1.RegisterUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterUser",
        __Marshaller_user_api_v1_RegisterUserRequest,
        __Marshaller_user_api_v1_RegisterUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.ConfirmUserRequest, global::UserApi.V1.ConfirmUserResponse> __Method_ConfirmUser = new grpc::Method<global::UserApi.V1.ConfirmUserRequest, global::UserApi.V1.ConfirmUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfirmUser",
        __Marshaller_user_api_v1_ConfirmUserRequest,
        __Marshaller_user_api_v1_ConfirmUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.FindByEmailRequest, global::UserApi.V1.FindByEmailResponse> __Method_FindByEmail = new grpc::Method<global::UserApi.V1.FindByEmailRequest, global::UserApi.V1.FindByEmailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindByEmail",
        __Marshaller_user_api_v1_FindByEmailRequest,
        __Marshaller_user_api_v1_FindByEmailResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.FindByIDRequest, global::UserApi.V1.FindByIDResponse> __Method_FindByID = new grpc::Method<global::UserApi.V1.FindByIDRequest, global::UserApi.V1.FindByIDResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindByID",
        __Marshaller_user_api_v1_FindByIDRequest,
        __Marshaller_user_api_v1_FindByIDResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.GetMeRequest, global::UserApi.V1.GetMeResponse> __Method_GetMe = new grpc::Method<global::UserApi.V1.GetMeRequest, global::UserApi.V1.GetMeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMe",
        __Marshaller_user_api_v1_GetMeRequest,
        __Marshaller_user_api_v1_GetMeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::UserApi.V1.GetUserByDIDRequest, global::UserApi.V1.GetUserByDIDResponse> __Method_GetUserByDID = new grpc::Method<global::UserApi.V1.GetUserByDIDRequest, global::UserApi.V1.GetUserByDIDResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserByDID",
        __Marshaller_user_api_v1_GetUserByDIDRequest,
        __Marshaller_user_api_v1_GetUserByDIDResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::UserApi.V1.UserManagementReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserManagement</summary>
    [grpc::BindServiceMethod(typeof(UserManagement), "BindService")]
    public abstract partial class UserManagementBase
    {
      /// <summary>
      /// Login with username and password for admin and test users.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.AuthnWithPasswordResponse> AuthnWithPassword(global::UserApi.V1.AuthnWithPasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Login with refresh token and get a new access token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.RefreshAccessTokenResponse> RefreshAccessToken(global::UserApi.V1.RefreshAccessTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start login process against a selected identity provider. Supports OIDC and SAML.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.AuthnWithProviderResponse> AuthnWithProvider(global::UserApi.V1.AuthnWithProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Complete login process with the information provided by the OIDC identity provider in previous step.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.HandleOIDCCallbackResponse> HandleOIDCCallback(global::UserApi.V1.HandleOIDCCallbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Complete login process with the information provided by the SAML identity provider in previous step.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.HandleSAMLCallbackResponse> HandleSAMLCallback(global::UserApi.V1.HandleSAMLCallbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve SAML service provider metadata.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.SAMLSPMetadataResponse> SAMLSPMetadata(global::UserApi.V1.SAMLSPMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used for logging into the browser using a device wallet. Called from the browser, bearer token is received from the stream response once authentication is successful via the wallet. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task CreateAuthnBrowserWithWalletChallenge(global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest request, grpc::IServerStreamWriter<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.AuthnBrowserWithWalletResponse> AuthnBrowserWithWallet(global::UserApi.V1.AuthnBrowserWithWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start login process on the device wallet. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.CreateAuthnWalletChallengeResponse> CreateAuthnWalletChallenge(global::UserApi.V1.CreateAuthnWalletChallengeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Finish login with cryptographic challenge and bearer token is returned to the caller.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.AuthnWalletResponse> AuthnWallet(global::UserApi.V1.AuthnWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the browser in an authenticated session to start a device wallet registration process. Acknowledgement is received from the stream response once registration is successful via the wallet. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task CreateRegisterWalletChallenge(global::UserApi.V1.CreateRegisterWalletChallengeRequest request, grpc::IServerStreamWriter<global::UserApi.V1.CreateRegisterWalletChallengeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the device wallet to register against the given authenticated account. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.RegisterWalletResponse> RegisterWallet(global::UserApi.V1.RegisterWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Associate Wallet with the authenticated account in the bearer token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.AssociateWalletResponse> AssociateWallet(global::UserApi.V1.AssociateWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get application specific settings in a given environment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.GetAppSettingsResponse> GetAppSettings(global::UserApi.V1.GetAppSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Admin API to register a user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.RegisterUserResponse> RegisterUser(global::UserApi.V1.RegisterUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Admin API to finish the user registration process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.ConfirmUserResponse> ConfirmUser(global::UserApi.V1.ConfirmUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Admin API to retrieve User object via email.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.FindByEmailResponse> FindByEmail(global::UserApi.V1.FindByEmailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Admin API to retrieve User object via user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.FindByIDResponse> FindByID(global::UserApi.V1.FindByIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get current authenticated User by bearer token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.GetMeResponse> GetMe(global::UserApi.V1.GetMeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::UserApi.V1.GetUserByDIDResponse> GetUserByDID(global::UserApi.V1.GetUserByDIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserManagement</summary>
    public partial class UserManagementClient : grpc::ClientBase<UserManagementClient>
    {
      /// <summary>Creates a new client for UserManagement</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public UserManagementClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserManagement that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public UserManagementClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected UserManagementClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected UserManagementClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Login with username and password for admin and test users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnWithPasswordResponse AuthnWithPassword(global::UserApi.V1.AuthnWithPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnWithPassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with username and password for admin and test users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnWithPasswordResponse AuthnWithPassword(global::UserApi.V1.AuthnWithPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthnWithPassword, null, options, request);
      }
      /// <summary>
      /// Login with username and password for admin and test users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnWithPasswordResponse> AuthnWithPasswordAsync(global::UserApi.V1.AuthnWithPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnWithPasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with username and password for admin and test users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnWithPasswordResponse> AuthnWithPasswordAsync(global::UserApi.V1.AuthnWithPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthnWithPassword, null, options, request);
      }
      /// <summary>
      /// Login with refresh token and get a new access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.RefreshAccessTokenResponse RefreshAccessToken(global::UserApi.V1.RefreshAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with refresh token and get a new access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.RefreshAccessTokenResponse RefreshAccessToken(global::UserApi.V1.RefreshAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshAccessToken, null, options, request);
      }
      /// <summary>
      /// Login with refresh token and get a new access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.RefreshAccessTokenResponse> RefreshAccessTokenAsync(global::UserApi.V1.RefreshAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with refresh token and get a new access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.RefreshAccessTokenResponse> RefreshAccessTokenAsync(global::UserApi.V1.RefreshAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshAccessToken, null, options, request);
      }
      /// <summary>
      /// Start login process against a selected identity provider. Supports OIDC and SAML.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnWithProviderResponse AuthnWithProvider(global::UserApi.V1.AuthnWithProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnWithProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start login process against a selected identity provider. Supports OIDC and SAML.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnWithProviderResponse AuthnWithProvider(global::UserApi.V1.AuthnWithProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthnWithProvider, null, options, request);
      }
      /// <summary>
      /// Start login process against a selected identity provider. Supports OIDC and SAML.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnWithProviderResponse> AuthnWithProviderAsync(global::UserApi.V1.AuthnWithProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnWithProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start login process against a selected identity provider. Supports OIDC and SAML.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnWithProviderResponse> AuthnWithProviderAsync(global::UserApi.V1.AuthnWithProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthnWithProvider, null, options, request);
      }
      /// <summary>
      /// Complete login process with the information provided by the OIDC identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.HandleOIDCCallbackResponse HandleOIDCCallback(global::UserApi.V1.HandleOIDCCallbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleOIDCCallback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete login process with the information provided by the OIDC identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.HandleOIDCCallbackResponse HandleOIDCCallback(global::UserApi.V1.HandleOIDCCallbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleOIDCCallback, null, options, request);
      }
      /// <summary>
      /// Complete login process with the information provided by the OIDC identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.HandleOIDCCallbackResponse> HandleOIDCCallbackAsync(global::UserApi.V1.HandleOIDCCallbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleOIDCCallbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete login process with the information provided by the OIDC identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.HandleOIDCCallbackResponse> HandleOIDCCallbackAsync(global::UserApi.V1.HandleOIDCCallbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleOIDCCallback, null, options, request);
      }
      /// <summary>
      /// Complete login process with the information provided by the SAML identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.HandleSAMLCallbackResponse HandleSAMLCallback(global::UserApi.V1.HandleSAMLCallbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleSAMLCallback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete login process with the information provided by the SAML identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.HandleSAMLCallbackResponse HandleSAMLCallback(global::UserApi.V1.HandleSAMLCallbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleSAMLCallback, null, options, request);
      }
      /// <summary>
      /// Complete login process with the information provided by the SAML identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.HandleSAMLCallbackResponse> HandleSAMLCallbackAsync(global::UserApi.V1.HandleSAMLCallbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleSAMLCallbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete login process with the information provided by the SAML identity provider in previous step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.HandleSAMLCallbackResponse> HandleSAMLCallbackAsync(global::UserApi.V1.HandleSAMLCallbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleSAMLCallback, null, options, request);
      }
      /// <summary>
      /// Retrieve SAML service provider metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.SAMLSPMetadataResponse SAMLSPMetadata(global::UserApi.V1.SAMLSPMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SAMLSPMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve SAML service provider metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.SAMLSPMetadataResponse SAMLSPMetadata(global::UserApi.V1.SAMLSPMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SAMLSPMetadata, null, options, request);
      }
      /// <summary>
      /// Retrieve SAML service provider metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.SAMLSPMetadataResponse> SAMLSPMetadataAsync(global::UserApi.V1.SAMLSPMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SAMLSPMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve SAML service provider metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.SAMLSPMetadataResponse> SAMLSPMetadataAsync(global::UserApi.V1.SAMLSPMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SAMLSPMetadata, null, options, request);
      }
      /// <summary>
      /// Used for logging into the browser using a device wallet. Called from the browser, bearer token is received from the stream response once authentication is successful via the wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse> CreateAuthnBrowserWithWalletChallenge(global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthnBrowserWithWalletChallenge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used for logging into the browser using a device wallet. Called from the browser, bearer token is received from the stream response once authentication is successful via the wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse> CreateAuthnBrowserWithWalletChallenge(global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CreateAuthnBrowserWithWalletChallenge, null, options, request);
      }
      /// <summary>
      /// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnBrowserWithWalletResponse AuthnBrowserWithWallet(global::UserApi.V1.AuthnBrowserWithWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnBrowserWithWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnBrowserWithWalletResponse AuthnBrowserWithWallet(global::UserApi.V1.AuthnBrowserWithWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthnBrowserWithWallet, null, options, request);
      }
      /// <summary>
      /// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnBrowserWithWalletResponse> AuthnBrowserWithWalletAsync(global::UserApi.V1.AuthnBrowserWithWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnBrowserWithWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnBrowserWithWalletResponse> AuthnBrowserWithWalletAsync(global::UserApi.V1.AuthnBrowserWithWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthnBrowserWithWallet, null, options, request);
      }
      /// <summary>
      /// Start login process on the device wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.CreateAuthnWalletChallengeResponse CreateAuthnWalletChallenge(global::UserApi.V1.CreateAuthnWalletChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthnWalletChallenge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start login process on the device wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.CreateAuthnWalletChallengeResponse CreateAuthnWalletChallenge(global::UserApi.V1.CreateAuthnWalletChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAuthnWalletChallenge, null, options, request);
      }
      /// <summary>
      /// Start login process on the device wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.CreateAuthnWalletChallengeResponse> CreateAuthnWalletChallengeAsync(global::UserApi.V1.CreateAuthnWalletChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthnWalletChallengeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start login process on the device wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.CreateAuthnWalletChallengeResponse> CreateAuthnWalletChallengeAsync(global::UserApi.V1.CreateAuthnWalletChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAuthnWalletChallenge, null, options, request);
      }
      /// <summary>
      /// Finish login with cryptographic challenge and bearer token is returned to the caller.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnWalletResponse AuthnWallet(global::UserApi.V1.AuthnWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Finish login with cryptographic challenge and bearer token is returned to the caller.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AuthnWalletResponse AuthnWallet(global::UserApi.V1.AuthnWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthnWallet, null, options, request);
      }
      /// <summary>
      /// Finish login with cryptographic challenge and bearer token is returned to the caller.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnWalletResponse> AuthnWalletAsync(global::UserApi.V1.AuthnWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthnWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Finish login with cryptographic challenge and bearer token is returned to the caller.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AuthnWalletResponse> AuthnWalletAsync(global::UserApi.V1.AuthnWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthnWallet, null, options, request);
      }
      /// <summary>
      /// Called by the browser in an authenticated session to start a device wallet registration process. Acknowledgement is received from the stream response once registration is successful via the wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::UserApi.V1.CreateRegisterWalletChallengeResponse> CreateRegisterWalletChallenge(global::UserApi.V1.CreateRegisterWalletChallengeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRegisterWalletChallenge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the browser in an authenticated session to start a device wallet registration process. Acknowledgement is received from the stream response once registration is successful via the wallet. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::UserApi.V1.CreateRegisterWalletChallengeResponse> CreateRegisterWalletChallenge(global::UserApi.V1.CreateRegisterWalletChallengeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CreateRegisterWalletChallenge, null, options, request);
      }
      /// <summary>
      /// Called by the device wallet to register against the given authenticated account. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.RegisterWalletResponse RegisterWallet(global::UserApi.V1.RegisterWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the device wallet to register against the given authenticated account. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.RegisterWalletResponse RegisterWallet(global::UserApi.V1.RegisterWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterWallet, null, options, request);
      }
      /// <summary>
      /// Called by the device wallet to register against the given authenticated account. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.RegisterWalletResponse> RegisterWalletAsync(global::UserApi.V1.RegisterWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the device wallet to register against the given authenticated account. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.RegisterWalletResponse> RegisterWalletAsync(global::UserApi.V1.RegisterWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterWallet, null, options, request);
      }
      /// <summary>
      /// Associate Wallet with the authenticated account in the bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AssociateWalletResponse AssociateWallet(global::UserApi.V1.AssociateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssociateWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Associate Wallet with the authenticated account in the bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.AssociateWalletResponse AssociateWallet(global::UserApi.V1.AssociateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AssociateWallet, null, options, request);
      }
      /// <summary>
      /// Associate Wallet with the authenticated account in the bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AssociateWalletResponse> AssociateWalletAsync(global::UserApi.V1.AssociateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssociateWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Associate Wallet with the authenticated account in the bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.AssociateWalletResponse> AssociateWalletAsync(global::UserApi.V1.AssociateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AssociateWallet, null, options, request);
      }
      /// <summary>
      /// Get application specific settings in a given environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.GetAppSettingsResponse GetAppSettings(global::UserApi.V1.GetAppSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get application specific settings in a given environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.GetAppSettingsResponse GetAppSettings(global::UserApi.V1.GetAppSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppSettings, null, options, request);
      }
      /// <summary>
      /// Get application specific settings in a given environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.GetAppSettingsResponse> GetAppSettingsAsync(global::UserApi.V1.GetAppSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get application specific settings in a given environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.GetAppSettingsResponse> GetAppSettingsAsync(global::UserApi.V1.GetAppSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppSettings, null, options, request);
      }
      /// <summary>
      /// Admin API to register a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.RegisterUserResponse RegisterUser(global::UserApi.V1.RegisterUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to register a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.RegisterUserResponse RegisterUser(global::UserApi.V1.RegisterUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterUser, null, options, request);
      }
      /// <summary>
      /// Admin API to register a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.RegisterUserResponse> RegisterUserAsync(global::UserApi.V1.RegisterUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to register a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.RegisterUserResponse> RegisterUserAsync(global::UserApi.V1.RegisterUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterUser, null, options, request);
      }
      /// <summary>
      /// Admin API to finish the user registration process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.ConfirmUserResponse ConfirmUser(global::UserApi.V1.ConfirmUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfirmUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to finish the user registration process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.ConfirmUserResponse ConfirmUser(global::UserApi.V1.ConfirmUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfirmUser, null, options, request);
      }
      /// <summary>
      /// Admin API to finish the user registration process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.ConfirmUserResponse> ConfirmUserAsync(global::UserApi.V1.ConfirmUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfirmUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to finish the user registration process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.ConfirmUserResponse> ConfirmUserAsync(global::UserApi.V1.ConfirmUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfirmUser, null, options, request);
      }
      /// <summary>
      /// Admin API to retrieve User object via email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.FindByEmailResponse FindByEmail(global::UserApi.V1.FindByEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindByEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to retrieve User object via email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.FindByEmailResponse FindByEmail(global::UserApi.V1.FindByEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindByEmail, null, options, request);
      }
      /// <summary>
      /// Admin API to retrieve User object via email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.FindByEmailResponse> FindByEmailAsync(global::UserApi.V1.FindByEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindByEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to retrieve User object via email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.FindByEmailResponse> FindByEmailAsync(global::UserApi.V1.FindByEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindByEmail, null, options, request);
      }
      /// <summary>
      /// Admin API to retrieve User object via user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.FindByIDResponse FindByID(global::UserApi.V1.FindByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to retrieve User object via user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.FindByIDResponse FindByID(global::UserApi.V1.FindByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindByID, null, options, request);
      }
      /// <summary>
      /// Admin API to retrieve User object via user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.FindByIDResponse> FindByIDAsync(global::UserApi.V1.FindByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin API to retrieve User object via user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.FindByIDResponse> FindByIDAsync(global::UserApi.V1.FindByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindByID, null, options, request);
      }
      /// <summary>
      /// Get current authenticated User by bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.GetMeResponse GetMe(global::UserApi.V1.GetMeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current authenticated User by bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.GetMeResponse GetMe(global::UserApi.V1.GetMeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMe, null, options, request);
      }
      /// <summary>
      /// Get current authenticated User by bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.GetMeResponse> GetMeAsync(global::UserApi.V1.GetMeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current authenticated User by bearer token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.GetMeResponse> GetMeAsync(global::UserApi.V1.GetMeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMe, null, options, request);
      }
      /// <summary>
      /// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.GetUserByDIDResponse GetUserByDID(global::UserApi.V1.GetUserByDIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserByDID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::UserApi.V1.GetUserByDIDResponse GetUserByDID(global::UserApi.V1.GetUserByDIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserByDID, null, options, request);
      }
      /// <summary>
      /// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.GetUserByDIDResponse> GetUserByDIDAsync(global::UserApi.V1.GetUserByDIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserByDIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::UserApi.V1.GetUserByDIDResponse> GetUserByDIDAsync(global::UserApi.V1.GetUserByDIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserByDID, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override UserManagementClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserManagementClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(UserManagementBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AuthnWithPassword, serviceImpl.AuthnWithPassword)
          .AddMethod(__Method_RefreshAccessToken, serviceImpl.RefreshAccessToken)
          .AddMethod(__Method_AuthnWithProvider, serviceImpl.AuthnWithProvider)
          .AddMethod(__Method_HandleOIDCCallback, serviceImpl.HandleOIDCCallback)
          .AddMethod(__Method_HandleSAMLCallback, serviceImpl.HandleSAMLCallback)
          .AddMethod(__Method_SAMLSPMetadata, serviceImpl.SAMLSPMetadata)
          .AddMethod(__Method_CreateAuthnBrowserWithWalletChallenge, serviceImpl.CreateAuthnBrowserWithWalletChallenge)
          .AddMethod(__Method_AuthnBrowserWithWallet, serviceImpl.AuthnBrowserWithWallet)
          .AddMethod(__Method_CreateAuthnWalletChallenge, serviceImpl.CreateAuthnWalletChallenge)
          .AddMethod(__Method_AuthnWallet, serviceImpl.AuthnWallet)
          .AddMethod(__Method_CreateRegisterWalletChallenge, serviceImpl.CreateRegisterWalletChallenge)
          .AddMethod(__Method_RegisterWallet, serviceImpl.RegisterWallet)
          .AddMethod(__Method_AssociateWallet, serviceImpl.AssociateWallet)
          .AddMethod(__Method_GetAppSettings, serviceImpl.GetAppSettings)
          .AddMethod(__Method_RegisterUser, serviceImpl.RegisterUser)
          .AddMethod(__Method_ConfirmUser, serviceImpl.ConfirmUser)
          .AddMethod(__Method_FindByEmail, serviceImpl.FindByEmail)
          .AddMethod(__Method_FindByID, serviceImpl.FindByID)
          .AddMethod(__Method_GetMe, serviceImpl.GetMe)
          .AddMethod(__Method_GetUserByDID, serviceImpl.GetUserByDID).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserManagementBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AuthnWithPassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.AuthnWithPasswordRequest, global::UserApi.V1.AuthnWithPasswordResponse>(serviceImpl.AuthnWithPassword));
      serviceBinder.AddMethod(__Method_RefreshAccessToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.RefreshAccessTokenRequest, global::UserApi.V1.RefreshAccessTokenResponse>(serviceImpl.RefreshAccessToken));
      serviceBinder.AddMethod(__Method_AuthnWithProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.AuthnWithProviderRequest, global::UserApi.V1.AuthnWithProviderResponse>(serviceImpl.AuthnWithProvider));
      serviceBinder.AddMethod(__Method_HandleOIDCCallback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.HandleOIDCCallbackRequest, global::UserApi.V1.HandleOIDCCallbackResponse>(serviceImpl.HandleOIDCCallback));
      serviceBinder.AddMethod(__Method_HandleSAMLCallback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.HandleSAMLCallbackRequest, global::UserApi.V1.HandleSAMLCallbackResponse>(serviceImpl.HandleSAMLCallback));
      serviceBinder.AddMethod(__Method_SAMLSPMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.SAMLSPMetadataRequest, global::UserApi.V1.SAMLSPMetadataResponse>(serviceImpl.SAMLSPMetadata));
      serviceBinder.AddMethod(__Method_CreateAuthnBrowserWithWalletChallenge, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeRequest, global::UserApi.V1.CreateAuthnBrowserWithWalletChallengeResponse>(serviceImpl.CreateAuthnBrowserWithWalletChallenge));
      serviceBinder.AddMethod(__Method_AuthnBrowserWithWallet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.AuthnBrowserWithWalletRequest, global::UserApi.V1.AuthnBrowserWithWalletResponse>(serviceImpl.AuthnBrowserWithWallet));
      serviceBinder.AddMethod(__Method_CreateAuthnWalletChallenge, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.CreateAuthnWalletChallengeRequest, global::UserApi.V1.CreateAuthnWalletChallengeResponse>(serviceImpl.CreateAuthnWalletChallenge));
      serviceBinder.AddMethod(__Method_AuthnWallet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.AuthnWalletRequest, global::UserApi.V1.AuthnWalletResponse>(serviceImpl.AuthnWallet));
      serviceBinder.AddMethod(__Method_CreateRegisterWalletChallenge, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::UserApi.V1.CreateRegisterWalletChallengeRequest, global::UserApi.V1.CreateRegisterWalletChallengeResponse>(serviceImpl.CreateRegisterWalletChallenge));
      serviceBinder.AddMethod(__Method_RegisterWallet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.RegisterWalletRequest, global::UserApi.V1.RegisterWalletResponse>(serviceImpl.RegisterWallet));
      serviceBinder.AddMethod(__Method_AssociateWallet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.AssociateWalletRequest, global::UserApi.V1.AssociateWalletResponse>(serviceImpl.AssociateWallet));
      serviceBinder.AddMethod(__Method_GetAppSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.GetAppSettingsRequest, global::UserApi.V1.GetAppSettingsResponse>(serviceImpl.GetAppSettings));
      serviceBinder.AddMethod(__Method_RegisterUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.RegisterUserRequest, global::UserApi.V1.RegisterUserResponse>(serviceImpl.RegisterUser));
      serviceBinder.AddMethod(__Method_ConfirmUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.ConfirmUserRequest, global::UserApi.V1.ConfirmUserResponse>(serviceImpl.ConfirmUser));
      serviceBinder.AddMethod(__Method_FindByEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.FindByEmailRequest, global::UserApi.V1.FindByEmailResponse>(serviceImpl.FindByEmail));
      serviceBinder.AddMethod(__Method_FindByID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.FindByIDRequest, global::UserApi.V1.FindByIDResponse>(serviceImpl.FindByID));
      serviceBinder.AddMethod(__Method_GetMe, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.GetMeRequest, global::UserApi.V1.GetMeResponse>(serviceImpl.GetMe));
      serviceBinder.AddMethod(__Method_GetUserByDID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserApi.V1.GetUserByDIDRequest, global::UserApi.V1.GetUserByDIDResponse>(serviceImpl.GetUserByDID));
    }

  }
}
#endregion
