// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorityClient is the client API for Authority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityClient interface {
	// Sets the issuance limit for an Issuer to a specified value and returns the new limit.
	SetIssuerLimit(ctx context.Context, in *SetIssuerLimitRequest, opts ...grpc.CallOption) (*SetIssuerLimitResponse, error)
	// Gets the the issuance limits for all the currencies for which the Issuer is allowed to issue digital banknotes.
	GetIssuerLimits(ctx context.Context, in *GetIssuerLimitsRequest, opts ...grpc.CallOption) (*GetIssuerLimitsResponse, error)
	// Accepts digital banknotes in a stream, authorizes them and returns authorized digital banknotes in a stream.
	Authorize(ctx context.Context, opts ...grpc.CallOption) (Authority_AuthorizeClient, error)
	// Redeems a digital banknote in exchange for an increase in issuance limit for the same currency as the redeemed digital banknote.
	Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error)
}

type authorityClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityClient(cc grpc.ClientConnInterface) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) SetIssuerLimit(ctx context.Context, in *SetIssuerLimitRequest, opts ...grpc.CallOption) (*SetIssuerLimitResponse, error) {
	out := new(SetIssuerLimitResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.Authority/SetIssuerLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) GetIssuerLimits(ctx context.Context, in *GetIssuerLimitsRequest, opts ...grpc.CallOption) (*GetIssuerLimitsResponse, error) {
	out := new(GetIssuerLimitsResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.Authority/GetIssuerLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) Authorize(ctx context.Context, opts ...grpc.CallOption) (Authority_AuthorizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Authority_ServiceDesc.Streams[0], "/authority_api.v1.Authority/Authorize", opts...)
	if err != nil {
		return nil, err
	}
	x := &authorityAuthorizeClient{stream}
	return x, nil
}

type Authority_AuthorizeClient interface {
	Send(*AuthorizeRequest) error
	Recv() (*AuthorizeResponse, error)
	grpc.ClientStream
}

type authorityAuthorizeClient struct {
	grpc.ClientStream
}

func (x *authorityAuthorizeClient) Send(m *AuthorizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authorityAuthorizeClient) Recv() (*AuthorizeResponse, error) {
	m := new(AuthorizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authorityClient) Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error) {
	out := new(RedeemResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.Authority/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServer is the server API for Authority service.
// All implementations must embed UnimplementedAuthorityServer
// for forward compatibility
type AuthorityServer interface {
	// Sets the issuance limit for an Issuer to a specified value and returns the new limit.
	SetIssuerLimit(context.Context, *SetIssuerLimitRequest) (*SetIssuerLimitResponse, error)
	// Gets the the issuance limits for all the currencies for which the Issuer is allowed to issue digital banknotes.
	GetIssuerLimits(context.Context, *GetIssuerLimitsRequest) (*GetIssuerLimitsResponse, error)
	// Accepts digital banknotes in a stream, authorizes them and returns authorized digital banknotes in a stream.
	Authorize(Authority_AuthorizeServer) error
	// Redeems a digital banknote in exchange for an increase in issuance limit for the same currency as the redeemed digital banknote.
	Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error)
	mustEmbedUnimplementedAuthorityServer()
}

// UnimplementedAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServer struct {
}

func (UnimplementedAuthorityServer) SetIssuerLimit(context.Context, *SetIssuerLimitRequest) (*SetIssuerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIssuerLimit not implemented")
}
func (UnimplementedAuthorityServer) GetIssuerLimits(context.Context, *GetIssuerLimitsRequest) (*GetIssuerLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuerLimits not implemented")
}
func (UnimplementedAuthorityServer) Authorize(Authority_AuthorizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorityServer) Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedAuthorityServer) mustEmbedUnimplementedAuthorityServer() {}

// UnsafeAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServer will
// result in compilation errors.
type UnsafeAuthorityServer interface {
	mustEmbedUnimplementedAuthorityServer()
}

func RegisterAuthorityServer(s grpc.ServiceRegistrar, srv AuthorityServer) {
	s.RegisterService(&Authority_ServiceDesc, srv)
}

func _Authority_SetIssuerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIssuerLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).SetIssuerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.Authority/SetIssuerLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).SetIssuerLimit(ctx, req.(*SetIssuerLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_GetIssuerLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).GetIssuerLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.Authority/GetIssuerLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).GetIssuerLimits(ctx, req.(*GetIssuerLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_Authorize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthorityServer).Authorize(&authorityAuthorizeServer{stream})
}

type Authority_AuthorizeServer interface {
	Send(*AuthorizeResponse) error
	Recv() (*AuthorizeRequest, error)
	grpc.ServerStream
}

type authorityAuthorizeServer struct {
	grpc.ServerStream
}

func (x *authorityAuthorizeServer) Send(m *AuthorizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authorityAuthorizeServer) Recv() (*AuthorizeRequest, error) {
	m := new(AuthorizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Authority_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.Authority/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).Redeem(ctx, req.(*RedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authority_ServiceDesc is the grpc.ServiceDesc for Authority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authority_api.v1.Authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIssuerLimit",
			Handler:    _Authority_SetIssuerLimit_Handler,
		},
		{
			MethodName: "GetIssuerLimits",
			Handler:    _Authority_GetIssuerLimits_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _Authority_Redeem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Authorize",
			Handler:       _Authority_Authorize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "authority_api/v1/authority.proto",
}
