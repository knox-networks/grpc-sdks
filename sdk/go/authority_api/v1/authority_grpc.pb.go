// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorityServiceClient is the client API for AuthorityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityServiceClient interface {
	// Sets the issuance limit for an Issuer to a specified value and returns the new limit.
	SetIssuerLimit(ctx context.Context, in *SetIssuerLimitRequest, opts ...grpc.CallOption) (*SetIssuerLimitResponse, error)
	// Gets the the issuance limits for all the currencies for which the Issuer is allowed to issue digital banknotes.
	GetIssuerLimits(ctx context.Context, in *GetIssuerLimitsRequest, opts ...grpc.CallOption) (*GetIssuerLimitsResponse, error)
	// Accepts digital banknotes in a stream, authorizes them and returns authorized digital banknotes in a stream.
	Authorize(ctx context.Context, opts ...grpc.CallOption) (AuthorityService_AuthorizeClient, error)
	// Redeems a digital banknote in exchange for an increase in issuance limit for the same currency as the redeemed
	// digital banknote.
	Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error)
	// Gets the verifier of the Emissary for this Authority.
	GetNetworkInfo(ctx context.Context, in *GetNetworkInfoRequest, opts ...grpc.CallOption) (*GetNetworkInfoResponse, error)
	// Gets the signature of the Notary for this Authority/Notary.
	GetNotary(ctx context.Context, in *GetNotaryRequest, opts ...grpc.CallOption) (*GetNotaryResponse, error)
	// List the Governed Assets for this Authority.
	ListGovernedAssets(ctx context.Context, in *ListGovernedAssetsRequest, opts ...grpc.CallOption) (*ListGovernedAssetsResponse, error)
	// Set the Governed Assets for this Authority.
	SetGovernedAssets(ctx context.Context, in *SetGovernedAssetsRequest, opts ...grpc.CallOption) (*SetGovernedAssetsResponse, error)
}

type authorityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityServiceClient(cc grpc.ClientConnInterface) AuthorityServiceClient {
	return &authorityServiceClient{cc}
}

func (c *authorityServiceClient) SetIssuerLimit(ctx context.Context, in *SetIssuerLimitRequest, opts ...grpc.CallOption) (*SetIssuerLimitResponse, error) {
	out := new(SetIssuerLimitResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/SetIssuerLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetIssuerLimits(ctx context.Context, in *GetIssuerLimitsRequest, opts ...grpc.CallOption) (*GetIssuerLimitsResponse, error) {
	out := new(GetIssuerLimitsResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/GetIssuerLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) Authorize(ctx context.Context, opts ...grpc.CallOption) (AuthorityService_AuthorizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthorityService_ServiceDesc.Streams[0], "/authority_api.v1.AuthorityService/Authorize", opts...)
	if err != nil {
		return nil, err
	}
	x := &authorityServiceAuthorizeClient{stream}
	return x, nil
}

type AuthorityService_AuthorizeClient interface {
	Send(*AuthorizeRequest) error
	Recv() (*AuthorizeResponse, error)
	grpc.ClientStream
}

type authorityServiceAuthorizeClient struct {
	grpc.ClientStream
}

func (x *authorityServiceAuthorizeClient) Send(m *AuthorizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authorityServiceAuthorizeClient) Recv() (*AuthorizeResponse, error) {
	m := new(AuthorizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authorityServiceClient) Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error) {
	out := new(RedeemResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetNetworkInfo(ctx context.Context, in *GetNetworkInfoRequest, opts ...grpc.CallOption) (*GetNetworkInfoResponse, error) {
	out := new(GetNetworkInfoResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/GetNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetNotary(ctx context.Context, in *GetNotaryRequest, opts ...grpc.CallOption) (*GetNotaryResponse, error) {
	out := new(GetNotaryResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/GetNotary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) ListGovernedAssets(ctx context.Context, in *ListGovernedAssetsRequest, opts ...grpc.CallOption) (*ListGovernedAssetsResponse, error) {
	out := new(ListGovernedAssetsResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/ListGovernedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) SetGovernedAssets(ctx context.Context, in *SetGovernedAssetsRequest, opts ...grpc.CallOption) (*SetGovernedAssetsResponse, error) {
	out := new(SetGovernedAssetsResponse)
	err := c.cc.Invoke(ctx, "/authority_api.v1.AuthorityService/SetGovernedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServiceServer is the server API for AuthorityService service.
// All implementations must embed UnimplementedAuthorityServiceServer
// for forward compatibility
type AuthorityServiceServer interface {
	// Sets the issuance limit for an Issuer to a specified value and returns the new limit.
	SetIssuerLimit(context.Context, *SetIssuerLimitRequest) (*SetIssuerLimitResponse, error)
	// Gets the the issuance limits for all the currencies for which the Issuer is allowed to issue digital banknotes.
	GetIssuerLimits(context.Context, *GetIssuerLimitsRequest) (*GetIssuerLimitsResponse, error)
	// Accepts digital banknotes in a stream, authorizes them and returns authorized digital banknotes in a stream.
	Authorize(AuthorityService_AuthorizeServer) error
	// Redeems a digital banknote in exchange for an increase in issuance limit for the same currency as the redeemed
	// digital banknote.
	Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error)
	// Gets the verifier of the Emissary for this Authority.
	GetNetworkInfo(context.Context, *GetNetworkInfoRequest) (*GetNetworkInfoResponse, error)
	// Gets the signature of the Notary for this Authority/Notary.
	GetNotary(context.Context, *GetNotaryRequest) (*GetNotaryResponse, error)
	// List the Governed Assets for this Authority.
	ListGovernedAssets(context.Context, *ListGovernedAssetsRequest) (*ListGovernedAssetsResponse, error)
	// Set the Governed Assets for this Authority.
	SetGovernedAssets(context.Context, *SetGovernedAssetsRequest) (*SetGovernedAssetsResponse, error)
	mustEmbedUnimplementedAuthorityServiceServer()
}

// UnimplementedAuthorityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServiceServer struct {
}

func (UnimplementedAuthorityServiceServer) SetIssuerLimit(context.Context, *SetIssuerLimitRequest) (*SetIssuerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIssuerLimit not implemented")
}
func (UnimplementedAuthorityServiceServer) GetIssuerLimits(context.Context, *GetIssuerLimitsRequest) (*GetIssuerLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuerLimits not implemented")
}
func (UnimplementedAuthorityServiceServer) Authorize(AuthorityService_AuthorizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorityServiceServer) Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedAuthorityServiceServer) GetNetworkInfo(context.Context, *GetNetworkInfoRequest) (*GetNetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInfo not implemented")
}
func (UnimplementedAuthorityServiceServer) GetNotary(context.Context, *GetNotaryRequest) (*GetNotaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotary not implemented")
}
func (UnimplementedAuthorityServiceServer) ListGovernedAssets(context.Context, *ListGovernedAssetsRequest) (*ListGovernedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGovernedAssets not implemented")
}
func (UnimplementedAuthorityServiceServer) SetGovernedAssets(context.Context, *SetGovernedAssetsRequest) (*SetGovernedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGovernedAssets not implemented")
}
func (UnimplementedAuthorityServiceServer) mustEmbedUnimplementedAuthorityServiceServer() {}

// UnsafeAuthorityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServiceServer will
// result in compilation errors.
type UnsafeAuthorityServiceServer interface {
	mustEmbedUnimplementedAuthorityServiceServer()
}

func RegisterAuthorityServiceServer(s grpc.ServiceRegistrar, srv AuthorityServiceServer) {
	s.RegisterService(&AuthorityService_ServiceDesc, srv)
}

func _AuthorityService_SetIssuerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIssuerLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).SetIssuerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/SetIssuerLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).SetIssuerLimit(ctx, req.(*SetIssuerLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetIssuerLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetIssuerLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/GetIssuerLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetIssuerLimits(ctx, req.(*GetIssuerLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_Authorize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthorityServiceServer).Authorize(&authorityServiceAuthorizeServer{stream})
}

type AuthorityService_AuthorizeServer interface {
	Send(*AuthorizeResponse) error
	Recv() (*AuthorizeRequest, error)
	grpc.ServerStream
}

type authorityServiceAuthorizeServer struct {
	grpc.ServerStream
}

func (x *authorityServiceAuthorizeServer) Send(m *AuthorizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authorityServiceAuthorizeServer) Recv() (*AuthorizeRequest, error) {
	m := new(AuthorizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthorityService_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).Redeem(ctx, req.(*RedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/GetNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetNetworkInfo(ctx, req.(*GetNetworkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetNotary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetNotary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/GetNotary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetNotary(ctx, req.(*GetNotaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_ListGovernedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGovernedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).ListGovernedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/ListGovernedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).ListGovernedAssets(ctx, req.(*ListGovernedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_SetGovernedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGovernedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).SetGovernedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority_api.v1.AuthorityService/SetGovernedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).SetGovernedAssets(ctx, req.(*SetGovernedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorityService_ServiceDesc is the grpc.ServiceDesc for AuthorityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authority_api.v1.AuthorityService",
	HandlerType: (*AuthorityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIssuerLimit",
			Handler:    _AuthorityService_SetIssuerLimit_Handler,
		},
		{
			MethodName: "GetIssuerLimits",
			Handler:    _AuthorityService_GetIssuerLimits_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _AuthorityService_Redeem_Handler,
		},
		{
			MethodName: "GetNetworkInfo",
			Handler:    _AuthorityService_GetNetworkInfo_Handler,
		},
		{
			MethodName: "GetNotary",
			Handler:    _AuthorityService_GetNotary_Handler,
		},
		{
			MethodName: "ListGovernedAssets",
			Handler:    _AuthorityService_ListGovernedAssets_Handler,
		},
		{
			MethodName: "SetGovernedAssets",
			Handler:    _AuthorityService_SetGovernedAssets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Authorize",
			Handler:       _AuthorityService_Authorize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "authority_api/v1/authority.proto",
}
