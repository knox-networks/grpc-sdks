// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessServiceClient is the client API for BusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessServiceClient interface {
	// List.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Clear Request.
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	// Send Payload.
	SendPayload(ctx context.Context, in *SendPayloadRequest, opts ...grpc.CallOption) (*SendPayloadResponse, error)
	// Send New Transaction.
	SendNewTransaction(ctx context.Context, in *SendNewTransactionRequest, opts ...grpc.CallOption) (*SendNewTransactionResponse, error)
	// Send Proposal Acked.
	SendProposalAcked(ctx context.Context, in *SendProposalAckedRequest, opts ...grpc.CallOption) (*SendProposalAckedResponse, error)
	// Send Proposal Nacked.
	SendProposalNacked(ctx context.Context, in *SendProposalNackedRequest, opts ...grpc.CallOption) (*SendProposalNackedResponse, error)
	// Send Secret Revealed.
	SendSecretRevealed(ctx context.Context, in *SendSecretRevealedRequest, opts ...grpc.CallOption) (*SendSecretRevealedResponse, error)
}

type businessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessServiceClient(cc grpc.ClientConnInterface) BusinessServiceClient {
	return &businessServiceClient{cc}
}

func (c *businessServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) SendPayload(ctx context.Context, in *SendPayloadRequest, opts ...grpc.CallOption) (*SendPayloadResponse, error) {
	out := new(SendPayloadResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/SendPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) SendNewTransaction(ctx context.Context, in *SendNewTransactionRequest, opts ...grpc.CallOption) (*SendNewTransactionResponse, error) {
	out := new(SendNewTransactionResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/SendNewTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) SendProposalAcked(ctx context.Context, in *SendProposalAckedRequest, opts ...grpc.CallOption) (*SendProposalAckedResponse, error) {
	out := new(SendProposalAckedResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/SendProposalAcked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) SendProposalNacked(ctx context.Context, in *SendProposalNackedRequest, opts ...grpc.CallOption) (*SendProposalNackedResponse, error) {
	out := new(SendProposalNackedResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/SendProposalNacked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) SendSecretRevealed(ctx context.Context, in *SendSecretRevealedRequest, opts ...grpc.CallOption) (*SendSecretRevealedResponse, error) {
	out := new(SendSecretRevealedResponse)
	err := c.cc.Invoke(ctx, "/business_api.v1.BusinessService/SendSecretRevealed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServiceServer is the server API for BusinessService service.
// All implementations must embed UnimplementedBusinessServiceServer
// for forward compatibility
type BusinessServiceServer interface {
	// List.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Clear Request.
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	// Send Payload.
	SendPayload(context.Context, *SendPayloadRequest) (*SendPayloadResponse, error)
	// Send New Transaction.
	SendNewTransaction(context.Context, *SendNewTransactionRequest) (*SendNewTransactionResponse, error)
	// Send Proposal Acked.
	SendProposalAcked(context.Context, *SendProposalAckedRequest) (*SendProposalAckedResponse, error)
	// Send Proposal Nacked.
	SendProposalNacked(context.Context, *SendProposalNackedRequest) (*SendProposalNackedResponse, error)
	// Send Secret Revealed.
	SendSecretRevealed(context.Context, *SendSecretRevealedRequest) (*SendSecretRevealedResponse, error)
	mustEmbedUnimplementedBusinessServiceServer()
}

// UnimplementedBusinessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServiceServer struct {
}

func (UnimplementedBusinessServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBusinessServiceServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedBusinessServiceServer) SendPayload(context.Context, *SendPayloadRequest) (*SendPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayload not implemented")
}
func (UnimplementedBusinessServiceServer) SendNewTransaction(context.Context, *SendNewTransactionRequest) (*SendNewTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewTransaction not implemented")
}
func (UnimplementedBusinessServiceServer) SendProposalAcked(context.Context, *SendProposalAckedRequest) (*SendProposalAckedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposalAcked not implemented")
}
func (UnimplementedBusinessServiceServer) SendProposalNacked(context.Context, *SendProposalNackedRequest) (*SendProposalNackedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposalNacked not implemented")
}
func (UnimplementedBusinessServiceServer) SendSecretRevealed(context.Context, *SendSecretRevealedRequest) (*SendSecretRevealedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSecretRevealed not implemented")
}
func (UnimplementedBusinessServiceServer) mustEmbedUnimplementedBusinessServiceServer() {}

// UnsafeBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServiceServer will
// result in compilation errors.
type UnsafeBusinessServiceServer interface {
	mustEmbedUnimplementedBusinessServiceServer()
}

func RegisterBusinessServiceServer(s grpc.ServiceRegistrar, srv BusinessServiceServer) {
	s.RegisterService(&BusinessService_ServiceDesc, srv)
}

func _BusinessService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_SendPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).SendPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/SendPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).SendPayload(ctx, req.(*SendPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_SendNewTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNewTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).SendNewTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/SendNewTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).SendNewTransaction(ctx, req.(*SendNewTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_SendProposalAcked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProposalAckedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).SendProposalAcked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/SendProposalAcked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).SendProposalAcked(ctx, req.(*SendProposalAckedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_SendProposalNacked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProposalNackedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).SendProposalNacked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/SendProposalNacked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).SendProposalNacked(ctx, req.(*SendProposalNackedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_SendSecretRevealed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSecretRevealedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).SendSecretRevealed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_api.v1.BusinessService/SendSecretRevealed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).SendSecretRevealed(ctx, req.(*SendSecretRevealedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessService_ServiceDesc is the grpc.ServiceDesc for BusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business_api.v1.BusinessService",
	HandlerType: (*BusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BusinessService_List_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _BusinessService_Clear_Handler,
		},
		{
			MethodName: "SendPayload",
			Handler:    _BusinessService_SendPayload_Handler,
		},
		{
			MethodName: "SendNewTransaction",
			Handler:    _BusinessService_SendNewTransaction_Handler,
		},
		{
			MethodName: "SendProposalAcked",
			Handler:    _BusinessService_SendProposalAcked_Handler,
		},
		{
			MethodName: "SendProposalNacked",
			Handler:    _BusinessService_SendProposalNacked_Handler,
		},
		{
			MethodName: "SendSecretRevealed",
			Handler:    _BusinessService_SendSecretRevealed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business_api/v1/business.proto",
}
