// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmissaryClient is the client API for Emissary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmissaryClient interface {
}

type emissaryClient struct {
	cc grpc.ClientConnInterface
}

func NewEmissaryClient(cc grpc.ClientConnInterface) EmissaryClient {
	return &emissaryClient{cc}
}

// EmissaryServer is the server API for Emissary service.
// All implementations must embed UnimplementedEmissaryServer
// for forward compatibility
type EmissaryServer interface {
	mustEmbedUnimplementedEmissaryServer()
}

// UnimplementedEmissaryServer must be embedded to have forward compatible implementations.
type UnimplementedEmissaryServer struct {
}

func (UnimplementedEmissaryServer) mustEmbedUnimplementedEmissaryServer() {}

// UnsafeEmissaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmissaryServer will
// result in compilation errors.
type UnsafeEmissaryServer interface {
	mustEmbedUnimplementedEmissaryServer()
}

func RegisterEmissaryServer(s grpc.ServiceRegistrar, srv EmissaryServer) {
	s.RegisterService(&Emissary_ServiceDesc, srv)
}

// Emissary_ServiceDesc is the grpc.ServiceDesc for Emissary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emissary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emissary.Emissary",
	HandlerType: (*EmissaryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "emissary_api/v1/emissary.proto",
}
