// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/knox-networks/grpc-sdks/sdk/go/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonetaeOverloadOrchestratorClient is the client API for MonetaeOverloadOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonetaeOverloadOrchestratorClient interface {
	// Broadcasts overload agent connections to all agents
	BroadcastAgent(ctx context.Context, in *v1.DynamicVerifier, opts ...grpc.CallOption) (MonetaeOverloadOrchestrator_BroadcastAgentClient, error)
	// Execute the Overload Agent.
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// Shutdown all Overload Agents.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Commands Overload Agents to run test setup.
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error)
}

type monetaeOverloadOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewMonetaeOverloadOrchestratorClient(cc grpc.ClientConnInterface) MonetaeOverloadOrchestratorClient {
	return &monetaeOverloadOrchestratorClient{cc}
}

func (c *monetaeOverloadOrchestratorClient) BroadcastAgent(ctx context.Context, in *v1.DynamicVerifier, opts ...grpc.CallOption) (MonetaeOverloadOrchestrator_BroadcastAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonetaeOverloadOrchestrator_ServiceDesc.Streams[0], "/orchestrator.MonetaeOverloadOrchestrator/BroadcastAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &monetaeOverloadOrchestratorBroadcastAgentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonetaeOverloadOrchestrator_BroadcastAgentClient interface {
	Recv() (*AgentConnection, error)
	grpc.ClientStream
}

type monetaeOverloadOrchestratorBroadcastAgentClient struct {
	grpc.ClientStream
}

func (x *monetaeOverloadOrchestratorBroadcastAgentClient) Recv() (*AgentConnection, error) {
	m := new(AgentConnection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monetaeOverloadOrchestratorClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/orchestrator.MonetaeOverloadOrchestrator/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monetaeOverloadOrchestratorClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/orchestrator.MonetaeOverloadOrchestrator/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monetaeOverloadOrchestratorClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	out := new(SetupResponse)
	err := c.cc.Invoke(ctx, "/orchestrator.MonetaeOverloadOrchestrator/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonetaeOverloadOrchestratorServer is the server API for MonetaeOverloadOrchestrator service.
// All implementations must embed UnimplementedMonetaeOverloadOrchestratorServer
// for forward compatibility
type MonetaeOverloadOrchestratorServer interface {
	// Broadcasts overload agent connections to all agents
	BroadcastAgent(*v1.DynamicVerifier, MonetaeOverloadOrchestrator_BroadcastAgentServer) error
	// Execute the Overload Agent.
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// Shutdown all Overload Agents.
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Commands Overload Agents to run test setup.
	Setup(context.Context, *SetupRequest) (*SetupResponse, error)
	mustEmbedUnimplementedMonetaeOverloadOrchestratorServer()
}

// UnimplementedMonetaeOverloadOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedMonetaeOverloadOrchestratorServer struct {
}

func (UnimplementedMonetaeOverloadOrchestratorServer) BroadcastAgent(*v1.DynamicVerifier, MonetaeOverloadOrchestrator_BroadcastAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastAgent not implemented")
}
func (UnimplementedMonetaeOverloadOrchestratorServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedMonetaeOverloadOrchestratorServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedMonetaeOverloadOrchestratorServer) Setup(context.Context, *SetupRequest) (*SetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedMonetaeOverloadOrchestratorServer) mustEmbedUnimplementedMonetaeOverloadOrchestratorServer() {
}

// UnsafeMonetaeOverloadOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonetaeOverloadOrchestratorServer will
// result in compilation errors.
type UnsafeMonetaeOverloadOrchestratorServer interface {
	mustEmbedUnimplementedMonetaeOverloadOrchestratorServer()
}

func RegisterMonetaeOverloadOrchestratorServer(s grpc.ServiceRegistrar, srv MonetaeOverloadOrchestratorServer) {
	s.RegisterService(&MonetaeOverloadOrchestrator_ServiceDesc, srv)
}

func _MonetaeOverloadOrchestrator_BroadcastAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.DynamicVerifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonetaeOverloadOrchestratorServer).BroadcastAgent(m, &monetaeOverloadOrchestratorBroadcastAgentServer{stream})
}

type MonetaeOverloadOrchestrator_BroadcastAgentServer interface {
	Send(*AgentConnection) error
	grpc.ServerStream
}

type monetaeOverloadOrchestratorBroadcastAgentServer struct {
	grpc.ServerStream
}

func (x *monetaeOverloadOrchestratorBroadcastAgentServer) Send(m *AgentConnection) error {
	return x.ServerStream.SendMsg(m)
}

func _MonetaeOverloadOrchestrator_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetaeOverloadOrchestratorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestrator.MonetaeOverloadOrchestrator/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetaeOverloadOrchestratorServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonetaeOverloadOrchestrator_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetaeOverloadOrchestratorServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestrator.MonetaeOverloadOrchestrator/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetaeOverloadOrchestratorServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonetaeOverloadOrchestrator_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetaeOverloadOrchestratorServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestrator.MonetaeOverloadOrchestrator/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetaeOverloadOrchestratorServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonetaeOverloadOrchestrator_ServiceDesc is the grpc.ServiceDesc for MonetaeOverloadOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonetaeOverloadOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.MonetaeOverloadOrchestrator",
	HandlerType: (*MonetaeOverloadOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _MonetaeOverloadOrchestrator_Execute_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _MonetaeOverloadOrchestrator_Shutdown_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _MonetaeOverloadOrchestrator_Setup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BroadcastAgent",
			Handler:       _MonetaeOverloadOrchestrator_BroadcastAgent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orchestrator/v1/orchestrator.proto",
}
