// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/knox-networks/grpc-sdks/sdk/go/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OverloadOrchestratorClient is the client API for OverloadOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OverloadOrchestratorClient interface {
	// Broadcasts overload agent connections to all agents
	BroadcastAgent(ctx context.Context, in *v1.DynamicVerifier, opts ...grpc.CallOption) (OverloadOrchestrator_BroadcastAgentClient, error)
}

type overloadOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOverloadOrchestratorClient(cc grpc.ClientConnInterface) OverloadOrchestratorClient {
	return &overloadOrchestratorClient{cc}
}

func (c *overloadOrchestratorClient) BroadcastAgent(ctx context.Context, in *v1.DynamicVerifier, opts ...grpc.CallOption) (OverloadOrchestrator_BroadcastAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &OverloadOrchestrator_ServiceDesc.Streams[0], "/orchestrator.OverloadOrchestrator/BroadcastAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &overloadOrchestratorBroadcastAgentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OverloadOrchestrator_BroadcastAgentClient interface {
	Recv() (*AgentConnection, error)
	grpc.ClientStream
}

type overloadOrchestratorBroadcastAgentClient struct {
	grpc.ClientStream
}

func (x *overloadOrchestratorBroadcastAgentClient) Recv() (*AgentConnection, error) {
	m := new(AgentConnection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OverloadOrchestratorServer is the server API for OverloadOrchestrator service.
// All implementations must embed UnimplementedOverloadOrchestratorServer
// for forward compatibility
type OverloadOrchestratorServer interface {
	// Broadcasts overload agent connections to all agents
	BroadcastAgent(*v1.DynamicVerifier, OverloadOrchestrator_BroadcastAgentServer) error
	mustEmbedUnimplementedOverloadOrchestratorServer()
}

// UnimplementedOverloadOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedOverloadOrchestratorServer struct {
}

func (UnimplementedOverloadOrchestratorServer) BroadcastAgent(*v1.DynamicVerifier, OverloadOrchestrator_BroadcastAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastAgent not implemented")
}
func (UnimplementedOverloadOrchestratorServer) mustEmbedUnimplementedOverloadOrchestratorServer() {}

// UnsafeOverloadOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OverloadOrchestratorServer will
// result in compilation errors.
type UnsafeOverloadOrchestratorServer interface {
	mustEmbedUnimplementedOverloadOrchestratorServer()
}

func RegisterOverloadOrchestratorServer(s grpc.ServiceRegistrar, srv OverloadOrchestratorServer) {
	s.RegisterService(&OverloadOrchestrator_ServiceDesc, srv)
}

func _OverloadOrchestrator_BroadcastAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.DynamicVerifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OverloadOrchestratorServer).BroadcastAgent(m, &overloadOrchestratorBroadcastAgentServer{stream})
}

type OverloadOrchestrator_BroadcastAgentServer interface {
	Send(*AgentConnection) error
	grpc.ServerStream
}

type overloadOrchestratorBroadcastAgentServer struct {
	grpc.ServerStream
}

func (x *overloadOrchestratorBroadcastAgentServer) Send(m *AgentConnection) error {
	return x.ServerStream.SendMsg(m)
}

// OverloadOrchestrator_ServiceDesc is the grpc.ServiceDesc for OverloadOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OverloadOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.OverloadOrchestrator",
	HandlerType: (*OverloadOrchestratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BroadcastAgent",
			Handler:       _OverloadOrchestrator_BroadcastAgent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orchestrator/v1/orchestrator.proto",
}
