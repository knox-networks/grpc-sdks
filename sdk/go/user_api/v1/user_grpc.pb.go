// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagementClient is the client API for UserManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementClient interface {
	// Login with username and password for admin and test users.
	AuthnWithPassword(ctx context.Context, in *AuthnWithPasswordRequest, opts ...grpc.CallOption) (*AuthnWithPasswordResponse, error)
	// Login with refresh token and get a new access token.
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponse, error)
	// Start login process against a selected identity provider. Supports OIDC and SAML.
	AuthnWithProvider(ctx context.Context, in *AuthnWithProviderRequest, opts ...grpc.CallOption) (*AuthnWithProviderResponse, error)
	// Complete login process with the information provided by the OIDC identity provider in previous step.
	HandleOIDCCallback(ctx context.Context, in *HandleOIDCCallbackRequest, opts ...grpc.CallOption) (*HandleOIDCCallbackResponse, error)
	// Complete login process with the information provided by the SAML identity provider in previous step.
	HandleSAMLCallback(ctx context.Context, in *HandleSAMLCallbackRequest, opts ...grpc.CallOption) (*HandleSAMLCallbackResponse, error)
	// Retrieve SAML service provider metadata.
	SAMLSPMetadata(ctx context.Context, in *SAMLSPMetadataRequest, opts ...grpc.CallOption) (*SAMLSPMetadataResponse, error)
	// Used for logging into the browser using a device wallet. Called from the browser, bearer token is received from the stream response once authentication is successful via the wallet.
	CreateAuthnBrowserWithWalletChallenge(ctx context.Context, in *CreateAuthnBrowserWithWalletChallengeRequest, opts ...grpc.CallOption) (UserManagement_CreateAuthnBrowserWithWalletChallengeClient, error)
	// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
	AuthnBrowserWithWallet(ctx context.Context, in *AuthnBrowserWithWalletRequest, opts ...grpc.CallOption) (*AuthnBrowserWithWalletResponse, error)
	// Start login process on the device wallet.
	CreateAuthnWalletChallenge(ctx context.Context, in *CreateAuthnWalletChallengeRequest, opts ...grpc.CallOption) (*CreateAuthnWalletChallengeResponse, error)
	// Finish login with cryptographic challenge and bearer token is returned to the caller.
	AuthnWallet(ctx context.Context, in *AuthnWalletRequest, opts ...grpc.CallOption) (*AuthnWalletResponse, error)
	// Called by the browser in an authenticated session to start a device wallet registration process. Acknowledgement is received from the stream response once registration is successful via the wallet.
	CreateRegisterWalletChallenge(ctx context.Context, in *CreateRegisterWalletChallengeRequest, opts ...grpc.CallOption) (UserManagement_CreateRegisterWalletChallengeClient, error)
	// Called by the device wallet to register against the given authenticated account.
	RegisterWallet(ctx context.Context, in *RegisterWalletRequest, opts ...grpc.CallOption) (*RegisterWalletResponse, error)
	// Associate Wallet with the authenticated account in the bearer token.
	AssociateWallet(ctx context.Context, in *AssociateWalletRequest, opts ...grpc.CallOption) (*AssociateWalletResponse, error)
	// Get application specific settings in a given environment.
	GetAppSettings(ctx context.Context, in *GetAppSettingsRequest, opts ...grpc.CallOption) (*GetAppSettingsResponse, error)
	// Admin API to register a user.
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// Admin API to finish the user registration process.
	ConfirmUser(ctx context.Context, in *ConfirmUserRequest, opts ...grpc.CallOption) (*ConfirmUserResponse, error)
	// Admin API to retrieve User object via email.
	FindByEmail(ctx context.Context, in *FindByEmailRequest, opts ...grpc.CallOption) (*FindByEmailResponse, error)
	// Admin API to retrieve User object via user ID.
	FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*FindByIDResponse, error)
	// Get current authenticated User by bearer token.
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
	GetUserByDID(ctx context.Context, in *GetUserByDIDRequest, opts ...grpc.CallOption) (*GetUserByDIDResponse, error)
}

type userManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementClient(cc grpc.ClientConnInterface) UserManagementClient {
	return &userManagementClient{cc}
}

func (c *userManagementClient) AuthnWithPassword(ctx context.Context, in *AuthnWithPasswordRequest, opts ...grpc.CallOption) (*AuthnWithPasswordResponse, error) {
	out := new(AuthnWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/AuthnWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponse, error) {
	out := new(RefreshAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/RefreshAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AuthnWithProvider(ctx context.Context, in *AuthnWithProviderRequest, opts ...grpc.CallOption) (*AuthnWithProviderResponse, error) {
	out := new(AuthnWithProviderResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/AuthnWithProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) HandleOIDCCallback(ctx context.Context, in *HandleOIDCCallbackRequest, opts ...grpc.CallOption) (*HandleOIDCCallbackResponse, error) {
	out := new(HandleOIDCCallbackResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/HandleOIDCCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) HandleSAMLCallback(ctx context.Context, in *HandleSAMLCallbackRequest, opts ...grpc.CallOption) (*HandleSAMLCallbackResponse, error) {
	out := new(HandleSAMLCallbackResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/HandleSAMLCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) SAMLSPMetadata(ctx context.Context, in *SAMLSPMetadataRequest, opts ...grpc.CallOption) (*SAMLSPMetadataResponse, error) {
	out := new(SAMLSPMetadataResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/SAMLSPMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) CreateAuthnBrowserWithWalletChallenge(ctx context.Context, in *CreateAuthnBrowserWithWalletChallengeRequest, opts ...grpc.CallOption) (UserManagement_CreateAuthnBrowserWithWalletChallengeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserManagement_ServiceDesc.Streams[0], "/user_api.v1.UserManagement/CreateAuthnBrowserWithWalletChallenge", opts...)
	if err != nil {
		return nil, err
	}
	x := &userManagementCreateAuthnBrowserWithWalletChallengeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserManagement_CreateAuthnBrowserWithWalletChallengeClient interface {
	Recv() (*CreateAuthnBrowserWithWalletChallengeResponse, error)
	grpc.ClientStream
}

type userManagementCreateAuthnBrowserWithWalletChallengeClient struct {
	grpc.ClientStream
}

func (x *userManagementCreateAuthnBrowserWithWalletChallengeClient) Recv() (*CreateAuthnBrowserWithWalletChallengeResponse, error) {
	m := new(CreateAuthnBrowserWithWalletChallengeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userManagementClient) AuthnBrowserWithWallet(ctx context.Context, in *AuthnBrowserWithWalletRequest, opts ...grpc.CallOption) (*AuthnBrowserWithWalletResponse, error) {
	out := new(AuthnBrowserWithWalletResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/AuthnBrowserWithWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) CreateAuthnWalletChallenge(ctx context.Context, in *CreateAuthnWalletChallengeRequest, opts ...grpc.CallOption) (*CreateAuthnWalletChallengeResponse, error) {
	out := new(CreateAuthnWalletChallengeResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/CreateAuthnWalletChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AuthnWallet(ctx context.Context, in *AuthnWalletRequest, opts ...grpc.CallOption) (*AuthnWalletResponse, error) {
	out := new(AuthnWalletResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/AuthnWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) CreateRegisterWalletChallenge(ctx context.Context, in *CreateRegisterWalletChallengeRequest, opts ...grpc.CallOption) (UserManagement_CreateRegisterWalletChallengeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserManagement_ServiceDesc.Streams[1], "/user_api.v1.UserManagement/CreateRegisterWalletChallenge", opts...)
	if err != nil {
		return nil, err
	}
	x := &userManagementCreateRegisterWalletChallengeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserManagement_CreateRegisterWalletChallengeClient interface {
	Recv() (*CreateRegisterWalletChallengeResponse, error)
	grpc.ClientStream
}

type userManagementCreateRegisterWalletChallengeClient struct {
	grpc.ClientStream
}

func (x *userManagementCreateRegisterWalletChallengeClient) Recv() (*CreateRegisterWalletChallengeResponse, error) {
	m := new(CreateRegisterWalletChallengeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userManagementClient) RegisterWallet(ctx context.Context, in *RegisterWalletRequest, opts ...grpc.CallOption) (*RegisterWalletResponse, error) {
	out := new(RegisterWalletResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/RegisterWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AssociateWallet(ctx context.Context, in *AssociateWalletRequest, opts ...grpc.CallOption) (*AssociateWalletResponse, error) {
	out := new(AssociateWalletResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/AssociateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetAppSettings(ctx context.Context, in *GetAppSettingsRequest, opts ...grpc.CallOption) (*GetAppSettingsResponse, error) {
	out := new(GetAppSettingsResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/GetAppSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ConfirmUser(ctx context.Context, in *ConfirmUserRequest, opts ...grpc.CallOption) (*ConfirmUserResponse, error) {
	out := new(ConfirmUserResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/ConfirmUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) FindByEmail(ctx context.Context, in *FindByEmailRequest, opts ...grpc.CallOption) (*FindByEmailResponse, error) {
	out := new(FindByEmailResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/FindByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*FindByIDResponse, error) {
	out := new(FindByIDResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserByDID(ctx context.Context, in *GetUserByDIDRequest, opts ...grpc.CallOption) (*GetUserByDIDResponse, error) {
	out := new(GetUserByDIDResponse)
	err := c.cc.Invoke(ctx, "/user_api.v1.UserManagement/GetUserByDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementServer is the server API for UserManagement service.
// All implementations must embed UnimplementedUserManagementServer
// for forward compatibility
type UserManagementServer interface {
	// Login with username and password for admin and test users.
	AuthnWithPassword(context.Context, *AuthnWithPasswordRequest) (*AuthnWithPasswordResponse, error)
	// Login with refresh token and get a new access token.
	RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*RefreshAccessTokenResponse, error)
	// Start login process against a selected identity provider. Supports OIDC and SAML.
	AuthnWithProvider(context.Context, *AuthnWithProviderRequest) (*AuthnWithProviderResponse, error)
	// Complete login process with the information provided by the OIDC identity provider in previous step.
	HandleOIDCCallback(context.Context, *HandleOIDCCallbackRequest) (*HandleOIDCCallbackResponse, error)
	// Complete login process with the information provided by the SAML identity provider in previous step.
	HandleSAMLCallback(context.Context, *HandleSAMLCallbackRequest) (*HandleSAMLCallbackResponse, error)
	// Retrieve SAML service provider metadata.
	SAMLSPMetadata(context.Context, *SAMLSPMetadataRequest) (*SAMLSPMetadataResponse, error)
	// Used for logging into the browser using a device wallet. Called from the browser, bearer token is received from the stream response once authentication is successful via the wallet.
	CreateAuthnBrowserWithWalletChallenge(*CreateAuthnBrowserWithWalletChallengeRequest, UserManagement_CreateAuthnBrowserWithWalletChallengeServer) error
	// Called from the device wallet to authenticate the browser and bearer token is sent to the browser session.
	AuthnBrowserWithWallet(context.Context, *AuthnBrowserWithWalletRequest) (*AuthnBrowserWithWalletResponse, error)
	// Start login process on the device wallet.
	CreateAuthnWalletChallenge(context.Context, *CreateAuthnWalletChallengeRequest) (*CreateAuthnWalletChallengeResponse, error)
	// Finish login with cryptographic challenge and bearer token is returned to the caller.
	AuthnWallet(context.Context, *AuthnWalletRequest) (*AuthnWalletResponse, error)
	// Called by the browser in an authenticated session to start a device wallet registration process. Acknowledgement is received from the stream response once registration is successful via the wallet.
	CreateRegisterWalletChallenge(*CreateRegisterWalletChallengeRequest, UserManagement_CreateRegisterWalletChallengeServer) error
	// Called by the device wallet to register against the given authenticated account.
	RegisterWallet(context.Context, *RegisterWalletRequest) (*RegisterWalletResponse, error)
	// Associate Wallet with the authenticated account in the bearer token.
	AssociateWallet(context.Context, *AssociateWalletRequest) (*AssociateWalletResponse, error)
	// Get application specific settings in a given environment.
	GetAppSettings(context.Context, *GetAppSettingsRequest) (*GetAppSettingsResponse, error)
	// Admin API to register a user.
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// Admin API to finish the user registration process.
	ConfirmUser(context.Context, *ConfirmUserRequest) (*ConfirmUserResponse, error)
	// Admin API to retrieve User object via email.
	FindByEmail(context.Context, *FindByEmailRequest) (*FindByEmailResponse, error)
	// Admin API to retrieve User object via user ID.
	FindByID(context.Context, *FindByIDRequest) (*FindByIDResponse, error)
	// Get current authenticated User by bearer token.
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	// M2M helper API to retrieve User object given a Decentralized Identifier (DID). API Key required for this call.
	GetUserByDID(context.Context, *GetUserByDIDRequest) (*GetUserByDIDResponse, error)
	mustEmbedUnimplementedUserManagementServer()
}

// UnimplementedUserManagementServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementServer struct {
}

func (UnimplementedUserManagementServer) AuthnWithPassword(context.Context, *AuthnWithPasswordRequest) (*AuthnWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthnWithPassword not implemented")
}
func (UnimplementedUserManagementServer) RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*RefreshAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccessToken not implemented")
}
func (UnimplementedUserManagementServer) AuthnWithProvider(context.Context, *AuthnWithProviderRequest) (*AuthnWithProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthnWithProvider not implemented")
}
func (UnimplementedUserManagementServer) HandleOIDCCallback(context.Context, *HandleOIDCCallbackRequest) (*HandleOIDCCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOIDCCallback not implemented")
}
func (UnimplementedUserManagementServer) HandleSAMLCallback(context.Context, *HandleSAMLCallbackRequest) (*HandleSAMLCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSAMLCallback not implemented")
}
func (UnimplementedUserManagementServer) SAMLSPMetadata(context.Context, *SAMLSPMetadataRequest) (*SAMLSPMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SAMLSPMetadata not implemented")
}
func (UnimplementedUserManagementServer) CreateAuthnBrowserWithWalletChallenge(*CreateAuthnBrowserWithWalletChallengeRequest, UserManagement_CreateAuthnBrowserWithWalletChallengeServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateAuthnBrowserWithWalletChallenge not implemented")
}
func (UnimplementedUserManagementServer) AuthnBrowserWithWallet(context.Context, *AuthnBrowserWithWalletRequest) (*AuthnBrowserWithWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthnBrowserWithWallet not implemented")
}
func (UnimplementedUserManagementServer) CreateAuthnWalletChallenge(context.Context, *CreateAuthnWalletChallengeRequest) (*CreateAuthnWalletChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthnWalletChallenge not implemented")
}
func (UnimplementedUserManagementServer) AuthnWallet(context.Context, *AuthnWalletRequest) (*AuthnWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthnWallet not implemented")
}
func (UnimplementedUserManagementServer) CreateRegisterWalletChallenge(*CreateRegisterWalletChallengeRequest, UserManagement_CreateRegisterWalletChallengeServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateRegisterWalletChallenge not implemented")
}
func (UnimplementedUserManagementServer) RegisterWallet(context.Context, *RegisterWalletRequest) (*RegisterWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWallet not implemented")
}
func (UnimplementedUserManagementServer) AssociateWallet(context.Context, *AssociateWalletRequest) (*AssociateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateWallet not implemented")
}
func (UnimplementedUserManagementServer) GetAppSettings(context.Context, *GetAppSettingsRequest) (*GetAppSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSettings not implemented")
}
func (UnimplementedUserManagementServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserManagementServer) ConfirmUser(context.Context, *ConfirmUserRequest) (*ConfirmUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUser not implemented")
}
func (UnimplementedUserManagementServer) FindByEmail(context.Context, *FindByEmailRequest) (*FindByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEmail not implemented")
}
func (UnimplementedUserManagementServer) FindByID(context.Context, *FindByIDRequest) (*FindByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedUserManagementServer) GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedUserManagementServer) GetUserByDID(context.Context, *GetUserByDIDRequest) (*GetUserByDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByDID not implemented")
}
func (UnimplementedUserManagementServer) mustEmbedUnimplementedUserManagementServer() {}

// UnsafeUserManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServer will
// result in compilation errors.
type UnsafeUserManagementServer interface {
	mustEmbedUnimplementedUserManagementServer()
}

func RegisterUserManagementServer(s grpc.ServiceRegistrar, srv UserManagementServer) {
	s.RegisterService(&UserManagement_ServiceDesc, srv)
}

func _UserManagement_AuthnWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthnWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AuthnWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/AuthnWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AuthnWithPassword(ctx, req.(*AuthnWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_RefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/RefreshAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RefreshAccessToken(ctx, req.(*RefreshAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AuthnWithProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthnWithProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AuthnWithProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/AuthnWithProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AuthnWithProvider(ctx, req.(*AuthnWithProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_HandleOIDCCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOIDCCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).HandleOIDCCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/HandleOIDCCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).HandleOIDCCallback(ctx, req.(*HandleOIDCCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_HandleSAMLCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleSAMLCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).HandleSAMLCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/HandleSAMLCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).HandleSAMLCallback(ctx, req.(*HandleSAMLCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_SAMLSPMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAMLSPMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).SAMLSPMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/SAMLSPMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).SAMLSPMetadata(ctx, req.(*SAMLSPMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_CreateAuthnBrowserWithWalletChallenge_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateAuthnBrowserWithWalletChallengeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserManagementServer).CreateAuthnBrowserWithWalletChallenge(m, &userManagementCreateAuthnBrowserWithWalletChallengeServer{stream})
}

type UserManagement_CreateAuthnBrowserWithWalletChallengeServer interface {
	Send(*CreateAuthnBrowserWithWalletChallengeResponse) error
	grpc.ServerStream
}

type userManagementCreateAuthnBrowserWithWalletChallengeServer struct {
	grpc.ServerStream
}

func (x *userManagementCreateAuthnBrowserWithWalletChallengeServer) Send(m *CreateAuthnBrowserWithWalletChallengeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserManagement_AuthnBrowserWithWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthnBrowserWithWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AuthnBrowserWithWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/AuthnBrowserWithWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AuthnBrowserWithWallet(ctx, req.(*AuthnBrowserWithWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_CreateAuthnWalletChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthnWalletChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).CreateAuthnWalletChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/CreateAuthnWalletChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).CreateAuthnWalletChallenge(ctx, req.(*CreateAuthnWalletChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AuthnWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthnWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AuthnWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/AuthnWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AuthnWallet(ctx, req.(*AuthnWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_CreateRegisterWalletChallenge_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateRegisterWalletChallengeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserManagementServer).CreateRegisterWalletChallenge(m, &userManagementCreateRegisterWalletChallengeServer{stream})
}

type UserManagement_CreateRegisterWalletChallengeServer interface {
	Send(*CreateRegisterWalletChallengeResponse) error
	grpc.ServerStream
}

type userManagementCreateRegisterWalletChallengeServer struct {
	grpc.ServerStream
}

func (x *userManagementCreateRegisterWalletChallengeServer) Send(m *CreateRegisterWalletChallengeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserManagement_RegisterWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RegisterWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/RegisterWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RegisterWallet(ctx, req.(*RegisterWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AssociateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AssociateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/AssociateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AssociateWallet(ctx, req.(*AssociateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetAppSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetAppSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/GetAppSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetAppSettings(ctx, req.(*GetAppSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ConfirmUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ConfirmUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/ConfirmUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ConfirmUser(ctx, req.(*ConfirmUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_FindByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).FindByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/FindByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).FindByEmail(ctx, req.(*FindByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).FindByID(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserByDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserByDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_api.v1.UserManagement/GetUserByDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserByDID(ctx, req.(*GetUserByDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagement_ServiceDesc is the grpc.ServiceDesc for UserManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_api.v1.UserManagement",
	HandlerType: (*UserManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthnWithPassword",
			Handler:    _UserManagement_AuthnWithPassword_Handler,
		},
		{
			MethodName: "RefreshAccessToken",
			Handler:    _UserManagement_RefreshAccessToken_Handler,
		},
		{
			MethodName: "AuthnWithProvider",
			Handler:    _UserManagement_AuthnWithProvider_Handler,
		},
		{
			MethodName: "HandleOIDCCallback",
			Handler:    _UserManagement_HandleOIDCCallback_Handler,
		},
		{
			MethodName: "HandleSAMLCallback",
			Handler:    _UserManagement_HandleSAMLCallback_Handler,
		},
		{
			MethodName: "SAMLSPMetadata",
			Handler:    _UserManagement_SAMLSPMetadata_Handler,
		},
		{
			MethodName: "AuthnBrowserWithWallet",
			Handler:    _UserManagement_AuthnBrowserWithWallet_Handler,
		},
		{
			MethodName: "CreateAuthnWalletChallenge",
			Handler:    _UserManagement_CreateAuthnWalletChallenge_Handler,
		},
		{
			MethodName: "AuthnWallet",
			Handler:    _UserManagement_AuthnWallet_Handler,
		},
		{
			MethodName: "RegisterWallet",
			Handler:    _UserManagement_RegisterWallet_Handler,
		},
		{
			MethodName: "AssociateWallet",
			Handler:    _UserManagement_AssociateWallet_Handler,
		},
		{
			MethodName: "GetAppSettings",
			Handler:    _UserManagement_GetAppSettings_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _UserManagement_RegisterUser_Handler,
		},
		{
			MethodName: "ConfirmUser",
			Handler:    _UserManagement_ConfirmUser_Handler,
		},
		{
			MethodName: "FindByEmail",
			Handler:    _UserManagement_FindByEmail_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _UserManagement_FindByID_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _UserManagement_GetMe_Handler,
		},
		{
			MethodName: "GetUserByDID",
			Handler:    _UserManagement_GetUserByDID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateAuthnBrowserWithWalletChallenge",
			Handler:       _UserManagement_CreateAuthnBrowserWithWalletChallenge_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateRegisterWalletChallenge",
			Handler:       _UserManagement_CreateRegisterWalletChallenge_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user_api/v1/user.proto",
}
