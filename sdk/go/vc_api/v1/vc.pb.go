// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: vc_api/v1/vc.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialType int32

const (
	CredentialType_CREDENTIAL_TYPE_UNSPECIFIED             CredentialType = 0
	CredentialType_CREDENTIAL_TYPE_PERMANENT_RESIDENT_CARD CredentialType = 1
	CredentialType_CREDENTIAL_TYPE_BANK_CARD               CredentialType = 2
	CredentialType_CREDENTIAL_TYPE_BANK_ACCOUNT            CredentialType = 3
)

// Enum value maps for CredentialType.
var (
	CredentialType_name = map[int32]string{
		0: "CREDENTIAL_TYPE_UNSPECIFIED",
		1: "CREDENTIAL_TYPE_PERMANENT_RESIDENT_CARD",
		2: "CREDENTIAL_TYPE_BANK_CARD",
		3: "CREDENTIAL_TYPE_BANK_ACCOUNT",
	}
	CredentialType_value = map[string]int32{
		"CREDENTIAL_TYPE_UNSPECIFIED":             0,
		"CREDENTIAL_TYPE_PERMANENT_RESIDENT_CARD": 1,
		"CREDENTIAL_TYPE_BANK_CARD":               2,
		"CREDENTIAL_TYPE_BANK_ACCOUNT":            3,
	}
)

func (x CredentialType) Enum() *CredentialType {
	p := new(CredentialType)
	*p = x
	return p
}

func (x CredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_vc_api_v1_vc_proto_enumTypes[0].Descriptor()
}

func (CredentialType) Type() protoreflect.EnumType {
	return &file_vc_api_v1_vc_proto_enumTypes[0]
}

func (x CredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialType.Descriptor instead.
func (CredentialType) EnumDescriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{0}
}

// [Example]
// {
// "type": "TYPE",
// "created": "CREATED_TIMESTAMP",
// "verification_method": "VERIFICATION_METHOD",
// "proof_purpose": "PROOF_PURPOSE",
// "proof_value": "PROOF_VALUE"
// }
type CredentialProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cryptographic suite used for the proof.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp of when the cryptographic proof was created.
	Created string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// Link to the public key required for verification process.
	VerificationMethod string `protobuf:"bytes,3,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	// The reason the proof was created.
	ProofPurpose string `protobuf:"bytes,4,opt,name=proof_purpose,json=proofPurpose,proto3" json:"proof_purpose,omitempty"`
	// Multibase-encoded binary value that represents the hash of the payload upon decryption through verification_method.
	ProofValue string `protobuf:"bytes,5,opt,name=proof_value,json=proofValue,proto3" json:"proof_value,omitempty"`
}

func (x *CredentialProof) Reset() {
	*x = CredentialProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialProof) ProtoMessage() {}

func (x *CredentialProof) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialProof.ProtoReflect.Descriptor instead.
func (*CredentialProof) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{0}
}

func (x *CredentialProof) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CredentialProof) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *CredentialProof) GetVerificationMethod() string {
	if x != nil {
		return x.VerificationMethod
	}
	return ""
}

func (x *CredentialProof) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *CredentialProof) GetProofValue() string {
	if x != nil {
		return x.ProofValue
	}
	return ""
}

// [Example]
// {
// "credential_type": 1,
// "did": "YOUR_DID"
// }
type CreateIssuanceChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the verifiable credential being requested for issuance.
	CredentialType CredentialType `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=vc_api.v1.CredentialType" json:"credential_type,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *CreateIssuanceChallengeRequest) Reset() {
	*x = CreateIssuanceChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssuanceChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuanceChallengeRequest) ProtoMessage() {}

func (x *CreateIssuanceChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuanceChallengeRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuanceChallengeRequest) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIssuanceChallengeRequest) GetCredentialType() CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return CredentialType_CREDENTIAL_TYPE_UNSPECIFIED
}

func (x *CreateIssuanceChallengeRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]
// {
// "nonce": "NONCE",
// "endpoint": "QR_URL_ENDPOINT",
// "credential_type": 1
// }
type CreateIssuanceChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value used for the challenge.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Used by browser to construct URL for QR generation.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Type of the verifiable credential being requested for issuance.
	CredentialType CredentialType `protobuf:"varint,3,opt,name=credential_type,json=credentialType,proto3,enum=vc_api.v1.CredentialType" json:"credential_type,omitempty"`
}

func (x *CreateIssuanceChallengeResponse) Reset() {
	*x = CreateIssuanceChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssuanceChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuanceChallengeResponse) ProtoMessage() {}

func (x *CreateIssuanceChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuanceChallengeResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuanceChallengeResponse) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{2}
}

func (x *CreateIssuanceChallengeResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CreateIssuanceChallengeResponse) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CreateIssuanceChallengeResponse) GetCredentialType() CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return CredentialType_CREDENTIAL_TYPE_UNSPECIFIED
}

// [Example]
// {
// "credential_type": 1,
// "nonce": "NONCE",
// "signature": "SignatureLen64Bytes=",
// "did": "YOUR_DID"
// }
type IssueVerifiableCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the verifiable credential being requested for issuance.
	CredentialType CredentialType `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=vc_api.v1.CredentialType" json:"credential_type,omitempty"`
	// Value used for the challenge.
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Signed value of the challenge by the wallet.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *IssueVerifiableCredentialRequest) Reset() {
	*x = IssueVerifiableCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueVerifiableCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueVerifiableCredentialRequest) ProtoMessage() {}

func (x *IssueVerifiableCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueVerifiableCredentialRequest.ProtoReflect.Descriptor instead.
func (*IssueVerifiableCredentialRequest) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{3}
}

func (x *IssueVerifiableCredentialRequest) GetCredentialType() CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return CredentialType_CREDENTIAL_TYPE_UNSPECIFIED
}

func (x *IssueVerifiableCredentialRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *IssueVerifiableCredentialRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *IssueVerifiableCredentialRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]
// {
// "credential": 1
// }
type IssueVerifiableCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the verifiable credential being issued.
	Credential string `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *IssueVerifiableCredentialResponse) Reset() {
	*x = IssueVerifiableCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueVerifiableCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueVerifiableCredentialResponse) ProtoMessage() {}

func (x *IssueVerifiableCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueVerifiableCredentialResponse.ProtoReflect.Descriptor instead.
func (*IssueVerifiableCredentialResponse) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{4}
}

func (x *IssueVerifiableCredentialResponse) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// [Example]
// {
// "credential_types": [
// 0,
// 1
// ]
// }
type CreatePresentationChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type(s) of the verifiable credential(s) being presented.
	CredentialTypes []CredentialType `protobuf:"varint,1,rep,packed,name=credential_types,json=credentialTypes,proto3,enum=vc_api.v1.CredentialType" json:"credential_types,omitempty"`
}

func (x *CreatePresentationChallengeRequest) Reset() {
	*x = CreatePresentationChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePresentationChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePresentationChallengeRequest) ProtoMessage() {}

func (x *CreatePresentationChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePresentationChallengeRequest.ProtoReflect.Descriptor instead.
func (*CreatePresentationChallengeRequest) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePresentationChallengeRequest) GetCredentialTypes() []CredentialType {
	if x != nil {
		return x.CredentialTypes
	}
	return nil
}

// [Example]
// {
// "nonce": "NONCE",
// "endpoint": "QR_URL_ENDPOINT",
// "credential_types": [
// 0,
// 1
// ]
// }
type CreatePresentationChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value used for the challenge.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Used by browser to construct URL for QR generation.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Type(s) of the verifiable credential(s) being presented.
	CredentialTypes []CredentialType `protobuf:"varint,3,rep,packed,name=credential_types,json=credentialTypes,proto3,enum=vc_api.v1.CredentialType" json:"credential_types,omitempty"`
}

func (x *CreatePresentationChallengeResponse) Reset() {
	*x = CreatePresentationChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePresentationChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePresentationChallengeResponse) ProtoMessage() {}

func (x *CreatePresentationChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePresentationChallengeResponse.ProtoReflect.Descriptor instead.
func (*CreatePresentationChallengeResponse) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePresentationChallengeResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CreatePresentationChallengeResponse) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CreatePresentationChallengeResponse) GetCredentialTypes() []CredentialType {
	if x != nil {
		return x.CredentialTypes
	}
	return nil
}

// [Example]
// {
// "presentation": "PRESENTATION",
// "nonce": "NONCE",
// "signature": "SignatureLen64Bytes=",
// "did": "YOUR_DID",
// "credential_type": [
// 0,
// 1
// ]
// }
type PresentVerifiableCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The presentation to be verified.
	Presentation string `protobuf:"bytes,1,opt,name=presentation,proto3" json:"presentation,omitempty"`
	// Value used for the challenge.
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Signed value of the challenge by the wallet.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	// Type(s) of the verifiable credential(s) being presented.
	CredentialType []CredentialType `protobuf:"varint,5,rep,packed,name=credential_type,json=credentialType,proto3,enum=vc_api.v1.CredentialType" json:"credential_type,omitempty"`
}

func (x *PresentVerifiableCredentialRequest) Reset() {
	*x = PresentVerifiableCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentVerifiableCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentVerifiableCredentialRequest) ProtoMessage() {}

func (x *PresentVerifiableCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentVerifiableCredentialRequest.ProtoReflect.Descriptor instead.
func (*PresentVerifiableCredentialRequest) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{7}
}

func (x *PresentVerifiableCredentialRequest) GetPresentation() string {
	if x != nil {
		return x.Presentation
	}
	return ""
}

func (x *PresentVerifiableCredentialRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *PresentVerifiableCredentialRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PresentVerifiableCredentialRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *PresentVerifiableCredentialRequest) GetCredentialType() []CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return nil
}

// [Example]
// {}
type PresentVerifiableCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PresentVerifiableCredentialResponse) Reset() {
	*x = PresentVerifiableCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentVerifiableCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentVerifiableCredentialResponse) ProtoMessage() {}

func (x *PresentVerifiableCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentVerifiableCredentialResponse.ProtoReflect.Descriptor instead.
func (*PresentVerifiableCredentialResponse) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{8}
}

// [Example]
// {
// "nonce": "NONCE"
// }
type WaitForCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value used for the challenge.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *WaitForCompletionRequest) Reset() {
	*x = WaitForCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForCompletionRequest) ProtoMessage() {}

func (x *WaitForCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForCompletionRequest.ProtoReflect.Descriptor instead.
func (*WaitForCompletionRequest) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{9}
}

func (x *WaitForCompletionRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// [Example]
// {
// "did": "DID",
// "data": "DATA"
// }
type WaitForCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// JSON representation of the credential.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WaitForCompletionResponse) Reset() {
	*x = WaitForCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vc_api_v1_vc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForCompletionResponse) ProtoMessage() {}

func (x *WaitForCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vc_api_v1_vc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForCompletionResponse.ProtoReflect.Descriptor instead.
func (*WaitForCompletionResponse) Descriptor() ([]byte, []int) {
	return file_vc_api_v1_vc_proto_rawDescGZIP(), []int{10}
}

func (x *WaitForCompletionResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *WaitForCompletionResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_vc_api_v1_vc_proto protoreflect.FileDescriptor

var file_vc_api_v1_vc_proto_rawDesc = []byte{
	0x0a, 0x12, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22,
	0xb6, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x22, 0x97, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x20, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x21, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x6a,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x25, 0x0a, 0x23, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x19, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x9f, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x27, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x32, 0xe2, 0x04,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x19,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x2e, 0x76, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x2d, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x6e, 0x6f, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f,
	0x76, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_vc_api_v1_vc_proto_rawDescOnce sync.Once
	file_vc_api_v1_vc_proto_rawDescData = file_vc_api_v1_vc_proto_rawDesc
)

func file_vc_api_v1_vc_proto_rawDescGZIP() []byte {
	file_vc_api_v1_vc_proto_rawDescOnce.Do(func() {
		file_vc_api_v1_vc_proto_rawDescData = protoimpl.X.CompressGZIP(file_vc_api_v1_vc_proto_rawDescData)
	})
	return file_vc_api_v1_vc_proto_rawDescData
}

var file_vc_api_v1_vc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vc_api_v1_vc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_vc_api_v1_vc_proto_goTypes = []interface{}{
	(CredentialType)(0),                         // 0: vc_api.v1.CredentialType
	(*CredentialProof)(nil),                     // 1: vc_api.v1.CredentialProof
	(*CreateIssuanceChallengeRequest)(nil),      // 2: vc_api.v1.CreateIssuanceChallengeRequest
	(*CreateIssuanceChallengeResponse)(nil),     // 3: vc_api.v1.CreateIssuanceChallengeResponse
	(*IssueVerifiableCredentialRequest)(nil),    // 4: vc_api.v1.IssueVerifiableCredentialRequest
	(*IssueVerifiableCredentialResponse)(nil),   // 5: vc_api.v1.IssueVerifiableCredentialResponse
	(*CreatePresentationChallengeRequest)(nil),  // 6: vc_api.v1.CreatePresentationChallengeRequest
	(*CreatePresentationChallengeResponse)(nil), // 7: vc_api.v1.CreatePresentationChallengeResponse
	(*PresentVerifiableCredentialRequest)(nil),  // 8: vc_api.v1.PresentVerifiableCredentialRequest
	(*PresentVerifiableCredentialResponse)(nil), // 9: vc_api.v1.PresentVerifiableCredentialResponse
	(*WaitForCompletionRequest)(nil),            // 10: vc_api.v1.WaitForCompletionRequest
	(*WaitForCompletionResponse)(nil),           // 11: vc_api.v1.WaitForCompletionResponse
}
var file_vc_api_v1_vc_proto_depIdxs = []int32{
	0,  // 0: vc_api.v1.CreateIssuanceChallengeRequest.credential_type:type_name -> vc_api.v1.CredentialType
	0,  // 1: vc_api.v1.CreateIssuanceChallengeResponse.credential_type:type_name -> vc_api.v1.CredentialType
	0,  // 2: vc_api.v1.IssueVerifiableCredentialRequest.credential_type:type_name -> vc_api.v1.CredentialType
	0,  // 3: vc_api.v1.CreatePresentationChallengeRequest.credential_types:type_name -> vc_api.v1.CredentialType
	0,  // 4: vc_api.v1.CreatePresentationChallengeResponse.credential_types:type_name -> vc_api.v1.CredentialType
	0,  // 5: vc_api.v1.PresentVerifiableCredentialRequest.credential_type:type_name -> vc_api.v1.CredentialType
	2,  // 6: vc_api.v1.CredentialAdapterService.CreateIssuanceChallenge:input_type -> vc_api.v1.CreateIssuanceChallengeRequest
	4,  // 7: vc_api.v1.CredentialAdapterService.IssueVerifiableCredential:input_type -> vc_api.v1.IssueVerifiableCredentialRequest
	6,  // 8: vc_api.v1.CredentialAdapterService.CreatePresentationChallenge:input_type -> vc_api.v1.CreatePresentationChallengeRequest
	8,  // 9: vc_api.v1.CredentialAdapterService.PresentVerifiableCredential:input_type -> vc_api.v1.PresentVerifiableCredentialRequest
	10, // 10: vc_api.v1.CredentialAdapterService.WaitForCompletion:input_type -> vc_api.v1.WaitForCompletionRequest
	3,  // 11: vc_api.v1.CredentialAdapterService.CreateIssuanceChallenge:output_type -> vc_api.v1.CreateIssuanceChallengeResponse
	5,  // 12: vc_api.v1.CredentialAdapterService.IssueVerifiableCredential:output_type -> vc_api.v1.IssueVerifiableCredentialResponse
	7,  // 13: vc_api.v1.CredentialAdapterService.CreatePresentationChallenge:output_type -> vc_api.v1.CreatePresentationChallengeResponse
	9,  // 14: vc_api.v1.CredentialAdapterService.PresentVerifiableCredential:output_type -> vc_api.v1.PresentVerifiableCredentialResponse
	11, // 15: vc_api.v1.CredentialAdapterService.WaitForCompletion:output_type -> vc_api.v1.WaitForCompletionResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_vc_api_v1_vc_proto_init() }
func file_vc_api_v1_vc_proto_init() {
	if File_vc_api_v1_vc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vc_api_v1_vc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssuanceChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssuanceChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueVerifiableCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueVerifiableCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePresentationChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePresentationChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentVerifiableCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentVerifiableCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vc_api_v1_vc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vc_api_v1_vc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vc_api_v1_vc_proto_goTypes,
		DependencyIndexes: file_vc_api_v1_vc_proto_depIdxs,
		EnumInfos:         file_vc_api_v1_vc_proto_enumTypes,
		MessageInfos:      file_vc_api_v1_vc_proto_msgTypes,
	}.Build()
	File_vc_api_v1_vc_proto = out.File
	file_vc_api_v1_vc_proto_rawDesc = nil
	file_vc_api_v1_vc_proto_goTypes = nil
	file_vc_api_v1_vc_proto_depIdxs = nil
}
