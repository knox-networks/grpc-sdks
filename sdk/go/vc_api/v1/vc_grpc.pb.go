// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialAdapterClient is the client API for CredentialAdapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialAdapterClient interface {
	// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
	CreateIssuanceChallenge(ctx context.Context, in *CreateIssuanceChallengeRequest, opts ...grpc.CallOption) (*CreateIssuanceChallengeResponse, error)
	// Called by the holder to the VC issuer to answer the challenge and receive the credential.
	IssueVerifiableCredential(ctx context.Context, in *IssueVerifiableCredentialRequest, opts ...grpc.CallOption) (*IssueVerifiableCredentialResponse, error)
	// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
	CreatePresentationChallenge(ctx context.Context, in *CreatePresentationChallengeRequest, opts ...grpc.CallOption) (*CreatePresentationChallengeResponse, error)
	// Called by the holder to the verifier to verify the presentation with the verifier.
	PresentVerifiableCredential(ctx context.Context, in *PresentVerifiableCredentialRequest, opts ...grpc.CallOption) (*PresentVerifiableCredentialResponse, error)
	// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
	WaitForCompletion(ctx context.Context, in *WaitForCompletionRequest, opts ...grpc.CallOption) (CredentialAdapter_WaitForCompletionClient, error)
}

type credentialAdapterClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialAdapterClient(cc grpc.ClientConnInterface) CredentialAdapterClient {
	return &credentialAdapterClient{cc}
}

func (c *credentialAdapterClient) CreateIssuanceChallenge(ctx context.Context, in *CreateIssuanceChallengeRequest, opts ...grpc.CallOption) (*CreateIssuanceChallengeResponse, error) {
	out := new(CreateIssuanceChallengeResponse)
	err := c.cc.Invoke(ctx, "/vc_api.v1.CredentialAdapter/CreateIssuanceChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterClient) IssueVerifiableCredential(ctx context.Context, in *IssueVerifiableCredentialRequest, opts ...grpc.CallOption) (*IssueVerifiableCredentialResponse, error) {
	out := new(IssueVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, "/vc_api.v1.CredentialAdapter/IssueVerifiableCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterClient) CreatePresentationChallenge(ctx context.Context, in *CreatePresentationChallengeRequest, opts ...grpc.CallOption) (*CreatePresentationChallengeResponse, error) {
	out := new(CreatePresentationChallengeResponse)
	err := c.cc.Invoke(ctx, "/vc_api.v1.CredentialAdapter/CreatePresentationChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterClient) PresentVerifiableCredential(ctx context.Context, in *PresentVerifiableCredentialRequest, opts ...grpc.CallOption) (*PresentVerifiableCredentialResponse, error) {
	out := new(PresentVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, "/vc_api.v1.CredentialAdapter/PresentVerifiableCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterClient) WaitForCompletion(ctx context.Context, in *WaitForCompletionRequest, opts ...grpc.CallOption) (CredentialAdapter_WaitForCompletionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CredentialAdapter_ServiceDesc.Streams[0], "/vc_api.v1.CredentialAdapter/WaitForCompletion", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialAdapterWaitForCompletionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialAdapter_WaitForCompletionClient interface {
	Recv() (*WaitForCompletionResponse, error)
	grpc.ClientStream
}

type credentialAdapterWaitForCompletionClient struct {
	grpc.ClientStream
}

func (x *credentialAdapterWaitForCompletionClient) Recv() (*WaitForCompletionResponse, error) {
	m := new(WaitForCompletionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CredentialAdapterServer is the server API for CredentialAdapter service.
// All implementations must embed UnimplementedCredentialAdapterServer
// for forward compatibility
type CredentialAdapterServer interface {
	// Called by the holder to the VC issuer to initiate the challenge needed for credential issuance.
	CreateIssuanceChallenge(context.Context, *CreateIssuanceChallengeRequest) (*CreateIssuanceChallengeResponse, error)
	// Called by the holder to the VC issuer to answer the challenge and receive the credential.
	IssueVerifiableCredential(context.Context, *IssueVerifiableCredentialRequest) (*IssueVerifiableCredentialResponse, error)
	// Called by the holder to the verifier to initiate the challenge needed to verify the presentation with the verifier.
	CreatePresentationChallenge(context.Context, *CreatePresentationChallengeRequest) (*CreatePresentationChallengeResponse, error)
	// Called by the holder to the verifier to verify the presentation with the verifier.
	PresentVerifiableCredential(context.Context, *PresentVerifiableCredentialRequest) (*PresentVerifiableCredentialResponse, error)
	// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
	WaitForCompletion(*WaitForCompletionRequest, CredentialAdapter_WaitForCompletionServer) error
	mustEmbedUnimplementedCredentialAdapterServer()
}

// UnimplementedCredentialAdapterServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialAdapterServer struct {
}

func (UnimplementedCredentialAdapterServer) CreateIssuanceChallenge(context.Context, *CreateIssuanceChallengeRequest) (*CreateIssuanceChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuanceChallenge not implemented")
}
func (UnimplementedCredentialAdapterServer) IssueVerifiableCredential(context.Context, *IssueVerifiableCredentialRequest) (*IssueVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueVerifiableCredential not implemented")
}
func (UnimplementedCredentialAdapterServer) CreatePresentationChallenge(context.Context, *CreatePresentationChallengeRequest) (*CreatePresentationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePresentationChallenge not implemented")
}
func (UnimplementedCredentialAdapterServer) PresentVerifiableCredential(context.Context, *PresentVerifiableCredentialRequest) (*PresentVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentVerifiableCredential not implemented")
}
func (UnimplementedCredentialAdapterServer) WaitForCompletion(*WaitForCompletionRequest, CredentialAdapter_WaitForCompletionServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForCompletion not implemented")
}
func (UnimplementedCredentialAdapterServer) mustEmbedUnimplementedCredentialAdapterServer() {}

// UnsafeCredentialAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialAdapterServer will
// result in compilation errors.
type UnsafeCredentialAdapterServer interface {
	mustEmbedUnimplementedCredentialAdapterServer()
}

func RegisterCredentialAdapterServer(s grpc.ServiceRegistrar, srv CredentialAdapterServer) {
	s.RegisterService(&CredentialAdapter_ServiceDesc, srv)
}

func _CredentialAdapter_CreateIssuanceChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuanceChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServer).CreateIssuanceChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vc_api.v1.CredentialAdapter/CreateIssuanceChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServer).CreateIssuanceChallenge(ctx, req.(*CreateIssuanceChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapter_IssueVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServer).IssueVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vc_api.v1.CredentialAdapter/IssueVerifiableCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServer).IssueVerifiableCredential(ctx, req.(*IssueVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapter_CreatePresentationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePresentationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServer).CreatePresentationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vc_api.v1.CredentialAdapter/CreatePresentationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServer).CreatePresentationChallenge(ctx, req.(*CreatePresentationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapter_PresentVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServer).PresentVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vc_api.v1.CredentialAdapter/PresentVerifiableCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServer).PresentVerifiableCredential(ctx, req.(*PresentVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapter_WaitForCompletion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitForCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialAdapterServer).WaitForCompletion(m, &credentialAdapterWaitForCompletionServer{stream})
}

type CredentialAdapter_WaitForCompletionServer interface {
	Send(*WaitForCompletionResponse) error
	grpc.ServerStream
}

type credentialAdapterWaitForCompletionServer struct {
	grpc.ServerStream
}

func (x *credentialAdapterWaitForCompletionServer) Send(m *WaitForCompletionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CredentialAdapter_ServiceDesc is the grpc.ServiceDesc for CredentialAdapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialAdapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vc_api.v1.CredentialAdapter",
	HandlerType: (*CredentialAdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssuanceChallenge",
			Handler:    _CredentialAdapter_CreateIssuanceChallenge_Handler,
		},
		{
			MethodName: "IssueVerifiableCredential",
			Handler:    _CredentialAdapter_IssueVerifiableCredential_Handler,
		},
		{
			MethodName: "CreatePresentationChallenge",
			Handler:    _CredentialAdapter_CreatePresentationChallenge_Handler,
		},
		{
			MethodName: "PresentVerifiableCredential",
			Handler:    _CredentialAdapter_PresentVerifiableCredential_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForCompletion",
			Handler:       _CredentialAdapter_WaitForCompletion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vc_api/v1/vc.proto",
}
