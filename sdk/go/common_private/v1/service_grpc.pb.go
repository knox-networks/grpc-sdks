// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/knox-networks/grpc-sdks/sdk/go/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// initiates a Simple Payment transaction.
	NewSimplePayment(ctx context.Context, in *v1.StartSimplePaymentRequest, opts ...grpc.CallOption) (*v1.StartSimplePaymentResponse, error)
	// initiates a Funds Change transaction.
	NewFundsChange(ctx context.Context, in *v1.StartFundsChangeRequest, opts ...grpc.CallOption) (*v1.StartFundsChangeResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) NewSimplePayment(ctx context.Context, in *v1.StartSimplePaymentRequest, opts ...grpc.CallOption) (*v1.StartSimplePaymentResponse, error) {
	out := new(v1.StartSimplePaymentResponse)
	err := c.cc.Invoke(ctx, "/common.TransactionService/NewSimplePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) NewFundsChange(ctx context.Context, in *v1.StartFundsChangeRequest, opts ...grpc.CallOption) (*v1.StartFundsChangeResponse, error) {
	out := new(v1.StartFundsChangeResponse)
	err := c.cc.Invoke(ctx, "/common.TransactionService/NewFundsChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	// initiates a Simple Payment transaction.
	NewSimplePayment(context.Context, *v1.StartSimplePaymentRequest) (*v1.StartSimplePaymentResponse, error)
	// initiates a Funds Change transaction.
	NewFundsChange(context.Context, *v1.StartFundsChangeRequest) (*v1.StartFundsChangeResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) NewSimplePayment(context.Context, *v1.StartSimplePaymentRequest) (*v1.StartSimplePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSimplePayment not implemented")
}
func (UnimplementedTransactionServiceServer) NewFundsChange(context.Context, *v1.StartFundsChangeRequest) (*v1.StartFundsChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFundsChange not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_NewSimplePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StartSimplePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).NewSimplePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TransactionService/NewSimplePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).NewSimplePayment(ctx, req.(*v1.StartSimplePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_NewFundsChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StartFundsChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).NewFundsChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TransactionService/NewFundsChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).NewFundsChange(ctx, req.(*v1.StartFundsChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSimplePayment",
			Handler:    _TransactionService_NewSimplePayment_Handler,
		},
		{
			MethodName: "NewFundsChange",
			Handler:    _TransactionService_NewFundsChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common_private/v1/service.proto",
}

// ServiceInfoClient is the client API for ServiceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInfoClient interface {
	// GetVerifier returns the public key associated with a service endpoint.
	GetVerifier(ctx context.Context, in *v1.GetVerifierRequest, opts ...grpc.CallOption) (*v1.GetVerifierResponse, error)
	// GetServiceType returns the type of service provided by the endpoint.
	GetServiceType(ctx context.Context, in *v1.GetServiceTypeRequest, opts ...grpc.CallOption) (*v1.GetServiceTypeResponse, error)
}

type serviceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInfoClient(cc grpc.ClientConnInterface) ServiceInfoClient {
	return &serviceInfoClient{cc}
}

func (c *serviceInfoClient) GetVerifier(ctx context.Context, in *v1.GetVerifierRequest, opts ...grpc.CallOption) (*v1.GetVerifierResponse, error) {
	out := new(v1.GetVerifierResponse)
	err := c.cc.Invoke(ctx, "/common.ServiceInfo/GetVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoClient) GetServiceType(ctx context.Context, in *v1.GetServiceTypeRequest, opts ...grpc.CallOption) (*v1.GetServiceTypeResponse, error) {
	out := new(v1.GetServiceTypeResponse)
	err := c.cc.Invoke(ctx, "/common.ServiceInfo/GetServiceType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInfoServer is the server API for ServiceInfo service.
// All implementations must embed UnimplementedServiceInfoServer
// for forward compatibility
type ServiceInfoServer interface {
	// GetVerifier returns the public key associated with a service endpoint.
	GetVerifier(context.Context, *v1.GetVerifierRequest) (*v1.GetVerifierResponse, error)
	// GetServiceType returns the type of service provided by the endpoint.
	GetServiceType(context.Context, *v1.GetServiceTypeRequest) (*v1.GetServiceTypeResponse, error)
	mustEmbedUnimplementedServiceInfoServer()
}

// UnimplementedServiceInfoServer must be embedded to have forward compatible implementations.
type UnimplementedServiceInfoServer struct {
}

func (UnimplementedServiceInfoServer) GetVerifier(context.Context, *v1.GetVerifierRequest) (*v1.GetVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifier not implemented")
}
func (UnimplementedServiceInfoServer) GetServiceType(context.Context, *v1.GetServiceTypeRequest) (*v1.GetServiceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceType not implemented")
}
func (UnimplementedServiceInfoServer) mustEmbedUnimplementedServiceInfoServer() {}

// UnsafeServiceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInfoServer will
// result in compilation errors.
type UnsafeServiceInfoServer interface {
	mustEmbedUnimplementedServiceInfoServer()
}

func RegisterServiceInfoServer(s grpc.ServiceRegistrar, srv ServiceInfoServer) {
	s.RegisterService(&ServiceInfo_ServiceDesc, srv)
}

func _ServiceInfo_GetVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetVerifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).GetVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.ServiceInfo/GetVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).GetVerifier(ctx, req.(*v1.GetVerifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfo_GetServiceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).GetServiceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.ServiceInfo/GetServiceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).GetServiceType(ctx, req.(*v1.GetServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInfo_ServiceDesc is the grpc.ServiceDesc for ServiceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.ServiceInfo",
	HandlerType: (*ServiceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVerifier",
			Handler:    _ServiceInfo_GetVerifier_Handler,
		},
		{
			MethodName: "GetServiceType",
			Handler:    _ServiceInfo_GetServiceType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common_private/v1/service.proto",
}
