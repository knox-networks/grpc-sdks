// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: common/v1/packet.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the `bytes` field contents of the parent `Packet` object.
// Used in routing and decoding.
type PacketType int32

const (
	// Unspecified packet type
	// default behavior is to drop the packet
	PacketType_Unknown PacketType = 0
	// Unsupported packet
	// default behavior is to return the packet
	PacketType_Unsupported PacketType = 1
	// Authenticate connection
	// Used to verify the verifier public key ownership
	// corresponds to `AuthenticationRequest` message
	PacketType_Authenticate PacketType = 2
	// Return to sender when unable to route packet
	// default behavior is to inverse the sender and recipient fields
	PacketType_ReturnToSender PacketType = 3
	// Terminate data stream
	// TODO: decide if this is necessary after "Acknowledgement" type is implemented
	PacketType_TerminateStream PacketType = 4
	// Life signal packet
	// Used to signal the gateway and/or client that the connection is still alive
	PacketType_KeepAlive PacketType = 5
	// Acknowledgement of packet
	// Used by a recipient to signal to the sender of the a packet that it has been received.
	PacketType_Acknowledgement PacketType = 6
	// Authentication Request
	// Used to request the verifier public key ownership
	PacketType_AuthenticateRequest PacketType = 7
	// Authentication Response
	// Used to respond to the verifier public key ownership authentication request
	PacketType_AuthenticateResponse PacketType = 8
	// --- ConnectionPool flow ---
	// Used to indicate an associated identity addition
	PacketType_AddAssociatedConnection PacketType = 9
	// Used to indicate an associated identity drop
	PacketType_DropAssociatedConnection PacketType = 10
	// Send Promissory to recipient request
	// This is a direct end-to-end message, and will not Authorize the promissory
	PacketType_Promissory PacketType = 100
	// Authorize Promissory Request
	// Request an authorized signature for a promissory and return to the sender.
	PacketType_AuthorizePromissory PacketType = 101
	// Authorize and Forward Promissory
	// Request an authorized signature for a promissory and forward to the recipient.
	PacketType_AuthorizeAndForwardPromissory PacketType = 102
	// Archive Promissory Request
	// After a promissory file is removed from circulation archive the promissory file.
	PacketType_ArchivePromissory PacketType = 103
	// Promissory receipt acknowledgement
	// Respond with promissory receipt to a promissory request
	// TODO: Decide if this msg or a general acknowledgement message should be used.
	PacketType_PromissoryReceipt PacketType = 104
	// Authorization Status
	// Response from Notary to sender of an `AuthorizeLockedPromissories` message. Indicates
	// the notary has completed authorization.
	PacketType_AuthorizationStatus PacketType = 108
	// Retrieve Assets
	// Request to have a notary send Promissory packets back to the requester for each
	// promissory related to a given transaction and owned by the requester.
	PacketType_RetrieveAssets PacketType = 109
	// PromissoryBatch
	// Send a batch of Promissory to recipient.
	PacketType_PromissoryBatch PacketType = 110
	// Lock Promissory Batch
	// Request to TM to submit transferred promissories toward a contract-based transaction.
	PacketType_LockPromissoryBatch PacketType = 111
	// Lock Promissory Batch Ack
	// Notice from TM that the batch of promissories was submitted.
	PacketType_LockPromissoryBatchAck PacketType = 112
	// Retrieve Assets Batch
	// Request to have a notary send PromissoryBatch packets back to the requester for each
	// promissory related to a given transaction and owned by the requester.
	PacketType_RetrieveAssetsBatch PacketType = 113
	// Authorize and Forward Promissory Batch
	// Request an authorized signature for a promissory batch and forward to the recipients.
	PacketType_AuthorizeAndForwardPromissoryBatch PacketType = 116
	// Validation Block Batch
	// Request an authorized signature for a ValidationBlockBatch and reply with an AuthorizedBlockBatch.
	PacketType_ValidationBlockBatch PacketType = 117
	// Authorized Block Batch
	// Response to a ValidationBlockBatch which contains a batch of AuthorizedBlock.
	PacketType_AuthorizedBlockBatch PacketType = 118
	// Request to the authority to mint new promissories
	PacketType_MintPromissory PacketType = 119
	// Represents a batch of newly-minted and notarized promissories sent to their final recipient
	PacketType_FreshPromissoryBatch PacketType = 120
	// Identity Request
	// Request identity of a verifier in the network
	// Corresponds to `IdentityRequest` message
	PacketType_IdentityRequest PacketType = 200
	// Identity Response
	// Response to identity request
	// Corresponds to `IdentityResponse` message
	PacketType_IdentityResponse PacketType = 201
	// Identity proof
	// Identity proof to be added to subject DID document
	// Corresponds to `IdentityProof`
	PacketType_IdentityProof PacketType = 202
	// AuthorizationFailure
	// Response from the Notary in the even of a failure to Notarize.
	PacketType_AuthorizationFailed PacketType = 300
	// EmissaryConnectionIdentity
	// Identity of a service connection
	// Corresponds to `EmissaryConnectionIdentityRequest` message
	PacketType_EmissaryConnectionIdentity PacketType = 400
	// Contract Commitment
	// Update a contract with the addition of a commitment
	PacketType_ContractProposal PacketType = 500
	// Contract Ack
	// Acknowledgement to participate in contract
	PacketType_ContractAck PacketType = 501
	// Contract Nack
	// Acknowledgement to reject a contract
	PacketType_ContractNack PacketType = 502
	// Contract Signature
	// Updates a contract with the addition of a signature
	PacketType_ContractSignature PacketType = 503
	// Holds a finalized contract in the packet data field
	PacketType_ContractComplete PacketType = 504
	// Remittance Request
	// Corresponds to `RemittanceRequest` message
	// Used by Treasury service to remit payments
	PacketType_RemittanceRequest PacketType = 700
	// Remittance Response
	// Corresponds to `RemittanceResponse` message
	// Response from Treasury service as a payment response
	PacketType_RemittanceResponse PacketType = 701
	// Payer instruction to notify the payee of a payment comprising a number of
	// CPFs. Checks the existence of Payee and in future allows blocking a
	// transaction that would otherwise be sanctioned, before any CPF ownership is
	// transferred.
	// SimplePaymentRequest
	PacketType_SPRequest PacketType = 1000
	// Payee acknowledgement of the SimplePayment, also confirms the existence of
	// the Payee.
	// SimplePaymentAck
	PacketType_SPAck PacketType = 1001
	// Payee acknowledgement of the SimplePayment, also confirms the existence of
	// the Payee.
	// SimplePaymentNack
	PacketType_SPNack PacketType = 1002
	// Indicates status of the transfer from the recipient (payee)
	// SimplePaymentResponse
	PacketType_SPStatus PacketType = 1003
	// StartSimplePaymentRequest
	PacketType_SPStart PacketType = 1004
	// Sender requests Treasury to provide change that can be used to make a
	// specific amount payment
	PacketType_FCRequest PacketType = 1100
	// Treasury acceptance of the request, indicating willingness to provide the
	// change.
	PacketType_FCAck PacketType = 1101
	// Treasury is unable to provide change, Error code in payload will provide
	// details
	PacketType_FCNack PacketType = 1102
	// Payer instruction to notify the payee of a contract payment comprising a
	// number of CPFs.
	// ContractPaymentRequest
	PacketType_CPRequest PacketType = 1300
	// Payee acknowledgement of the contract payment, also confirms the existence
	// of the Payee.
	// ContractPaymentAck
	PacketType_CPAck PacketType = 1301
	// Payee acknowledgement of the contract payment, also confirms the existence
	// of the Payee.
	// ContractPaymentNack
	PacketType_CPNack PacketType = 1302
	// Payer instruction to the Transaction Manager to start a new contract
	// payment using a signed contract.
	// ContractPaymentContract
	PacketType_CPContract PacketType = 1303
	// Transaction Manager acknowledgement of the contract payment using the
	// provided signed contract.
	// ContractPaymentContract
	PacketType_CPContractAck PacketType = 1304
	// Transaction Manager acknowledgement to the payee that the assets have been
	// authorized and are ready to be retrieved.
	// ContractPaymentAssetsAuthorized
	PacketType_CPAssetsAuthorized PacketType = 1305
	// Transaction Manager acknowledgement that the contract payment is complete.
	// ContractPaymentComplete
	PacketType_CPComplete PacketType = 1306
	// Message sent from the Transaction Manager to the Hash Provider in a HTLC contract. This
	// indicates a request for the recipient to provide the secret.
	// RequestSecret
	PacketType_RequestSecret PacketType = 1308
	// Message sent from a participant in response to receiving a `RequestSecret` packet
	// PresentSecret
	PacketType_PresentSecret PacketType = 1309
	// Message sent by the Transaction Manager to the contract participants in the event
	// the transaction was unable to complete.
	// CPAssetsReturned
	PacketType_CPAssetsReturned PacketType = 1310
)

// Enum value maps for PacketType.
var (
	PacketType_name = map[int32]string{
		0:    "Unknown",
		1:    "Unsupported",
		2:    "Authenticate",
		3:    "ReturnToSender",
		4:    "TerminateStream",
		5:    "KeepAlive",
		6:    "Acknowledgement",
		7:    "AuthenticateRequest",
		8:    "AuthenticateResponse",
		9:    "AddAssociatedConnection",
		10:   "DropAssociatedConnection",
		100:  "Promissory",
		101:  "AuthorizePromissory",
		102:  "AuthorizeAndForwardPromissory",
		103:  "ArchivePromissory",
		104:  "PromissoryReceipt",
		108:  "AuthorizationStatus",
		109:  "RetrieveAssets",
		110:  "PromissoryBatch",
		111:  "LockPromissoryBatch",
		112:  "LockPromissoryBatchAck",
		113:  "RetrieveAssetsBatch",
		116:  "AuthorizeAndForwardPromissoryBatch",
		117:  "ValidationBlockBatch",
		118:  "AuthorizedBlockBatch",
		119:  "MintPromissory",
		120:  "FreshPromissoryBatch",
		200:  "IdentityRequest",
		201:  "IdentityResponse",
		202:  "IdentityProof",
		300:  "AuthorizationFailed",
		400:  "EmissaryConnectionIdentity",
		500:  "ContractProposal",
		501:  "ContractAck",
		502:  "ContractNack",
		503:  "ContractSignature",
		504:  "ContractComplete",
		700:  "RemittanceRequest",
		701:  "RemittanceResponse",
		1000: "SPRequest",
		1001: "SPAck",
		1002: "SPNack",
		1003: "SPStatus",
		1004: "SPStart",
		1100: "FCRequest",
		1101: "FCAck",
		1102: "FCNack",
		1300: "CPRequest",
		1301: "CPAck",
		1302: "CPNack",
		1303: "CPContract",
		1304: "CPContractAck",
		1305: "CPAssetsAuthorized",
		1306: "CPComplete",
		1308: "RequestSecret",
		1309: "PresentSecret",
		1310: "CPAssetsReturned",
	}
	PacketType_value = map[string]int32{
		"Unknown":                            0,
		"Unsupported":                        1,
		"Authenticate":                       2,
		"ReturnToSender":                     3,
		"TerminateStream":                    4,
		"KeepAlive":                          5,
		"Acknowledgement":                    6,
		"AuthenticateRequest":                7,
		"AuthenticateResponse":               8,
		"AddAssociatedConnection":            9,
		"DropAssociatedConnection":           10,
		"Promissory":                         100,
		"AuthorizePromissory":                101,
		"AuthorizeAndForwardPromissory":      102,
		"ArchivePromissory":                  103,
		"PromissoryReceipt":                  104,
		"AuthorizationStatus":                108,
		"RetrieveAssets":                     109,
		"PromissoryBatch":                    110,
		"LockPromissoryBatch":                111,
		"LockPromissoryBatchAck":             112,
		"RetrieveAssetsBatch":                113,
		"AuthorizeAndForwardPromissoryBatch": 116,
		"ValidationBlockBatch":               117,
		"AuthorizedBlockBatch":               118,
		"MintPromissory":                     119,
		"FreshPromissoryBatch":               120,
		"IdentityRequest":                    200,
		"IdentityResponse":                   201,
		"IdentityProof":                      202,
		"AuthorizationFailed":                300,
		"EmissaryConnectionIdentity":         400,
		"ContractProposal":                   500,
		"ContractAck":                        501,
		"ContractNack":                       502,
		"ContractSignature":                  503,
		"ContractComplete":                   504,
		"RemittanceRequest":                  700,
		"RemittanceResponse":                 701,
		"SPRequest":                          1000,
		"SPAck":                              1001,
		"SPNack":                             1002,
		"SPStatus":                           1003,
		"SPStart":                            1004,
		"FCRequest":                          1100,
		"FCAck":                              1101,
		"FCNack":                             1102,
		"CPRequest":                          1300,
		"CPAck":                              1301,
		"CPNack":                             1302,
		"CPContract":                         1303,
		"CPContractAck":                      1304,
		"CPAssetsAuthorized":                 1305,
		"CPComplete":                         1306,
		"RequestSecret":                      1308,
		"PresentSecret":                      1309,
		"CPAssetsReturned":                   1310,
	}
)

func (x PacketType) Enum() *PacketType {
	p := new(PacketType)
	*p = x
	return p
}

func (x PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_packet_proto_enumTypes[0].Descriptor()
}

func (PacketType) Type() protoreflect.EnumType {
	return &file_common_v1_packet_proto_enumTypes[0]
}

func (x PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketType.Descriptor instead.
func (PacketType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{0}
}

// Represents the algorithm used to derive the hash value in the `HashCondition`.
type HashAlgorithm int32

const (
	HashAlgorithm_SHA256 HashAlgorithm = 0
	HashAlgorithm_SHA512 HashAlgorithm = 1
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0: "SHA256",
		1: "SHA512",
	}
	HashAlgorithm_value = map[string]int32{
		"SHA256": 0,
		"SHA512": 1,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_packet_proto_enumTypes[1].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_common_v1_packet_proto_enumTypes[1]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{1}
}

// Contract type
type ContractType int32

const (
	// Status Unspecified.
	ContractType_CONTRACT_TYPE_UNSPECIFIED ContractType = 0
	// Simple a-to-b payment.
	ContractType_CONTRACT_TYPE_PAYMENT ContractType = 1
	// Transfer between 2 or more parties.
	ContractType_CONTRACT_TYPE_SWAP ContractType = 2
	// Multi-party unidirectional payment.
	ContractType_CONTRACT_TYPE_RELAY ContractType = 3
	// Custom contract type.
	ContractType_CONTRACT_TYPE_CUSTOM ContractType = 4
)

// Enum value maps for ContractType.
var (
	ContractType_name = map[int32]string{
		0: "CONTRACT_TYPE_UNSPECIFIED",
		1: "CONTRACT_TYPE_PAYMENT",
		2: "CONTRACT_TYPE_SWAP",
		3: "CONTRACT_TYPE_RELAY",
		4: "CONTRACT_TYPE_CUSTOM",
	}
	ContractType_value = map[string]int32{
		"CONTRACT_TYPE_UNSPECIFIED": 0,
		"CONTRACT_TYPE_PAYMENT":     1,
		"CONTRACT_TYPE_SWAP":        2,
		"CONTRACT_TYPE_RELAY":       3,
		"CONTRACT_TYPE_CUSTOM":      4,
	}
)

func (x ContractType) Enum() *ContractType {
	p := new(ContractType)
	*p = x
	return p
}

func (x ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_packet_proto_enumTypes[2].Descriptor()
}

func (ContractType) Type() protoreflect.EnumType {
	return &file_common_v1_packet_proto_enumTypes[2]
}

func (x ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractType.Descriptor instead.
func (ContractType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{2}
}

// Simple Payment Rejection Reason.
type SimplePaymentNack_RejectionReason int32

const (
	// Default enum field
	SimplePaymentNack_REASON_UNKNOWN SimplePaymentNack_RejectionReason = 0
	// "Other" e.g. sanctions blocked
	SimplePaymentNack_REASON_OTHER SimplePaymentNack_RejectionReason = 1
	// request amount field was empty or value set to zero
	SimplePaymentNack_REASON_AMOUNT_EMPTY SimplePaymentNack_RejectionReason = 2
	// Amounts being remitted do not match a previous ChangeRequest (if part of
	// a change request)
	SimplePaymentNack_REASON_CHANGE_REQUEST_AMOUNT_MISMATCH SimplePaymentNack_RejectionReason = 3
)

// Enum value maps for SimplePaymentNack_RejectionReason.
var (
	SimplePaymentNack_RejectionReason_name = map[int32]string{
		0: "REASON_UNKNOWN",
		1: "REASON_OTHER",
		2: "REASON_AMOUNT_EMPTY",
		3: "REASON_CHANGE_REQUEST_AMOUNT_MISMATCH",
	}
	SimplePaymentNack_RejectionReason_value = map[string]int32{
		"REASON_UNKNOWN":                        0,
		"REASON_OTHER":                          1,
		"REASON_AMOUNT_EMPTY":                   2,
		"REASON_CHANGE_REQUEST_AMOUNT_MISMATCH": 3,
	}
)

func (x SimplePaymentNack_RejectionReason) Enum() *SimplePaymentNack_RejectionReason {
	p := new(SimplePaymentNack_RejectionReason)
	*p = x
	return p
}

func (x SimplePaymentNack_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimplePaymentNack_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_packet_proto_enumTypes[3].Descriptor()
}

func (SimplePaymentNack_RejectionReason) Type() protoreflect.EnumType {
	return &file_common_v1_packet_proto_enumTypes[3]
}

func (x SimplePaymentNack_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimplePaymentNack_RejectionReason.Descriptor instead.
func (SimplePaymentNack_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{5, 0}
}

// Funds Change Rejection Reason.
type FundsChangeNack_RejectionReason int32

const (
	// Default enum field
	FundsChangeNack_REASON_UNKNOWN FundsChangeNack_RejectionReason = 0
	// "Other" e.g. sanctions blocked
	FundsChangeNack_REASON_OTHER FundsChangeNack_RejectionReason = 1
	// request amount field was empty or value set to zero
	FundsChangeNack_REASON_AMOUNT_EMPTY FundsChangeNack_RejectionReason = 2
	// GrossAmount - Fees must be >= ExactAmount, else its not possible to get
	// change
	FundsChangeNack_REASON_AMOUNTS_MISMATCH FundsChangeNack_RejectionReason = 3
)

// Enum value maps for FundsChangeNack_RejectionReason.
var (
	FundsChangeNack_RejectionReason_name = map[int32]string{
		0: "REASON_UNKNOWN",
		1: "REASON_OTHER",
		2: "REASON_AMOUNT_EMPTY",
		3: "REASON_AMOUNTS_MISMATCH",
	}
	FundsChangeNack_RejectionReason_value = map[string]int32{
		"REASON_UNKNOWN":          0,
		"REASON_OTHER":            1,
		"REASON_AMOUNT_EMPTY":     2,
		"REASON_AMOUNTS_MISMATCH": 3,
	}
)

func (x FundsChangeNack_RejectionReason) Enum() *FundsChangeNack_RejectionReason {
	p := new(FundsChangeNack_RejectionReason)
	*p = x
	return p
}

func (x FundsChangeNack_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FundsChangeNack_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_packet_proto_enumTypes[4].Descriptor()
}

func (FundsChangeNack_RejectionReason) Type() protoreflect.EnumType {
	return &file_common_v1_packet_proto_enumTypes[4]
}

func (x FundsChangeNack_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FundsChangeNack_RejectionReason.Descriptor instead.
func (FundsChangeNack_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{9, 0}
}

// Reason for Cancelled Transaction
type CancelTransaction_RejectionReason int32

const (
	// Default enum field
	CancelTransaction_REASON_UNKNOWN CancelTransaction_RejectionReason = 0
	// "Other" e.g. sanctions blocked
	CancelTransaction_REASON_OTHER CancelTransaction_RejectionReason = 1
	// One or more related Transactions had a mismatch between them
	CancelTransaction_REASON_MISMATCHED_TRANSACTIONS CancelTransaction_RejectionReason = 2
)

// Enum value maps for CancelTransaction_RejectionReason.
var (
	CancelTransaction_RejectionReason_name = map[int32]string{
		0: "REASON_UNKNOWN",
		1: "REASON_OTHER",
		2: "REASON_MISMATCHED_TRANSACTIONS",
	}
	CancelTransaction_RejectionReason_value = map[string]int32{
		"REASON_UNKNOWN":                 0,
		"REASON_OTHER":                   1,
		"REASON_MISMATCHED_TRANSACTIONS": 2,
	}
)

func (x CancelTransaction_RejectionReason) Enum() *CancelTransaction_RejectionReason {
	p := new(CancelTransaction_RejectionReason)
	*p = x
	return p
}

func (x CancelTransaction_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelTransaction_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_packet_proto_enumTypes[5].Descriptor()
}

func (CancelTransaction_RejectionReason) Type() protoreflect.EnumType {
	return &file_common_v1_packet_proto_enumTypes[5]
}

func (x CancelTransaction_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelTransaction_RejectionReason.Descriptor instead.
func (CancelTransaction_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{10, 0}
}

// [Example]
// {
// "packet_type": 100,
// "data": "LengthVariesBasedOnData=",
// "channel": "YOUR_CHANNEL",
// "sender": {
// "signature_system": 1,
// "verifier": "BytesLengthOfSenderVerifierVariesByAlgo="
// },
// "recipient": {
// "signature_system": 1,
// "verifier": "AlgoVariesRecipientVerifierBytesLen="
// },
// "nonce": "NonceBytesLenVaryByAlgo=",
// "transaction_header": {
// "starter": {
// "signature_system": 1,
// "verifier": "BytesLenStarterVerifierVariesByAlgo="
// },
// "responder": {
// "signature_system": 1,
// "verifier": "AlgoVariesResponderVerifierBytesLen="
// },
// "uetr": "UETR",
// "timestamp": "2006-01-02T15:04:05Z",
// "signature": "ByteLengthSignatureVariesByAlgo=",
// "user_reference": "USER_REFERENCE",
// "related_uetrs": [
// "RELATED_UETR1",
// "RELATED_UETR2"
// ]
// }
// }
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packet type for determining deserialization scheme and processing
	PacketType PacketType `protobuf:"varint,1,opt,name=packet_type,json=packetType,proto3,enum=common.PacketType" json:"packet_type,omitempty"`
	// Raw byte data corresponding to message type
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Unique channel identifier
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	// Verifier of sender
	Sender *DynamicVerifier `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	// Verifier of recipient
	Recipient *DynamicVerifier `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Nonce used to guard against replay attacks
	Nonce []byte `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// optional transaction header
	TransactionHeader *TransactionHeader `protobuf:"bytes,7,opt,name=transaction_header,json=transactionHeader,proto3" json:"transaction_header,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetPacketType() PacketType {
	if x != nil {
		return x.PacketType
	}
	return PacketType_Unknown
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Packet) GetSender() *DynamicVerifier {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Packet) GetRecipient() *DynamicVerifier {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Packet) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Packet) GetTransactionHeader() *TransactionHeader {
	if x != nil {
		return x.TransactionHeader
	}
	return nil
}

// [Example]
// {
// "starter": {
// "signature_system": 1,
// "verifier": "BytesLenStarterVerifierVariesByAlgo="
// },
// "responder": {
// "signature_system": 1,
// "verifier": "AlgoVariesResponderVerifierBytesLen="
// },
// "uetr": "UETR",
// "timestamp": "2006-01-02T15:04:05Z",
// "signature": "LengthSignatureVariesByAlgo=",
// "user_reference": "USER_REFERENCE",
// "related_uetrs": [
// "RELATED_UETR1",
// "RELATED_UETR2"
// ]
// }
type TransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Verifier of the entity that started the transaction process.
	Starter *DynamicVerifier `protobuf:"bytes,1,opt,name=starter,proto3" json:"starter,omitempty"`
	// Verifier of the entity which is responding to the transaction processes
	// that was initiated by the starter.
	Responder *DynamicVerifier `protobuf:"bytes,2,opt,name=responder,proto3" json:"responder,omitempty"`
	// Universal e2e transaction reference. Term used for UUIDv4 in financial
	// messaging such as ISO20022.
	Uetr string `protobuf:"bytes,3,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// Seconds (minus leapsconds) since epoch 1970 - Unix timestamp - always
	// interpreted as being in the UTC timezone. Internal operations will convert
	// this to UTC time.
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Signature on all fields in Transaction header (except signature field
	// itself) and Routing header + (sha256 on serialized(payload).
	// TODO investigate viability
	// should be sent by the emitter of the transaction
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// User reference string for transactions acting as a memo field.
	UserReference string `protobuf:"bytes,6,opt,name=user_reference,json=userReference,proto3" json:"user_reference,omitempty"`
	// Related uetrs 0..N.
	RelatedUetrs []string `protobuf:"bytes,7,rep,name=related_uetrs,json=relatedUetrs,proto3" json:"related_uetrs,omitempty"`
}

func (x *TransactionHeader) Reset() {
	*x = TransactionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHeader) ProtoMessage() {}

func (x *TransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHeader.ProtoReflect.Descriptor instead.
func (*TransactionHeader) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionHeader) GetStarter() *DynamicVerifier {
	if x != nil {
		return x.Starter
	}
	return nil
}

func (x *TransactionHeader) GetResponder() *DynamicVerifier {
	if x != nil {
		return x.Responder
	}
	return nil
}

func (x *TransactionHeader) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *TransactionHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TransactionHeader) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TransactionHeader) GetUserReference() string {
	if x != nil {
		return x.UserReference
	}
	return ""
}

func (x *TransactionHeader) GetRelatedUetrs() []string {
	if x != nil {
		return x.RelatedUetrs
	}
	return nil
}

// [Example]
// {
// "promissory_batch": [
// "LengthOfFileBytesVaries=",
// "LengthOfFileBytesVaries=",
// "LengthOfFileBytesVaries="
// ]
// }
type BatchedPromissory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of transferred promissory bytes. These are expected to be the
	// flatbuffer-serialized bytes of a Promissory, not protobuf.
	PromissoryBatch [][]byte `protobuf:"bytes,1,rep,name=promissory_batch,json=promissoryBatch,proto3" json:"promissory_batch,omitempty"`
}

func (x *BatchedPromissory) Reset() {
	*x = BatchedPromissory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchedPromissory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchedPromissory) ProtoMessage() {}

func (x *BatchedPromissory) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchedPromissory.ProtoReflect.Descriptor instead.
func (*BatchedPromissory) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{2}
}

func (x *BatchedPromissory) GetPromissoryBatch() [][]byte {
	if x != nil {
		return x.PromissoryBatch
	}
	return nil
}

// [Example]
// {
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// }
// }
type SimplePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount in simple payment.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SimplePaymentRequest) Reset() {
	*x = SimplePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplePaymentRequest) ProtoMessage() {}

func (x *SimplePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplePaymentRequest.ProtoReflect.Descriptor instead.
func (*SimplePaymentRequest) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{3}
}

func (x *SimplePaymentRequest) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// [Example]
// {}
type SimplePaymentAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SimplePaymentAck) Reset() {
	*x = SimplePaymentAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplePaymentAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplePaymentAck) ProtoMessage() {}

func (x *SimplePaymentAck) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplePaymentAck.ProtoReflect.Descriptor instead.
func (*SimplePaymentAck) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{4}
}

// [Example]
// {
// "rejection_reason": 1,
// "other": "OTHER"
// }
type SimplePaymentNack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rejection Reason.
	RejectionReason SimplePaymentNack_RejectionReason `protobuf:"varint,1,opt,name=rejection_reason,json=rejectionReason,proto3,enum=common.SimplePaymentNack_RejectionReason" json:"rejection_reason,omitempty"`
	// If Rejection Reason "Other", Message
	Other string `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *SimplePaymentNack) Reset() {
	*x = SimplePaymentNack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplePaymentNack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplePaymentNack) ProtoMessage() {}

func (x *SimplePaymentNack) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplePaymentNack.ProtoReflect.Descriptor instead.
func (*SimplePaymentNack) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{5}
}

func (x *SimplePaymentNack) GetRejectionReason() SimplePaymentNack_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return SimplePaymentNack_REASON_UNKNOWN
}

func (x *SimplePaymentNack) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

// [Example]
// {
// "received_amount": {
// "currency_code":"USD",
// "amount":500,
// "decimals":2
// },
// "received_promissories": [
// "RECEIVED_PROMISSORY_1",
// "RECEIVED_PROMISSORY_2",
// "RECEIVED_PROMISSORY_3"
// ]
// }
type SimplePaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount received.
	ReceivedAmount *Amount `protobuf:"bytes,1,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"`
	// The first three characters are often the ISO-4217 currency
	// code (though not always).
	//
	// The second section, delimited by `-`, is the amount
	// represented as a unsigned integer expanded decimal format.
	//
	// The third section, delimited by `-`, is the decimal precision
	// of the amount. In the example above, the amount of the note
	// is one U.S. dollar and zero cents, i.e. $1.00.
	//
	// The fourth section, delimited by `-`, is the prefix
	// This is the fixed value `C3-A6`.
	// ex: USD-100-2-C3-A6-DE8F1D7B-3322-4BE9-AD61-9CB801E748C1
	ReceivedPromissories []string `protobuf:"bytes,2,rep,name=received_promissories,json=receivedPromissories,proto3" json:"received_promissories,omitempty"` // "<currency>-<amount>-<decimals>-<protocol>-<id>"
}

func (x *SimplePaymentResponse) Reset() {
	*x = SimplePaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplePaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplePaymentResponse) ProtoMessage() {}

func (x *SimplePaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplePaymentResponse.ProtoReflect.Descriptor instead.
func (*SimplePaymentResponse) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{6}
}

func (x *SimplePaymentResponse) GetReceivedAmount() *Amount {
	if x != nil {
		return x.ReceivedAmount
	}
	return nil
}

func (x *SimplePaymentResponse) GetReceivedPromissories() []string {
	if x != nil {
		return x.ReceivedPromissories
	}
	return nil
}

// [Example]
// {
// "gross_amount": {
// "currency_code":"USD",
// "amount":500,
// "decimals":2
// },
// "exact_amount": {
// "currency_code":"USD",
// "amount":499,
// "decimals":2
// },
// "fees": {
// "currency_code":"USD",
// "amount":1,
// "decimals":2
// }
// }
type FundsChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gross Amount Requested
	GrossAmount *Amount `protobuf:"bytes,1,opt,name=gross_amount,json=grossAmount,proto3" json:"gross_amount,omitempty"`
	// Exact Amount Requested
	ExactAmount *Amount `protobuf:"bytes,2,opt,name=exact_amount,json=exactAmount,proto3" json:"exact_amount,omitempty"`
	// Fees
	Fees *Amount `protobuf:"bytes,3,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (x *FundsChangeRequest) Reset() {
	*x = FundsChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundsChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundsChangeRequest) ProtoMessage() {}

func (x *FundsChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundsChangeRequest.ProtoReflect.Descriptor instead.
func (*FundsChangeRequest) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{7}
}

func (x *FundsChangeRequest) GetGrossAmount() *Amount {
	if x != nil {
		return x.GrossAmount
	}
	return nil
}

func (x *FundsChangeRequest) GetExactAmount() *Amount {
	if x != nil {
		return x.ExactAmount
	}
	return nil
}

func (x *FundsChangeRequest) GetFees() *Amount {
	if x != nil {
		return x.Fees
	}
	return nil
}

// [Example]
// {}
type FundsChangeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FundsChangeAck) Reset() {
	*x = FundsChangeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundsChangeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundsChangeAck) ProtoMessage() {}

func (x *FundsChangeAck) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundsChangeAck.ProtoReflect.Descriptor instead.
func (*FundsChangeAck) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{8}
}

// [Example]
// {
// "rejection_reason": 0,
// "other": "OTHER"
// }
type FundsChangeNack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rejection Reason.
	RejectionReason FundsChangeNack_RejectionReason `protobuf:"varint,1,opt,name=rejection_reason,json=rejectionReason,proto3,enum=common.FundsChangeNack_RejectionReason" json:"rejection_reason,omitempty"`
	// If Rejection Reason "Other", Message
	Other string `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *FundsChangeNack) Reset() {
	*x = FundsChangeNack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundsChangeNack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundsChangeNack) ProtoMessage() {}

func (x *FundsChangeNack) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundsChangeNack.ProtoReflect.Descriptor instead.
func (*FundsChangeNack) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{9}
}

func (x *FundsChangeNack) GetRejectionReason() FundsChangeNack_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return FundsChangeNack_REASON_UNKNOWN
}

func (x *FundsChangeNack) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

// [Example]
// {
// "rejection_reason": 0,
// "other": "OTHER"
// }
type CancelTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rejection Reason.
	RejectionReason CancelTransaction_RejectionReason `protobuf:"varint,1,opt,name=rejection_reason,json=rejectionReason,proto3,enum=common.CancelTransaction_RejectionReason" json:"rejection_reason,omitempty"`
	// If Rejection Reason "Other", Message
	Other string `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *CancelTransaction) Reset() {
	*x = CancelTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransaction) ProtoMessage() {}

func (x *CancelTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransaction.ProtoReflect.Descriptor instead.
func (*CancelTransaction) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{10}
}

func (x *CancelTransaction) GetRejectionReason() CancelTransaction_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return CancelTransaction_REASON_UNKNOWN
}

func (x *CancelTransaction) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

// [Example]
// {
// "sender": "zSenderPublicKey",
// "recipient": "zRecipientPublicKey",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// }
// }
type Commitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sender Public Key
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Recipient Public Key
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Amount of Commitment
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Commitment) Reset() {
	*x = Commitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commitment) ProtoMessage() {}

func (x *Commitment) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commitment.ProtoReflect.Descriptor instead.
func (*Commitment) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{11}
}

func (x *Commitment) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Commitment) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *Commitment) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// [Example]
// {
// "timeout": 1687180000
// }
type TimeoutCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp of timeout datetime.
	Timeout uint64 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TimeoutCondition) Reset() {
	*x = TimeoutCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutCondition) ProtoMessage() {}

func (x *TimeoutCondition) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutCondition.ProtoReflect.Descriptor instead.
func (*TimeoutCondition) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{12}
}

func (x *TimeoutCondition) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// [Example]
// {
// "presenter": "PresenterPublicKey",
// "hash": "13550350a8681c84"
// }
type HashCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key of the participant that will present the secret.
	Presenter string `protobuf:"bytes,1,opt,name=presenter,proto3" json:"presenter,omitempty"`
	// Hash of the secret, populated by the presenter during contract
	// negotiation.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// OID of algorithm used to generate hash.
	AlgorithmOid []byte `protobuf:"bytes,3,opt,name=algorithm_oid,json=algorithmOid,proto3" json:"algorithm_oid,omitempty"`
}

func (x *HashCondition) Reset() {
	*x = HashCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashCondition) ProtoMessage() {}

func (x *HashCondition) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashCondition.ProtoReflect.Descriptor instead.
func (*HashCondition) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{13}
}

func (x *HashCondition) GetPresenter() string {
	if x != nil {
		return x.Presenter
	}
	return ""
}

func (x *HashCondition) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *HashCondition) GetAlgorithmOid() []byte {
	if x != nil {
		return x.AlgorithmOid
	}
	return nil
}

// [Example]
// {
// "condition": {
// "hash": {
// "presenter": "PresenterPublicKey",
// "hash": "13550350a8681c84"
// }
// }
// }
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Condition Options.
	//
	// Types that are assignable to Condition:
	//
	//	*Condition_Timeout
	//	*Condition_Hash
	Condition isCondition_Condition `protobuf_oneof:"condition"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{14}
}

func (m *Condition) GetCondition() isCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Condition) GetTimeout() *TimeoutCondition {
	if x, ok := x.GetCondition().(*Condition_Timeout); ok {
		return x.Timeout
	}
	return nil
}

func (x *Condition) GetHash() *HashCondition {
	if x, ok := x.GetCondition().(*Condition_Hash); ok {
		return x.Hash
	}
	return nil
}

type isCondition_Condition interface {
	isCondition_Condition()
}

type Condition_Timeout struct {
	// Timeout Condition Option.
	Timeout *TimeoutCondition `protobuf:"bytes,1,opt,name=timeout,proto3,oneof"`
}

type Condition_Hash struct {
	// Hash Condition Option.
	Hash *HashCondition `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*Condition_Timeout) isCondition_Condition() {}

func (*Condition_Hash) isCondition_Condition() {}

// [Example]
// {
// "urn": "urn:knox:swap:001",
// "id": "CONTRACT_ID",
// "commitments": [
// {
// "sender": "zSender1PublicKey",
// "recipient": "zRecipient1PublicKey",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// }
// },
// {
// "sender": "zSender2PublicKey",
// "recipient": "zRecipient2PublicKey",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// }
// }
// ],
// "conditions": [
// {
// "condition": {
// "timeout": 1687180000
// }
// }
// ],
// "signatories": {
// "Key1": "BYTES=",
// "Key2": "BYTES="
// },
// "memo": "AtomicAssetSwap"
// }
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URN describing contract type.
	Urn string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	// Contract ID.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// List of contract commitments.
	Commitments []*Commitment `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// List of contract conditions.
	Conditions []*Condition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// map<pk_signer, signature>
	Signatories map[string][]byte `protobuf:"bytes,5,rep,name=signatories,proto3" json:"signatories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Human-meaningful message about the purpose of this contract.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{15}
}

func (x *Contract) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *Contract) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contract) GetCommitments() []*Commitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *Contract) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Contract) GetSignatories() map[string][]byte {
	if x != nil {
		return x.Signatories
	}
	return nil
}

func (x *Contract) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// [Example]
// {
// "distribution": {
// "value": [
// {
// "key": 20,
// "value": 2
// },
// {
// "key": 50,
// "value": 1
// },
// {
// "key": 10,
// "value": 1
// }
// ]
// },
// "decimals": 2,
// "currency_code": "USD",
// "issuer": {
// "signature_system": 1,
// "verifier": "BytesLengthOfSenderVerifierVariesByAlgo="
// },
// "recipient": {
// "signature_system": 1,
// "verifier": "AlgoVariesRecipientVerifierBytesLen="
// },
// "signature_system": 1
// }
type MintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Distribution of file denominations.
	Distribution *Distribution `protobuf:"bytes,1,opt,name=distribution,proto3" json:"distribution,omitempty"`
	// Decimals.
	Decimals uint32 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// Currency code.
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Dynamic Verifier of the Issuer.
	Issuer *DynamicVerifier `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Dynamic Verifier of the Recipient.
	Recipient *DynamicVerifier `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Signature System.
	SignatureSystem SignatureSystem `protobuf:"varint,6,opt,name=signature_system,json=signatureSystem,proto3,enum=common.SignatureSystem" json:"signature_system,omitempty"`
}

func (x *MintRequest) Reset() {
	*x = MintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_packet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintRequest) ProtoMessage() {}

func (x *MintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_packet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintRequest.ProtoReflect.Descriptor instead.
func (*MintRequest) Descriptor() ([]byte, []int) {
	return file_common_v1_packet_proto_rawDescGZIP(), []int{16}
}

func (x *MintRequest) GetDistribution() *Distribution {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *MintRequest) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *MintRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *MintRequest) GetIssuer() *DynamicVerifier {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *MintRequest) GetRecipient() *DynamicVerifier {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *MintRequest) GetSignatureSystem() SignatureSystem {
	if x != nil {
		return x.SignatureSystem
	}
	return SignatureSystem_SIGNATURE_SYSTEM_UNSPECIFIED
}

var File_common_v1_packet_proto protoreflect.FileDescriptor

var file_common_v1_packet_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x06, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x99,
	0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65,
	0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x65, 0x74, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x55, 0x65, 0x74, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x11, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x73, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x3e, 0x0a, 0x14, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x22, 0xfc,
	0x01, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x22, 0x7b, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x22, 0x85, 0x01,
	0x0a, 0x15, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x0c, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x52, 0x0a, 0x10,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x63, 0x6b, 0x2e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x03, 0x22, 0xdc, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x02, 0x22, 0x6a, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x2c, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x66,
	0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x4f, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xae, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2a, 0xc9, 0x09, 0x0a, 0x0a,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x72, 0x6f, 0x70, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73,
	0x6f, 0x72, 0x79, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10,
	0x66, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d,
	0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6d,
	0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10, 0x68, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x10, 0x6d, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x6e, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73,
	0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x6f, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x63, 0x6b, 0x10, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x71, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x75, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x76, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10, 0x77, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f,
	0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x78, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xc8, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x10, 0xca, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0xac, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x10, 0x90, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x10, 0xf4, 0x03, 0x12, 0x10, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x10, 0xf5, 0x03, 0x12, 0x11,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x63, 0x6b, 0x10, 0xf6,
	0x03, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xf7, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xf8, 0x03,
	0x12, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xbc, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbd,
	0x05, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xe8,
	0x07, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x50, 0x41, 0x63, 0x6b, 0x10, 0xe9, 0x07, 0x12, 0x0b, 0x0a,
	0x06, 0x53, 0x50, 0x4e, 0x61, 0x63, 0x6b, 0x10, 0xea, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xeb, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x50, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0xec, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0xcc, 0x08, 0x12, 0x0a, 0x0a, 0x05, 0x46, 0x43, 0x41, 0x63, 0x6b,
	0x10, 0xcd, 0x08, 0x12, 0x0b, 0x0a, 0x06, 0x46, 0x43, 0x4e, 0x61, 0x63, 0x6b, 0x10, 0xce, 0x08,
	0x12, 0x0e, 0x0a, 0x09, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x94, 0x0a,
	0x12, 0x0a, 0x0a, 0x05, 0x43, 0x50, 0x41, 0x63, 0x6b, 0x10, 0x95, 0x0a, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x50, 0x4e, 0x61, 0x63, 0x6b, 0x10, 0x96, 0x0a, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x50, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x97, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x50,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x10, 0x98, 0x0a, 0x12, 0x17,
	0x0a, 0x12, 0x43, 0x50, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x10, 0x99, 0x0a, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x50, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x9a, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x9c, 0x0a, 0x12, 0x12, 0x0a, 0x0d,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x9d, 0x0a,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x50, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x10, 0x9e, 0x0a, 0x2a, 0x27, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x32,
	0x35, 0x36, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x01,
	0x2a, 0x93, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x41,
	0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6e, 0x6f, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x73, 0x64, 0x6b,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_packet_proto_rawDescOnce sync.Once
	file_common_v1_packet_proto_rawDescData = file_common_v1_packet_proto_rawDesc
)

func file_common_v1_packet_proto_rawDescGZIP() []byte {
	file_common_v1_packet_proto_rawDescOnce.Do(func() {
		file_common_v1_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_packet_proto_rawDescData)
	})
	return file_common_v1_packet_proto_rawDescData
}

var file_common_v1_packet_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_common_v1_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_common_v1_packet_proto_goTypes = []interface{}{
	(PacketType)(0),                        // 0: common.PacketType
	(HashAlgorithm)(0),                     // 1: common.HashAlgorithm
	(ContractType)(0),                      // 2: common.ContractType
	(SimplePaymentNack_RejectionReason)(0), // 3: common.SimplePaymentNack.RejectionReason
	(FundsChangeNack_RejectionReason)(0),   // 4: common.FundsChangeNack.RejectionReason
	(CancelTransaction_RejectionReason)(0), // 5: common.CancelTransaction.RejectionReason
	(*Packet)(nil),                         // 6: common.Packet
	(*TransactionHeader)(nil),              // 7: common.TransactionHeader
	(*BatchedPromissory)(nil),              // 8: common.BatchedPromissory
	(*SimplePaymentRequest)(nil),           // 9: common.SimplePaymentRequest
	(*SimplePaymentAck)(nil),               // 10: common.SimplePaymentAck
	(*SimplePaymentNack)(nil),              // 11: common.SimplePaymentNack
	(*SimplePaymentResponse)(nil),          // 12: common.SimplePaymentResponse
	(*FundsChangeRequest)(nil),             // 13: common.FundsChangeRequest
	(*FundsChangeAck)(nil),                 // 14: common.FundsChangeAck
	(*FundsChangeNack)(nil),                // 15: common.FundsChangeNack
	(*CancelTransaction)(nil),              // 16: common.CancelTransaction
	(*Commitment)(nil),                     // 17: common.Commitment
	(*TimeoutCondition)(nil),               // 18: common.TimeoutCondition
	(*HashCondition)(nil),                  // 19: common.HashCondition
	(*Condition)(nil),                      // 20: common.Condition
	(*Contract)(nil),                       // 21: common.Contract
	(*MintRequest)(nil),                    // 22: common.MintRequest
	nil,                                    // 23: common.Contract.SignatoriesEntry
	(*DynamicVerifier)(nil),                // 24: common.DynamicVerifier
	(*Amount)(nil),                         // 25: common.Amount
	(*Distribution)(nil),                   // 26: common.Distribution
	(SignatureSystem)(0),                   // 27: common.SignatureSystem
}
var file_common_v1_packet_proto_depIdxs = []int32{
	0,  // 0: common.Packet.packet_type:type_name -> common.PacketType
	24, // 1: common.Packet.sender:type_name -> common.DynamicVerifier
	24, // 2: common.Packet.recipient:type_name -> common.DynamicVerifier
	7,  // 3: common.Packet.transaction_header:type_name -> common.TransactionHeader
	24, // 4: common.TransactionHeader.starter:type_name -> common.DynamicVerifier
	24, // 5: common.TransactionHeader.responder:type_name -> common.DynamicVerifier
	25, // 6: common.SimplePaymentRequest.amount:type_name -> common.Amount
	3,  // 7: common.SimplePaymentNack.rejection_reason:type_name -> common.SimplePaymentNack.RejectionReason
	25, // 8: common.SimplePaymentResponse.received_amount:type_name -> common.Amount
	25, // 9: common.FundsChangeRequest.gross_amount:type_name -> common.Amount
	25, // 10: common.FundsChangeRequest.exact_amount:type_name -> common.Amount
	25, // 11: common.FundsChangeRequest.fees:type_name -> common.Amount
	4,  // 12: common.FundsChangeNack.rejection_reason:type_name -> common.FundsChangeNack.RejectionReason
	5,  // 13: common.CancelTransaction.rejection_reason:type_name -> common.CancelTransaction.RejectionReason
	25, // 14: common.Commitment.amount:type_name -> common.Amount
	18, // 15: common.Condition.timeout:type_name -> common.TimeoutCondition
	19, // 16: common.Condition.hash:type_name -> common.HashCondition
	17, // 17: common.Contract.commitments:type_name -> common.Commitment
	20, // 18: common.Contract.conditions:type_name -> common.Condition
	23, // 19: common.Contract.signatories:type_name -> common.Contract.SignatoriesEntry
	26, // 20: common.MintRequest.distribution:type_name -> common.Distribution
	24, // 21: common.MintRequest.issuer:type_name -> common.DynamicVerifier
	24, // 22: common.MintRequest.recipient:type_name -> common.DynamicVerifier
	27, // 23: common.MintRequest.signature_system:type_name -> common.SignatureSystem
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_common_v1_packet_proto_init() }
func file_common_v1_packet_proto_init() {
	if File_common_v1_packet_proto != nil {
		return
	}
	file_common_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_v1_packet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchedPromissory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimplePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimplePaymentAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimplePaymentNack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimplePaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundsChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundsChangeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundsChangeNack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_packet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_v1_packet_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Condition_Timeout)(nil),
		(*Condition_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_packet_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_packet_proto_goTypes,
		DependencyIndexes: file_common_v1_packet_proto_depIdxs,
		EnumInfos:         file_common_v1_packet_proto_enumTypes,
		MessageInfos:      file_common_v1_packet_proto_msgTypes,
	}.Build()
	File_common_v1_packet_proto = out.File
	file_common_v1_packet_proto_rawDesc = nil
	file_common_v1_packet_proto_goTypes = nil
	file_common_v1_packet_proto_depIdxs = nil
}
