// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TreasuryClient is the client API for Treasury service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreasuryClient interface {
	// Start a new remittance, passing in a streamed request and getting back a streamed response.
	Remit(ctx context.Context, opts ...grpc.CallOption) (Treasury_RemitClient, error)
	// Get a list of denomination counts of the promissories held in the treasury vault.
	GetSupply(ctx context.Context, in *GetSupplyRequest, opts ...grpc.CallOption) (*GetSupplyResponse, error)
}

type treasuryClient struct {
	cc grpc.ClientConnInterface
}

func NewTreasuryClient(cc grpc.ClientConnInterface) TreasuryClient {
	return &treasuryClient{cc}
}

func (c *treasuryClient) Remit(ctx context.Context, opts ...grpc.CallOption) (Treasury_RemitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Treasury_ServiceDesc.Streams[0], "/treasury.Treasury/Remit", opts...)
	if err != nil {
		return nil, err
	}
	x := &treasuryRemitClient{stream}
	return x, nil
}

type Treasury_RemitClient interface {
	Send(*RemittanceRequest) error
	Recv() (*RemittanceResponse, error)
	grpc.ClientStream
}

type treasuryRemitClient struct {
	grpc.ClientStream
}

func (x *treasuryRemitClient) Send(m *RemittanceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *treasuryRemitClient) Recv() (*RemittanceResponse, error) {
	m := new(RemittanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *treasuryClient) GetSupply(ctx context.Context, in *GetSupplyRequest, opts ...grpc.CallOption) (*GetSupplyResponse, error) {
	out := new(GetSupplyResponse)
	err := c.cc.Invoke(ctx, "/treasury.Treasury/GetSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreasuryServer is the server API for Treasury service.
// All implementations must embed UnimplementedTreasuryServer
// for forward compatibility
type TreasuryServer interface {
	// Start a new remittance, passing in a streamed request and getting back a streamed response.
	Remit(Treasury_RemitServer) error
	// Get a list of denomination counts of the promissories held in the treasury vault.
	GetSupply(context.Context, *GetSupplyRequest) (*GetSupplyResponse, error)
	mustEmbedUnimplementedTreasuryServer()
}

// UnimplementedTreasuryServer must be embedded to have forward compatible implementations.
type UnimplementedTreasuryServer struct {
}

func (UnimplementedTreasuryServer) Remit(Treasury_RemitServer) error {
	return status.Errorf(codes.Unimplemented, "method Remit not implemented")
}
func (UnimplementedTreasuryServer) GetSupply(context.Context, *GetSupplyRequest) (*GetSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupply not implemented")
}
func (UnimplementedTreasuryServer) mustEmbedUnimplementedTreasuryServer() {}

// UnsafeTreasuryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreasuryServer will
// result in compilation errors.
type UnsafeTreasuryServer interface {
	mustEmbedUnimplementedTreasuryServer()
}

func RegisterTreasuryServer(s grpc.ServiceRegistrar, srv TreasuryServer) {
	s.RegisterService(&Treasury_ServiceDesc, srv)
}

func _Treasury_Remit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TreasuryServer).Remit(&treasuryRemitServer{stream})
}

type Treasury_RemitServer interface {
	Send(*RemittanceResponse) error
	Recv() (*RemittanceRequest, error)
	grpc.ServerStream
}

type treasuryRemitServer struct {
	grpc.ServerStream
}

func (x *treasuryRemitServer) Send(m *RemittanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *treasuryRemitServer) Recv() (*RemittanceRequest, error) {
	m := new(RemittanceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Treasury_GetSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuryServer).GetSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treasury.Treasury/GetSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuryServer).GetSupply(ctx, req.(*GetSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Treasury_ServiceDesc is the grpc.ServiceDesc for Treasury service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Treasury_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "treasury.Treasury",
	HandlerType: (*TreasuryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupply",
			Handler:    _Treasury_GetSupply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Remit",
			Handler:       _Treasury_Remit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "treasury/v1/treasury.proto",
}
