// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	// Transfers digital banknotes from a custodial wallet to a given recipient public key.
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
	// manage many customer custodial wallets.
	CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*CreateOwnerResponse, error)
	// Creates a wallet for a given owner, which can manage the wallet.
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	// List all wallets for a given owner.
	ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	// List the digital banknotes for a wallet.
	ListAssetFiles(ctx context.Context, in *ListAssetFilesRequest, opts ...grpc.CallOption) (*ListAssetFilesResponse, error)
	// List the balances of each currency in the wallet.
	ListWalletBalances(ctx context.Context, in *ListWalletBalancesRequest, opts ...grpc.CallOption) (*ListWalletBalancesResponse, error)
	// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
	// issuance limit.
	Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error)
	// Lists the W3C Verifiable Credentials of the wallet subject.
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
	// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
	AddCredential(ctx context.Context, in *AddCredentialRequest, opts ...grpc.CallOption) (*AddCredentialResponse, error)
	// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
	AssociateWallet(ctx context.Context, in *AssociateWalletRequest, opts ...grpc.CallOption) (*AssociateWalletResponse, error)
	// Returns the JSON Verifiable Presentation containing the PII of the subject.
	RequestPresentation(ctx context.Context, in *RequestPresentationRequest, opts ...grpc.CallOption) (*RequestPresentationResponse, error)
	// Lists more details about balances in a wallet such as how much funds are available vs reserved.
	ListWalletBalanceDetails(ctx context.Context, in *ListWalletBalanceDetailsRequest, opts ...grpc.CallOption) (*ListWalletBalanceDetailsResponse, error)
	// List transactions
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// Get detailed information about a transaction.
	GetTransactionDetail(ctx context.Context, in *GetTransactionDetailRequest, opts ...grpc.CallOption) (*GetTransactionDetailResponse, error)
	// Create a new transaction
	PrepareTransaction(ctx context.Context, in *PrepareTransactionRequest, opts ...grpc.CallOption) (*PrepareTransactionResponse, error)
	// Attempts to start an atomic asset swap. The call immediately returns with a `status` and `uetr` that can
	// be used to query more information about the transaction.
	PrepareAtomicAssetSwap(ctx context.Context, in *PrepareAtomicAssetSwapRequest, opts ...grpc.CallOption) (*PrepareAtomicAssetSwapResponse, error)
	// Attempts to start a cross border payment. The call immediately returns with a `status` and `uetr` that can
	// be used to query more information about the transaction.
	PrepareCrossBorderPayment(ctx context.Context, in *PrepareCrossBorderPaymentRequest, opts ...grpc.CallOption) (*PrepareCrossBorderPaymentResponse, error)
	// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
	// to query more information about the transaction.
	PrepareFundsChange(ctx context.Context, in *PrepareFundsChangeRequest, opts ...grpc.CallOption) (*PrepareFundsChangeResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*CreateOwnerResponse, error) {
	out := new(CreateOwnerResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/CreateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListAssetFiles(ctx context.Context, in *ListAssetFilesRequest, opts ...grpc.CallOption) (*ListAssetFilesResponse, error) {
	out := new(ListAssetFilesResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/ListAssetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListWalletBalances(ctx context.Context, in *ListWalletBalancesRequest, opts ...grpc.CallOption) (*ListWalletBalancesResponse, error) {
	out := new(ListWalletBalancesResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/ListWalletBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error) {
	out := new(RedeemResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AddCredential(ctx context.Context, in *AddCredentialRequest, opts ...grpc.CallOption) (*AddCredentialResponse, error) {
	out := new(AddCredentialResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/AddCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AssociateWallet(ctx context.Context, in *AssociateWalletRequest, opts ...grpc.CallOption) (*AssociateWalletResponse, error) {
	out := new(AssociateWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/AssociateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RequestPresentation(ctx context.Context, in *RequestPresentationRequest, opts ...grpc.CallOption) (*RequestPresentationResponse, error) {
	out := new(RequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/RequestPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListWalletBalanceDetails(ctx context.Context, in *ListWalletBalanceDetailsRequest, opts ...grpc.CallOption) (*ListWalletBalanceDetailsResponse, error) {
	out := new(ListWalletBalanceDetailsResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/ListWalletBalanceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionDetail(ctx context.Context, in *GetTransactionDetailRequest, opts ...grpc.CallOption) (*GetTransactionDetailResponse, error) {
	out := new(GetTransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/GetTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PrepareTransaction(ctx context.Context, in *PrepareTransactionRequest, opts ...grpc.CallOption) (*PrepareTransactionResponse, error) {
	out := new(PrepareTransactionResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/PrepareTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PrepareAtomicAssetSwap(ctx context.Context, in *PrepareAtomicAssetSwapRequest, opts ...grpc.CallOption) (*PrepareAtomicAssetSwapResponse, error) {
	out := new(PrepareAtomicAssetSwapResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/PrepareAtomicAssetSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PrepareCrossBorderPayment(ctx context.Context, in *PrepareCrossBorderPaymentRequest, opts ...grpc.CallOption) (*PrepareCrossBorderPaymentResponse, error) {
	out := new(PrepareCrossBorderPaymentResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/PrepareCrossBorderPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PrepareFundsChange(ctx context.Context, in *PrepareFundsChangeRequest, opts ...grpc.CallOption) (*PrepareFundsChangeResponse, error) {
	out := new(PrepareFundsChangeResponse)
	err := c.cc.Invoke(ctx, "/wallet_api.v1.WalletService/PrepareFundsChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility
type WalletServiceServer interface {
	// Transfers digital banknotes from a custodial wallet to a given recipient public key.
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// Creates an owned and API key for access to future custodial wallet interactions.  Ex Could be a bank that may
	// manage many customer custodial wallets.
	CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerResponse, error)
	// Creates a wallet for a given owner, which can manage the wallet.
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	// List all wallets for a given owner.
	ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error)
	// List the digital banknotes for a wallet.
	ListAssetFiles(context.Context, *ListAssetFilesRequest) (*ListAssetFilesResponse, error)
	// List the balances of each currency in the wallet.
	ListWalletBalances(context.Context, *ListWalletBalancesRequest) (*ListWalletBalancesResponse, error)
	// Sends digital banknotes from the Issuer wallet to the Authority for redemption of digital banknotes and increase
	// issuance limit.
	Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error)
	// Lists the W3C Verifiable Credentials of the wallet subject.
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	// Adds the specified W3C Verifiable Credential type for the wallet by calling out to the Credential Adapter. Based on
	// the bearer JWT token provided by User Management to ensure the caller has been authenticated and authorized.
	AddCredential(context.Context, *AddCredentialRequest) (*AddCredentialResponse, error)
	// Associates the wallet with the account specified in the bearer JWT token provided by User Management.
	AssociateWallet(context.Context, *AssociateWalletRequest) (*AssociateWalletResponse, error)
	// Returns the JSON Verifiable Presentation containing the PII of the subject.
	RequestPresentation(context.Context, *RequestPresentationRequest) (*RequestPresentationResponse, error)
	// Lists more details about balances in a wallet such as how much funds are available vs reserved.
	ListWalletBalanceDetails(context.Context, *ListWalletBalanceDetailsRequest) (*ListWalletBalanceDetailsResponse, error)
	// List transactions
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	// Get detailed information about a transaction.
	GetTransactionDetail(context.Context, *GetTransactionDetailRequest) (*GetTransactionDetailResponse, error)
	// Create a new transaction
	PrepareTransaction(context.Context, *PrepareTransactionRequest) (*PrepareTransactionResponse, error)
	// Attempts to start an atomic asset swap. The call immediately returns with a `status` and `uetr` that can
	// be used to query more information about the transaction.
	PrepareAtomicAssetSwap(context.Context, *PrepareAtomicAssetSwapRequest) (*PrepareAtomicAssetSwapResponse, error)
	// Attempts to start a cross border payment. The call immediately returns with a `status` and `uetr` that can
	// be used to query more information about the transaction.
	PrepareCrossBorderPayment(context.Context, *PrepareCrossBorderPaymentRequest) (*PrepareCrossBorderPaymentResponse, error)
	// Attempts to start a funds change request. The call immediately returns with a `status` and `uetr` that can be used
	// to query more information about the transaction.
	PrepareFundsChange(context.Context, *PrepareFundsChangeRequest) (*PrepareFundsChangeResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (UnimplementedWalletServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedWalletServiceServer) CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedWalletServiceServer) ListAssetFiles(context.Context, *ListAssetFilesRequest) (*ListAssetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetFiles not implemented")
}
func (UnimplementedWalletServiceServer) ListWalletBalances(context.Context, *ListWalletBalancesRequest) (*ListWalletBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletBalances not implemented")
}
func (UnimplementedWalletServiceServer) Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedWalletServiceServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedWalletServiceServer) AddCredential(context.Context, *AddCredentialRequest) (*AddCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredential not implemented")
}
func (UnimplementedWalletServiceServer) AssociateWallet(context.Context, *AssociateWalletRequest) (*AssociateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateWallet not implemented")
}
func (UnimplementedWalletServiceServer) RequestPresentation(context.Context, *RequestPresentationRequest) (*RequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPresentation not implemented")
}
func (UnimplementedWalletServiceServer) ListWalletBalanceDetails(context.Context, *ListWalletBalanceDetailsRequest) (*ListWalletBalanceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletBalanceDetails not implemented")
}
func (UnimplementedWalletServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionDetail(context.Context, *GetTransactionDetailRequest) (*GetTransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetail not implemented")
}
func (UnimplementedWalletServiceServer) PrepareTransaction(context.Context, *PrepareTransactionRequest) (*PrepareTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTransaction not implemented")
}
func (UnimplementedWalletServiceServer) PrepareAtomicAssetSwap(context.Context, *PrepareAtomicAssetSwapRequest) (*PrepareAtomicAssetSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAtomicAssetSwap not implemented")
}
func (UnimplementedWalletServiceServer) PrepareCrossBorderPayment(context.Context, *PrepareCrossBorderPaymentRequest) (*PrepareCrossBorderPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCrossBorderPayment not implemented")
}
func (UnimplementedWalletServiceServer) PrepareFundsChange(context.Context, *PrepareFundsChangeRequest) (*PrepareFundsChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareFundsChange not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/CreateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateOwner(ctx, req.(*CreateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListWallets(ctx, req.(*ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListAssetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListAssetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/ListAssetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListAssetFiles(ctx, req.(*ListAssetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListWalletBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListWalletBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/ListWalletBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListWalletBalances(ctx, req.(*ListWalletBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Redeem(ctx, req.(*RedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AddCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AddCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/AddCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AddCredential(ctx, req.(*AddCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AssociateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AssociateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/AssociateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AssociateWallet(ctx, req.(*AssociateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RequestPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RequestPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/RequestPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RequestPresentation(ctx, req.(*RequestPresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListWalletBalanceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletBalanceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListWalletBalanceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/ListWalletBalanceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListWalletBalanceDetails(ctx, req.(*ListWalletBalanceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/GetTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionDetail(ctx, req.(*GetTransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PrepareTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PrepareTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/PrepareTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PrepareTransaction(ctx, req.(*PrepareTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PrepareAtomicAssetSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareAtomicAssetSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PrepareAtomicAssetSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/PrepareAtomicAssetSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PrepareAtomicAssetSwap(ctx, req.(*PrepareAtomicAssetSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PrepareCrossBorderPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareCrossBorderPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PrepareCrossBorderPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/PrepareCrossBorderPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PrepareCrossBorderPayment(ctx, req.(*PrepareCrossBorderPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PrepareFundsChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareFundsChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PrepareFundsChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_api.v1.WalletService/PrepareFundsChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PrepareFundsChange(ctx, req.(*PrepareFundsChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet_api.v1.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _WalletService_Transfer_Handler,
		},
		{
			MethodName: "CreateOwner",
			Handler:    _WalletService_CreateOwner_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _WalletService_ListWallets_Handler,
		},
		{
			MethodName: "ListAssetFiles",
			Handler:    _WalletService_ListAssetFiles_Handler,
		},
		{
			MethodName: "ListWalletBalances",
			Handler:    _WalletService_ListWalletBalances_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _WalletService_Redeem_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _WalletService_ListCredentials_Handler,
		},
		{
			MethodName: "AddCredential",
			Handler:    _WalletService_AddCredential_Handler,
		},
		{
			MethodName: "AssociateWallet",
			Handler:    _WalletService_AssociateWallet_Handler,
		},
		{
			MethodName: "RequestPresentation",
			Handler:    _WalletService_RequestPresentation_Handler,
		},
		{
			MethodName: "ListWalletBalanceDetails",
			Handler:    _WalletService_ListWalletBalanceDetails_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _WalletService_ListTransactions_Handler,
		},
		{
			MethodName: "GetTransactionDetail",
			Handler:    _WalletService_GetTransactionDetail_Handler,
		},
		{
			MethodName: "PrepareTransaction",
			Handler:    _WalletService_PrepareTransaction_Handler,
		},
		{
			MethodName: "PrepareAtomicAssetSwap",
			Handler:    _WalletService_PrepareAtomicAssetSwap_Handler,
		},
		{
			MethodName: "PrepareCrossBorderPayment",
			Handler:    _WalletService_PrepareCrossBorderPayment_Handler,
		},
		{
			MethodName: "PrepareFundsChange",
			Handler:    _WalletService_PrepareFundsChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet_api/v1/wallet.proto",
}
