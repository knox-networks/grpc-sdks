// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: wallet_api/v1/wallet.proto

package v1

import (
	v1 "github.com/knox-networks/grpc-sdks/sdk/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of Simple Payment
type PrepareSimplePaymentResponse_Status int32

const (
	// Simple Payment Unspecified.
	PrepareSimplePaymentResponse_STATUS_UNSPECIFIED PrepareSimplePaymentResponse_Status = 0
	// Simple Payment Successful.
	PrepareSimplePaymentResponse_STATUS_SUCCESS PrepareSimplePaymentResponse_Status = 1
	// Simple Payment Currently Needs Change.
	PrepareSimplePaymentResponse_STATUS_NEED_CHANGE PrepareSimplePaymentResponse_Status = 2
	// Simple Payment Has Insufficient Funds.
	PrepareSimplePaymentResponse_STATUS_INSUFFICIENT_FUNDS PrepareSimplePaymentResponse_Status = 3
)

// Enum value maps for PrepareSimplePaymentResponse_Status.
var (
	PrepareSimplePaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NEED_CHANGE",
		3: "STATUS_INSUFFICIENT_FUNDS",
	}
	PrepareSimplePaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_SUCCESS":            1,
		"STATUS_NEED_CHANGE":        2,
		"STATUS_INSUFFICIENT_FUNDS": 3,
	}
)

func (x PrepareSimplePaymentResponse_Status) Enum() *PrepareSimplePaymentResponse_Status {
	p := new(PrepareSimplePaymentResponse_Status)
	*p = x
	return p
}

func (x PrepareSimplePaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareSimplePaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[0].Descriptor()
}

func (PrepareSimplePaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[0]
}

func (x PrepareSimplePaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareSimplePaymentResponse_Status.Descriptor instead.
func (PrepareSimplePaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{26, 0}
}

// Prepare Funds Change Status.
type PrepareFundsChangeResponse_Status int32

const (
	// Simple Payment Unspecified.
	PrepareFundsChangeResponse_STATUS_UNSPECIFIED PrepareFundsChangeResponse_Status = 0
	// Simple Payment Successful.
	PrepareFundsChangeResponse_STATUS_SUCCESS PrepareFundsChangeResponse_Status = 1
	// Simple Payment Has Insufficient Funds.
	PrepareFundsChangeResponse_STATUS_INSUFFICIENT_FUNDS PrepareFundsChangeResponse_Status = 2
	// Simple Payment Funds Present Noop.
	PrepareFundsChangeResponse_STATUS_FUNDS_PRESENT_NOOP PrepareFundsChangeResponse_Status = 3
)

// Enum value maps for PrepareFundsChangeResponse_Status.
var (
	PrepareFundsChangeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_INSUFFICIENT_FUNDS",
		3: "STATUS_FUNDS_PRESENT_NOOP",
	}
	PrepareFundsChangeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_SUCCESS":            1,
		"STATUS_INSUFFICIENT_FUNDS": 2,
		"STATUS_FUNDS_PRESENT_NOOP": 3,
	}
)

func (x PrepareFundsChangeResponse_Status) Enum() *PrepareFundsChangeResponse_Status {
	p := new(PrepareFundsChangeResponse_Status)
	*p = x
	return p
}

func (x PrepareFundsChangeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareFundsChangeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[1].Descriptor()
}

func (PrepareFundsChangeResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[1]
}

func (x PrepareFundsChangeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareFundsChangeResponse_Status.Descriptor instead.
func (PrepareFundsChangeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{28, 0}
}

// Prepare Contract Transaction Status.
type PrepareContractTransactionResponse_Status int32

const (
	// Status Unspecified.
	PrepareContractTransactionResponse_UNSPECIFIED PrepareContractTransactionResponse_Status = 0
	// Status Successful.
	PrepareContractTransactionResponse_SUCCESS PrepareContractTransactionResponse_Status = 1
	// Status Unsuccessful.
	PrepareContractTransactionResponse_FAILURE PrepareContractTransactionResponse_Status = 2
)

// Enum value maps for PrepareContractTransactionResponse_Status.
var (
	PrepareContractTransactionResponse_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCESS",
		2: "FAILURE",
	}
	PrepareContractTransactionResponse_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUCCESS":     1,
		"FAILURE":     2,
	}
)

func (x PrepareContractTransactionResponse_Status) Enum() *PrepareContractTransactionResponse_Status {
	p := new(PrepareContractTransactionResponse_Status)
	*p = x
	return p
}

func (x PrepareContractTransactionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareContractTransactionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[2].Descriptor()
}

func (PrepareContractTransactionResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[2]
}

func (x PrepareContractTransactionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareContractTransactionResponse_Status.Descriptor instead.
func (PrepareContractTransactionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{30, 0}
}

// Balance Type.
type BalanceDetail_Kind int32

const (
	// Indicates a balance that is available to be transferred
	BalanceDetail_KIND_AVAILABLE BalanceDetail_Kind = 0
	// Indicates a balance that has been earmarked to be transferred
	BalanceDetail_KIND_RESERVED BalanceDetail_Kind = 1
)

// Enum value maps for BalanceDetail_Kind.
var (
	BalanceDetail_Kind_name = map[int32]string{
		0: "KIND_AVAILABLE",
		1: "KIND_RESERVED",
	}
	BalanceDetail_Kind_value = map[string]int32{
		"KIND_AVAILABLE": 0,
		"KIND_RESERVED":  1,
	}
)

func (x BalanceDetail_Kind) Enum() *BalanceDetail_Kind {
	p := new(BalanceDetail_Kind)
	*p = x
	return p
}

func (x BalanceDetail_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceDetail_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[3].Descriptor()
}

func (BalanceDetail_Kind) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[3]
}

func (x BalanceDetail_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceDetail_Kind.Descriptor instead.
func (BalanceDetail_Kind) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{42, 0}
}

// Prepare Contract Transaction Status.
type PrepareAtomicAssetSwapResponse_Status int32

const (
	// Status Unspecified.
	PrepareAtomicAssetSwapResponse_UNSPECIFIED PrepareAtomicAssetSwapResponse_Status = 0
	// Status Successful.
	PrepareAtomicAssetSwapResponse_SUCCESS PrepareAtomicAssetSwapResponse_Status = 1
	// Status Unsuccessful.
	PrepareAtomicAssetSwapResponse_FAILURE PrepareAtomicAssetSwapResponse_Status = 2
)

// Enum value maps for PrepareAtomicAssetSwapResponse_Status.
var (
	PrepareAtomicAssetSwapResponse_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCESS",
		2: "FAILURE",
	}
	PrepareAtomicAssetSwapResponse_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUCCESS":     1,
		"FAILURE":     2,
	}
)

func (x PrepareAtomicAssetSwapResponse_Status) Enum() *PrepareAtomicAssetSwapResponse_Status {
	p := new(PrepareAtomicAssetSwapResponse_Status)
	*p = x
	return p
}

func (x PrepareAtomicAssetSwapResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareAtomicAssetSwapResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[4].Descriptor()
}

func (PrepareAtomicAssetSwapResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[4]
}

func (x PrepareAtomicAssetSwapResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareAtomicAssetSwapResponse_Status.Descriptor instead.
func (PrepareAtomicAssetSwapResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{48, 0}
}

// Prepare Cross Border Payment Status.
type PrepareCrossBorderPaymentResponse_Status int32

const (
	// Status Unspecified.
	PrepareCrossBorderPaymentResponse_UNSPECIFIED PrepareCrossBorderPaymentResponse_Status = 0
	// Status Successful.
	PrepareCrossBorderPaymentResponse_SUCCESS PrepareCrossBorderPaymentResponse_Status = 1
	// Status Unsuccessful.
	PrepareCrossBorderPaymentResponse_FAILURE PrepareCrossBorderPaymentResponse_Status = 2
)

// Enum value maps for PrepareCrossBorderPaymentResponse_Status.
var (
	PrepareCrossBorderPaymentResponse_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCESS",
		2: "FAILURE",
	}
	PrepareCrossBorderPaymentResponse_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUCCESS":     1,
		"FAILURE":     2,
	}
)

func (x PrepareCrossBorderPaymentResponse_Status) Enum() *PrepareCrossBorderPaymentResponse_Status {
	p := new(PrepareCrossBorderPaymentResponse_Status)
	*p = x
	return p
}

func (x PrepareCrossBorderPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareCrossBorderPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[5].Descriptor()
}

func (PrepareCrossBorderPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[5]
}

func (x PrepareCrossBorderPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareCrossBorderPaymentResponse_Status.Descriptor instead.
func (PrepareCrossBorderPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{50, 0}
}

// [Example]
// {
// "from_wallet_id": "zFromWalletIDMultibase58Encoded",
// "recipient_public_key": "zRecipientPublicKeyMultibase58Encoded",
// "promissory_id": "PROMISSORY_ID",
// "api_key": "API_KEY"
// }
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet sending the transfer.
	FromWalletId string `protobuf:"bytes,1,opt,name=from_wallet_id,json=fromWalletId,proto3" json:"from_wallet_id,omitempty"`
	// Public key of the recipient wallet.
	RecipientPublicKey string `protobuf:"bytes,2,opt,name=recipient_public_key,json=recipientPublicKey,proto3" json:"recipient_public_key,omitempty"`
	// ID of the digital bank note.
	PromissoryId string `protobuf:"bytes,3,opt,name=promissory_id,json=promissoryId,proto3" json:"promissory_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *TransferRequest) GetFromWalletId() string {
	if x != nil {
		return x.FromWalletId
	}
	return ""
}

func (x *TransferRequest) GetRecipientPublicKey() string {
	if x != nil {
		return x.RecipientPublicKey
	}
	return ""
}

func (x *TransferRequest) GetPromissoryId() string {
	if x != nil {
		return x.PromissoryId
	}
	return ""
}

func (x *TransferRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {}
type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{1}
}

// [Example]
// {
// "owner_name": "OWNER_NAME"
// }
type CreateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the wallet owner.
	OwnerName string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
}

func (x *CreateOwnerRequest) Reset() {
	*x = CreateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerRequest) ProtoMessage() {}

func (x *CreateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerRequest.ProtoReflect.Descriptor instead.
func (*CreateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOwnerRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

// [Example]
// {
// "owner_id": "eyJwtHeader.eyJwtPayload.Secret",
// "api_key": "API_KEY",
// "owner_name": "OWNER_NAME"
// }
type CreateOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the created owner of the wallet(s).
	OwnerId string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// API key given to the wallet owner as part of creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Name of the wallet owner.
	OwnerName string `protobuf:"bytes,3,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
}

func (x *CreateOwnerResponse) Reset() {
	*x = CreateOwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerResponse) ProtoMessage() {}

func (x *CreateOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerResponse.ProtoReflect.Descriptor instead.
func (*CreateOwnerResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOwnerResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateOwnerResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *CreateOwnerResponse) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

// [Example]
// {
// "wallet_name": "WALLET_NAME",
// "api_key": "API_KEY"
// }
type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "wallet_name": "WALLET_NAME",
// "public_key": "zPublicKeyMultibase58Encoded",
// "did": "did:method-name:zDIDMultibase58Encoded"
// }
type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,2,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateWalletResponse) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *CreateWalletResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]
// {
// "page": 0,
// "page_size": 10,
// "api_key": "API_KEY",
// "filters": {
// "filters": [
// {
// "field": "FIELD1",
// "operator": 0,
// "value": {
// "str_value": "STRINGVAL"
// }
// },
// {
// "field": "FIELD2",
// "operator": 0,
// "value": {
// "int_value": 10
// }
// },
// {
// "field": "FIELD3",
// "operator": 0,
// "value": {
// "bool_value": false
// }
// }
// ],
// "operator": 0
// },
// "sort_by": {
// "items": [
// {
// "field": "FIELD1",
// "direction": 0
// },
// {
// "field": "FIELD2",
// "direction": 0
// }
// ]
// }
// }
type ListWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Potential filters to apply to the list of wallets.
	Filters *v1.Filter `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
	// Potential sort to apply to the list of wallets.
	SortBy *v1.SortBy `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListWalletsRequest) Reset() {
	*x = ListWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsRequest) ProtoMessage() {}

func (x *ListWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *ListWalletsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWalletsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ListWalletsRequest) GetFilters() *v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListWalletsRequest) GetSortBy() *v1.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

// [Example]
// {
// "wallets": [
// {
// "wallet_name": "WALLET1",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "public_key": "zPublicKeyMultibase58Encoded",
// "did": "did:method-name:zDIDMultibase58Encoded"
// },
// {
// "wallet_name": "WALLET2",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "public_key": "zPublicKeyMultibase58Encoded",
// "did": "did:method-name:zDIDMultibase58Encoded"
// }
// ],
// "total_owned_wallets": 5
// }
type ListWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Wallet objects.
	Wallets []*ListWalletsResponse_Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
	// Number of wallets belonging to the owner.
	TotalOwnedWallets uint32 `protobuf:"varint,2,opt,name=total_owned_wallets,json=totalOwnedWallets,proto3" json:"total_owned_wallets,omitempty"`
}

func (x *ListWalletsResponse) Reset() {
	*x = ListWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse) ProtoMessage() {}

func (x *ListWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *ListWalletsResponse) GetWallets() []*ListWalletsResponse_Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *ListWalletsResponse) GetTotalOwnedWallets() uint32 {
	if x != nil {
		return x.TotalOwnedWallets
	}
	return 0
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY",
// "sort_by": {
// "items": [
// {
// "field": "FIELD1",
// "direction": 0
// },
// {
// "field": "FIELD2",
// "direction": 0
// }
// ]
// }
// }
type ListWalletBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Sorting Method on Wallet.
	SortBy *v1.SortBy `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListWalletBalancesRequest) Reset() {
	*x = ListWalletBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalancesRequest) ProtoMessage() {}

func (x *ListWalletBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListWalletBalancesRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *ListWalletBalancesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletBalancesRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ListWalletBalancesRequest) GetSortBy() *v1.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

// [Example]
// {
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "file_count": 57
// }
type WalletBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of a particular currency available in the wallet.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Total count of a particular banknote
	FileCount int64 `protobuf:"varint,2,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
}

func (x *WalletBalance) Reset() {
	*x = WalletBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletBalance) ProtoMessage() {}

func (x *WalletBalance) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletBalance.ProtoReflect.Descriptor instead.
func (*WalletBalance) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *WalletBalance) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WalletBalance) GetFileCount() int64 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

// [Example]
// {
// "balances": [
// {
// "amount": {
// "currency_code":"USD",
// "amount":5700,
// "decimals":2
// },
// "file_count": 57
// },
// {
// "amount": {
// "currency_code":"USD",
// "amount":500,
// "decimals":2
// },
// "file_count": 3
// }
// ]
// }
type ListWalletBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of wallet balances.
	Balances []*WalletBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *ListWalletBalancesResponse) Reset() {
	*x = ListWalletBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalancesResponse) ProtoMessage() {}

func (x *ListWalletBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalancesResponse.ProtoReflect.Descriptor instead.
func (*ListWalletBalancesResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *ListWalletBalancesResponse) GetBalances() []*WalletBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// [Example]
// {
// "page": 0,
// "page_size": 10000,
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY",
// "filters": {
// "filters": [
// {
// "field": "FIELD1",
// "operator": 0,
// "value": {
// "str_value": "STRINGVAL"
// }
// },
// {
// "field": "FIELD2",
// "operator": 0,
// "value": {
// "int_value": 10
// }
// },
// {
// "field": "FIELD3",
// "operator": 0,
// "value": {
// "bool_value": false
// }
// }
// ],
// "operator": 0
// },
// "sort_by": {
// "items": [
// {
// "field": "FIELD1",
// "direction": 0
// },
// {
// "field": "FIELD2",
// "direction": 0
// }
// ]
// }
// }
type ListAssetFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Filter by object notation relative to the `promissory` object. Supports filtering by amount, decimals & currency.
	Filters *v1.Filter `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
	// Sort by object notation relative to the `promissory` object. Supports sorting by amount, decimals & currency.
	SortBy *v1.SortBy `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListAssetFilesRequest) Reset() {
	*x = ListAssetFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetFilesRequest) ProtoMessage() {}

func (x *ListAssetFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetFilesRequest.ProtoReflect.Descriptor instead.
func (*ListAssetFilesRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *ListAssetFilesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAssetFilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAssetFilesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListAssetFilesRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ListAssetFilesRequest) GetFilters() *v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListAssetFilesRequest) GetSortBy() *v1.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

// [Example]
// {
// "total_owned_funds": 2,
// "funds": [
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "promissory": {
// "version": "0.1.0",
// "id": "PROMISSORY_ID",
// "currency": "USD",
// "amount": 100,
// "decimals": 2,
// "authority": "zAuthorityPublicKeyMultibase58Encoded",
// "issuer": "zIssuerPublicKeyMultibase58Encoded",
// "issuance_date": "2006-01-02T15:04:05Z",
// "block_depth": 3,
// "authorization_signature": "ByteLengthAuthSignatureVariesByAlgo=",
// "transfer_signature": "ByteLengthTransferSignatureVariesByAlgo=",
// "notaries": [
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// },
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// }
// ]
// }
// },
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "promissory": {
// "version": "0.1.0",
// "id": "PROMISSORY_ID",
// "currency": "USD",
// "amount": 500,
// "decimals": 2,
// "authority": "zAuthorityPublicKeyMultibase58Encoded",
// "issuer": "zIssuerPublicKeyMultibase58Encoded",
// "issuance_date": "2006-01-02T15:04:05Z",
// "block_depth": 3,
// "authorization_signature": "ByteLengthAuthSignatureVariesByAlgo=",
// "transfer_signature": "ByteLengthTransferSignatureVariesByAlgo=",
// "notaries": [
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// },
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// }
// ]
// }
// }
// ]
// }
type ListAssetFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of fund objects.
	Funds []*ListAssetFilesResponse_Fund `protobuf:"bytes,1,rep,name=funds,proto3" json:"funds,omitempty"`
	// Number of funds belonging to the owner.
	TotalOwnedFunds uint32 `protobuf:"varint,2,opt,name=total_owned_funds,json=totalOwnedFunds,proto3" json:"total_owned_funds,omitempty"`
}

func (x *ListAssetFilesResponse) Reset() {
	*x = ListAssetFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetFilesResponse) ProtoMessage() {}

func (x *ListAssetFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetFilesResponse.ProtoReflect.Descriptor instead.
func (*ListAssetFilesResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *ListAssetFilesResponse) GetFunds() []*ListAssetFilesResponse_Fund {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *ListAssetFilesResponse) GetTotalOwnedFunds() uint32 {
	if x != nil {
		return x.TotalOwnedFunds
	}
	return 0
}

// [Example]
// {
// "from_wallet_id": "zFromWalletIDMultibase58Encoded",
// "issuer_public_key": "zIssuerPublicKeyMultibase58Encoded",
// "promissory_id": "PROMISSORY_ID",
// "api_key": "API_KEY"
// }
type RedeemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet initiating the redemption.
	FromWalletId string `protobuf:"bytes,1,opt,name=from_wallet_id,json=fromWalletId,proto3" json:"from_wallet_id,omitempty"`
	// Public key of the issuer.
	IssuerPublicKey string `protobuf:"bytes,2,opt,name=issuer_public_key,json=issuerPublicKey,proto3" json:"issuer_public_key,omitempty"`
	// ID of the Digital Banknote.
	PromissoryId string `protobuf:"bytes,3,opt,name=promissory_id,json=promissoryId,proto3" json:"promissory_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RedeemRequest) Reset() {
	*x = RedeemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemRequest) ProtoMessage() {}

func (x *RedeemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemRequest.ProtoReflect.Descriptor instead.
func (*RedeemRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *RedeemRequest) GetFromWalletId() string {
	if x != nil {
		return x.FromWalletId
	}
	return ""
}

func (x *RedeemRequest) GetIssuerPublicKey() string {
	if x != nil {
		return x.IssuerPublicKey
	}
	return ""
}

func (x *RedeemRequest) GetPromissoryId() string {
	if x != nil {
		return x.PromissoryId
	}
	return ""
}

func (x *RedeemRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "new_limit": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// }
// }
type RedeemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount representation of the updated issuance limit.
	NewLimit *v1.Amount `protobuf:"bytes,1,opt,name=new_limit,json=newLimit,proto3" json:"new_limit,omitempty"`
}

func (x *RedeemResponse) Reset() {
	*x = RedeemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemResponse) ProtoMessage() {}

func (x *RedeemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemResponse.ProtoReflect.Descriptor instead.
func (*RedeemResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *RedeemResponse) GetNewLimit() *v1.Amount {
	if x != nil {
		return x.NewLimit
	}
	return nil
}

// [Example]
// {
// "page": 0,
// "page_size": 10000,
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY",
// "filters": {
// "filters": [
// {
// "field": "FIELD1",
// "operator": 0,
// "value": {
// "str_value": "STRINGVAL"
// }
// },
// {
// "field": "FIELD2",
// "operator": 0,
// "value": {
// "int_value": 10
// }
// },
// {
// "field": "FIELD3",
// "operator": 0,
// "value": {
// "bool_value": false
// }
// }
// ],
// "operator": 0
// },
// "page": 0,
// "page_size": 10000,
// "sort_by": {
// "items": [
// {
// "field": "FIELD1",
// "direction": 0
// },
// {
// "field": "FIELD2",
// "direction": 0
// }
// ]
// }
// }
type ListCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Potential filters to apply to the list of credentials.
	Filters *v1.Filter `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
	// Potential sort to apply to the list of credentials.
	SortBy *v1.SortBy `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListCredentialsRequest) Reset() {
	*x = ListCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsRequest) ProtoMessage() {}

func (x *ListCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ListCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *ListCredentialsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCredentialsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCredentialsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListCredentialsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ListCredentialsRequest) GetFilters() *v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListCredentialsRequest) GetSortBy() *v1.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

// [Example]
// {
// "credentials": [
// "CREDENTIAL1",
// "CREDENTIAL2"
// ],
// "total_owned_credentials": 2
// }
type ListCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be one or many of credential types. Ex. "BankAccount", "PermanentResidentCard", "VerifiableCredential"
	Credentials []string `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// Number of credentials belonging to the wallet.
	TotalOwnedCredentials uint32 `protobuf:"varint,2,opt,name=total_owned_credentials,json=totalOwnedCredentials,proto3" json:"total_owned_credentials,omitempty"`
}

func (x *ListCredentialsResponse) Reset() {
	*x = ListCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsResponse) ProtoMessage() {}

func (x *ListCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ListCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *ListCredentialsResponse) GetCredentials() []string {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ListCredentialsResponse) GetTotalOwnedCredentials() uint32 {
	if x != nil {
		return x.TotalOwnedCredentials
	}
	return 0
}

// [Example]
// {
// "credential_type":"CREDENTIAL_TYPE",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type AddCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Verifiable Credential- Ex "BankAccount", "PermanentResidentCard".
	CredentialType string `protobuf:"bytes,1,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *AddCredentialRequest) Reset() {
	*x = AddCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCredentialRequest) ProtoMessage() {}

func (x *AddCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCredentialRequest.ProtoReflect.Descriptor instead.
func (*AddCredentialRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *AddCredentialRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *AddCredentialRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AddCredentialRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "credential": "CREDENTIAL"
// }
type AddCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// W3C Verifiable Credential representing the subject.
	Credential string `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *AddCredentialResponse) Reset() {
	*x = AddCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCredentialResponse) ProtoMessage() {}

func (x *AddCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCredentialResponse.ProtoReflect.Descriptor instead.
func (*AddCredentialResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *AddCredentialResponse) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type AssociateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *AssociateWalletRequest) Reset() {
	*x = AssociateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateWalletRequest) ProtoMessage() {}

func (x *AssociateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateWalletRequest.ProtoReflect.Descriptor instead.
func (*AssociateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *AssociateWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AssociateWalletRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "did": "did:method-name:zDIDMultibase58Encoded",
// "public_key": "zPublicKeyMultibase58Encoded"
// }
type AssociateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *AssociateWalletResponse) Reset() {
	*x = AssociateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateWalletResponse) ProtoMessage() {}

func (x *AssociateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateWalletResponse.ProtoReflect.Descriptor instead.
func (*AssociateWalletResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *AssociateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AssociateWalletResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *AssociateWalletResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// [Example]
// {
// "wallet_name": "WALLET_NAME",
// "api_key": "API_KEY",
// "token": "TOKEN"
// }
type CreateAndAssociateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// JWT token of the authenticated account to associate.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateAndAssociateWalletRequest) Reset() {
	*x = CreateAndAssociateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndAssociateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndAssociateWalletRequest) ProtoMessage() {}

func (x *CreateAndAssociateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndAssociateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateAndAssociateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *CreateAndAssociateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateAndAssociateWalletRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *CreateAndAssociateWalletRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "wallet_name": "WALLET_NAME",
// "public_key": "zPublicKeyMultibase58Encoded",
// "did": "did:method-name:zDIDMultibase58Encoded"
// }
type CreateAndAssociateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,2,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *CreateAndAssociateWalletResponse) Reset() {
	*x = CreateAndAssociateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndAssociateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndAssociateWalletResponse) ProtoMessage() {}

func (x *CreateAndAssociateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndAssociateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateAndAssociateWalletResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *CreateAndAssociateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateAndAssociateWalletResponse) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateAndAssociateWalletResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *CreateAndAssociateWalletResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "credential_type": "CREDENTIAL_TYPE",
// "api_key": "API_KEY"
// }
type RequestPresentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// Type of Verifiable Credential - e.g., "BankAccount", "PermanentResidentCard".
	CredentialType string `protobuf:"bytes,2,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RequestPresentationRequest) Reset() {
	*x = RequestPresentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationRequest) ProtoMessage() {}

func (x *RequestPresentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationRequest.ProtoReflect.Descriptor instead.
func (*RequestPresentationRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{23}
}

func (x *RequestPresentationRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *RequestPresentationRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *RequestPresentationRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "presentation": "PRESENTATION"
// }
type RequestPresentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON Verifiable Presentation containing the PII of the subject.
	Presentation string `protobuf:"bytes,1,opt,name=presentation,proto3" json:"presentation,omitempty"`
}

func (x *RequestPresentationResponse) Reset() {
	*x = RequestPresentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationResponse) ProtoMessage() {}

func (x *RequestPresentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationResponse.ProtoReflect.Descriptor instead.
func (*RequestPresentationResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *RequestPresentationResponse) GetPresentation() string {
	if x != nil {
		return x.Presentation
	}
	return ""
}

// [Example]
// {
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "recipient": "zRecipientPublicKeyMultibase58Encoded",
// "user_reference": "TRANSACTION_REFERENCE",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type PrepareSimplePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount object representing the transfer amount.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Public key of the recipient.
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Human-readable memo field
	UserReference string `protobuf:"bytes,3,opt,name=user_reference,json=userReference,proto3" json:"user_reference,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,4,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *PrepareSimplePaymentRequest) Reset() {
	*x = PrepareSimplePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSimplePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSimplePaymentRequest) ProtoMessage() {}

func (x *PrepareSimplePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSimplePaymentRequest.ProtoReflect.Descriptor instead.
func (*PrepareSimplePaymentRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{25}
}

func (x *PrepareSimplePaymentRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrepareSimplePaymentRequest) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *PrepareSimplePaymentRequest) GetUserReference() string {
	if x != nil {
		return x.UserReference
	}
	return ""
}

func (x *PrepareSimplePaymentRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareSimplePaymentRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "status": 0,
// "uetr": "UETR"
// }
type PrepareSimplePaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction.
	Status PrepareSimplePaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareSimplePaymentResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareSimplePaymentResponse) Reset() {
	*x = PrepareSimplePaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSimplePaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSimplePaymentResponse) ProtoMessage() {}

func (x *PrepareSimplePaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSimplePaymentResponse.ProtoReflect.Descriptor instead.
func (*PrepareSimplePaymentResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{26}
}

func (x *PrepareSimplePaymentResponse) GetStatus() PrepareSimplePaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareSimplePaymentResponse_STATUS_UNSPECIFIED
}

func (x *PrepareSimplePaymentResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]
// {
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "user_reference": "TRANSACTION_REFERENCE",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type PrepareFundsChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested change amount.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Human-readable memo field
	UserReference string `protobuf:"bytes,4,opt,name=user_reference,json=userReference,proto3" json:"user_reference,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *PrepareFundsChangeRequest) Reset() {
	*x = PrepareFundsChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareFundsChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareFundsChangeRequest) ProtoMessage() {}

func (x *PrepareFundsChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareFundsChangeRequest.ProtoReflect.Descriptor instead.
func (*PrepareFundsChangeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{27}
}

func (x *PrepareFundsChangeRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrepareFundsChangeRequest) GetUserReference() string {
	if x != nil {
		return x.UserReference
	}
	return ""
}

func (x *PrepareFundsChangeRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareFundsChangeRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "status": 0,
// "uetr": "UETR"
// }
type PrepareFundsChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction.
	Status PrepareFundsChangeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareFundsChangeResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareFundsChangeResponse) Reset() {
	*x = PrepareFundsChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareFundsChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareFundsChangeResponse) ProtoMessage() {}

func (x *PrepareFundsChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareFundsChangeResponse.ProtoReflect.Descriptor instead.
func (*PrepareFundsChangeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{28}
}

func (x *PrepareFundsChangeResponse) GetStatus() PrepareFundsChangeResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareFundsChangeResponse_STATUS_UNSPECIFIED
}

func (x *PrepareFundsChangeResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]
// {
// "api_key": "API_KEY",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "commitments": [
// {
// "sender": "zSenderPublicKeyMultibase58Encoded",
// "recipient": "zRecipientPublicKeyMultibase58Encoded",
// "amount": {
// "currency_code": "USD",
// "amount": 100,
// "decimals": 2
// }
// }
// ],
// "conditions": [
// {
// "condition": {
// "timeout": {
// "timeout": 1687180000
// }
// }
// }
// ],
// "memo": "Some contract"
// }
type PrepareContractTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// List of commitments
	Commitments []*v1.Commitment `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// List of conditions
	Conditions []*v1.Condition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Human-readable memo field
	Memo string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *PrepareContractTransactionRequest) Reset() {
	*x = PrepareContractTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareContractTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareContractTransactionRequest) ProtoMessage() {}

func (x *PrepareContractTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareContractTransactionRequest.ProtoReflect.Descriptor instead.
func (*PrepareContractTransactionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{29}
}

func (x *PrepareContractTransactionRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PrepareContractTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareContractTransactionRequest) GetCommitments() []*v1.Commitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *PrepareContractTransactionRequest) GetConditions() []*v1.Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *PrepareContractTransactionRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// [Example]
// {
// "status": 0,
// "uetr": "UETR"
// }
type PrepareContractTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction
	Status PrepareContractTransactionResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareContractTransactionResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareContractTransactionResponse) Reset() {
	*x = PrepareContractTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareContractTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareContractTransactionResponse) ProtoMessage() {}

func (x *PrepareContractTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareContractTransactionResponse.ProtoReflect.Descriptor instead.
func (*PrepareContractTransactionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{30}
}

func (x *PrepareContractTransactionResponse) GetStatus() PrepareContractTransactionResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareContractTransactionResponse_UNSPECIFIED
}

func (x *PrepareContractTransactionResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]
// {
// "uetr": "UETR",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,1,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{31}
}

func (x *GetTransactionRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *GetTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "transaction": {
// "type": 1,
// "role": 0,
// "uetr": "UETR",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "created": "2006-01-02T15:04:05Z",
// "updated": "2007-01-02T15:04:05Z",
// "memo": "MEMO",
// "owner": "zOwnerPublicKeyMultibase58Encoded",
// "counterparty": "zCounterpartyPublicKeyMultibase58Encoded",
// "status": 0
// }
// }
type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction objects.
	Transaction *v1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{32}
}

func (x *GetTransactionResponse) GetTransaction() *v1.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// [Example]
// {
// "id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY",
// "filters": {
// "filters": [
// {
// "field": "FIELD1",
// "operator": 0,
// "value": {
// "str_value": "STRINGVAL"
// }
// },
// {
// "field": "FIELD2",
// "operator": 0,
// "value": {
// "int_value": 10
// }
// },
// {
// "field": "FIELD3",
// "operator": 0,
// "value": {
// "bool_value": false
// }
// }
// ],
// "operator": 0
// },
// "page": 0,
// "page_size": 10000,
// "sort_by": {
// "items": [
// {
// "field": "FIELD1",
// "direction": 0
// },
// {
// "field": "FIELD2",
// "direction": 0
// }
// ]
// }
// }
type ListTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wallet_id as UUID or public_key as multibase.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Filters applied to list of transactions.
	Filters *v1.Filter `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	// Page number for pagination.
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Sort By
	SortBy *v1.SortBy `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{33}
}

func (x *ListTransactionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListTransactionsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ListTransactionsRequest) GetFilters() *v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListTransactionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTransactionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransactionsRequest) GetSortBy() *v1.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

// [Example]
// {
// "transactions": [
// {
// "type": 1,
// "role": 0,
// "uetr": "UETR",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "created": "2006-01-02T15:04:05Z",
// "updated": "2007-01-02T15:04:05Z",
// "memo": "MEMO",
// "owner": "zOwnerPublicKeyMultibase58Encoded",
// "counterparty": "zCounterpartyPublicKeyMultibase58Encoded",
// "status": 0
// },
// {
// "type": 2,
// "role": 0,
// "uetr": "UETR",
// "amount": {
// "currency_code":"USD",
// "amount":500,
// "decimals":2
// },
// "created": "2006-01-02T15:04:05Z",
// "updated": "2007-01-02T15:04:05Z",
// "memo": "MEMO",
// "owner": "zOwnerPublicKeyMultibase58Encoded",
// "counterparty": "zCounterpartyPublicKeyMultibase58Encoded",
// "status": 1
// }
// ],
// "total_matching_transactions": 2
// }
type ListTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction objects.
	Transactions []*v1.Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// Total number of returned transactions.
	TotalMatchingTransactions uint32 `protobuf:"varint,2,opt,name=total_matching_transactions,json=totalMatchingTransactions,proto3" json:"total_matching_transactions,omitempty"`
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{34}
}

func (x *ListTransactionsResponse) GetTransactions() []*v1.Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ListTransactionsResponse) GetTotalMatchingTransactions() uint32 {
	if x != nil {
		return x.TotalMatchingTransactions
	}
	return 0
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY",
// "filters": {
// "filters": [
// {
// "field": "FIELD1",
// "operator": 0,
// "value": {
// "str_value": "STRINGVAL"
// }
// },
// {
// "field": "FIELD2",
// "operator": 0,
// "value": {
// "int_value": 10
// }
// },
// {
// "field": "FIELD3",
// "operator": 0,
// "value": {
// "bool_value": false
// }
// }
// ],
// "operator": 0
// },
// "page": 0,
// "page_size": 10000,
// "sort_by": {
// "items": [
// {
// "field": "FIELD1",
// "direction": 0
// },
// {
// "field": "FIELD2",
// "direction": 0
// }
// ]
// }
// }
type ListContractTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wallet_id as UUID or public_key as multibase.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Filters applied to list of transactions.
	Filters *v1.Filter `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	// Page number for pagination.
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Sort By
	SortBy *v1.SortBy `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListContractTransactionsRequest) Reset() {
	*x = ListContractTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractTransactionsRequest) ProtoMessage() {}

func (x *ListContractTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListContractTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{35}
}

func (x *ListContractTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListContractTransactionsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ListContractTransactionsRequest) GetFilters() *v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListContractTransactionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListContractTransactionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListContractTransactionsRequest) GetSortBy() *v1.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

type ContractSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the contract
	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// Type of the contract
	ContractType string `protobuf:"bytes,2,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"`
	// RFC3339 timestamp of the contract creation date.
	Created string `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// List of participant public keys excluding self
	Counterparties []string `protobuf:"bytes,4,rep,name=counterparties,proto3" json:"counterparties,omitempty"`
	// Current status of contract
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Contract memo
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *ContractSummary) Reset() {
	*x = ContractSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSummary) ProtoMessage() {}

func (x *ContractSummary) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSummary.ProtoReflect.Descriptor instead.
func (*ContractSummary) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{36}
}

func (x *ContractSummary) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ContractSummary) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *ContractSummary) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ContractSummary) GetCounterparties() []string {
	if x != nil {
		return x.Counterparties
	}
	return nil
}

func (x *ContractSummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContractSummary) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// [Example]
// {
// "contracts": [
// {
// "contract_id": "9628a2d9-f932-41f0-b2da-b9de3103d945",
// "contract_type": "Swap",
// "created": "2022-12-19T16:39:57-08:00",
// "counterparties": [
// "zCounterparty1PublicKeyMultibase58Encoded",
// "zCounterparty2PublicKeyMultibase58Encoded"
// ],
// "status": 1
// },
// {
// "contract_id": "9628a2d9-f932-41f0-b2da-b9de3103d945",
// "contract_type": "Swap",
// "created": "2022-12-20T16:39:57-08:00",
// "counterparties": [
// "zCounterparty3PublicKeyMultibase58Encoded",
// "zCounterparty4PublicKeyMultibase58Encoded"
// ],
// "status": 1
// }
// ],
// "totalContracts": 2
// }
type ListContractTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of contracts with status metadata
	Contracts []*ContractSummary `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	// Total number of contracts in paginated set
	TotalContracts uint32 `protobuf:"varint,2,opt,name=totalContracts,proto3" json:"totalContracts,omitempty"`
}

func (x *ListContractTransactionsResponse) Reset() {
	*x = ListContractTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractTransactionsResponse) ProtoMessage() {}

func (x *ListContractTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListContractTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{37}
}

func (x *ListContractTransactionsResponse) GetContracts() []*ContractSummary {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *ListContractTransactionsResponse) GetTotalContracts() uint32 {
	if x != nil {
		return x.TotalContracts
	}
	return 0
}

// [Example]
// {
// "uetr": "UETR",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type GetTransactionSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,1,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GetTransactionSnapshotRequest) Reset() {
	*x = GetTransactionSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionSnapshotRequest) ProtoMessage() {}

func (x *GetTransactionSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{38}
}

func (x *GetTransactionSnapshotRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *GetTransactionSnapshotRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionSnapshotRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "snapshot": {
// "status": 5,
// "promissories": [
// "PROMISSORY_ID_1",
// "PROMISSORY_ID_2"
// ],
// "amount_transferred": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "message": "MESSAGE"
// }
// }
type GetTransactionSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction snapshots.
	Snapshot *v1.TransactionSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetTransactionSnapshotResponse) Reset() {
	*x = GetTransactionSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionSnapshotResponse) ProtoMessage() {}

func (x *GetTransactionSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{39}
}

func (x *GetTransactionSnapshotResponse) GetSnapshot() *v1.TransactionSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

// [Example]
// {
// "uetr": "UETR",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type ListTransactionSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,1,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListTransactionSnapshotsRequest) Reset() {
	*x = ListTransactionSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionSnapshotsRequest) ProtoMessage() {}

func (x *ListTransactionSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{40}
}

func (x *ListTransactionSnapshotsRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *ListTransactionSnapshotsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransactionSnapshotsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "snapshots": [
// {
// "status": 5,
// "promissories": [
// "PROMISSORY_ID_1",
// "PROMISSORY_ID_2"
// ],
// "amount_transferred": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "message": "MESSAGE"
// },
// {
// "status": 3,
// "promissories": [
// "PROMISSORY_ID_3",
// "PROMISSORY_ID_4"
// ],
// "amount_transferred": {
// "currency_code":"USD",
// "amount":500,
// "decimals":2
// },
// "message": "MESSAGE2"
// }
// ]
// }
type ListTransactionSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction snapshots.
	Snapshots []*v1.TransactionSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *ListTransactionSnapshotsResponse) Reset() {
	*x = ListTransactionSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionSnapshotsResponse) ProtoMessage() {}

func (x *ListTransactionSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{41}
}

func (x *ListTransactionSnapshotsResponse) GetSnapshots() []*v1.TransactionSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

// [Example]
// {
// "balance": {
// "amount": {
// "currency_code":"USD",
// "amount":5700,
// "decimals":2
// },
// "file_count": 57
// },
// "kind": 1
// }
type BalanceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of a particular currency in the wallet
	Balance *WalletBalance `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Classification of the balance
	Kind BalanceDetail_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=wallet_api.v1.BalanceDetail_Kind" json:"kind,omitempty"`
}

func (x *BalanceDetail) Reset() {
	*x = BalanceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceDetail) ProtoMessage() {}

func (x *BalanceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceDetail.ProtoReflect.Descriptor instead.
func (*BalanceDetail) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{42}
}

func (x *BalanceDetail) GetBalance() *WalletBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *BalanceDetail) GetKind() BalanceDetail_Kind {
	if x != nil {
		return x.Kind
	}
	return BalanceDetail_KIND_AVAILABLE
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY"
// }
type ListWalletBalanceDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListWalletBalanceDetailsRequest) Reset() {
	*x = ListWalletBalanceDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceDetailsRequest) ProtoMessage() {}

func (x *ListWalletBalanceDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceDetailsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceDetailsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{43}
}

func (x *ListWalletBalanceDetailsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletBalanceDetailsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]
// {
// "balances": [
// {
// "balance": {
// "amount": {
// "currency_code":"USD",
// "amount":5700,
// "decimals":2
// },
// "file_count": 57
// },
// "kind": 1
// }
// ]
// }
type ListWalletBalanceDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Balances in Wallet.
	Balances []*BalanceDetail `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *ListWalletBalanceDetailsResponse) Reset() {
	*x = ListWalletBalanceDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceDetailsResponse) ProtoMessage() {}

func (x *ListWalletBalanceDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceDetailsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceDetailsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{44}
}

func (x *ListWalletBalanceDetailsResponse) GetBalances() []*BalanceDetail {
	if x != nil {
		return x.Balances
	}
	return nil
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "api_key": "API_KEY",
// "uetr": "UETR"
// }
type GetContractTransactionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,3,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *GetContractTransactionDetailRequest) Reset() {
	*x = GetContractTransactionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractTransactionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractTransactionDetailRequest) ProtoMessage() {}

func (x *GetContractTransactionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractTransactionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetContractTransactionDetailRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{45}
}

func (x *GetContractTransactionDetailRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetContractTransactionDetailRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *GetContractTransactionDetailRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]
// {
// "contract_type": "Asset Swap",
// "commitments": [
// {
// "sender": "zSender1PublicKey",
// "recipient": "zRecipient1PublicKey",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// }
// },
// {
// "sender": "zSender2PublicKey",
// "recipient": "zRecipient1PublicKey",
// "amount": {
// "currency_code":"MXN",
// "amount":100,
// "decimals":2
// }
// }
// ],
// "originator": "zSender1PublicKey",
// "created": "2023-12-19T16:39:56-08:00",
// "hash_presenter": "zSender1PublicKey",
// "hash": "d04b98f48e8f8bcc15c6ae5ac050801cd6dcfd428fb5f9e65c4e16e7807340fa",
// "expiration": "2023-12-19T16:39:57-08:00",
// "memo": "Currency swap",
// "log": [
// {
// "sender": "zSender1PublicKey",
// "receiver": "zRecipient1PublicKey",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "timestamp": "2006-01-02T15:04:05Z",
// "kind": "ContractPayment",
// "state": "Awaiting",
// "event": "Received promissory",
// "promissory_id": "00000000-0000-0000-0000-000000000000"
// }
// ]
// }
type GetContractTransactionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of this contract
	ContractType string `protobuf:"bytes,1,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"`
	// Lists all fund transfers specified in the contract
	Commitments []*v1.Commitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// [MultibaseVerifier] Participant that created the contract
	Originator string `protobuf:"bytes,3,opt,name=originator,proto3" json:"originator,omitempty"`
	// [RFC3339 Timestamp] Time the contract was created
	Created string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	// [MultibaseVerifier] that is responsible for presenting the secret
	HashPresenter string `protobuf:"bytes,5,opt,name=hash_presenter,json=hashPresenter,proto3" json:"hash_presenter,omitempty"`
	// [Sha256 Hash] Hash of the secret
	Hash []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	// [RFC3339 Timestamp] Expiration time of the contract where all funds are returned to all participants
	Expiration string `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Human-readable memo field
	Memo string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	// Log of all interactions of this contract
	Log []*GetContractTransactionDetailResponse_LogEntry `protobuf:"bytes,9,rep,name=log,proto3" json:"log,omitempty"`
}

func (x *GetContractTransactionDetailResponse) Reset() {
	*x = GetContractTransactionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractTransactionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractTransactionDetailResponse) ProtoMessage() {}

func (x *GetContractTransactionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractTransactionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetContractTransactionDetailResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{46}
}

func (x *GetContractTransactionDetailResponse) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *GetContractTransactionDetailResponse) GetCommitments() []*v1.Commitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *GetContractTransactionDetailResponse) GetOriginator() string {
	if x != nil {
		return x.Originator
	}
	return ""
}

func (x *GetContractTransactionDetailResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *GetContractTransactionDetailResponse) GetHashPresenter() string {
	if x != nil {
		return x.HashPresenter
	}
	return ""
}

func (x *GetContractTransactionDetailResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetContractTransactionDetailResponse) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *GetContractTransactionDetailResponse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GetContractTransactionDetailResponse) GetLog() []*GetContractTransactionDetailResponse_LogEntry {
	if x != nil {
		return x.Log
	}
	return nil
}

// [Example]
// {
// "api_key": "API_KEY",
// "wallet_id": "UUID",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "respondent": "zRespondentPublicKey",
// "respondent_amount": {
// "currency_code":"MXN",
// "amount":100,
// "decimals":2
// },
// "memo": "Currency Swap",
// "timeout": 30
// }
type PrepareAtomicAssetSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// [Amount] Amount to transfer from this wallet to the respondent
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// [MultibaseVerifier] Participant that is responsible for Hash generation
	Respondent string `protobuf:"bytes,4,opt,name=respondent,proto3" json:"respondent,omitempty"`
	// [Amount] Amount to transfer from the respondent to the originator
	RespondentAmount *v1.Amount `protobuf:"bytes,5,opt,name=respondent_amount,json=respondentAmount,proto3" json:"respondent_amount,omitempty"`
	// Human-readable memo field
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// [Seconds] The duration in which this request should be completed in
	Timeout uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *PrepareAtomicAssetSwapRequest) Reset() {
	*x = PrepareAtomicAssetSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareAtomicAssetSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAtomicAssetSwapRequest) ProtoMessage() {}

func (x *PrepareAtomicAssetSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareAtomicAssetSwapRequest.ProtoReflect.Descriptor instead.
func (*PrepareAtomicAssetSwapRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{47}
}

func (x *PrepareAtomicAssetSwapRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PrepareAtomicAssetSwapRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareAtomicAssetSwapRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrepareAtomicAssetSwapRequest) GetRespondent() string {
	if x != nil {
		return x.Respondent
	}
	return ""
}

func (x *PrepareAtomicAssetSwapRequest) GetRespondentAmount() *v1.Amount {
	if x != nil {
		return x.RespondentAmount
	}
	return nil
}

func (x *PrepareAtomicAssetSwapRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *PrepareAtomicAssetSwapRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// [Example]
// {
// "status": 0,
// "uetr": "UETR"
// }
type PrepareAtomicAssetSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction
	Status PrepareAtomicAssetSwapResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareAtomicAssetSwapResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareAtomicAssetSwapResponse) Reset() {
	*x = PrepareAtomicAssetSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareAtomicAssetSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAtomicAssetSwapResponse) ProtoMessage() {}

func (x *PrepareAtomicAssetSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareAtomicAssetSwapResponse.ProtoReflect.Descriptor instead.
func (*PrepareAtomicAssetSwapResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{48}
}

func (x *PrepareAtomicAssetSwapResponse) GetStatus() PrepareAtomicAssetSwapResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareAtomicAssetSwapResponse_UNSPECIFIED
}

func (x *PrepareAtomicAssetSwapResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]
// {
// "api_key": "API_KEY",
// "wallet_id": "UUID",
// "treasury": "zTreasuryPublicKey",
// "respondent": "zRespondentPublicKey",
// "amount": {
// "currency_code":"USD",
// "amount":100,
// "decimals":2
// },
// "respondent_amount": {
// "currency_code":"MXN",
// "amount":100,
// "decimals":2
// },
// "memo": "Cross border to MX",
// "timeout": 30
// }
type PrepareCrossBorderPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// [MultibaseVerifier] Participant that will act as exchange.
	Treasury string `protobuf:"bytes,3,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// [Amount] Amount to transfer from this wallet to the treasury.
	Amount *v1.Amount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// [MultibaseVerifier] Participant that receives funds and is responsible for Hash generation.
	Respondent string `protobuf:"bytes,5,opt,name=respondent,proto3" json:"respondent,omitempty"`
	// [Amount] Amount to transfer from the treasury to the respondent.
	RespondentAmount *v1.Amount `protobuf:"bytes,6,opt,name=respondent_amount,json=respondentAmount,proto3" json:"respondent_amount,omitempty"`
	// Human-readable memo field.
	Memo string `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	// [Seconds] The duration in which this request should be completed in.
	Timeout uint32 `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *PrepareCrossBorderPaymentRequest) Reset() {
	*x = PrepareCrossBorderPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCrossBorderPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCrossBorderPaymentRequest) ProtoMessage() {}

func (x *PrepareCrossBorderPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCrossBorderPaymentRequest.ProtoReflect.Descriptor instead.
func (*PrepareCrossBorderPaymentRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{49}
}

func (x *PrepareCrossBorderPaymentRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PrepareCrossBorderPaymentRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareCrossBorderPaymentRequest) GetTreasury() string {
	if x != nil {
		return x.Treasury
	}
	return ""
}

func (x *PrepareCrossBorderPaymentRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrepareCrossBorderPaymentRequest) GetRespondent() string {
	if x != nil {
		return x.Respondent
	}
	return ""
}

func (x *PrepareCrossBorderPaymentRequest) GetRespondentAmount() *v1.Amount {
	if x != nil {
		return x.RespondentAmount
	}
	return nil
}

func (x *PrepareCrossBorderPaymentRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *PrepareCrossBorderPaymentRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// [Example]
// {
// "status": 0,
// "uetr": "UETR"
// }
type PrepareCrossBorderPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction
	Status PrepareCrossBorderPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareCrossBorderPaymentResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareCrossBorderPaymentResponse) Reset() {
	*x = PrepareCrossBorderPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCrossBorderPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCrossBorderPaymentResponse) ProtoMessage() {}

func (x *PrepareCrossBorderPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCrossBorderPaymentResponse.ProtoReflect.Descriptor instead.
func (*PrepareCrossBorderPaymentResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{50}
}

func (x *PrepareCrossBorderPaymentResponse) GetStatus() PrepareCrossBorderPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareCrossBorderPaymentResponse_UNSPECIFIED
}

func (x *PrepareCrossBorderPaymentResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]
// {
// "wallet_name": "WALLET1",
// "wallet_id": "zWalletIDMultibase58Encoded",
// "public_key": "zPublicKeyMultibase58Encoded",
// "did": "did:method-name:zDIDMultibase58Encoded"
// }
type ListWalletsResponse_Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *ListWalletsResponse_Wallet) Reset() {
	*x = ListWalletsResponse_Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsResponse_Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse_Wallet) ProtoMessage() {}

func (x *ListWalletsResponse_Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse_Wallet.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse_Wallet) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListWalletsResponse_Wallet) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListWalletsResponse_Wallet) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletsResponse_Wallet) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ListWalletsResponse_Wallet) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// }
type ListAssetFilesResponse_Notary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DID of Notary
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// Signature of Notary
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ListAssetFilesResponse_Notary) Reset() {
	*x = ListAssetFilesResponse_Notary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetFilesResponse_Notary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetFilesResponse_Notary) ProtoMessage() {}

func (x *ListAssetFilesResponse_Notary) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetFilesResponse_Notary.ProtoReflect.Descriptor instead.
func (*ListAssetFilesResponse_Notary) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListAssetFilesResponse_Notary) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ListAssetFilesResponse_Notary) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// [Example]
// {
// "version": "0.1.0",
// "id": "PROMISSORY_ID",
// "currency": "USD",
// "amount": 500,
// "decimals": 2,
// "authority": "zAuthorityPublicKeyMultibase58Encoded",
// "issuer": "zIssuerPublicKeyMultibase58Encoded",
// "issuance_date": "2006-01-02T15:04:05Z",
// "block_depth": 3,
// "authorization_signature": "ByteLengthAuthSignatureVariesByAlgo=",
// "transfer_signature": "ByteLengthTransferSignatureVariesByAlgo=",
// "notaries": [
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// },
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// }
// ]
// }
type ListAssetFilesResponse_Promissory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the digital banknote file.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// UUID of the digital banknote file.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// ISO-4217 currency code.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// Amount of the digital banknote.
	Amount int64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Decimal precision.
	Decimals uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// public key of the monetary Authority.
	Authority string `protobuf:"bytes,7,opt,name=authority,proto3" json:"authority,omitempty"`
	// public key of the Issuer.
	Issuer string `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// RFC3339 timestamp of the issuance date.
	IssuanceDate string `protobuf:"bytes,9,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	// Number of signature blocks, representing the owner history.
	BlockDepth uint32 `protobuf:"varint,10,opt,name=block_depth,json=blockDepth,proto3" json:"block_depth,omitempty"`
	// Signature of the latest block hash from the Authority.
	AuthorizationSignature []byte `protobuf:"bytes,11,opt,name=authorization_signature,json=authorizationSignature,proto3" json:"authorization_signature,omitempty"`
	// Signature of the previous owner.
	TransferSignature []byte `protobuf:"bytes,12,opt,name=transfer_signature,json=transferSignature,proto3" json:"transfer_signature,omitempty"`
	// List of Notaries.
	Notaries []*ListAssetFilesResponse_Notary `protobuf:"bytes,13,rep,name=notaries,proto3" json:"notaries,omitempty"`
}

func (x *ListAssetFilesResponse_Promissory) Reset() {
	*x = ListAssetFilesResponse_Promissory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetFilesResponse_Promissory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetFilesResponse_Promissory) ProtoMessage() {}

func (x *ListAssetFilesResponse_Promissory) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetFilesResponse_Promissory.ProtoReflect.Descriptor instead.
func (*ListAssetFilesResponse_Promissory) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ListAssetFilesResponse_Promissory) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListAssetFilesResponse_Promissory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListAssetFilesResponse_Promissory) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ListAssetFilesResponse_Promissory) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ListAssetFilesResponse_Promissory) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *ListAssetFilesResponse_Promissory) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ListAssetFilesResponse_Promissory) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ListAssetFilesResponse_Promissory) GetIssuanceDate() string {
	if x != nil {
		return x.IssuanceDate
	}
	return ""
}

func (x *ListAssetFilesResponse_Promissory) GetBlockDepth() uint32 {
	if x != nil {
		return x.BlockDepth
	}
	return 0
}

func (x *ListAssetFilesResponse_Promissory) GetAuthorizationSignature() []byte {
	if x != nil {
		return x.AuthorizationSignature
	}
	return nil
}

func (x *ListAssetFilesResponse_Promissory) GetTransferSignature() []byte {
	if x != nil {
		return x.TransferSignature
	}
	return nil
}

func (x *ListAssetFilesResponse_Promissory) GetNotaries() []*ListAssetFilesResponse_Notary {
	if x != nil {
		return x.Notaries
	}
	return nil
}

// [Example]
// {
// "wallet_id": "zWalletIDMultibase58Encoded",
// "promissory": {
// "version": "0.1.0",
// "id": "PROMISSORY_ID",
// "currency": "USD",
// "amount": 100,
// "decimals": 2,
// "authority": "zAuthorityPublicKeyMultibase58Encoded",
// "issuer": "zIssuerPublicKeyMultibase58Encoded",
// "issuance_date": "2006-01-02T15:04:05Z",
// "block_depth": 3,
// "authorization_signature": "ByteLengthAuthSignatureVariesByAlgo=",
// "transfer_signature": "ByteLengthTransferSignatureVariesByAlgo=",
// "notaries": [
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// },
// {
// "did": "did:method-name:zDIDMultibase58Encoded",
// "signature": "ByteLengthSignatureVariesByAlgo="
// }
// ]
// }
// }
type ListAssetFilesResponse_Fund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Digital Banknote object.
	Promissory *ListAssetFilesResponse_Promissory `protobuf:"bytes,2,opt,name=promissory,proto3" json:"promissory,omitempty"`
	// Whether or not the digital banknote is reserved.
	Reserved bool `protobuf:"varint,3,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *ListAssetFilesResponse_Fund) Reset() {
	*x = ListAssetFilesResponse_Fund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetFilesResponse_Fund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetFilesResponse_Fund) ProtoMessage() {}

func (x *ListAssetFilesResponse_Fund) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetFilesResponse_Fund.ProtoReflect.Descriptor instead.
func (*ListAssetFilesResponse_Fund) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12, 2}
}

func (x *ListAssetFilesResponse_Fund) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListAssetFilesResponse_Fund) GetPromissory() *ListAssetFilesResponse_Promissory {
	if x != nil {
		return x.Promissory
	}
	return nil
}

func (x *ListAssetFilesResponse_Fund) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

type GetContractTransactionDetailResponse_LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [MultibaseVerifier]
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// [MultibaseVerifier]
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// [Amount] Promissory amount if it applies
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// [RFC3339 Timestamp] Event time
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// State machine this occurred in
	Kind string `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	// State in the state machine
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// Description of the event
	Event string `protobuf:"bytes,7,opt,name=event,proto3" json:"event,omitempty"`
	// [UUID] The unique identifier of a promissory if it applies
	PromissoryId string `protobuf:"bytes,8,opt,name=promissory_id,json=promissoryId,proto3" json:"promissory_id,omitempty"`
}

func (x *GetContractTransactionDetailResponse_LogEntry) Reset() {
	*x = GetContractTransactionDetailResponse_LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractTransactionDetailResponse_LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractTransactionDetailResponse_LogEntry) ProtoMessage() {}

func (x *GetContractTransactionDetailResponse_LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractTransactionDetailResponse_LogEntry.ProtoReflect.Descriptor instead.
func (*GetContractTransactionDetailResponse_LogEntry) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{46, 0}
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *GetContractTransactionDetailResponse_LogEntry) GetPromissoryId() string {
	if x != nil {
		return x.PromissoryId
	}
	return ""
}

var File_wallet_api_v1_wallet_proto protoreflect.FileDescriptor

var file_wallet_api_v1_wallet_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69,
	0x64, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x1a, 0x77, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x56, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x56, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x8b, 0x06, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x1a, 0x38, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xb4,
	0x03, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x6f, 0x74,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x04, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x3d, 0x0a, 0x0e, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22,
	0x73, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x22, 0x75, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x71, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x91, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xeb, 0x01, 0x0a,
	0x1c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x22, 0x6b, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45,
	0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xee, 0x01,
	0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x22, 0x72, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x03, 0x22, 0xd6,
	0x01, 0x0a, 0x21, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x22, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x65, 0x74, 0x72, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x4f, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdb, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x69, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65,
	0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0x6b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x22, 0x5d, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x2d, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x01, 0x22,
	0x57, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x22, 0xe6, 0x04, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4e, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x6c, 0x6f, 0x67, 0x1a, 0xe9, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x88, 0x02, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x65, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72,
	0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0xa7, 0x02, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xbd, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x32,
	0x93, 0x13, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x06, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x32, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x16, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x12, 0x2c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6e, 0x6f, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x2f,
	0x67, 0x6f, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wallet_api_v1_wallet_proto_rawDescOnce sync.Once
	file_wallet_api_v1_wallet_proto_rawDescData = file_wallet_api_v1_wallet_proto_rawDesc
)

func file_wallet_api_v1_wallet_proto_rawDescGZIP() []byte {
	file_wallet_api_v1_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_api_v1_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_wallet_api_v1_wallet_proto_rawDescData)
	})
	return file_wallet_api_v1_wallet_proto_rawDescData
}

var file_wallet_api_v1_wallet_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_wallet_api_v1_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_wallet_api_v1_wallet_proto_goTypes = []interface{}{
	(PrepareSimplePaymentResponse_Status)(0),              // 0: wallet_api.v1.PrepareSimplePaymentResponse.Status
	(PrepareFundsChangeResponse_Status)(0),                // 1: wallet_api.v1.PrepareFundsChangeResponse.Status
	(PrepareContractTransactionResponse_Status)(0),        // 2: wallet_api.v1.PrepareContractTransactionResponse.Status
	(BalanceDetail_Kind)(0),                               // 3: wallet_api.v1.BalanceDetail.Kind
	(PrepareAtomicAssetSwapResponse_Status)(0),            // 4: wallet_api.v1.PrepareAtomicAssetSwapResponse.Status
	(PrepareCrossBorderPaymentResponse_Status)(0),         // 5: wallet_api.v1.PrepareCrossBorderPaymentResponse.Status
	(*TransferRequest)(nil),                               // 6: wallet_api.v1.TransferRequest
	(*TransferResponse)(nil),                              // 7: wallet_api.v1.TransferResponse
	(*CreateOwnerRequest)(nil),                            // 8: wallet_api.v1.CreateOwnerRequest
	(*CreateOwnerResponse)(nil),                           // 9: wallet_api.v1.CreateOwnerResponse
	(*CreateWalletRequest)(nil),                           // 10: wallet_api.v1.CreateWalletRequest
	(*CreateWalletResponse)(nil),                          // 11: wallet_api.v1.CreateWalletResponse
	(*ListWalletsRequest)(nil),                            // 12: wallet_api.v1.ListWalletsRequest
	(*ListWalletsResponse)(nil),                           // 13: wallet_api.v1.ListWalletsResponse
	(*ListWalletBalancesRequest)(nil),                     // 14: wallet_api.v1.ListWalletBalancesRequest
	(*WalletBalance)(nil),                                 // 15: wallet_api.v1.WalletBalance
	(*ListWalletBalancesResponse)(nil),                    // 16: wallet_api.v1.ListWalletBalancesResponse
	(*ListAssetFilesRequest)(nil),                         // 17: wallet_api.v1.ListAssetFilesRequest
	(*ListAssetFilesResponse)(nil),                        // 18: wallet_api.v1.ListAssetFilesResponse
	(*RedeemRequest)(nil),                                 // 19: wallet_api.v1.RedeemRequest
	(*RedeemResponse)(nil),                                // 20: wallet_api.v1.RedeemResponse
	(*ListCredentialsRequest)(nil),                        // 21: wallet_api.v1.ListCredentialsRequest
	(*ListCredentialsResponse)(nil),                       // 22: wallet_api.v1.ListCredentialsResponse
	(*AddCredentialRequest)(nil),                          // 23: wallet_api.v1.AddCredentialRequest
	(*AddCredentialResponse)(nil),                         // 24: wallet_api.v1.AddCredentialResponse
	(*AssociateWalletRequest)(nil),                        // 25: wallet_api.v1.AssociateWalletRequest
	(*AssociateWalletResponse)(nil),                       // 26: wallet_api.v1.AssociateWalletResponse
	(*CreateAndAssociateWalletRequest)(nil),               // 27: wallet_api.v1.CreateAndAssociateWalletRequest
	(*CreateAndAssociateWalletResponse)(nil),              // 28: wallet_api.v1.CreateAndAssociateWalletResponse
	(*RequestPresentationRequest)(nil),                    // 29: wallet_api.v1.RequestPresentationRequest
	(*RequestPresentationResponse)(nil),                   // 30: wallet_api.v1.RequestPresentationResponse
	(*PrepareSimplePaymentRequest)(nil),                   // 31: wallet_api.v1.PrepareSimplePaymentRequest
	(*PrepareSimplePaymentResponse)(nil),                  // 32: wallet_api.v1.PrepareSimplePaymentResponse
	(*PrepareFundsChangeRequest)(nil),                     // 33: wallet_api.v1.PrepareFundsChangeRequest
	(*PrepareFundsChangeResponse)(nil),                    // 34: wallet_api.v1.PrepareFundsChangeResponse
	(*PrepareContractTransactionRequest)(nil),             // 35: wallet_api.v1.PrepareContractTransactionRequest
	(*PrepareContractTransactionResponse)(nil),            // 36: wallet_api.v1.PrepareContractTransactionResponse
	(*GetTransactionRequest)(nil),                         // 37: wallet_api.v1.GetTransactionRequest
	(*GetTransactionResponse)(nil),                        // 38: wallet_api.v1.GetTransactionResponse
	(*ListTransactionsRequest)(nil),                       // 39: wallet_api.v1.ListTransactionsRequest
	(*ListTransactionsResponse)(nil),                      // 40: wallet_api.v1.ListTransactionsResponse
	(*ListContractTransactionsRequest)(nil),               // 41: wallet_api.v1.ListContractTransactionsRequest
	(*ContractSummary)(nil),                               // 42: wallet_api.v1.ContractSummary
	(*ListContractTransactionsResponse)(nil),              // 43: wallet_api.v1.ListContractTransactionsResponse
	(*GetTransactionSnapshotRequest)(nil),                 // 44: wallet_api.v1.GetTransactionSnapshotRequest
	(*GetTransactionSnapshotResponse)(nil),                // 45: wallet_api.v1.GetTransactionSnapshotResponse
	(*ListTransactionSnapshotsRequest)(nil),               // 46: wallet_api.v1.ListTransactionSnapshotsRequest
	(*ListTransactionSnapshotsResponse)(nil),              // 47: wallet_api.v1.ListTransactionSnapshotsResponse
	(*BalanceDetail)(nil),                                 // 48: wallet_api.v1.BalanceDetail
	(*ListWalletBalanceDetailsRequest)(nil),               // 49: wallet_api.v1.ListWalletBalanceDetailsRequest
	(*ListWalletBalanceDetailsResponse)(nil),              // 50: wallet_api.v1.ListWalletBalanceDetailsResponse
	(*GetContractTransactionDetailRequest)(nil),           // 51: wallet_api.v1.GetContractTransactionDetailRequest
	(*GetContractTransactionDetailResponse)(nil),          // 52: wallet_api.v1.GetContractTransactionDetailResponse
	(*PrepareAtomicAssetSwapRequest)(nil),                 // 53: wallet_api.v1.PrepareAtomicAssetSwapRequest
	(*PrepareAtomicAssetSwapResponse)(nil),                // 54: wallet_api.v1.PrepareAtomicAssetSwapResponse
	(*PrepareCrossBorderPaymentRequest)(nil),              // 55: wallet_api.v1.PrepareCrossBorderPaymentRequest
	(*PrepareCrossBorderPaymentResponse)(nil),             // 56: wallet_api.v1.PrepareCrossBorderPaymentResponse
	(*ListWalletsResponse_Wallet)(nil),                    // 57: wallet_api.v1.ListWalletsResponse.Wallet
	(*ListAssetFilesResponse_Notary)(nil),                 // 58: wallet_api.v1.ListAssetFilesResponse.Notary
	(*ListAssetFilesResponse_Promissory)(nil),             // 59: wallet_api.v1.ListAssetFilesResponse.Promissory
	(*ListAssetFilesResponse_Fund)(nil),                   // 60: wallet_api.v1.ListAssetFilesResponse.Fund
	(*GetContractTransactionDetailResponse_LogEntry)(nil), // 61: wallet_api.v1.GetContractTransactionDetailResponse.LogEntry
	(*v1.Filter)(nil),                                     // 62: common.Filter
	(*v1.SortBy)(nil),                                     // 63: common.SortBy
	(*v1.Amount)(nil),                                     // 64: common.Amount
	(*v1.Commitment)(nil),                                 // 65: common.Commitment
	(*v1.Condition)(nil),                                  // 66: common.Condition
	(*v1.Transaction)(nil),                                // 67: common.Transaction
	(*v1.TransactionSnapshot)(nil),                        // 68: common.TransactionSnapshot
}
var file_wallet_api_v1_wallet_proto_depIdxs = []int32{
	62, // 0: wallet_api.v1.ListWalletsRequest.filters:type_name -> common.Filter
	63, // 1: wallet_api.v1.ListWalletsRequest.sort_by:type_name -> common.SortBy
	57, // 2: wallet_api.v1.ListWalletsResponse.wallets:type_name -> wallet_api.v1.ListWalletsResponse.Wallet
	63, // 3: wallet_api.v1.ListWalletBalancesRequest.sort_by:type_name -> common.SortBy
	64, // 4: wallet_api.v1.WalletBalance.amount:type_name -> common.Amount
	15, // 5: wallet_api.v1.ListWalletBalancesResponse.balances:type_name -> wallet_api.v1.WalletBalance
	62, // 6: wallet_api.v1.ListAssetFilesRequest.filters:type_name -> common.Filter
	63, // 7: wallet_api.v1.ListAssetFilesRequest.sort_by:type_name -> common.SortBy
	60, // 8: wallet_api.v1.ListAssetFilesResponse.funds:type_name -> wallet_api.v1.ListAssetFilesResponse.Fund
	64, // 9: wallet_api.v1.RedeemResponse.new_limit:type_name -> common.Amount
	62, // 10: wallet_api.v1.ListCredentialsRequest.filters:type_name -> common.Filter
	63, // 11: wallet_api.v1.ListCredentialsRequest.sort_by:type_name -> common.SortBy
	64, // 12: wallet_api.v1.PrepareSimplePaymentRequest.amount:type_name -> common.Amount
	0,  // 13: wallet_api.v1.PrepareSimplePaymentResponse.status:type_name -> wallet_api.v1.PrepareSimplePaymentResponse.Status
	64, // 14: wallet_api.v1.PrepareFundsChangeRequest.amount:type_name -> common.Amount
	1,  // 15: wallet_api.v1.PrepareFundsChangeResponse.status:type_name -> wallet_api.v1.PrepareFundsChangeResponse.Status
	65, // 16: wallet_api.v1.PrepareContractTransactionRequest.commitments:type_name -> common.Commitment
	66, // 17: wallet_api.v1.PrepareContractTransactionRequest.conditions:type_name -> common.Condition
	2,  // 18: wallet_api.v1.PrepareContractTransactionResponse.status:type_name -> wallet_api.v1.PrepareContractTransactionResponse.Status
	67, // 19: wallet_api.v1.GetTransactionResponse.transaction:type_name -> common.Transaction
	62, // 20: wallet_api.v1.ListTransactionsRequest.filters:type_name -> common.Filter
	63, // 21: wallet_api.v1.ListTransactionsRequest.sort_by:type_name -> common.SortBy
	67, // 22: wallet_api.v1.ListTransactionsResponse.transactions:type_name -> common.Transaction
	62, // 23: wallet_api.v1.ListContractTransactionsRequest.filters:type_name -> common.Filter
	63, // 24: wallet_api.v1.ListContractTransactionsRequest.sort_by:type_name -> common.SortBy
	42, // 25: wallet_api.v1.ListContractTransactionsResponse.contracts:type_name -> wallet_api.v1.ContractSummary
	68, // 26: wallet_api.v1.GetTransactionSnapshotResponse.snapshot:type_name -> common.TransactionSnapshot
	68, // 27: wallet_api.v1.ListTransactionSnapshotsResponse.snapshots:type_name -> common.TransactionSnapshot
	15, // 28: wallet_api.v1.BalanceDetail.balance:type_name -> wallet_api.v1.WalletBalance
	3,  // 29: wallet_api.v1.BalanceDetail.kind:type_name -> wallet_api.v1.BalanceDetail.Kind
	48, // 30: wallet_api.v1.ListWalletBalanceDetailsResponse.balances:type_name -> wallet_api.v1.BalanceDetail
	65, // 31: wallet_api.v1.GetContractTransactionDetailResponse.commitments:type_name -> common.Commitment
	61, // 32: wallet_api.v1.GetContractTransactionDetailResponse.log:type_name -> wallet_api.v1.GetContractTransactionDetailResponse.LogEntry
	64, // 33: wallet_api.v1.PrepareAtomicAssetSwapRequest.amount:type_name -> common.Amount
	64, // 34: wallet_api.v1.PrepareAtomicAssetSwapRequest.respondent_amount:type_name -> common.Amount
	4,  // 35: wallet_api.v1.PrepareAtomicAssetSwapResponse.status:type_name -> wallet_api.v1.PrepareAtomicAssetSwapResponse.Status
	64, // 36: wallet_api.v1.PrepareCrossBorderPaymentRequest.amount:type_name -> common.Amount
	64, // 37: wallet_api.v1.PrepareCrossBorderPaymentRequest.respondent_amount:type_name -> common.Amount
	5,  // 38: wallet_api.v1.PrepareCrossBorderPaymentResponse.status:type_name -> wallet_api.v1.PrepareCrossBorderPaymentResponse.Status
	58, // 39: wallet_api.v1.ListAssetFilesResponse.Promissory.notaries:type_name -> wallet_api.v1.ListAssetFilesResponse.Notary
	59, // 40: wallet_api.v1.ListAssetFilesResponse.Fund.promissory:type_name -> wallet_api.v1.ListAssetFilesResponse.Promissory
	64, // 41: wallet_api.v1.GetContractTransactionDetailResponse.LogEntry.amount:type_name -> common.Amount
	6,  // 42: wallet_api.v1.WalletService.Transfer:input_type -> wallet_api.v1.TransferRequest
	8,  // 43: wallet_api.v1.WalletService.CreateOwner:input_type -> wallet_api.v1.CreateOwnerRequest
	10, // 44: wallet_api.v1.WalletService.CreateWallet:input_type -> wallet_api.v1.CreateWalletRequest
	12, // 45: wallet_api.v1.WalletService.ListWallets:input_type -> wallet_api.v1.ListWalletsRequest
	17, // 46: wallet_api.v1.WalletService.ListAssetFiles:input_type -> wallet_api.v1.ListAssetFilesRequest
	14, // 47: wallet_api.v1.WalletService.ListWalletBalances:input_type -> wallet_api.v1.ListWalletBalancesRequest
	19, // 48: wallet_api.v1.WalletService.Redeem:input_type -> wallet_api.v1.RedeemRequest
	21, // 49: wallet_api.v1.WalletService.ListCredentials:input_type -> wallet_api.v1.ListCredentialsRequest
	23, // 50: wallet_api.v1.WalletService.AddCredential:input_type -> wallet_api.v1.AddCredentialRequest
	25, // 51: wallet_api.v1.WalletService.AssociateWallet:input_type -> wallet_api.v1.AssociateWalletRequest
	29, // 52: wallet_api.v1.WalletService.RequestPresentation:input_type -> wallet_api.v1.RequestPresentationRequest
	31, // 53: wallet_api.v1.WalletService.PrepareSimplePayment:input_type -> wallet_api.v1.PrepareSimplePaymentRequest
	33, // 54: wallet_api.v1.WalletService.PrepareFundsChange:input_type -> wallet_api.v1.PrepareFundsChangeRequest
	37, // 55: wallet_api.v1.WalletService.GetTransaction:input_type -> wallet_api.v1.GetTransactionRequest
	39, // 56: wallet_api.v1.WalletService.ListTransactions:input_type -> wallet_api.v1.ListTransactionsRequest
	44, // 57: wallet_api.v1.WalletService.GetTransactionSnapshot:input_type -> wallet_api.v1.GetTransactionSnapshotRequest
	46, // 58: wallet_api.v1.WalletService.ListTransactionSnapshots:input_type -> wallet_api.v1.ListTransactionSnapshotsRequest
	49, // 59: wallet_api.v1.WalletService.ListWalletBalanceDetails:input_type -> wallet_api.v1.ListWalletBalanceDetailsRequest
	41, // 60: wallet_api.v1.WalletService.ListContractTransactions:input_type -> wallet_api.v1.ListContractTransactionsRequest
	51, // 61: wallet_api.v1.WalletService.GetContractTransactionDetail:input_type -> wallet_api.v1.GetContractTransactionDetailRequest
	35, // 62: wallet_api.v1.WalletService.PrepareContractTransaction:input_type -> wallet_api.v1.PrepareContractTransactionRequest
	53, // 63: wallet_api.v1.WalletService.PrepareAtomicAssetSwap:input_type -> wallet_api.v1.PrepareAtomicAssetSwapRequest
	55, // 64: wallet_api.v1.WalletService.PrepareCrossBorderPayment:input_type -> wallet_api.v1.PrepareCrossBorderPaymentRequest
	7,  // 65: wallet_api.v1.WalletService.Transfer:output_type -> wallet_api.v1.TransferResponse
	9,  // 66: wallet_api.v1.WalletService.CreateOwner:output_type -> wallet_api.v1.CreateOwnerResponse
	11, // 67: wallet_api.v1.WalletService.CreateWallet:output_type -> wallet_api.v1.CreateWalletResponse
	13, // 68: wallet_api.v1.WalletService.ListWallets:output_type -> wallet_api.v1.ListWalletsResponse
	18, // 69: wallet_api.v1.WalletService.ListAssetFiles:output_type -> wallet_api.v1.ListAssetFilesResponse
	16, // 70: wallet_api.v1.WalletService.ListWalletBalances:output_type -> wallet_api.v1.ListWalletBalancesResponse
	20, // 71: wallet_api.v1.WalletService.Redeem:output_type -> wallet_api.v1.RedeemResponse
	22, // 72: wallet_api.v1.WalletService.ListCredentials:output_type -> wallet_api.v1.ListCredentialsResponse
	24, // 73: wallet_api.v1.WalletService.AddCredential:output_type -> wallet_api.v1.AddCredentialResponse
	26, // 74: wallet_api.v1.WalletService.AssociateWallet:output_type -> wallet_api.v1.AssociateWalletResponse
	30, // 75: wallet_api.v1.WalletService.RequestPresentation:output_type -> wallet_api.v1.RequestPresentationResponse
	32, // 76: wallet_api.v1.WalletService.PrepareSimplePayment:output_type -> wallet_api.v1.PrepareSimplePaymentResponse
	34, // 77: wallet_api.v1.WalletService.PrepareFundsChange:output_type -> wallet_api.v1.PrepareFundsChangeResponse
	38, // 78: wallet_api.v1.WalletService.GetTransaction:output_type -> wallet_api.v1.GetTransactionResponse
	40, // 79: wallet_api.v1.WalletService.ListTransactions:output_type -> wallet_api.v1.ListTransactionsResponse
	45, // 80: wallet_api.v1.WalletService.GetTransactionSnapshot:output_type -> wallet_api.v1.GetTransactionSnapshotResponse
	47, // 81: wallet_api.v1.WalletService.ListTransactionSnapshots:output_type -> wallet_api.v1.ListTransactionSnapshotsResponse
	50, // 82: wallet_api.v1.WalletService.ListWalletBalanceDetails:output_type -> wallet_api.v1.ListWalletBalanceDetailsResponse
	43, // 83: wallet_api.v1.WalletService.ListContractTransactions:output_type -> wallet_api.v1.ListContractTransactionsResponse
	52, // 84: wallet_api.v1.WalletService.GetContractTransactionDetail:output_type -> wallet_api.v1.GetContractTransactionDetailResponse
	36, // 85: wallet_api.v1.WalletService.PrepareContractTransaction:output_type -> wallet_api.v1.PrepareContractTransactionResponse
	54, // 86: wallet_api.v1.WalletService.PrepareAtomicAssetSwap:output_type -> wallet_api.v1.PrepareAtomicAssetSwapResponse
	56, // 87: wallet_api.v1.WalletService.PrepareCrossBorderPayment:output_type -> wallet_api.v1.PrepareCrossBorderPaymentResponse
	65, // [65:88] is the sub-list for method output_type
	42, // [42:65] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_wallet_api_v1_wallet_proto_init() }
func file_wallet_api_v1_wallet_proto_init() {
	if File_wallet_api_v1_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wallet_api_v1_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndAssociateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndAssociateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSimplePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSimplePaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareFundsChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareFundsChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareContractTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareContractTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractTransactionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractTransactionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareAtomicAssetSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareAtomicAssetSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCrossBorderPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCrossBorderPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsResponse_Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetFilesResponse_Notary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetFilesResponse_Promissory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetFilesResponse_Fund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractTransactionDetailResponse_LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wallet_api_v1_wallet_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_api_v1_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_api_v1_wallet_proto_depIdxs,
		EnumInfos:         file_wallet_api_v1_wallet_proto_enumTypes,
		MessageInfos:      file_wallet_api_v1_wallet_proto_msgTypes,
	}.Build()
	File_wallet_api_v1_wallet_proto = out.File
	file_wallet_api_v1_wallet_proto_rawDesc = nil
	file_wallet_api_v1_wallet_proto_goTypes = nil
	file_wallet_api_v1_wallet_proto_depIdxs = nil
}
