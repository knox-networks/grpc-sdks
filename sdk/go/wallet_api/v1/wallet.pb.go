// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: wallet_api/v1/wallet.proto

package v1

import (
	v1 "github.com/knox-networks/grpc-sdks/sdk/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrepareSimplePaymentResponse_Status int32

const (
	PrepareSimplePaymentResponse_STATUS_UNSPECIFIED        PrepareSimplePaymentResponse_Status = 0
	PrepareSimplePaymentResponse_STATUS_SUCCESS            PrepareSimplePaymentResponse_Status = 1
	PrepareSimplePaymentResponse_STATUS_NEED_CHANGE        PrepareSimplePaymentResponse_Status = 2
	PrepareSimplePaymentResponse_STATUS_INSUFFICIENT_FUNDS PrepareSimplePaymentResponse_Status = 3
)

// Enum value maps for PrepareSimplePaymentResponse_Status.
var (
	PrepareSimplePaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NEED_CHANGE",
		3: "STATUS_INSUFFICIENT_FUNDS",
	}
	PrepareSimplePaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_SUCCESS":            1,
		"STATUS_NEED_CHANGE":        2,
		"STATUS_INSUFFICIENT_FUNDS": 3,
	}
)

func (x PrepareSimplePaymentResponse_Status) Enum() *PrepareSimplePaymentResponse_Status {
	p := new(PrepareSimplePaymentResponse_Status)
	*p = x
	return p
}

func (x PrepareSimplePaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareSimplePaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[0].Descriptor()
}

func (PrepareSimplePaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[0]
}

func (x PrepareSimplePaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareSimplePaymentResponse_Status.Descriptor instead.
func (PrepareSimplePaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{26, 0}
}

type PrepareFundsChangeResponse_Status int32

const (
	PrepareFundsChangeResponse_STATUS_UNSPECIFIED        PrepareFundsChangeResponse_Status = 0
	PrepareFundsChangeResponse_STATUS_SUCCESS            PrepareFundsChangeResponse_Status = 1
	PrepareFundsChangeResponse_STATUS_INSUFFICIENT_FUNDS PrepareFundsChangeResponse_Status = 2
	PrepareFundsChangeResponse_STATUS_FUNDS_PRESENT_NOOP PrepareFundsChangeResponse_Status = 3
)

// Enum value maps for PrepareFundsChangeResponse_Status.
var (
	PrepareFundsChangeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_INSUFFICIENT_FUNDS",
		3: "STATUS_FUNDS_PRESENT_NOOP",
	}
	PrepareFundsChangeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_SUCCESS":            1,
		"STATUS_INSUFFICIENT_FUNDS": 2,
		"STATUS_FUNDS_PRESENT_NOOP": 3,
	}
)

func (x PrepareFundsChangeResponse_Status) Enum() *PrepareFundsChangeResponse_Status {
	p := new(PrepareFundsChangeResponse_Status)
	*p = x
	return p
}

func (x PrepareFundsChangeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepareFundsChangeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_api_v1_wallet_proto_enumTypes[1].Descriptor()
}

func (PrepareFundsChangeResponse_Status) Type() protoreflect.EnumType {
	return &file_wallet_api_v1_wallet_proto_enumTypes[1]
}

func (x PrepareFundsChangeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepareFundsChangeResponse_Status.Descriptor instead.
func (PrepareFundsChangeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{28, 0}
}

// [Example]{"from_wallet_id": "FROM_WALLET_ID", "recipient_public_key": "RECIPIENT_PUBLIC_KEY", "promissory_id": "PROMISSORY_ID", "api_key": "API_KEY"}
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet sending the transfer.
	FromWalletId string `protobuf:"bytes,1,opt,name=from_wallet_id,json=fromWalletId,proto3" json:"from_wallet_id,omitempty"`
	// Public key of the recipient wallet.
	RecipientPublicKey string `protobuf:"bytes,2,opt,name=recipient_public_key,json=recipientPublicKey,proto3" json:"recipient_public_key,omitempty"`
	// ID of the digital bank note.
	PromissoryId string `protobuf:"bytes,3,opt,name=promissory_id,json=promissoryId,proto3" json:"promissory_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *TransferRequest) GetFromWalletId() string {
	if x != nil {
		return x.FromWalletId
	}
	return ""
}

func (x *TransferRequest) GetRecipientPublicKey() string {
	if x != nil {
		return x.RecipientPublicKey
	}
	return ""
}

func (x *TransferRequest) GetPromissoryId() string {
	if x != nil {
		return x.PromissoryId
	}
	return ""
}

func (x *TransferRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{}
type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{1}
}

// [Example]{"owner_name": "OWNER_NAME"}
type CreateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the wallet owner.
	OwnerName string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
}

func (x *CreateOwnerRequest) Reset() {
	*x = CreateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerRequest) ProtoMessage() {}

func (x *CreateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerRequest.ProtoReflect.Descriptor instead.
func (*CreateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOwnerRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

// [Example]{"owner_id": "OWNER_ID", "api_key": "API_KEY", "owner_name": "OWNER_NAME"}
type CreateOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the created owner of the wallet(s).
	OwnerId string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// API key given to the wallet owner as part of creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Name of the wallet owner.
	OwnerName string `protobuf:"bytes,3,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
}

func (x *CreateOwnerResponse) Reset() {
	*x = CreateOwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerResponse) ProtoMessage() {}

func (x *CreateOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerResponse.ProtoReflect.Descriptor instead.
func (*CreateOwnerResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOwnerResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateOwnerResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *CreateOwnerResponse) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

// [Example]{"wallet_name": "WALLET_NAME", "api_key": "API_KEY"}
type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"wallet_id": "WALLET_ID", "wallet_name": "WALLET_NAME", "public_key": "WALLET_PUBLIC_KEY", "did": "WALLET_DID"}
type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,2,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateWalletResponse) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *CreateWalletResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]{"page": 0, "page_size": 10, "api_key": "API_KEY"}
type ListWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListWalletsRequest) Reset() {
	*x = ListWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsRequest) ProtoMessage() {}

func (x *ListWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *ListWalletsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWalletsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"wallets": [{"wallet_name": "WALLET1", "wallet_id": "ID1", "public_key": "PK1", "did": "DID2"}, {"wallet_name": "WALLET2", "wallet_id": "ID2", "public_key": "PK2", "did": "DID2"}], "total_owned_wallets": 5}
type ListWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Wallet objects.
	Wallets []*ListWalletsResponse_Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
	// Number of wallets belonging to the owner.
	TotalOwnedWallets uint32 `protobuf:"varint,2,opt,name=total_owned_wallets,json=totalOwnedWallets,proto3" json:"total_owned_wallets,omitempty"`
}

func (x *ListWalletsResponse) Reset() {
	*x = ListWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse) ProtoMessage() {}

func (x *ListWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *ListWalletsResponse) GetWallets() []*ListWalletsResponse_Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *ListWalletsResponse) GetTotalOwnedWallets() uint32 {
	if x != nil {
		return x.TotalOwnedWallets
	}
	return 0
}

// [Example]{"wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type ListWalletBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListWalletBalancesRequest) Reset() {
	*x = ListWalletBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalancesRequest) ProtoMessage() {}

func (x *ListWalletBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListWalletBalancesRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *ListWalletBalancesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletBalancesRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"amount": {"currency_code":"USD", "amount":100, "decimals":2}, "file_count": 57}
type WalletBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of a particular currency available in the wallet.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Total count of a particular banknote
	FileCount int64 `protobuf:"varint,2,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
}

func (x *WalletBalance) Reset() {
	*x = WalletBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletBalance) ProtoMessage() {}

func (x *WalletBalance) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletBalance.ProtoReflect.Descriptor instead.
func (*WalletBalance) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *WalletBalance) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WalletBalance) GetFileCount() int64 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

// [Example]{"balances": [{"amount": {"currency_code":"USD", "amount":5700, "decimals":2}, "file_count": 57}, {"amount": {"currency_code":"USD", "amount":500, "decimals":2}, "file_count": 3} ] }
type ListWalletBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*WalletBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *ListWalletBalancesResponse) Reset() {
	*x = ListWalletBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalancesResponse) ProtoMessage() {}

func (x *ListWalletBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalancesResponse.ProtoReflect.Descriptor instead.
func (*ListWalletBalancesResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *ListWalletBalancesResponse) GetBalances() []*WalletBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// [Example]{"page": 0, "page_size": 10000, "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type ListFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListFundsRequest) Reset() {
	*x = ListFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundsRequest) ProtoMessage() {}

func (x *ListFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundsRequest.ProtoReflect.Descriptor instead.
func (*ListFundsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *ListFundsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFundsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFundsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListFundsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"total_owned_funds": 1, "funds": [{"wallet_id": "WALLET_ID", "promissory": {"version": "VERSION", "id": "ID", "currency": "CURRENCY", "amount": 100, "decimals": 2, "authority": "AUTHORITY_PUBLIC_KEY", "issuer": "ISSUER_PUBLIC_KEY", "issuance_date": "ISSUANCE_DATE_TIMESTAMP", "block_depth": 3, "authorization_signature": "xAUTHORIZATIONxxSIGNATURExBYTES=", "transfer_signature": "xTRANSFERxxSIGNATURExBYTES="}}]}
type ListFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of fund objects.
	Funds []*ListFundsResponse_Fund `protobuf:"bytes,1,rep,name=funds,proto3" json:"funds,omitempty"`
	// Number of funds belonging to the owner.
	TotalOwnedFunds uint32 `protobuf:"varint,2,opt,name=total_owned_funds,json=totalOwnedFunds,proto3" json:"total_owned_funds,omitempty"`
}

func (x *ListFundsResponse) Reset() {
	*x = ListFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundsResponse) ProtoMessage() {}

func (x *ListFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundsResponse.ProtoReflect.Descriptor instead.
func (*ListFundsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *ListFundsResponse) GetFunds() []*ListFundsResponse_Fund {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *ListFundsResponse) GetTotalOwnedFunds() uint32 {
	if x != nil {
		return x.TotalOwnedFunds
	}
	return 0
}

// [Example]{"from_wallet_id": "FROM_WALLET_ID", "issuer_public_key": "ISSUER_PUBLIC_KEY", "promissory_id": "PROMISSORY_ID", "api_key": "API_KEY"}
type RedeemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet initiating the redemption.
	FromWalletId string `protobuf:"bytes,1,opt,name=from_wallet_id,json=fromWalletId,proto3" json:"from_wallet_id,omitempty"`
	// Public key of the issuer.
	IssuerPublicKey string `protobuf:"bytes,2,opt,name=issuer_public_key,json=issuerPublicKey,proto3" json:"issuer_public_key,omitempty"`
	// ID of the Digital Banknote.
	PromissoryId string `protobuf:"bytes,3,opt,name=promissory_id,json=promissoryId,proto3" json:"promissory_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RedeemRequest) Reset() {
	*x = RedeemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemRequest) ProtoMessage() {}

func (x *RedeemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemRequest.ProtoReflect.Descriptor instead.
func (*RedeemRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *RedeemRequest) GetFromWalletId() string {
	if x != nil {
		return x.FromWalletId
	}
	return ""
}

func (x *RedeemRequest) GetIssuerPublicKey() string {
	if x != nil {
		return x.IssuerPublicKey
	}
	return ""
}

func (x *RedeemRequest) GetPromissoryId() string {
	if x != nil {
		return x.PromissoryId
	}
	return ""
}

func (x *RedeemRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"new_limit": {"currency_code":"USD", "amount":100, "decimals":2} }
type RedeemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount representation of the updated issuance limit.
	NewLimit *v1.Amount `protobuf:"bytes,1,opt,name=new_limit,json=newLimit,proto3" json:"new_limit,omitempty"`
}

func (x *RedeemResponse) Reset() {
	*x = RedeemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemResponse) ProtoMessage() {}

func (x *RedeemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemResponse.ProtoReflect.Descriptor instead.
func (*RedeemResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *RedeemResponse) GetNewLimit() *v1.Amount {
	if x != nil {
		return x.NewLimit
	}
	return nil
}

// [Example]{"page": 0, "page_size": 10000, "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type ListCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size of the page for pagination.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListCredentialsRequest) Reset() {
	*x = ListCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsRequest) ProtoMessage() {}

func (x *ListCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ListCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *ListCredentialsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCredentialsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCredentialsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListCredentialsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"credentials": ["CREDENTIAL1", "CREDENTIAL2"], "total_owned_credentials": 2}
type ListCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be one or many of credential types. Ex. "BankAccount", "PermanentResidentCard", "VerifiableCredential"
	Credentials []string `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// Number of credentials belonging to the wallet.
	TotalOwnedCredentials uint32 `protobuf:"varint,2,opt,name=total_owned_credentials,json=totalOwnedCredentials,proto3" json:"total_owned_credentials,omitempty"`
}

func (x *ListCredentialsResponse) Reset() {
	*x = ListCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsResponse) ProtoMessage() {}

func (x *ListCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ListCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *ListCredentialsResponse) GetCredentials() []string {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ListCredentialsResponse) GetTotalOwnedCredentials() uint32 {
	if x != nil {
		return x.TotalOwnedCredentials
	}
	return 0
}

// [Example]{"credential_type":"CREDENTIAL_TYPE", "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type AddCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Verifiable Credential- Ex "BankAccount", "PermanentResidentCard".
	CredentialType string `protobuf:"bytes,1,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *AddCredentialRequest) Reset() {
	*x = AddCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCredentialRequest) ProtoMessage() {}

func (x *AddCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCredentialRequest.ProtoReflect.Descriptor instead.
func (*AddCredentialRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *AddCredentialRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *AddCredentialRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AddCredentialRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"credential": "CREDENTIAL"}
type AddCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// W3C Verifiable Credential representing the subject.
	Credential string `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *AddCredentialResponse) Reset() {
	*x = AddCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCredentialResponse) ProtoMessage() {}

func (x *AddCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCredentialResponse.ProtoReflect.Descriptor instead.
func (*AddCredentialResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *AddCredentialResponse) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// [Example]{"wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type AssociateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *AssociateWalletRequest) Reset() {
	*x = AssociateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateWalletRequest) ProtoMessage() {}

func (x *AssociateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateWalletRequest.ProtoReflect.Descriptor instead.
func (*AssociateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *AssociateWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AssociateWalletRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"wallet_id": "WALLET_ID", "did": "DID", "public_key": "PUBLIC_KEY"}
type AssociateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *AssociateWalletResponse) Reset() {
	*x = AssociateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateWalletResponse) ProtoMessage() {}

func (x *AssociateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateWalletResponse.ProtoReflect.Descriptor instead.
func (*AssociateWalletResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *AssociateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AssociateWalletResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *AssociateWalletResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// [Example]{"wallet_name": "WALLET_NAME", "api_key": "API_KEY", "token": "TOKEN"}
type CreateAndAssociateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// JWT token of the authenticated account to associate.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateAndAssociateWalletRequest) Reset() {
	*x = CreateAndAssociateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndAssociateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndAssociateWalletRequest) ProtoMessage() {}

func (x *CreateAndAssociateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndAssociateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateAndAssociateWalletRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *CreateAndAssociateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateAndAssociateWalletRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *CreateAndAssociateWalletRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// [Example]{"wallet_id": "WALLET_ID", "wallet_name": "WALLET_NAME", "public_key": "PUBLIC_KEY", "did": "DID"}
type CreateAndAssociateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,2,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *CreateAndAssociateWalletResponse) Reset() {
	*x = CreateAndAssociateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndAssociateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndAssociateWalletResponse) ProtoMessage() {}

func (x *CreateAndAssociateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndAssociateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateAndAssociateWalletResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *CreateAndAssociateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateAndAssociateWalletResponse) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateAndAssociateWalletResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *CreateAndAssociateWalletResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

// [Example]{"did": "DID", "credential_type": "CREDENTIAL_TYPE", "api_key": "API_KEY"}
type RequestPresentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// Type of Verifiable Credential - Ex "BankAccount", "PermanentResidentCard".
	CredentialType string `protobuf:"bytes,2,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RequestPresentationRequest) Reset() {
	*x = RequestPresentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationRequest) ProtoMessage() {}

func (x *RequestPresentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationRequest.ProtoReflect.Descriptor instead.
func (*RequestPresentationRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{23}
}

func (x *RequestPresentationRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *RequestPresentationRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *RequestPresentationRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"presentation": "PRESENTATION"}
type RequestPresentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON Verifiable Presentation containing the PII of the subject.
	Presentation string `protobuf:"bytes,1,opt,name=presentation,proto3" json:"presentation,omitempty"`
}

func (x *RequestPresentationResponse) Reset() {
	*x = RequestPresentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationResponse) ProtoMessage() {}

func (x *RequestPresentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationResponse.ProtoReflect.Descriptor instead.
func (*RequestPresentationResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *RequestPresentationResponse) GetPresentation() string {
	if x != nil {
		return x.Presentation
	}
	return ""
}

// [Example]{"amount": {"currency_code":"USD", "amount":100, "decimals":2}, "recipient": "RECIPIENT_PUBLIC_KEY", "user_reference": "TRANSACTION_REFERENCE", "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type PrepareSimplePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount object representing the transfer amount.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Public key of the recipient.
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	UserReference string `protobuf:"bytes,3,opt,name=user_reference,json=userReference,proto3" json:"user_reference,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,4,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *PrepareSimplePaymentRequest) Reset() {
	*x = PrepareSimplePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSimplePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSimplePaymentRequest) ProtoMessage() {}

func (x *PrepareSimplePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSimplePaymentRequest.ProtoReflect.Descriptor instead.
func (*PrepareSimplePaymentRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{25}
}

func (x *PrepareSimplePaymentRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrepareSimplePaymentRequest) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *PrepareSimplePaymentRequest) GetUserReference() string {
	if x != nil {
		return x.UserReference
	}
	return ""
}

func (x *PrepareSimplePaymentRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareSimplePaymentRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"status": 0, "uetr": "UETR"}
type PrepareSimplePaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction.
	Status PrepareSimplePaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareSimplePaymentResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareSimplePaymentResponse) Reset() {
	*x = PrepareSimplePaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSimplePaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSimplePaymentResponse) ProtoMessage() {}

func (x *PrepareSimplePaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSimplePaymentResponse.ProtoReflect.Descriptor instead.
func (*PrepareSimplePaymentResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{26}
}

func (x *PrepareSimplePaymentResponse) GetStatus() PrepareSimplePaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareSimplePaymentResponse_STATUS_UNSPECIFIED
}

func (x *PrepareSimplePaymentResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]{"amount": {"currency_code":"USD", "amount":100, "decimals":2}, "user_reference": "TRANSACTION_REFERENCE", "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type PrepareFundsChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested change amount.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	UserReference string `protobuf:"bytes,4,opt,name=user_reference,json=userReference,proto3" json:"user_reference,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *PrepareFundsChangeRequest) Reset() {
	*x = PrepareFundsChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareFundsChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareFundsChangeRequest) ProtoMessage() {}

func (x *PrepareFundsChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareFundsChangeRequest.ProtoReflect.Descriptor instead.
func (*PrepareFundsChangeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{27}
}

func (x *PrepareFundsChangeRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrepareFundsChangeRequest) GetUserReference() string {
	if x != nil {
		return x.UserReference
	}
	return ""
}

func (x *PrepareFundsChangeRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *PrepareFundsChangeRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"status": 0, "uetr": "UETR"}
type PrepareFundsChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the transaction.
	Status PrepareFundsChangeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=wallet_api.v1.PrepareFundsChangeResponse_Status" json:"status,omitempty"`
	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,2,opt,name=uetr,proto3" json:"uetr,omitempty"`
}

func (x *PrepareFundsChangeResponse) Reset() {
	*x = PrepareFundsChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareFundsChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareFundsChangeResponse) ProtoMessage() {}

func (x *PrepareFundsChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareFundsChangeResponse.ProtoReflect.Descriptor instead.
func (*PrepareFundsChangeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{28}
}

func (x *PrepareFundsChangeResponse) GetStatus() PrepareFundsChangeResponse_Status {
	if x != nil {
		return x.Status
	}
	return PrepareFundsChangeResponse_STATUS_UNSPECIFIED
}

func (x *PrepareFundsChangeResponse) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

// [Example]{"uetr": "UETR", "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,1,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{29}
}

func (x *GetTransactionRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *GetTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"transaction": {"type": 1, "role": 0, "uetr": "UETR", "amount": {"currency_code":"USD", "amount":100, "decimals":2}, "created": "CREATED_TIMESTAMP", "updated": "UPDATED_TIMESTAMP", "memo": "MEMO", "owner": "OWNER_PUBLIC_KEY", "counterparty": "COUNTERPARTY_PUBLIC_KEY", "status": 0}}
type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction objects.
	Transaction *v1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{30}
}

func (x *GetTransactionResponse) GetTransaction() *v1.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// [Example]{"id": "WALLET_ID", "api_key": "API_KEY"}
type ListTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wallet_id as UUID or public_key as multibase.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{31}
}

func (x *ListTransactionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListTransactionsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"transactions": [{"type": 1, "role": 0, "uetr": "UETR", "amount": {"currency_code":"USD", "amount":100, "decimals":2}, "created": "CREATED_TIMESTAMP", "updated": "UPDATED_TIMESTAMP", "memo": "MEMO", "owner": "OWNER_PUBLIC_KEY", "counterparty": "COUNTERPARTY_PUBLIC_KEY", "status": 0}, {"type": 2, "role": 0, "uetr": "UETR", "amount": {"currency_code":"USD", "amount":500, "decimals":2}, "created": "CREATED_TIMESTAMP", "updated": "UPDATED_TIMESTAMP", "memo": "MEMO", "owner": "OWNER_PUBLIC_KEY", "counterparty": "COUNTERPARTY_PUBLIC_KEY", "status": 1}]}
type ListTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction objects.
	Transactions []*v1.Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{32}
}

func (x *ListTransactionsResponse) GetTransactions() []*v1.Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// [Example]{"uetr": "UETR", "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type GetTransactionSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,1,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GetTransactionSnapshotRequest) Reset() {
	*x = GetTransactionSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionSnapshotRequest) ProtoMessage() {}

func (x *GetTransactionSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{33}
}

func (x *GetTransactionSnapshotRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *GetTransactionSnapshotRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionSnapshotRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"snapshot": {"status": 5, "promissories": ["PROMISSORYxIDx1", "PROMISSORYxIDx2"], "amount_transferred": {"currency_code":"USD", "amount":100, "decimals":2}, "message": "MESSAGE"}}
type GetTransactionSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction snapshots.
	Snapshot *v1.TransactionSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetTransactionSnapshotResponse) Reset() {
	*x = GetTransactionSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionSnapshotResponse) ProtoMessage() {}

func (x *GetTransactionSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{34}
}

func (x *GetTransactionSnapshotResponse) GetSnapshot() *v1.TransactionSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

// [Example]{"uetr": "UETR", "wallet_id": "WALLET_ID", "api_key": "API_KEY"}
type ListTransactionSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Unique End-to-end Transaction Reference, string of 36 unique characters.
	Uetr string `protobuf:"bytes,1,opt,name=uetr,proto3" json:"uetr,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// API key given to the wallet owner at the time of owner creation.
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ListTransactionSnapshotsRequest) Reset() {
	*x = ListTransactionSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionSnapshotsRequest) ProtoMessage() {}

func (x *ListTransactionSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{35}
}

func (x *ListTransactionSnapshotsRequest) GetUetr() string {
	if x != nil {
		return x.Uetr
	}
	return ""
}

func (x *ListTransactionSnapshotsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransactionSnapshotsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// [Example]{"snapshots": [{"status": 5, "promissories": ["PROMISSORYxIDx1", "PROMISSORYxIDx2"], "amount_transferred": {"currency_code":"USD", "amount":100, "decimals":2}, "message": "MESSAGE"}, {"status": 3, "promissories": ["PROMISSORYxIDx3", "PROMISSORYxIDx4"], "amount_transferred": {"currency_code":"USD", "amount":500, "decimals":2}, "message": "MESSAGE2"}]}
type ListTransactionSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction snapshots.
	Snapshots []*v1.TransactionSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *ListTransactionSnapshotsResponse) Reset() {
	*x = ListTransactionSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionSnapshotsResponse) ProtoMessage() {}

func (x *ListTransactionSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{36}
}

func (x *ListTransactionSnapshotsResponse) GetSnapshots() []*v1.TransactionSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type ListWalletsResponse_Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human friendly name of the wallet.
	WalletName string `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// UUID of the wallet.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Public key of the wallet.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// W3C Decentralized Identifier (DID) of the wallet.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *ListWalletsResponse_Wallet) Reset() {
	*x = ListWalletsResponse_Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsResponse_Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse_Wallet) ProtoMessage() {}

func (x *ListWalletsResponse_Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse_Wallet.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse_Wallet) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListWalletsResponse_Wallet) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListWalletsResponse_Wallet) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletsResponse_Wallet) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ListWalletsResponse_Wallet) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

type ListFundsResponse_Promissory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the digital banknote file.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// UUID of the digital banknote file.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// ISO-4217 currency code.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// Amount of the digital banknote.
	Amount int64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Decimal precision.
	Decimals uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// public key of the monetary Authority.
	Authority string `protobuf:"bytes,7,opt,name=authority,proto3" json:"authority,omitempty"`
	// public key of the Issuer.
	Issuer string `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// RFC3339 timestamp of the issuance date.
	IssuanceDate string `protobuf:"bytes,9,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	// Number of signature blocks, representing the owner history.
	BlockDepth uint32 `protobuf:"varint,10,opt,name=block_depth,json=blockDepth,proto3" json:"block_depth,omitempty"`
	// Signature of the latest block hash from the Authority.
	AuthorizationSignature []byte `protobuf:"bytes,11,opt,name=authorization_signature,json=authorizationSignature,proto3" json:"authorization_signature,omitempty"`
	// Signature of the previous owner.
	TransferSignature []byte `protobuf:"bytes,12,opt,name=transfer_signature,json=transferSignature,proto3" json:"transfer_signature,omitempty"`
}

func (x *ListFundsResponse_Promissory) Reset() {
	*x = ListFundsResponse_Promissory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundsResponse_Promissory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundsResponse_Promissory) ProtoMessage() {}

func (x *ListFundsResponse_Promissory) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundsResponse_Promissory.ProtoReflect.Descriptor instead.
func (*ListFundsResponse_Promissory) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListFundsResponse_Promissory) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListFundsResponse_Promissory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListFundsResponse_Promissory) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ListFundsResponse_Promissory) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ListFundsResponse_Promissory) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *ListFundsResponse_Promissory) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ListFundsResponse_Promissory) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ListFundsResponse_Promissory) GetIssuanceDate() string {
	if x != nil {
		return x.IssuanceDate
	}
	return ""
}

func (x *ListFundsResponse_Promissory) GetBlockDepth() uint32 {
	if x != nil {
		return x.BlockDepth
	}
	return 0
}

func (x *ListFundsResponse_Promissory) GetAuthorizationSignature() []byte {
	if x != nil {
		return x.AuthorizationSignature
	}
	return nil
}

func (x *ListFundsResponse_Promissory) GetTransferSignature() []byte {
	if x != nil {
		return x.TransferSignature
	}
	return nil
}

type ListFundsResponse_Fund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the wallet.
	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Digital Banknote object.
	Promissory *ListFundsResponse_Promissory `protobuf:"bytes,2,opt,name=promissory,proto3" json:"promissory,omitempty"`
}

func (x *ListFundsResponse_Fund) Reset() {
	*x = ListFundsResponse_Fund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_api_v1_wallet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundsResponse_Fund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundsResponse_Fund) ProtoMessage() {}

func (x *ListFundsResponse_Fund) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_api_v1_wallet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundsResponse_Fund.ProtoReflect.Descriptor instead.
func (*ListFundsResponse_Fund) Descriptor() ([]byte, []int) {
	return file_wallet_api_v1_wallet_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ListFundsResponse_Fund) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListFundsResponse_Fund) GetPromissory() *ListFundsResponse_Promissory {
	if x != nil {
		return x.Promissory
	}
	return nil
}

var File_wallet_api_v1_wallet_proto protoreflect.FileDescriptor

var file_wallet_api_v1_wallet_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x12, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x1a, 0x77, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x22,
	0x51, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x22, 0x56, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x79, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xdb, 0x04,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0xea, 0x02, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x70, 0x0a, 0x04, 0x46, 0x75, 0x6e,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x3d, 0x0a,
	0x0e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7f, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x73, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x75, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x22, 0x67, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x71, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x91,
	0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x69, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x1c, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x22, 0x6b, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xee, 0x01, 0x0a, 0x1a,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x22, 0x72, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x03, 0x22, 0x61, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22,
	0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x42, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x22, 0x53, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22,
	0x6b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x65, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x5d, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x32, 0x85, 0x0d, 0x0a, 0x0d,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6f, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x2e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x6e, 0x6f, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wallet_api_v1_wallet_proto_rawDescOnce sync.Once
	file_wallet_api_v1_wallet_proto_rawDescData = file_wallet_api_v1_wallet_proto_rawDesc
)

func file_wallet_api_v1_wallet_proto_rawDescGZIP() []byte {
	file_wallet_api_v1_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_api_v1_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_wallet_api_v1_wallet_proto_rawDescData)
	})
	return file_wallet_api_v1_wallet_proto_rawDescData
}

var file_wallet_api_v1_wallet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wallet_api_v1_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_wallet_api_v1_wallet_proto_goTypes = []interface{}{
	(PrepareSimplePaymentResponse_Status)(0), // 0: wallet_api.v1.PrepareSimplePaymentResponse.Status
	(PrepareFundsChangeResponse_Status)(0),   // 1: wallet_api.v1.PrepareFundsChangeResponse.Status
	(*TransferRequest)(nil),                  // 2: wallet_api.v1.TransferRequest
	(*TransferResponse)(nil),                 // 3: wallet_api.v1.TransferResponse
	(*CreateOwnerRequest)(nil),               // 4: wallet_api.v1.CreateOwnerRequest
	(*CreateOwnerResponse)(nil),              // 5: wallet_api.v1.CreateOwnerResponse
	(*CreateWalletRequest)(nil),              // 6: wallet_api.v1.CreateWalletRequest
	(*CreateWalletResponse)(nil),             // 7: wallet_api.v1.CreateWalletResponse
	(*ListWalletsRequest)(nil),               // 8: wallet_api.v1.ListWalletsRequest
	(*ListWalletsResponse)(nil),              // 9: wallet_api.v1.ListWalletsResponse
	(*ListWalletBalancesRequest)(nil),        // 10: wallet_api.v1.ListWalletBalancesRequest
	(*WalletBalance)(nil),                    // 11: wallet_api.v1.WalletBalance
	(*ListWalletBalancesResponse)(nil),       // 12: wallet_api.v1.ListWalletBalancesResponse
	(*ListFundsRequest)(nil),                 // 13: wallet_api.v1.ListFundsRequest
	(*ListFundsResponse)(nil),                // 14: wallet_api.v1.ListFundsResponse
	(*RedeemRequest)(nil),                    // 15: wallet_api.v1.RedeemRequest
	(*RedeemResponse)(nil),                   // 16: wallet_api.v1.RedeemResponse
	(*ListCredentialsRequest)(nil),           // 17: wallet_api.v1.ListCredentialsRequest
	(*ListCredentialsResponse)(nil),          // 18: wallet_api.v1.ListCredentialsResponse
	(*AddCredentialRequest)(nil),             // 19: wallet_api.v1.AddCredentialRequest
	(*AddCredentialResponse)(nil),            // 20: wallet_api.v1.AddCredentialResponse
	(*AssociateWalletRequest)(nil),           // 21: wallet_api.v1.AssociateWalletRequest
	(*AssociateWalletResponse)(nil),          // 22: wallet_api.v1.AssociateWalletResponse
	(*CreateAndAssociateWalletRequest)(nil),  // 23: wallet_api.v1.CreateAndAssociateWalletRequest
	(*CreateAndAssociateWalletResponse)(nil), // 24: wallet_api.v1.CreateAndAssociateWalletResponse
	(*RequestPresentationRequest)(nil),       // 25: wallet_api.v1.RequestPresentationRequest
	(*RequestPresentationResponse)(nil),      // 26: wallet_api.v1.RequestPresentationResponse
	(*PrepareSimplePaymentRequest)(nil),      // 27: wallet_api.v1.PrepareSimplePaymentRequest
	(*PrepareSimplePaymentResponse)(nil),     // 28: wallet_api.v1.PrepareSimplePaymentResponse
	(*PrepareFundsChangeRequest)(nil),        // 29: wallet_api.v1.PrepareFundsChangeRequest
	(*PrepareFundsChangeResponse)(nil),       // 30: wallet_api.v1.PrepareFundsChangeResponse
	(*GetTransactionRequest)(nil),            // 31: wallet_api.v1.GetTransactionRequest
	(*GetTransactionResponse)(nil),           // 32: wallet_api.v1.GetTransactionResponse
	(*ListTransactionsRequest)(nil),          // 33: wallet_api.v1.ListTransactionsRequest
	(*ListTransactionsResponse)(nil),         // 34: wallet_api.v1.ListTransactionsResponse
	(*GetTransactionSnapshotRequest)(nil),    // 35: wallet_api.v1.GetTransactionSnapshotRequest
	(*GetTransactionSnapshotResponse)(nil),   // 36: wallet_api.v1.GetTransactionSnapshotResponse
	(*ListTransactionSnapshotsRequest)(nil),  // 37: wallet_api.v1.ListTransactionSnapshotsRequest
	(*ListTransactionSnapshotsResponse)(nil), // 38: wallet_api.v1.ListTransactionSnapshotsResponse
	(*ListWalletsResponse_Wallet)(nil),       // 39: wallet_api.v1.ListWalletsResponse.Wallet
	(*ListFundsResponse_Promissory)(nil),     // 40: wallet_api.v1.ListFundsResponse.Promissory
	(*ListFundsResponse_Fund)(nil),           // 41: wallet_api.v1.ListFundsResponse.Fund
	(*v1.Amount)(nil),                        // 42: common.Amount
	(*v1.Transaction)(nil),                   // 43: common.Transaction
	(*v1.TransactionSnapshot)(nil),           // 44: common.TransactionSnapshot
}
var file_wallet_api_v1_wallet_proto_depIdxs = []int32{
	39, // 0: wallet_api.v1.ListWalletsResponse.wallets:type_name -> wallet_api.v1.ListWalletsResponse.Wallet
	42, // 1: wallet_api.v1.WalletBalance.amount:type_name -> common.Amount
	11, // 2: wallet_api.v1.ListWalletBalancesResponse.balances:type_name -> wallet_api.v1.WalletBalance
	41, // 3: wallet_api.v1.ListFundsResponse.funds:type_name -> wallet_api.v1.ListFundsResponse.Fund
	42, // 4: wallet_api.v1.RedeemResponse.new_limit:type_name -> common.Amount
	42, // 5: wallet_api.v1.PrepareSimplePaymentRequest.amount:type_name -> common.Amount
	0,  // 6: wallet_api.v1.PrepareSimplePaymentResponse.status:type_name -> wallet_api.v1.PrepareSimplePaymentResponse.Status
	42, // 7: wallet_api.v1.PrepareFundsChangeRequest.amount:type_name -> common.Amount
	1,  // 8: wallet_api.v1.PrepareFundsChangeResponse.status:type_name -> wallet_api.v1.PrepareFundsChangeResponse.Status
	43, // 9: wallet_api.v1.GetTransactionResponse.transaction:type_name -> common.Transaction
	43, // 10: wallet_api.v1.ListTransactionsResponse.transactions:type_name -> common.Transaction
	44, // 11: wallet_api.v1.GetTransactionSnapshotResponse.snapshot:type_name -> common.TransactionSnapshot
	44, // 12: wallet_api.v1.ListTransactionSnapshotsResponse.snapshots:type_name -> common.TransactionSnapshot
	40, // 13: wallet_api.v1.ListFundsResponse.Fund.promissory:type_name -> wallet_api.v1.ListFundsResponse.Promissory
	2,  // 14: wallet_api.v1.WalletService.Transfer:input_type -> wallet_api.v1.TransferRequest
	4,  // 15: wallet_api.v1.WalletService.CreateOwner:input_type -> wallet_api.v1.CreateOwnerRequest
	6,  // 16: wallet_api.v1.WalletService.CreateWallet:input_type -> wallet_api.v1.CreateWalletRequest
	8,  // 17: wallet_api.v1.WalletService.ListWallets:input_type -> wallet_api.v1.ListWalletsRequest
	13, // 18: wallet_api.v1.WalletService.ListFunds:input_type -> wallet_api.v1.ListFundsRequest
	10, // 19: wallet_api.v1.WalletService.ListWalletBalances:input_type -> wallet_api.v1.ListWalletBalancesRequest
	15, // 20: wallet_api.v1.WalletService.Redeem:input_type -> wallet_api.v1.RedeemRequest
	17, // 21: wallet_api.v1.WalletService.ListCredentials:input_type -> wallet_api.v1.ListCredentialsRequest
	19, // 22: wallet_api.v1.WalletService.AddCredential:input_type -> wallet_api.v1.AddCredentialRequest
	21, // 23: wallet_api.v1.WalletService.AssociateWallet:input_type -> wallet_api.v1.AssociateWalletRequest
	25, // 24: wallet_api.v1.WalletService.RequestPresentation:input_type -> wallet_api.v1.RequestPresentationRequest
	27, // 25: wallet_api.v1.WalletService.PrepareSimplePayment:input_type -> wallet_api.v1.PrepareSimplePaymentRequest
	29, // 26: wallet_api.v1.WalletService.PrepareFundsChange:input_type -> wallet_api.v1.PrepareFundsChangeRequest
	31, // 27: wallet_api.v1.WalletService.GetTransaction:input_type -> wallet_api.v1.GetTransactionRequest
	33, // 28: wallet_api.v1.WalletService.ListTransactions:input_type -> wallet_api.v1.ListTransactionsRequest
	35, // 29: wallet_api.v1.WalletService.GetTransactionSnapshot:input_type -> wallet_api.v1.GetTransactionSnapshotRequest
	37, // 30: wallet_api.v1.WalletService.ListTransactionSnapshots:input_type -> wallet_api.v1.ListTransactionSnapshotsRequest
	3,  // 31: wallet_api.v1.WalletService.Transfer:output_type -> wallet_api.v1.TransferResponse
	5,  // 32: wallet_api.v1.WalletService.CreateOwner:output_type -> wallet_api.v1.CreateOwnerResponse
	7,  // 33: wallet_api.v1.WalletService.CreateWallet:output_type -> wallet_api.v1.CreateWalletResponse
	9,  // 34: wallet_api.v1.WalletService.ListWallets:output_type -> wallet_api.v1.ListWalletsResponse
	14, // 35: wallet_api.v1.WalletService.ListFunds:output_type -> wallet_api.v1.ListFundsResponse
	12, // 36: wallet_api.v1.WalletService.ListWalletBalances:output_type -> wallet_api.v1.ListWalletBalancesResponse
	16, // 37: wallet_api.v1.WalletService.Redeem:output_type -> wallet_api.v1.RedeemResponse
	18, // 38: wallet_api.v1.WalletService.ListCredentials:output_type -> wallet_api.v1.ListCredentialsResponse
	20, // 39: wallet_api.v1.WalletService.AddCredential:output_type -> wallet_api.v1.AddCredentialResponse
	22, // 40: wallet_api.v1.WalletService.AssociateWallet:output_type -> wallet_api.v1.AssociateWalletResponse
	26, // 41: wallet_api.v1.WalletService.RequestPresentation:output_type -> wallet_api.v1.RequestPresentationResponse
	28, // 42: wallet_api.v1.WalletService.PrepareSimplePayment:output_type -> wallet_api.v1.PrepareSimplePaymentResponse
	30, // 43: wallet_api.v1.WalletService.PrepareFundsChange:output_type -> wallet_api.v1.PrepareFundsChangeResponse
	32, // 44: wallet_api.v1.WalletService.GetTransaction:output_type -> wallet_api.v1.GetTransactionResponse
	34, // 45: wallet_api.v1.WalletService.ListTransactions:output_type -> wallet_api.v1.ListTransactionsResponse
	36, // 46: wallet_api.v1.WalletService.GetTransactionSnapshot:output_type -> wallet_api.v1.GetTransactionSnapshotResponse
	38, // 47: wallet_api.v1.WalletService.ListTransactionSnapshots:output_type -> wallet_api.v1.ListTransactionSnapshotsResponse
	31, // [31:48] is the sub-list for method output_type
	14, // [14:31] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_wallet_api_v1_wallet_proto_init() }
func file_wallet_api_v1_wallet_proto_init() {
	if File_wallet_api_v1_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wallet_api_v1_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndAssociateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndAssociateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSimplePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSimplePaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareFundsChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareFundsChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsResponse_Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundsResponse_Promissory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_api_v1_wallet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundsResponse_Fund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wallet_api_v1_wallet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_api_v1_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_api_v1_wallet_proto_depIdxs,
		EnumInfos:         file_wallet_api_v1_wallet_proto_enumTypes,
		MessageInfos:      file_wallet_api_v1_wallet_proto_msgTypes,
	}.Build()
	File_wallet_api_v1_wallet_proto = out.File
	file_wallet_api_v1_wallet_proto_rawDesc = nil
	file_wallet_api_v1_wallet_proto_goTypes = nil
	file_wallet_api_v1_wallet_proto_depIdxs = nil
}
