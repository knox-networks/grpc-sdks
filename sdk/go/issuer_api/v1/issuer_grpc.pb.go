// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IssuerClient is the client API for Issuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssuerClient interface {
	// Checks that the Verifier is authenticated, then stores and returns the challenge nonce.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Sends a stream of digital banknotes to be authorized. The digital banknote is checked to see if it is transferred to the new owner, but not yet authorized. IT is then checked for double spends, signed and saved to check for future double spends. The newly authorized promissory files are returned as a stream.
	Authorize(ctx context.Context, opts ...grpc.CallOption) (Issuer_AuthorizeClient, error)
	// Issues digital banknotes against the corresponding issuance limit set by an Authority.  The Issuer must collect the Authenticate challenge signature, the Amount with a total amount, decimal place precision, and a currency code, along with the verifier of the Authority.
	Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (Issuer_IssueClient, error)
	// Gets the roles configured for the Issuer- ex Currency limit for issuance.
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	// Sets the roles configured for the Issuer- Ex List of the currency limits.
	SetRole(ctx context.Context, in *SetRoleRequest, opts ...grpc.CallOption) (*SetRoleResponse, error)
}

type issuerClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuerClient(cc grpc.ClientConnInterface) IssuerClient {
	return &issuerClient{cc}
}

func (c *issuerClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/issuer_api.v1.Issuer/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerClient) Authorize(ctx context.Context, opts ...grpc.CallOption) (Issuer_AuthorizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Issuer_ServiceDesc.Streams[0], "/issuer_api.v1.Issuer/Authorize", opts...)
	if err != nil {
		return nil, err
	}
	x := &issuerAuthorizeClient{stream}
	return x, nil
}

type Issuer_AuthorizeClient interface {
	Send(*AuthorizeRequest) error
	Recv() (*AuthorizeResponse, error)
	grpc.ClientStream
}

type issuerAuthorizeClient struct {
	grpc.ClientStream
}

func (x *issuerAuthorizeClient) Send(m *AuthorizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *issuerAuthorizeClient) Recv() (*AuthorizeResponse, error) {
	m := new(AuthorizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *issuerClient) Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (Issuer_IssueClient, error) {
	stream, err := c.cc.NewStream(ctx, &Issuer_ServiceDesc.Streams[1], "/issuer_api.v1.Issuer/Issue", opts...)
	if err != nil {
		return nil, err
	}
	x := &issuerIssueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Issuer_IssueClient interface {
	Recv() (*IssueResponse, error)
	grpc.ClientStream
}

type issuerIssueClient struct {
	grpc.ClientStream
}

func (x *issuerIssueClient) Recv() (*IssueResponse, error) {
	m := new(IssueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *issuerClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/issuer_api.v1.Issuer/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerClient) SetRole(ctx context.Context, in *SetRoleRequest, opts ...grpc.CallOption) (*SetRoleResponse, error) {
	out := new(SetRoleResponse)
	err := c.cc.Invoke(ctx, "/issuer_api.v1.Issuer/SetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServer is the server API for Issuer service.
// All implementations must embed UnimplementedIssuerServer
// for forward compatibility
type IssuerServer interface {
	// Checks that the Verifier is authenticated, then stores and returns the challenge nonce.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Sends a stream of digital banknotes to be authorized. The digital banknote is checked to see if it is transferred to the new owner, but not yet authorized. IT is then checked for double spends, signed and saved to check for future double spends. The newly authorized promissory files are returned as a stream.
	Authorize(Issuer_AuthorizeServer) error
	// Issues digital banknotes against the corresponding issuance limit set by an Authority.  The Issuer must collect the Authenticate challenge signature, the Amount with a total amount, decimal place precision, and a currency code, along with the verifier of the Authority.
	Issue(*IssueRequest, Issuer_IssueServer) error
	// Gets the roles configured for the Issuer- ex Currency limit for issuance.
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	// Sets the roles configured for the Issuer- Ex List of the currency limits.
	SetRole(context.Context, *SetRoleRequest) (*SetRoleResponse, error)
	mustEmbedUnimplementedIssuerServer()
}

// UnimplementedIssuerServer must be embedded to have forward compatible implementations.
type UnimplementedIssuerServer struct {
}

func (UnimplementedIssuerServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedIssuerServer) Authorize(Issuer_AuthorizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedIssuerServer) Issue(*IssueRequest, Issuer_IssueServer) error {
	return status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedIssuerServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedIssuerServer) SetRole(context.Context, *SetRoleRequest) (*SetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (UnimplementedIssuerServer) mustEmbedUnimplementedIssuerServer() {}

// UnsafeIssuerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssuerServer will
// result in compilation errors.
type UnsafeIssuerServer interface {
	mustEmbedUnimplementedIssuerServer()
}

func RegisterIssuerServer(s grpc.ServiceRegistrar, srv IssuerServer) {
	s.RegisterService(&Issuer_ServiceDesc, srv)
}

func _Issuer_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_api.v1.Issuer/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issuer_Authorize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IssuerServer).Authorize(&issuerAuthorizeServer{stream})
}

type Issuer_AuthorizeServer interface {
	Send(*AuthorizeResponse) error
	Recv() (*AuthorizeRequest, error)
	grpc.ServerStream
}

type issuerAuthorizeServer struct {
	grpc.ServerStream
}

func (x *issuerAuthorizeServer) Send(m *AuthorizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *issuerAuthorizeServer) Recv() (*AuthorizeRequest, error) {
	m := new(AuthorizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Issuer_Issue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IssueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IssuerServer).Issue(m, &issuerIssueServer{stream})
}

type Issuer_IssueServer interface {
	Send(*IssueResponse) error
	grpc.ServerStream
}

type issuerIssueServer struct {
	grpc.ServerStream
}

func (x *issuerIssueServer) Send(m *IssueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Issuer_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_api.v1.Issuer/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issuer_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_api.v1.Issuer/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).SetRole(ctx, req.(*SetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Issuer_ServiceDesc is the grpc.ServiceDesc for Issuer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Issuer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "issuer_api.v1.Issuer",
	HandlerType: (*IssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Issuer_Authenticate_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Issuer_GetRoles_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _Issuer_SetRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Authorize",
			Handler:       _Issuer_Authorize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Issue",
			Handler:       _Issuer_Issue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "issuer_api/v1/issuer.proto",
}
