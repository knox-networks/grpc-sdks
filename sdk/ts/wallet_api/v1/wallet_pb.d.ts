/* eslint-disable */
/*Generated by GenDocu.com*/
// package: wallet_api.v1
// file: wallet_api/v1/wallet.proto

import * as jspb from "google-protobuf";
import * as common_v1_common_pb from "../../common/v1/common_pb";
import * as common_v1_packet_pb from "../../common/v1/packet_pb";

export class TransferRequest extends jspb.Message {
  getFromWalletId(): string;
  setFromWalletId(value: string): void;

  getRecipientPublicKey(): string;
  setRecipientPublicKey(value: string): void;

  getPromissoryId(): string;
  setPromissoryId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TransferRequest.AsObject;
  static toObject(includeInstance: boolean, msg: TransferRequest): TransferRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TransferRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TransferRequest;
  static deserializeBinaryFromReader(message: TransferRequest, reader: jspb.BinaryReader): TransferRequest;
}

export namespace TransferRequest {
  export type AsObject = {
    fromWalletId: string,
    recipientPublicKey: string,
    promissoryId: string,
    apiKey: string,
  }
}

export class TransferResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TransferResponse.AsObject;
  static toObject(includeInstance: boolean, msg: TransferResponse): TransferResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TransferResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TransferResponse;
  static deserializeBinaryFromReader(message: TransferResponse, reader: jspb.BinaryReader): TransferResponse;
}

export namespace TransferResponse {
  export type AsObject = {
  }
}

export class CreateOwnerRequest extends jspb.Message {
  getOwnerName(): string;
  setOwnerName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOwnerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateOwnerRequest): CreateOwnerRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateOwnerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateOwnerRequest;
  static deserializeBinaryFromReader(message: CreateOwnerRequest, reader: jspb.BinaryReader): CreateOwnerRequest;
}

export namespace CreateOwnerRequest {
  export type AsObject = {
    ownerName: string,
  }
}

export class CreateOwnerResponse extends jspb.Message {
  getOwnerId(): string;
  setOwnerId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  getOwnerName(): string;
  setOwnerName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOwnerResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateOwnerResponse): CreateOwnerResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateOwnerResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateOwnerResponse;
  static deserializeBinaryFromReader(message: CreateOwnerResponse, reader: jspb.BinaryReader): CreateOwnerResponse;
}

export namespace CreateOwnerResponse {
  export type AsObject = {
    ownerId: string,
    apiKey: string,
    ownerName: string,
  }
}

export class CreateWalletRequest extends jspb.Message {
  getWalletName(): string;
  setWalletName(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateWalletRequest): CreateWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateWalletRequest;
  static deserializeBinaryFromReader(message: CreateWalletRequest, reader: jspb.BinaryReader): CreateWalletRequest;
}

export namespace CreateWalletRequest {
  export type AsObject = {
    walletName: string,
    apiKey: string,
  }
}

export class CreateWalletResponse extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getWalletName(): string;
  setWalletName(value: string): void;

  getPublicKey(): string;
  setPublicKey(value: string): void;

  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateWalletResponse): CreateWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateWalletResponse;
  static deserializeBinaryFromReader(message: CreateWalletResponse, reader: jspb.BinaryReader): CreateWalletResponse;
}

export namespace CreateWalletResponse {
  export type AsObject = {
    walletId: string,
    walletName: string,
    publicKey: string,
    did: string,
  }
}

export class ListWalletsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): void;

  getPageSize(): number;
  setPageSize(value: number): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  hasFilters(): boolean;
  clearFilters(): void;
  getFilters(): common_v1_common_pb.Filter | undefined;
  setFilters(value?: common_v1_common_pb.Filter): void;

  hasSortBy(): boolean;
  clearSortBy(): void;
  getSortBy(): common_v1_common_pb.SortBy | undefined;
  setSortBy(value?: common_v1_common_pb.SortBy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListWalletsRequest): ListWalletsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListWalletsRequest;
  static deserializeBinaryFromReader(message: ListWalletsRequest, reader: jspb.BinaryReader): ListWalletsRequest;
}

export namespace ListWalletsRequest {
  export type AsObject = {
    page: number,
    pageSize: number,
    apiKey: string,
    filters?: common_v1_common_pb.Filter.AsObject,
    sortBy?: common_v1_common_pb.SortBy.AsObject,
  }
}

export class ListWalletsResponse extends jspb.Message {
  clearWalletsList(): void;
  getWalletsList(): Array<ListWalletsResponse.Wallet>;
  setWalletsList(value: Array<ListWalletsResponse.Wallet>): void;
  addWallets(value?: ListWalletsResponse.Wallet, index?: number): ListWalletsResponse.Wallet;

  getTotalOwnedWallets(): number;
  setTotalOwnedWallets(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListWalletsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListWalletsResponse): ListWalletsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListWalletsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListWalletsResponse;
  static deserializeBinaryFromReader(message: ListWalletsResponse, reader: jspb.BinaryReader): ListWalletsResponse;
}

export namespace ListWalletsResponse {
  export type AsObject = {
    walletsList: Array<ListWalletsResponse.Wallet.AsObject>,
    totalOwnedWallets: number,
  }

  export class Wallet extends jspb.Message {
    getWalletName(): string;
    setWalletName(value: string): void;

    getWalletId(): string;
    setWalletId(value: string): void;

    getPublicKey(): string;
    setPublicKey(value: string): void;

    getDid(): string;
    setDid(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Wallet.AsObject;
    static toObject(includeInstance: boolean, msg: Wallet): Wallet.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Wallet, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Wallet;
    static deserializeBinaryFromReader(message: Wallet, reader: jspb.BinaryReader): Wallet;
  }

  export namespace Wallet {
    export type AsObject = {
      walletName: string,
      walletId: string,
      publicKey: string,
      did: string,
    }
  }
}

export class ListWalletBalancesRequest extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  hasSortBy(): boolean;
  clearSortBy(): void;
  getSortBy(): common_v1_common_pb.SortBy | undefined;
  setSortBy(value?: common_v1_common_pb.SortBy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListWalletBalancesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListWalletBalancesRequest): ListWalletBalancesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListWalletBalancesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListWalletBalancesRequest;
  static deserializeBinaryFromReader(message: ListWalletBalancesRequest, reader: jspb.BinaryReader): ListWalletBalancesRequest;
}

export namespace ListWalletBalancesRequest {
  export type AsObject = {
    walletId: string,
    apiKey: string,
    sortBy?: common_v1_common_pb.SortBy.AsObject,
  }
}

export class WalletBalance extends jspb.Message {
  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): common_v1_common_pb.Amount | undefined;
  setAmount(value?: common_v1_common_pb.Amount): void;

  getFileCount(): number;
  setFileCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WalletBalance.AsObject;
  static toObject(includeInstance: boolean, msg: WalletBalance): WalletBalance.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: WalletBalance, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WalletBalance;
  static deserializeBinaryFromReader(message: WalletBalance, reader: jspb.BinaryReader): WalletBalance;
}

export namespace WalletBalance {
  export type AsObject = {
    amount?: common_v1_common_pb.Amount.AsObject,
    fileCount: number,
  }
}

export class ListWalletBalancesResponse extends jspb.Message {
  clearBalancesList(): void;
  getBalancesList(): Array<WalletBalance>;
  setBalancesList(value: Array<WalletBalance>): void;
  addBalances(value?: WalletBalance, index?: number): WalletBalance;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListWalletBalancesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListWalletBalancesResponse): ListWalletBalancesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListWalletBalancesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListWalletBalancesResponse;
  static deserializeBinaryFromReader(message: ListWalletBalancesResponse, reader: jspb.BinaryReader): ListWalletBalancesResponse;
}

export namespace ListWalletBalancesResponse {
  export type AsObject = {
    balancesList: Array<WalletBalance.AsObject>,
  }
}

export class ListAssetFilesRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): void;

  getPageSize(): number;
  setPageSize(value: number): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  hasFilters(): boolean;
  clearFilters(): void;
  getFilters(): common_v1_common_pb.Filter | undefined;
  setFilters(value?: common_v1_common_pb.Filter): void;

  hasSortBy(): boolean;
  clearSortBy(): void;
  getSortBy(): common_v1_common_pb.SortBy | undefined;
  setSortBy(value?: common_v1_common_pb.SortBy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListAssetFilesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListAssetFilesRequest): ListAssetFilesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListAssetFilesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListAssetFilesRequest;
  static deserializeBinaryFromReader(message: ListAssetFilesRequest, reader: jspb.BinaryReader): ListAssetFilesRequest;
}

export namespace ListAssetFilesRequest {
  export type AsObject = {
    page: number,
    pageSize: number,
    walletId: string,
    apiKey: string,
    filters?: common_v1_common_pb.Filter.AsObject,
    sortBy?: common_v1_common_pb.SortBy.AsObject,
  }
}

export class ListAssetFilesResponse extends jspb.Message {
  clearFundsList(): void;
  getFundsList(): Array<ListAssetFilesResponse.Fund>;
  setFundsList(value: Array<ListAssetFilesResponse.Fund>): void;
  addFunds(value?: ListAssetFilesResponse.Fund, index?: number): ListAssetFilesResponse.Fund;

  getTotalOwnedFunds(): number;
  setTotalOwnedFunds(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListAssetFilesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListAssetFilesResponse): ListAssetFilesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListAssetFilesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListAssetFilesResponse;
  static deserializeBinaryFromReader(message: ListAssetFilesResponse, reader: jspb.BinaryReader): ListAssetFilesResponse;
}

export namespace ListAssetFilesResponse {
  export type AsObject = {
    fundsList: Array<ListAssetFilesResponse.Fund.AsObject>,
    totalOwnedFunds: number,
  }

  export class Notary extends jspb.Message {
    getDid(): string;
    setDid(value: string): void;

    getSignature(): Uint8Array | string;
    getSignature_asU8(): Uint8Array;
    getSignature_asB64(): string;
    setSignature(value: Uint8Array | string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Notary.AsObject;
    static toObject(includeInstance: boolean, msg: Notary): Notary.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Notary, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Notary;
    static deserializeBinaryFromReader(message: Notary, reader: jspb.BinaryReader): Notary;
  }

  export namespace Notary {
    export type AsObject = {
      did: string,
      signature: Uint8Array | string,
    }
  }

  export class Promissory extends jspb.Message {
    getVersion(): string;
    setVersion(value: string): void;

    getId(): string;
    setId(value: string): void;

    getCurrency(): string;
    setCurrency(value: string): void;

    getAmount(): number;
    setAmount(value: number): void;

    getDecimals(): number;
    setDecimals(value: number): void;

    getAuthority(): string;
    setAuthority(value: string): void;

    getIssuer(): string;
    setIssuer(value: string): void;

    getIssuanceDate(): string;
    setIssuanceDate(value: string): void;

    getBlockDepth(): number;
    setBlockDepth(value: number): void;

    getAuthorizationSignature(): Uint8Array | string;
    getAuthorizationSignature_asU8(): Uint8Array;
    getAuthorizationSignature_asB64(): string;
    setAuthorizationSignature(value: Uint8Array | string): void;

    getTransferSignature(): Uint8Array | string;
    getTransferSignature_asU8(): Uint8Array;
    getTransferSignature_asB64(): string;
    setTransferSignature(value: Uint8Array | string): void;

    clearNotariesList(): void;
    getNotariesList(): Array<ListAssetFilesResponse.Notary>;
    setNotariesList(value: Array<ListAssetFilesResponse.Notary>): void;
    addNotaries(value?: ListAssetFilesResponse.Notary, index?: number): ListAssetFilesResponse.Notary;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Promissory.AsObject;
    static toObject(includeInstance: boolean, msg: Promissory): Promissory.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Promissory, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Promissory;
    static deserializeBinaryFromReader(message: Promissory, reader: jspb.BinaryReader): Promissory;
  }

  export namespace Promissory {
    export type AsObject = {
      version: string,
      id: string,
      currency: string,
      amount: number,
      decimals: number,
      authority: string,
      issuer: string,
      issuanceDate: string,
      blockDepth: number,
      authorizationSignature: Uint8Array | string,
      transferSignature: Uint8Array | string,
      notariesList: Array<ListAssetFilesResponse.Notary.AsObject>,
    }
  }

  export class Fund extends jspb.Message {
    getWalletId(): string;
    setWalletId(value: string): void;

    hasPromissory(): boolean;
    clearPromissory(): void;
    getPromissory(): ListAssetFilesResponse.Promissory | undefined;
    setPromissory(value?: ListAssetFilesResponse.Promissory): void;

    getReserved(): boolean;
    setReserved(value: boolean): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Fund.AsObject;
    static toObject(includeInstance: boolean, msg: Fund): Fund.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Fund, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Fund;
    static deserializeBinaryFromReader(message: Fund, reader: jspb.BinaryReader): Fund;
  }

  export namespace Fund {
    export type AsObject = {
      walletId: string,
      promissory?: ListAssetFilesResponse.Promissory.AsObject,
      reserved: boolean,
    }
  }
}

export class RedeemRequest extends jspb.Message {
  getFromWalletId(): string;
  setFromWalletId(value: string): void;

  getIssuerPublicKey(): string;
  setIssuerPublicKey(value: string): void;

  getPromissoryId(): string;
  setPromissoryId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RedeemRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RedeemRequest): RedeemRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RedeemRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RedeemRequest;
  static deserializeBinaryFromReader(message: RedeemRequest, reader: jspb.BinaryReader): RedeemRequest;
}

export namespace RedeemRequest {
  export type AsObject = {
    fromWalletId: string,
    issuerPublicKey: string,
    promissoryId: string,
    apiKey: string,
  }
}

export class RedeemResponse extends jspb.Message {
  hasNewLimit(): boolean;
  clearNewLimit(): void;
  getNewLimit(): common_v1_common_pb.Amount | undefined;
  setNewLimit(value?: common_v1_common_pb.Amount): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RedeemResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RedeemResponse): RedeemResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RedeemResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RedeemResponse;
  static deserializeBinaryFromReader(message: RedeemResponse, reader: jspb.BinaryReader): RedeemResponse;
}

export namespace RedeemResponse {
  export type AsObject = {
    newLimit?: common_v1_common_pb.Amount.AsObject,
  }
}

export class ListCredentialsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): void;

  getPageSize(): number;
  setPageSize(value: number): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  hasFilters(): boolean;
  clearFilters(): void;
  getFilters(): common_v1_common_pb.Filter | undefined;
  setFilters(value?: common_v1_common_pb.Filter): void;

  hasSortBy(): boolean;
  clearSortBy(): void;
  getSortBy(): common_v1_common_pb.SortBy | undefined;
  setSortBy(value?: common_v1_common_pb.SortBy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListCredentialsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListCredentialsRequest): ListCredentialsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListCredentialsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListCredentialsRequest;
  static deserializeBinaryFromReader(message: ListCredentialsRequest, reader: jspb.BinaryReader): ListCredentialsRequest;
}

export namespace ListCredentialsRequest {
  export type AsObject = {
    page: number,
    pageSize: number,
    walletId: string,
    apiKey: string,
    filters?: common_v1_common_pb.Filter.AsObject,
    sortBy?: common_v1_common_pb.SortBy.AsObject,
  }
}

export class ListCredentialsResponse extends jspb.Message {
  clearCredentialsList(): void;
  getCredentialsList(): Array<string>;
  setCredentialsList(value: Array<string>): void;
  addCredentials(value: string, index?: number): string;

  getTotalOwnedCredentials(): number;
  setTotalOwnedCredentials(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListCredentialsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListCredentialsResponse): ListCredentialsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListCredentialsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListCredentialsResponse;
  static deserializeBinaryFromReader(message: ListCredentialsResponse, reader: jspb.BinaryReader): ListCredentialsResponse;
}

export namespace ListCredentialsResponse {
  export type AsObject = {
    credentialsList: Array<string>,
    totalOwnedCredentials: number,
  }
}

export class AddCredentialRequest extends jspb.Message {
  getCredentialType(): string;
  setCredentialType(value: string): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddCredentialRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AddCredentialRequest): AddCredentialRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddCredentialRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddCredentialRequest;
  static deserializeBinaryFromReader(message: AddCredentialRequest, reader: jspb.BinaryReader): AddCredentialRequest;
}

export namespace AddCredentialRequest {
  export type AsObject = {
    credentialType: string,
    walletId: string,
    apiKey: string,
  }
}

export class AddCredentialResponse extends jspb.Message {
  getCredential(): string;
  setCredential(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddCredentialResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AddCredentialResponse): AddCredentialResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddCredentialResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddCredentialResponse;
  static deserializeBinaryFromReader(message: AddCredentialResponse, reader: jspb.BinaryReader): AddCredentialResponse;
}

export namespace AddCredentialResponse {
  export type AsObject = {
    credential: string,
  }
}

export class AssociateWalletRequest extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssociateWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AssociateWalletRequest): AssociateWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssociateWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssociateWalletRequest;
  static deserializeBinaryFromReader(message: AssociateWalletRequest, reader: jspb.BinaryReader): AssociateWalletRequest;
}

export namespace AssociateWalletRequest {
  export type AsObject = {
    walletId: string,
    apiKey: string,
  }
}

export class AssociateWalletResponse extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getDid(): string;
  setDid(value: string): void;

  getPublicKey(): string;
  setPublicKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssociateWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AssociateWalletResponse): AssociateWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssociateWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssociateWalletResponse;
  static deserializeBinaryFromReader(message: AssociateWalletResponse, reader: jspb.BinaryReader): AssociateWalletResponse;
}

export namespace AssociateWalletResponse {
  export type AsObject = {
    walletId: string,
    did: string,
    publicKey: string,
  }
}

export class CreateAndAssociateWalletRequest extends jspb.Message {
  getWalletName(): string;
  setWalletName(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  getToken(): string;
  setToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAndAssociateWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAndAssociateWalletRequest): CreateAndAssociateWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateAndAssociateWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAndAssociateWalletRequest;
  static deserializeBinaryFromReader(message: CreateAndAssociateWalletRequest, reader: jspb.BinaryReader): CreateAndAssociateWalletRequest;
}

export namespace CreateAndAssociateWalletRequest {
  export type AsObject = {
    walletName: string,
    apiKey: string,
    token: string,
  }
}

export class CreateAndAssociateWalletResponse extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getWalletName(): string;
  setWalletName(value: string): void;

  getPublicKey(): string;
  setPublicKey(value: string): void;

  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAndAssociateWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAndAssociateWalletResponse): CreateAndAssociateWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateAndAssociateWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAndAssociateWalletResponse;
  static deserializeBinaryFromReader(message: CreateAndAssociateWalletResponse, reader: jspb.BinaryReader): CreateAndAssociateWalletResponse;
}

export namespace CreateAndAssociateWalletResponse {
  export type AsObject = {
    walletId: string,
    walletName: string,
    publicKey: string,
    did: string,
  }
}

export class RequestPresentationRequest extends jspb.Message {
  getDid(): string;
  setDid(value: string): void;

  getCredentialType(): string;
  setCredentialType(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestPresentationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RequestPresentationRequest): RequestPresentationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestPresentationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestPresentationRequest;
  static deserializeBinaryFromReader(message: RequestPresentationRequest, reader: jspb.BinaryReader): RequestPresentationRequest;
}

export namespace RequestPresentationRequest {
  export type AsObject = {
    did: string,
    credentialType: string,
    apiKey: string,
  }
}

export class RequestPresentationResponse extends jspb.Message {
  getPresentation(): string;
  setPresentation(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestPresentationResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RequestPresentationResponse): RequestPresentationResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestPresentationResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestPresentationResponse;
  static deserializeBinaryFromReader(message: RequestPresentationResponse, reader: jspb.BinaryReader): RequestPresentationResponse;
}

export namespace RequestPresentationResponse {
  export type AsObject = {
    presentation: string,
  }
}

export class PrepareFundsChangeRequest extends jspb.Message {
  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): common_v1_common_pb.Amount | undefined;
  setAmount(value?: common_v1_common_pb.Amount): void;

  getUserReference(): string;
  setUserReference(value: string): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareFundsChangeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareFundsChangeRequest): PrepareFundsChangeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareFundsChangeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareFundsChangeRequest;
  static deserializeBinaryFromReader(message: PrepareFundsChangeRequest, reader: jspb.BinaryReader): PrepareFundsChangeRequest;
}

export namespace PrepareFundsChangeRequest {
  export type AsObject = {
    amount?: common_v1_common_pb.Amount.AsObject,
    userReference: string,
    walletId: string,
    apiKey: string,
  }
}

export class PrepareFundsChangeResponse extends jspb.Message {
  getStatus(): PrepareFundsChangeResponse.StatusMap[keyof PrepareFundsChangeResponse.StatusMap];
  setStatus(value: PrepareFundsChangeResponse.StatusMap[keyof PrepareFundsChangeResponse.StatusMap]): void;

  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareFundsChangeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareFundsChangeResponse): PrepareFundsChangeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareFundsChangeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareFundsChangeResponse;
  static deserializeBinaryFromReader(message: PrepareFundsChangeResponse, reader: jspb.BinaryReader): PrepareFundsChangeResponse;
}

export namespace PrepareFundsChangeResponse {
  export type AsObject = {
    status: PrepareFundsChangeResponse.StatusMap[keyof PrepareFundsChangeResponse.StatusMap],
    uetr: string,
  }

  export interface StatusMap {
    STATUS_UNSPECIFIED: 0;
    STATUS_SUCCESS: 1;
    STATUS_INSUFFICIENT_FUNDS: 2;
    STATUS_FUNDS_PRESENT_NOOP: 3;
  }

  export const Status: StatusMap;
}

export class PrepareTransactionRequest extends jspb.Message {
  getApiKey(): string;
  setApiKey(value: string): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  clearCommitmentsList(): void;
  getCommitmentsList(): Array<common_v1_packet_pb.Commitment>;
  setCommitmentsList(value: Array<common_v1_packet_pb.Commitment>): void;
  addCommitments(value?: common_v1_packet_pb.Commitment, index?: number): common_v1_packet_pb.Commitment;

  clearConditionsList(): void;
  getConditionsList(): Array<common_v1_packet_pb.Condition>;
  setConditionsList(value: Array<common_v1_packet_pb.Condition>): void;
  addConditions(value?: common_v1_packet_pb.Condition, index?: number): common_v1_packet_pb.Condition;

  getMemo(): string;
  setMemo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareTransactionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareTransactionRequest): PrepareTransactionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareTransactionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareTransactionRequest;
  static deserializeBinaryFromReader(message: PrepareTransactionRequest, reader: jspb.BinaryReader): PrepareTransactionRequest;
}

export namespace PrepareTransactionRequest {
  export type AsObject = {
    apiKey: string,
    walletId: string,
    commitmentsList: Array<common_v1_packet_pb.Commitment.AsObject>,
    conditionsList: Array<common_v1_packet_pb.Condition.AsObject>,
    memo: string,
  }
}

export class PrepareTransactionResponse extends jspb.Message {
  getStatus(): PrepareTransactionResponse.StatusMap[keyof PrepareTransactionResponse.StatusMap];
  setStatus(value: PrepareTransactionResponse.StatusMap[keyof PrepareTransactionResponse.StatusMap]): void;

  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareTransactionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareTransactionResponse): PrepareTransactionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareTransactionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareTransactionResponse;
  static deserializeBinaryFromReader(message: PrepareTransactionResponse, reader: jspb.BinaryReader): PrepareTransactionResponse;
}

export namespace PrepareTransactionResponse {
  export type AsObject = {
    status: PrepareTransactionResponse.StatusMap[keyof PrepareTransactionResponse.StatusMap],
    uetr: string,
  }

  export interface StatusMap {
    UNSPECIFIED: 0;
    SUCCESS: 1;
    FAILURE: 2;
  }

  export const Status: StatusMap;
}

export class ListTransactionsRequest extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  hasFilters(): boolean;
  clearFilters(): void;
  getFilters(): common_v1_common_pb.Filter | undefined;
  setFilters(value?: common_v1_common_pb.Filter): void;

  getPage(): number;
  setPage(value: number): void;

  getPageSize(): number;
  setPageSize(value: number): void;

  hasSortBy(): boolean;
  clearSortBy(): void;
  getSortBy(): common_v1_common_pb.SortBy | undefined;
  setSortBy(value?: common_v1_common_pb.SortBy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListTransactionsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListTransactionsRequest): ListTransactionsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListTransactionsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListTransactionsRequest;
  static deserializeBinaryFromReader(message: ListTransactionsRequest, reader: jspb.BinaryReader): ListTransactionsRequest;
}

export namespace ListTransactionsRequest {
  export type AsObject = {
    walletId: string,
    apiKey: string,
    filters?: common_v1_common_pb.Filter.AsObject,
    page: number,
    pageSize: number,
    sortBy?: common_v1_common_pb.SortBy.AsObject,
  }
}

export class ContractSummary extends jspb.Message {
  getContractId(): string;
  setContractId(value: string): void;

  getContractType(): string;
  setContractType(value: string): void;

  getCreated(): string;
  setCreated(value: string): void;

  clearCounterpartiesList(): void;
  getCounterpartiesList(): Array<string>;
  setCounterpartiesList(value: Array<string>): void;
  addCounterparties(value: string, index?: number): string;

  getStatus(): string;
  setStatus(value: string): void;

  getMemo(): string;
  setMemo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ContractSummary.AsObject;
  static toObject(includeInstance: boolean, msg: ContractSummary): ContractSummary.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ContractSummary, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ContractSummary;
  static deserializeBinaryFromReader(message: ContractSummary, reader: jspb.BinaryReader): ContractSummary;
}

export namespace ContractSummary {
  export type AsObject = {
    contractId: string,
    contractType: string,
    created: string,
    counterpartiesList: Array<string>,
    status: string,
    memo: string,
  }
}

export class ListTransactionsResponse extends jspb.Message {
  clearContractsList(): void;
  getContractsList(): Array<ContractSummary>;
  setContractsList(value: Array<ContractSummary>): void;
  addContracts(value?: ContractSummary, index?: number): ContractSummary;

  getTotalcontracts(): number;
  setTotalcontracts(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListTransactionsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListTransactionsResponse): ListTransactionsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListTransactionsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListTransactionsResponse;
  static deserializeBinaryFromReader(message: ListTransactionsResponse, reader: jspb.BinaryReader): ListTransactionsResponse;
}

export namespace ListTransactionsResponse {
  export type AsObject = {
    contractsList: Array<ContractSummary.AsObject>,
    totalcontracts: number,
  }
}

export class BalanceDetail extends jspb.Message {
  hasBalance(): boolean;
  clearBalance(): void;
  getBalance(): WalletBalance | undefined;
  setBalance(value?: WalletBalance): void;

  getKind(): BalanceDetail.KindMap[keyof BalanceDetail.KindMap];
  setKind(value: BalanceDetail.KindMap[keyof BalanceDetail.KindMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BalanceDetail.AsObject;
  static toObject(includeInstance: boolean, msg: BalanceDetail): BalanceDetail.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BalanceDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BalanceDetail;
  static deserializeBinaryFromReader(message: BalanceDetail, reader: jspb.BinaryReader): BalanceDetail;
}

export namespace BalanceDetail {
  export type AsObject = {
    balance?: WalletBalance.AsObject,
    kind: BalanceDetail.KindMap[keyof BalanceDetail.KindMap],
  }

  export interface KindMap {
    KIND_AVAILABLE: 0;
    KIND_RESERVED: 1;
  }

  export const Kind: KindMap;
}

export class ListWalletBalanceDetailsRequest extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListWalletBalanceDetailsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListWalletBalanceDetailsRequest): ListWalletBalanceDetailsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListWalletBalanceDetailsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListWalletBalanceDetailsRequest;
  static deserializeBinaryFromReader(message: ListWalletBalanceDetailsRequest, reader: jspb.BinaryReader): ListWalletBalanceDetailsRequest;
}

export namespace ListWalletBalanceDetailsRequest {
  export type AsObject = {
    walletId: string,
    apiKey: string,
  }
}

export class ListWalletBalanceDetailsResponse extends jspb.Message {
  clearBalancesList(): void;
  getBalancesList(): Array<BalanceDetail>;
  setBalancesList(value: Array<BalanceDetail>): void;
  addBalances(value?: BalanceDetail, index?: number): BalanceDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListWalletBalanceDetailsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListWalletBalanceDetailsResponse): ListWalletBalanceDetailsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListWalletBalanceDetailsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListWalletBalanceDetailsResponse;
  static deserializeBinaryFromReader(message: ListWalletBalanceDetailsResponse, reader: jspb.BinaryReader): ListWalletBalanceDetailsResponse;
}

export namespace ListWalletBalanceDetailsResponse {
  export type AsObject = {
    balancesList: Array<BalanceDetail.AsObject>,
  }
}

export class GetTransactionDetailRequest extends jspb.Message {
  getWalletId(): string;
  setWalletId(value: string): void;

  getApiKey(): string;
  setApiKey(value: string): void;

  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTransactionDetailRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetTransactionDetailRequest): GetTransactionDetailRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetTransactionDetailRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTransactionDetailRequest;
  static deserializeBinaryFromReader(message: GetTransactionDetailRequest, reader: jspb.BinaryReader): GetTransactionDetailRequest;
}

export namespace GetTransactionDetailRequest {
  export type AsObject = {
    walletId: string,
    apiKey: string,
    uetr: string,
  }
}

export class GetTransactionDetailResponse extends jspb.Message {
  getContractType(): string;
  setContractType(value: string): void;

  clearCommitmentsList(): void;
  getCommitmentsList(): Array<common_v1_packet_pb.Commitment>;
  setCommitmentsList(value: Array<common_v1_packet_pb.Commitment>): void;
  addCommitments(value?: common_v1_packet_pb.Commitment, index?: number): common_v1_packet_pb.Commitment;

  getCreated(): string;
  setCreated(value: string): void;

  getHashPresenter(): string;
  setHashPresenter(value: string): void;

  getHash(): Uint8Array | string;
  getHash_asU8(): Uint8Array;
  getHash_asB64(): string;
  setHash(value: Uint8Array | string): void;

  getExpiration(): string;
  setExpiration(value: string): void;

  getMemo(): string;
  setMemo(value: string): void;

  clearLogList(): void;
  getLogList(): Array<GetTransactionDetailResponse.LogEntry>;
  setLogList(value: Array<GetTransactionDetailResponse.LogEntry>): void;
  addLog(value?: GetTransactionDetailResponse.LogEntry, index?: number): GetTransactionDetailResponse.LogEntry;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTransactionDetailResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetTransactionDetailResponse): GetTransactionDetailResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetTransactionDetailResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTransactionDetailResponse;
  static deserializeBinaryFromReader(message: GetTransactionDetailResponse, reader: jspb.BinaryReader): GetTransactionDetailResponse;
}

export namespace GetTransactionDetailResponse {
  export type AsObject = {
    contractType: string,
    commitmentsList: Array<common_v1_packet_pb.Commitment.AsObject>,
    created: string,
    hashPresenter: string,
    hash: Uint8Array | string,
    expiration: string,
    memo: string,
    logList: Array<GetTransactionDetailResponse.LogEntry.AsObject>,
  }

  export class LogEntry extends jspb.Message {
    getSender(): string;
    setSender(value: string): void;

    getReceiver(): string;
    setReceiver(value: string): void;

    hasAmount(): boolean;
    clearAmount(): void;
    getAmount(): common_v1_common_pb.Amount | undefined;
    setAmount(value?: common_v1_common_pb.Amount): void;

    getTimestamp(): string;
    setTimestamp(value: string): void;

    getKind(): string;
    setKind(value: string): void;

    getState(): string;
    setState(value: string): void;

    getEvent(): string;
    setEvent(value: string): void;

    getPromissoryId(): string;
    setPromissoryId(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): LogEntry.AsObject;
    static toObject(includeInstance: boolean, msg: LogEntry): LogEntry.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: LogEntry, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): LogEntry;
    static deserializeBinaryFromReader(message: LogEntry, reader: jspb.BinaryReader): LogEntry;
  }

  export namespace LogEntry {
    export type AsObject = {
      sender: string,
      receiver: string,
      amount?: common_v1_common_pb.Amount.AsObject,
      timestamp: string,
      kind: string,
      state: string,
      event: string,
      promissoryId: string,
    }
  }
}

export class PrepareAtomicAssetSwapRequest extends jspb.Message {
  getApiKey(): string;
  setApiKey(value: string): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): common_v1_common_pb.Amount | undefined;
  setAmount(value?: common_v1_common_pb.Amount): void;

  getRespondent(): string;
  setRespondent(value: string): void;

  hasRespondentAmount(): boolean;
  clearRespondentAmount(): void;
  getRespondentAmount(): common_v1_common_pb.Amount | undefined;
  setRespondentAmount(value?: common_v1_common_pb.Amount): void;

  getMemo(): string;
  setMemo(value: string): void;

  getTimeout(): number;
  setTimeout(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareAtomicAssetSwapRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareAtomicAssetSwapRequest): PrepareAtomicAssetSwapRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareAtomicAssetSwapRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareAtomicAssetSwapRequest;
  static deserializeBinaryFromReader(message: PrepareAtomicAssetSwapRequest, reader: jspb.BinaryReader): PrepareAtomicAssetSwapRequest;
}

export namespace PrepareAtomicAssetSwapRequest {
  export type AsObject = {
    apiKey: string,
    walletId: string,
    amount?: common_v1_common_pb.Amount.AsObject,
    respondent: string,
    respondentAmount?: common_v1_common_pb.Amount.AsObject,
    memo: string,
    timeout: number,
  }
}

export class PrepareAtomicAssetSwapResponse extends jspb.Message {
  getStatus(): PrepareAtomicAssetSwapResponse.StatusMap[keyof PrepareAtomicAssetSwapResponse.StatusMap];
  setStatus(value: PrepareAtomicAssetSwapResponse.StatusMap[keyof PrepareAtomicAssetSwapResponse.StatusMap]): void;

  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareAtomicAssetSwapResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareAtomicAssetSwapResponse): PrepareAtomicAssetSwapResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareAtomicAssetSwapResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareAtomicAssetSwapResponse;
  static deserializeBinaryFromReader(message: PrepareAtomicAssetSwapResponse, reader: jspb.BinaryReader): PrepareAtomicAssetSwapResponse;
}

export namespace PrepareAtomicAssetSwapResponse {
  export type AsObject = {
    status: PrepareAtomicAssetSwapResponse.StatusMap[keyof PrepareAtomicAssetSwapResponse.StatusMap],
    uetr: string,
  }

  export interface StatusMap {
    UNSPECIFIED: 0;
    SUCCESS: 1;
    FAILURE: 2;
  }

  export const Status: StatusMap;
}

export class PrepareCrossBorderPaymentRequest extends jspb.Message {
  getApiKey(): string;
  setApiKey(value: string): void;

  getWalletId(): string;
  setWalletId(value: string): void;

  getTreasury(): string;
  setTreasury(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): common_v1_common_pb.Amount | undefined;
  setAmount(value?: common_v1_common_pb.Amount): void;

  getRespondent(): string;
  setRespondent(value: string): void;

  hasRespondentAmount(): boolean;
  clearRespondentAmount(): void;
  getRespondentAmount(): common_v1_common_pb.Amount | undefined;
  setRespondentAmount(value?: common_v1_common_pb.Amount): void;

  getMemo(): string;
  setMemo(value: string): void;

  getTimeout(): number;
  setTimeout(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareCrossBorderPaymentRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareCrossBorderPaymentRequest): PrepareCrossBorderPaymentRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareCrossBorderPaymentRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareCrossBorderPaymentRequest;
  static deserializeBinaryFromReader(message: PrepareCrossBorderPaymentRequest, reader: jspb.BinaryReader): PrepareCrossBorderPaymentRequest;
}

export namespace PrepareCrossBorderPaymentRequest {
  export type AsObject = {
    apiKey: string,
    walletId: string,
    treasury: string,
    amount?: common_v1_common_pb.Amount.AsObject,
    respondent: string,
    respondentAmount?: common_v1_common_pb.Amount.AsObject,
    memo: string,
    timeout: number,
  }
}

export class PrepareCrossBorderPaymentResponse extends jspb.Message {
  getStatus(): PrepareCrossBorderPaymentResponse.StatusMap[keyof PrepareCrossBorderPaymentResponse.StatusMap];
  setStatus(value: PrepareCrossBorderPaymentResponse.StatusMap[keyof PrepareCrossBorderPaymentResponse.StatusMap]): void;

  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrepareCrossBorderPaymentResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PrepareCrossBorderPaymentResponse): PrepareCrossBorderPaymentResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PrepareCrossBorderPaymentResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PrepareCrossBorderPaymentResponse;
  static deserializeBinaryFromReader(message: PrepareCrossBorderPaymentResponse, reader: jspb.BinaryReader): PrepareCrossBorderPaymentResponse;
}

export namespace PrepareCrossBorderPaymentResponse {
  export type AsObject = {
    status: PrepareCrossBorderPaymentResponse.StatusMap[keyof PrepareCrossBorderPaymentResponse.StatusMap],
    uetr: string,
  }

  export interface StatusMap {
    UNSPECIFIED: 0;
    SUCCESS: 1;
    FAILURE: 2;
  }

  export const Status: StatusMap;
}

