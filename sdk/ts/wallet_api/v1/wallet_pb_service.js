/* eslint-disable */
/*Generated by GenDocu.com*/
// package: wallet_api.v1
// file: wallet_api/v1/wallet.proto

var wallet_api_v1_wallet_pb = require("../../wallet_api/v1/wallet_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Wallet = (function () {
  function Wallet() {}
  Wallet.serviceName = "wallet_api.v1.Wallet";
  return Wallet;
}());

Wallet.Transfer = {
  methodName: "Transfer",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.TransferRequest,
  responseType: wallet_api_v1_wallet_pb.TransferResponse
};

Wallet.CreateOwner = {
  methodName: "CreateOwner",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.CreateOwnerRequest,
  responseType: wallet_api_v1_wallet_pb.CreateOwnerResponse
};

Wallet.CreateWallet = {
  methodName: "CreateWallet",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.CreateWalletRequest,
  responseType: wallet_api_v1_wallet_pb.CreateWalletResponse
};

Wallet.ListWallets = {
  methodName: "ListWallets",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.ListWalletsRequest,
  responseType: wallet_api_v1_wallet_pb.ListWalletsResponse
};

Wallet.ListFunds = {
  methodName: "ListFunds",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.ListFundsRequest,
  responseType: wallet_api_v1_wallet_pb.ListFundsResponse
};

Wallet.ListWalletBalances = {
  methodName: "ListWalletBalances",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.ListWalletBalancesRequest,
  responseType: wallet_api_v1_wallet_pb.ListWalletBalancesResponse
};

Wallet.Redeem = {
  methodName: "Redeem",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.RedeemRequest,
  responseType: wallet_api_v1_wallet_pb.RedeemResponse
};

Wallet.ListCredentials = {
  methodName: "ListCredentials",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.ListCredentialsRequest,
  responseType: wallet_api_v1_wallet_pb.ListCredentialsResponse
};

Wallet.AddCredential = {
  methodName: "AddCredential",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.AddCredentialRequest,
  responseType: wallet_api_v1_wallet_pb.AddCredentialResponse
};

Wallet.AssociateWallet = {
  methodName: "AssociateWallet",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.AssociateWalletRequest,
  responseType: wallet_api_v1_wallet_pb.AssociateWalletResponse
};

Wallet.RequestPresentation = {
  methodName: "RequestPresentation",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.RequestPresentationRequest,
  responseType: wallet_api_v1_wallet_pb.RequestPresentationResponse
};

Wallet.PrepareSimplePayment = {
  methodName: "PrepareSimplePayment",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.PrepareSimplePaymentRequest,
  responseType: wallet_api_v1_wallet_pb.PrepareSimplePaymentResponse
};

Wallet.PrepareFundsChange = {
  methodName: "PrepareFundsChange",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.PrepareFundsChangeRequest,
  responseType: wallet_api_v1_wallet_pb.PrepareFundsChangeResponse
};

Wallet.GetTransaction = {
  methodName: "GetTransaction",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.GetTransactionRequest,
  responseType: wallet_api_v1_wallet_pb.GetTransactionResponse
};

Wallet.ListTransactions = {
  methodName: "ListTransactions",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.ListTransactionsRequest,
  responseType: wallet_api_v1_wallet_pb.ListTransactionsResponse
};

Wallet.GetTransactionSnapshot = {
  methodName: "GetTransactionSnapshot",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.GetTransactionSnapshotRequest,
  responseType: wallet_api_v1_wallet_pb.GetTransactionSnapshotResponse
};

Wallet.ListTransactionSnapshots = {
  methodName: "ListTransactionSnapshots",
  service: Wallet,
  requestStream: false,
  responseStream: false,
  requestType: wallet_api_v1_wallet_pb.ListTransactionSnapshotsRequest,
  responseType: wallet_api_v1_wallet_pb.ListTransactionSnapshotsResponse
};

exports.Wallet = Wallet;

function WalletClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

WalletClient.prototype.transfer = function transfer(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.Transfer, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.createOwner = function createOwner(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.CreateOwner, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.createWallet = function createWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.CreateWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.listWallets = function listWallets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.ListWallets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.listFunds = function listFunds(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.ListFunds, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.listWalletBalances = function listWalletBalances(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.ListWalletBalances, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.redeem = function redeem(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.Redeem, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.listCredentials = function listCredentials(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.ListCredentials, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.addCredential = function addCredential(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.AddCredential, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.associateWallet = function associateWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.AssociateWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.requestPresentation = function requestPresentation(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.RequestPresentation, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.prepareSimplePayment = function prepareSimplePayment(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.PrepareSimplePayment, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.prepareFundsChange = function prepareFundsChange(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.PrepareFundsChange, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.getTransaction = function getTransaction(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.GetTransaction, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.listTransactions = function listTransactions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.ListTransactions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.getTransactionSnapshot = function getTransactionSnapshot(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.GetTransactionSnapshot, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WalletClient.prototype.listTransactionSnapshots = function listTransactionSnapshots(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Wallet.ListTransactionSnapshots, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.WalletClient = WalletClient;

