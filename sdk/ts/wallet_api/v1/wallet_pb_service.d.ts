/* eslint-disable */
/*Generated by GenDocu.com*/
// package: wallet_api.v1
// file: wallet_api/v1/wallet.proto

import * as wallet_api_v1_wallet_pb from "../../wallet_api/v1/wallet_pb";
import {grpc} from "@improbable-eng/grpc-web";

type WalletServiceTransfer = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.TransferRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.TransferResponse;
};

type WalletServiceCreateOwner = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.CreateOwnerRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.CreateOwnerResponse;
};

type WalletServiceCreateWallet = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.CreateWalletRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.CreateWalletResponse;
};

type WalletServiceListWallets = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListWalletsRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListWalletsResponse;
};

type WalletServiceListAssetFiles = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListAssetFilesRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListAssetFilesResponse;
};

type WalletServiceListWalletBalances = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListWalletBalancesRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListWalletBalancesResponse;
};

type WalletServiceRedeem = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.RedeemRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.RedeemResponse;
};

type WalletServiceListCredentials = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListCredentialsRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListCredentialsResponse;
};

type WalletServiceAddCredential = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.AddCredentialRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.AddCredentialResponse;
};

type WalletServiceAssociateWallet = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.AssociateWalletRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.AssociateWalletResponse;
};

type WalletServiceRequestPresentation = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.RequestPresentationRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.RequestPresentationResponse;
};

type WalletServicePrepareSimplePayment = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.PrepareSimplePaymentRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.PrepareSimplePaymentResponse;
};

type WalletServicePrepareFundsChange = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.PrepareFundsChangeRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.PrepareFundsChangeResponse;
};

type WalletServiceGetTransaction = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.GetTransactionRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.GetTransactionResponse;
};

type WalletServiceListTransactions = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListTransactionsRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListTransactionsResponse;
};

type WalletServiceGetTransactionSnapshot = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.GetTransactionSnapshotRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.GetTransactionSnapshotResponse;
};

type WalletServiceListTransactionSnapshots = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListTransactionSnapshotsRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListTransactionSnapshotsResponse;
};

type WalletServiceListWalletBalanceDetails = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListWalletBalanceDetailsRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListWalletBalanceDetailsResponse;
};

type WalletServiceListContractTransactions = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.ListContractTransactionsRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.ListContractTransactionsResponse;
};

type WalletServiceGetContractTransactionDetail = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.GetContractTransactionDetailRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.GetContractTransactionDetailResponse;
};

type WalletServicePrepareContractTransaction = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.PrepareContractTransactionRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.PrepareContractTransactionResponse;
};

type WalletServicePrepareAtomicAssetSwap = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.PrepareAtomicAssetSwapRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.PrepareAtomicAssetSwapResponse;
};

type WalletServicePrepareCrossBorderPayment = {
  readonly methodName: string;
  readonly service: typeof WalletService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_api_v1_wallet_pb.PrepareCrossBorderPaymentRequest;
  readonly responseType: typeof wallet_api_v1_wallet_pb.PrepareCrossBorderPaymentResponse;
};

export class WalletService {
  static readonly serviceName: string;
  static readonly Transfer: WalletServiceTransfer;
  static readonly CreateOwner: WalletServiceCreateOwner;
  static readonly CreateWallet: WalletServiceCreateWallet;
  static readonly ListWallets: WalletServiceListWallets;
  static readonly ListAssetFiles: WalletServiceListAssetFiles;
  static readonly ListWalletBalances: WalletServiceListWalletBalances;
  static readonly Redeem: WalletServiceRedeem;
  static readonly ListCredentials: WalletServiceListCredentials;
  static readonly AddCredential: WalletServiceAddCredential;
  static readonly AssociateWallet: WalletServiceAssociateWallet;
  static readonly RequestPresentation: WalletServiceRequestPresentation;
  static readonly PrepareSimplePayment: WalletServicePrepareSimplePayment;
  static readonly PrepareFundsChange: WalletServicePrepareFundsChange;
  static readonly GetTransaction: WalletServiceGetTransaction;
  static readonly ListTransactions: WalletServiceListTransactions;
  static readonly GetTransactionSnapshot: WalletServiceGetTransactionSnapshot;
  static readonly ListTransactionSnapshots: WalletServiceListTransactionSnapshots;
  static readonly ListWalletBalanceDetails: WalletServiceListWalletBalanceDetails;
  static readonly ListContractTransactions: WalletServiceListContractTransactions;
  static readonly GetContractTransactionDetail: WalletServiceGetContractTransactionDetail;
  static readonly PrepareContractTransaction: WalletServicePrepareContractTransaction;
  static readonly PrepareAtomicAssetSwap: WalletServicePrepareAtomicAssetSwap;
  static readonly PrepareCrossBorderPayment: WalletServicePrepareCrossBorderPayment;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class WalletServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  transfer(
    requestMessage: wallet_api_v1_wallet_pb.TransferRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.TransferResponse|null) => void
  ): UnaryResponse;
  transfer(
    requestMessage: wallet_api_v1_wallet_pb.TransferRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.TransferResponse|null) => void
  ): UnaryResponse;
  createOwner(
    requestMessage: wallet_api_v1_wallet_pb.CreateOwnerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.CreateOwnerResponse|null) => void
  ): UnaryResponse;
  createOwner(
    requestMessage: wallet_api_v1_wallet_pb.CreateOwnerRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.CreateOwnerResponse|null) => void
  ): UnaryResponse;
  createWallet(
    requestMessage: wallet_api_v1_wallet_pb.CreateWalletRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.CreateWalletResponse|null) => void
  ): UnaryResponse;
  createWallet(
    requestMessage: wallet_api_v1_wallet_pb.CreateWalletRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.CreateWalletResponse|null) => void
  ): UnaryResponse;
  listWallets(
    requestMessage: wallet_api_v1_wallet_pb.ListWalletsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListWalletsResponse|null) => void
  ): UnaryResponse;
  listWallets(
    requestMessage: wallet_api_v1_wallet_pb.ListWalletsRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListWalletsResponse|null) => void
  ): UnaryResponse;
  listAssetFiles(
    requestMessage: wallet_api_v1_wallet_pb.ListAssetFilesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListAssetFilesResponse|null) => void
  ): UnaryResponse;
  listAssetFiles(
    requestMessage: wallet_api_v1_wallet_pb.ListAssetFilesRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListAssetFilesResponse|null) => void
  ): UnaryResponse;
  listWalletBalances(
    requestMessage: wallet_api_v1_wallet_pb.ListWalletBalancesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListWalletBalancesResponse|null) => void
  ): UnaryResponse;
  listWalletBalances(
    requestMessage: wallet_api_v1_wallet_pb.ListWalletBalancesRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListWalletBalancesResponse|null) => void
  ): UnaryResponse;
  redeem(
    requestMessage: wallet_api_v1_wallet_pb.RedeemRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.RedeemResponse|null) => void
  ): UnaryResponse;
  redeem(
    requestMessage: wallet_api_v1_wallet_pb.RedeemRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.RedeemResponse|null) => void
  ): UnaryResponse;
  listCredentials(
    requestMessage: wallet_api_v1_wallet_pb.ListCredentialsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListCredentialsResponse|null) => void
  ): UnaryResponse;
  listCredentials(
    requestMessage: wallet_api_v1_wallet_pb.ListCredentialsRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListCredentialsResponse|null) => void
  ): UnaryResponse;
  addCredential(
    requestMessage: wallet_api_v1_wallet_pb.AddCredentialRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.AddCredentialResponse|null) => void
  ): UnaryResponse;
  addCredential(
    requestMessage: wallet_api_v1_wallet_pb.AddCredentialRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.AddCredentialResponse|null) => void
  ): UnaryResponse;
  associateWallet(
    requestMessage: wallet_api_v1_wallet_pb.AssociateWalletRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.AssociateWalletResponse|null) => void
  ): UnaryResponse;
  associateWallet(
    requestMessage: wallet_api_v1_wallet_pb.AssociateWalletRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.AssociateWalletResponse|null) => void
  ): UnaryResponse;
  requestPresentation(
    requestMessage: wallet_api_v1_wallet_pb.RequestPresentationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.RequestPresentationResponse|null) => void
  ): UnaryResponse;
  requestPresentation(
    requestMessage: wallet_api_v1_wallet_pb.RequestPresentationRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.RequestPresentationResponse|null) => void
  ): UnaryResponse;
  prepareSimplePayment(
    requestMessage: wallet_api_v1_wallet_pb.PrepareSimplePaymentRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareSimplePaymentResponse|null) => void
  ): UnaryResponse;
  prepareSimplePayment(
    requestMessage: wallet_api_v1_wallet_pb.PrepareSimplePaymentRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareSimplePaymentResponse|null) => void
  ): UnaryResponse;
  prepareFundsChange(
    requestMessage: wallet_api_v1_wallet_pb.PrepareFundsChangeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareFundsChangeResponse|null) => void
  ): UnaryResponse;
  prepareFundsChange(
    requestMessage: wallet_api_v1_wallet_pb.PrepareFundsChangeRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareFundsChangeResponse|null) => void
  ): UnaryResponse;
  getTransaction(
    requestMessage: wallet_api_v1_wallet_pb.GetTransactionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.GetTransactionResponse|null) => void
  ): UnaryResponse;
  getTransaction(
    requestMessage: wallet_api_v1_wallet_pb.GetTransactionRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.GetTransactionResponse|null) => void
  ): UnaryResponse;
  listTransactions(
    requestMessage: wallet_api_v1_wallet_pb.ListTransactionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListTransactionsResponse|null) => void
  ): UnaryResponse;
  listTransactions(
    requestMessage: wallet_api_v1_wallet_pb.ListTransactionsRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListTransactionsResponse|null) => void
  ): UnaryResponse;
  getTransactionSnapshot(
    requestMessage: wallet_api_v1_wallet_pb.GetTransactionSnapshotRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.GetTransactionSnapshotResponse|null) => void
  ): UnaryResponse;
  getTransactionSnapshot(
    requestMessage: wallet_api_v1_wallet_pb.GetTransactionSnapshotRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.GetTransactionSnapshotResponse|null) => void
  ): UnaryResponse;
  listTransactionSnapshots(
    requestMessage: wallet_api_v1_wallet_pb.ListTransactionSnapshotsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListTransactionSnapshotsResponse|null) => void
  ): UnaryResponse;
  listTransactionSnapshots(
    requestMessage: wallet_api_v1_wallet_pb.ListTransactionSnapshotsRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListTransactionSnapshotsResponse|null) => void
  ): UnaryResponse;
  listWalletBalanceDetails(
    requestMessage: wallet_api_v1_wallet_pb.ListWalletBalanceDetailsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListWalletBalanceDetailsResponse|null) => void
  ): UnaryResponse;
  listWalletBalanceDetails(
    requestMessage: wallet_api_v1_wallet_pb.ListWalletBalanceDetailsRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListWalletBalanceDetailsResponse|null) => void
  ): UnaryResponse;
  listContractTransactions(
    requestMessage: wallet_api_v1_wallet_pb.ListContractTransactionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListContractTransactionsResponse|null) => void
  ): UnaryResponse;
  listContractTransactions(
    requestMessage: wallet_api_v1_wallet_pb.ListContractTransactionsRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.ListContractTransactionsResponse|null) => void
  ): UnaryResponse;
  getContractTransactionDetail(
    requestMessage: wallet_api_v1_wallet_pb.GetContractTransactionDetailRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.GetContractTransactionDetailResponse|null) => void
  ): UnaryResponse;
  getContractTransactionDetail(
    requestMessage: wallet_api_v1_wallet_pb.GetContractTransactionDetailRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.GetContractTransactionDetailResponse|null) => void
  ): UnaryResponse;
  prepareContractTransaction(
    requestMessage: wallet_api_v1_wallet_pb.PrepareContractTransactionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareContractTransactionResponse|null) => void
  ): UnaryResponse;
  prepareContractTransaction(
    requestMessage: wallet_api_v1_wallet_pb.PrepareContractTransactionRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareContractTransactionResponse|null) => void
  ): UnaryResponse;
  prepareAtomicAssetSwap(
    requestMessage: wallet_api_v1_wallet_pb.PrepareAtomicAssetSwapRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareAtomicAssetSwapResponse|null) => void
  ): UnaryResponse;
  prepareAtomicAssetSwap(
    requestMessage: wallet_api_v1_wallet_pb.PrepareAtomicAssetSwapRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareAtomicAssetSwapResponse|null) => void
  ): UnaryResponse;
  prepareCrossBorderPayment(
    requestMessage: wallet_api_v1_wallet_pb.PrepareCrossBorderPaymentRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareCrossBorderPaymentResponse|null) => void
  ): UnaryResponse;
  prepareCrossBorderPayment(
    requestMessage: wallet_api_v1_wallet_pb.PrepareCrossBorderPaymentRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_api_v1_wallet_pb.PrepareCrossBorderPaymentResponse|null) => void
  ): UnaryResponse;
}

