/* eslint-disable */
/*Generated by GenDocu.com*/
// package: user_api.v1
// file: user_management_api/v1/user_management.proto

var user_management_api_v1_user_management_pb = require("../../user_management_api/v1/user_management_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var UserManagement = (function () {
  function UserManagement() {}
  UserManagement.serviceName = "user_api.v1.UserManagement";
  return UserManagement;
}());

UserManagement.AuthnWithPassword = {
  methodName: "AuthnWithPassword",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.AuthnWithPasswordRequest,
  responseType: user_management_api_v1_user_management_pb.AuthnWithPasswordResponse
};

UserManagement.RefreshAccessToken = {
  methodName: "RefreshAccessToken",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.RefreshAccessTokenRequest,
  responseType: user_management_api_v1_user_management_pb.RefreshAccessTokenResponse
};

UserManagement.AuthnWithProvider = {
  methodName: "AuthnWithProvider",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.AuthnWithProviderRequest,
  responseType: user_management_api_v1_user_management_pb.AuthnWithProviderResponse
};

UserManagement.HandleOIDCCallback = {
  methodName: "HandleOIDCCallback",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.HandleOIDCCallbackRequest,
  responseType: user_management_api_v1_user_management_pb.HandleOIDCCallbackResponse
};

UserManagement.HandleSAMLCallback = {
  methodName: "HandleSAMLCallback",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.HandleSAMLCallbackRequest,
  responseType: user_management_api_v1_user_management_pb.HandleSAMLCallbackResponse
};

UserManagement.SAMLSPMetadata = {
  methodName: "SAMLSPMetadata",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.SAMLSPMetadataRequest,
  responseType: user_management_api_v1_user_management_pb.SAMLSPMetadataResponse
};

UserManagement.CreateAuthnBrowserWithWalletChallenge = {
  methodName: "CreateAuthnBrowserWithWalletChallenge",
  service: UserManagement,
  requestStream: false,
  responseStream: true,
  requestType: user_management_api_v1_user_management_pb.CreateAuthnBrowserWithWalletChallengeRequest,
  responseType: user_management_api_v1_user_management_pb.CreateAuthnBrowserWithWalletChallengeResponse
};

UserManagement.AuthnBrowserWithWallet = {
  methodName: "AuthnBrowserWithWallet",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.AuthnBrowserWithWalletRequest,
  responseType: user_management_api_v1_user_management_pb.AuthnBrowserWithWalletResponse
};

UserManagement.CreateAuthnWalletChallenge = {
  methodName: "CreateAuthnWalletChallenge",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.CreateAuthnWalletChallengeRequest,
  responseType: user_management_api_v1_user_management_pb.CreateAuthnWalletChallengeResponse
};

UserManagement.AuthnWallet = {
  methodName: "AuthnWallet",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.AuthnWalletRequest,
  responseType: user_management_api_v1_user_management_pb.AuthnWalletResponse
};

UserManagement.CreateRegisterWalletChallenge = {
  methodName: "CreateRegisterWalletChallenge",
  service: UserManagement,
  requestStream: false,
  responseStream: true,
  requestType: user_management_api_v1_user_management_pb.CreateRegisterWalletChallengeRequest,
  responseType: user_management_api_v1_user_management_pb.CreateRegisterWalletChallengeResponse
};

UserManagement.RegisterWallet = {
  methodName: "RegisterWallet",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.RegisterWalletRequest,
  responseType: user_management_api_v1_user_management_pb.RegisterWalletResponse
};

UserManagement.AssociateWallet = {
  methodName: "AssociateWallet",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.AssociateWalletRequest,
  responseType: user_management_api_v1_user_management_pb.AssociateWalletResponse
};

UserManagement.GetAppSettings = {
  methodName: "GetAppSettings",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.GetAppSettingsRequest,
  responseType: user_management_api_v1_user_management_pb.GetAppSettingsResponse
};

UserManagement.RegisterUser = {
  methodName: "RegisterUser",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.RegisterUserRequest,
  responseType: user_management_api_v1_user_management_pb.RegisterUserResponse
};

UserManagement.ConfirmUser = {
  methodName: "ConfirmUser",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.ConfirmUserRequest,
  responseType: user_management_api_v1_user_management_pb.ConfirmUserResponse
};

UserManagement.FindByEmail = {
  methodName: "FindByEmail",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.FindByEmailRequest,
  responseType: user_management_api_v1_user_management_pb.FindByEmailResponse
};

UserManagement.FindByID = {
  methodName: "FindByID",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.FindByIDRequest,
  responseType: user_management_api_v1_user_management_pb.FindByIDResponse
};

UserManagement.GetMe = {
  methodName: "GetMe",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.GetMeRequest,
  responseType: user_management_api_v1_user_management_pb.GetMeResponse
};

UserManagement.GetUserByDID = {
  methodName: "GetUserByDID",
  service: UserManagement,
  requestStream: false,
  responseStream: false,
  requestType: user_management_api_v1_user_management_pb.GetUserByDIDRequest,
  responseType: user_management_api_v1_user_management_pb.GetUserByDIDResponse
};

exports.UserManagement = UserManagement;

function UserManagementClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

UserManagementClient.prototype.authnWithPassword = function authnWithPassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.AuthnWithPassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.refreshAccessToken = function refreshAccessToken(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.RefreshAccessToken, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.authnWithProvider = function authnWithProvider(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.AuthnWithProvider, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.handleOIDCCallback = function handleOIDCCallback(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.HandleOIDCCallback, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.handleSAMLCallback = function handleSAMLCallback(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.HandleSAMLCallback, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.sAMLSPMetadata = function sAMLSPMetadata(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.SAMLSPMetadata, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.createAuthnBrowserWithWalletChallenge = function createAuthnBrowserWithWalletChallenge(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(UserManagement.CreateAuthnBrowserWithWalletChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.authnBrowserWithWallet = function authnBrowserWithWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.AuthnBrowserWithWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.createAuthnWalletChallenge = function createAuthnWalletChallenge(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.CreateAuthnWalletChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.authnWallet = function authnWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.AuthnWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.createRegisterWalletChallenge = function createRegisterWalletChallenge(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(UserManagement.CreateRegisterWalletChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.registerWallet = function registerWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.RegisterWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.associateWallet = function associateWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.AssociateWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.getAppSettings = function getAppSettings(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.GetAppSettings, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.registerUser = function registerUser(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.RegisterUser, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.confirmUser = function confirmUser(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.ConfirmUser, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.findByEmail = function findByEmail(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.FindByEmail, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.findByID = function findByID(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.FindByID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.getMe = function getMe(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.GetMe, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserManagementClient.prototype.getUserByDID = function getUserByDID(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserManagement.GetUserByDID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.UserManagementClient = UserManagementClient;

