/* eslint-disable */
/*Generated by GenDocu.com*/
// package: vc_api.v1
// file: vc_api/v1/vc.proto

import * as vc_api_v1_vc_pb from "../../vc_api/v1/vc_pb";
import {grpc} from "@improbable-eng/grpc-web";

type CredentialAdapterCreateIssuanceChallenge = {
  readonly methodName: string;
  readonly service: typeof CredentialAdapter;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof vc_api_v1_vc_pb.CreateIssuanceChallengeRequest;
  readonly responseType: typeof vc_api_v1_vc_pb.CreateIssuanceChallengeResponse;
};

type CredentialAdapterIssueVerifiableCredential = {
  readonly methodName: string;
  readonly service: typeof CredentialAdapter;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof vc_api_v1_vc_pb.IssueVerifiableCredentialRequest;
  readonly responseType: typeof vc_api_v1_vc_pb.IssueVerifiableCredentialResponse;
};

type CredentialAdapterCreatePresentationChallenge = {
  readonly methodName: string;
  readonly service: typeof CredentialAdapter;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof vc_api_v1_vc_pb.CreatePresentationChallengeRequest;
  readonly responseType: typeof vc_api_v1_vc_pb.CreatePresentationChallengeResponse;
};

type CredentialAdapterPresentVerifiableCredential = {
  readonly methodName: string;
  readonly service: typeof CredentialAdapter;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof vc_api_v1_vc_pb.PresentVerifiableCredentialRequest;
  readonly responseType: typeof vc_api_v1_vc_pb.PresentVerifiableCredentialResponse;
};

type CredentialAdapterWaitForCompletion = {
  readonly methodName: string;
  readonly service: typeof CredentialAdapter;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof vc_api_v1_vc_pb.WaitForCompletionRequest;
  readonly responseType: typeof vc_api_v1_vc_pb.WaitForCompletionResponse;
};

export class CredentialAdapter {
  static readonly serviceName: string;
  static readonly CreateIssuanceChallenge: CredentialAdapterCreateIssuanceChallenge;
  static readonly IssueVerifiableCredential: CredentialAdapterIssueVerifiableCredential;
  static readonly CreatePresentationChallenge: CredentialAdapterCreatePresentationChallenge;
  static readonly PresentVerifiableCredential: CredentialAdapterPresentVerifiableCredential;
  static readonly WaitForCompletion: CredentialAdapterWaitForCompletion;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class CredentialAdapterClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  createIssuanceChallenge(
    requestMessage: vc_api_v1_vc_pb.CreateIssuanceChallengeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.CreateIssuanceChallengeResponse|null) => void
  ): UnaryResponse;
  createIssuanceChallenge(
    requestMessage: vc_api_v1_vc_pb.CreateIssuanceChallengeRequest,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.CreateIssuanceChallengeResponse|null) => void
  ): UnaryResponse;
  issueVerifiableCredential(
    requestMessage: vc_api_v1_vc_pb.IssueVerifiableCredentialRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.IssueVerifiableCredentialResponse|null) => void
  ): UnaryResponse;
  issueVerifiableCredential(
    requestMessage: vc_api_v1_vc_pb.IssueVerifiableCredentialRequest,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.IssueVerifiableCredentialResponse|null) => void
  ): UnaryResponse;
  createPresentationChallenge(
    requestMessage: vc_api_v1_vc_pb.CreatePresentationChallengeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.CreatePresentationChallengeResponse|null) => void
  ): UnaryResponse;
  createPresentationChallenge(
    requestMessage: vc_api_v1_vc_pb.CreatePresentationChallengeRequest,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.CreatePresentationChallengeResponse|null) => void
  ): UnaryResponse;
  presentVerifiableCredential(
    requestMessage: vc_api_v1_vc_pb.PresentVerifiableCredentialRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.PresentVerifiableCredentialResponse|null) => void
  ): UnaryResponse;
  presentVerifiableCredential(
    requestMessage: vc_api_v1_vc_pb.PresentVerifiableCredentialRequest,
    callback: (error: ServiceError|null, responseMessage: vc_api_v1_vc_pb.PresentVerifiableCredentialResponse|null) => void
  ): UnaryResponse;
  waitForCompletion(requestMessage: vc_api_v1_vc_pb.WaitForCompletionRequest, metadata?: grpc.Metadata): ResponseStream<vc_api_v1_vc_pb.WaitForCompletionResponse>;
}

