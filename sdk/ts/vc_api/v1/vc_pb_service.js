/* eslint-disable */
/*Generated by GenDocu.com*/
// package: vc_api.v1
// file: vc_api/v1/vc.proto

var vc_api_v1_vc_pb = require("../../vc_api/v1/vc_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var CredentialAdapterService = (function () {
  function CredentialAdapterService() {}
  CredentialAdapterService.serviceName = "vc_api.v1.CredentialAdapterService";
  return CredentialAdapterService;
}());

CredentialAdapterService.CreateIssuanceChallenge = {
  methodName: "CreateIssuanceChallenge",
  service: CredentialAdapterService,
  requestStream: false,
  responseStream: false,
  requestType: vc_api_v1_vc_pb.CreateIssuanceChallengeRequest,
  responseType: vc_api_v1_vc_pb.CreateIssuanceChallengeResponse
};

CredentialAdapterService.IssueVerifiableCredential = {
  methodName: "IssueVerifiableCredential",
  service: CredentialAdapterService,
  requestStream: false,
  responseStream: false,
  requestType: vc_api_v1_vc_pb.IssueVerifiableCredentialRequest,
  responseType: vc_api_v1_vc_pb.IssueVerifiableCredentialResponse
};

CredentialAdapterService.CreatePresentationChallenge = {
  methodName: "CreatePresentationChallenge",
  service: CredentialAdapterService,
  requestStream: false,
  responseStream: false,
  requestType: vc_api_v1_vc_pb.CreatePresentationChallengeRequest,
  responseType: vc_api_v1_vc_pb.CreatePresentationChallengeResponse
};

CredentialAdapterService.PresentVerifiableCredential = {
  methodName: "PresentVerifiableCredential",
  service: CredentialAdapterService,
  requestStream: false,
  responseStream: false,
  requestType: vc_api_v1_vc_pb.PresentVerifiableCredentialRequest,
  responseType: vc_api_v1_vc_pb.PresentVerifiableCredentialResponse
};

CredentialAdapterService.WaitForCompletion = {
  methodName: "WaitForCompletion",
  service: CredentialAdapterService,
  requestStream: false,
  responseStream: true,
  requestType: vc_api_v1_vc_pb.WaitForCompletionRequest,
  responseType: vc_api_v1_vc_pb.WaitForCompletionResponse
};

exports.CredentialAdapterService = CredentialAdapterService;

function CredentialAdapterServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

CredentialAdapterServiceClient.prototype.createIssuanceChallenge = function createIssuanceChallenge(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CredentialAdapterService.CreateIssuanceChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CredentialAdapterServiceClient.prototype.issueVerifiableCredential = function issueVerifiableCredential(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CredentialAdapterService.IssueVerifiableCredential, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CredentialAdapterServiceClient.prototype.createPresentationChallenge = function createPresentationChallenge(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CredentialAdapterService.CreatePresentationChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CredentialAdapterServiceClient.prototype.presentVerifiableCredential = function presentVerifiableCredential(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CredentialAdapterService.PresentVerifiableCredential, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CredentialAdapterServiceClient.prototype.waitForCompletion = function waitForCompletion(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(CredentialAdapterService.WaitForCompletion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

exports.CredentialAdapterServiceClient = CredentialAdapterServiceClient;

