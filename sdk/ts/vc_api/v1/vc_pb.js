/* eslint-disable */
/*Generated by GenDocu.com*/
// source: vc_api/v1/vc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.vc_api.v1.CreateIssuanceChallengeRequest', null, global);
goog.exportSymbol('proto.vc_api.v1.CreateIssuanceChallengeResponse', null, global);
goog.exportSymbol('proto.vc_api.v1.CreatePresentationChallengeRequest', null, global);
goog.exportSymbol('proto.vc_api.v1.CreatePresentationChallengeResponse', null, global);
goog.exportSymbol('proto.vc_api.v1.CredentialProof', null, global);
goog.exportSymbol('proto.vc_api.v1.CredentialType', null, global);
goog.exportSymbol('proto.vc_api.v1.IssueVerifiableCredentialRequest', null, global);
goog.exportSymbol('proto.vc_api.v1.IssueVerifiableCredentialResponse', null, global);
goog.exportSymbol('proto.vc_api.v1.PresentVerifiableCredentialRequest', null, global);
goog.exportSymbol('proto.vc_api.v1.PresentVerifiableCredentialResponse', null, global);
goog.exportSymbol('proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest', null, global);
goog.exportSymbol('proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse', null, global);
goog.exportSymbol('proto.vc_api.v1.UpdateVerifiableCredentialStatusType', null, global);
goog.exportSymbol('proto.vc_api.v1.WaitForCompletionRequest', null, global);
goog.exportSymbol('proto.vc_api.v1.WaitForCompletionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.CredentialProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.CredentialProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.CredentialProof.displayName = 'proto.vc_api.v1.CredentialProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.CreateIssuanceChallengeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.CreateIssuanceChallengeRequest.displayName = 'proto.vc_api.v1.CreateIssuanceChallengeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.CreateIssuanceChallengeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.CreateIssuanceChallengeResponse.displayName = 'proto.vc_api.v1.CreateIssuanceChallengeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.IssueVerifiableCredentialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.IssueVerifiableCredentialRequest.displayName = 'proto.vc_api.v1.IssueVerifiableCredentialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.IssueVerifiableCredentialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.IssueVerifiableCredentialResponse.displayName = 'proto.vc_api.v1.IssueVerifiableCredentialResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.CreatePresentationChallengeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vc_api.v1.CreatePresentationChallengeRequest.repeatedFields_, null);
};
goog.inherits(proto.vc_api.v1.CreatePresentationChallengeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.CreatePresentationChallengeRequest.displayName = 'proto.vc_api.v1.CreatePresentationChallengeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.CreatePresentationChallengeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vc_api.v1.CreatePresentationChallengeResponse.repeatedFields_, null);
};
goog.inherits(proto.vc_api.v1.CreatePresentationChallengeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.CreatePresentationChallengeResponse.displayName = 'proto.vc_api.v1.CreatePresentationChallengeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vc_api.v1.PresentVerifiableCredentialRequest.repeatedFields_, null);
};
goog.inherits(proto.vc_api.v1.PresentVerifiableCredentialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.PresentVerifiableCredentialRequest.displayName = 'proto.vc_api.v1.PresentVerifiableCredentialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.PresentVerifiableCredentialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.PresentVerifiableCredentialResponse.displayName = 'proto.vc_api.v1.PresentVerifiableCredentialResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.WaitForCompletionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.WaitForCompletionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.WaitForCompletionRequest.displayName = 'proto.vc_api.v1.WaitForCompletionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.WaitForCompletionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.WaitForCompletionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.WaitForCompletionResponse.displayName = 'proto.vc_api.v1.WaitForCompletionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.displayName = 'proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.displayName = 'proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.CredentialProof.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.CredentialProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.CredentialProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CredentialProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    created: jspb.Message.getFieldWithDefault(msg, 2, ""),
    verificationMethod: jspb.Message.getFieldWithDefault(msg, 3, ""),
    proofPurpose: jspb.Message.getFieldWithDefault(msg, 4, ""),
    proofValue: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.CredentialProof}
 */
proto.vc_api.v1.CredentialProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.CredentialProof;
  return proto.vc_api.v1.CredentialProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.CredentialProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.CredentialProof}
 */
proto.vc_api.v1.CredentialProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofPurpose(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.CredentialProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.CredentialProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.CredentialProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CredentialProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVerificationMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProofPurpose();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProofValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.vc_api.v1.CredentialProof.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CredentialProof} returns this
 */
proto.vc_api.v1.CredentialProof.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string created = 2;
 * @return {string}
 */
proto.vc_api.v1.CredentialProof.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CredentialProof} returns this
 */
proto.vc_api.v1.CredentialProof.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string verification_method = 3;
 * @return {string}
 */
proto.vc_api.v1.CredentialProof.prototype.getVerificationMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CredentialProof} returns this
 */
proto.vc_api.v1.CredentialProof.prototype.setVerificationMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string proof_purpose = 4;
 * @return {string}
 */
proto.vc_api.v1.CredentialProof.prototype.getProofPurpose = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CredentialProof} returns this
 */
proto.vc_api.v1.CredentialProof.prototype.setProofPurpose = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string proof_value = 5;
 * @return {string}
 */
proto.vc_api.v1.CredentialProof.prototype.getProofValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CredentialProof} returns this
 */
proto.vc_api.v1.CredentialProof.prototype.setProofValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.CreateIssuanceChallengeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.CreateIssuanceChallengeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    credentialType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    did: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeRequest}
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.CreateIssuanceChallengeRequest;
  return proto.vc_api.v1.CreateIssuanceChallengeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.CreateIssuanceChallengeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeRequest}
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vc_api.v1.CredentialType} */ (reader.readEnum());
      msg.setCredentialType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.CreateIssuanceChallengeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.CreateIssuanceChallengeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredentialType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CredentialType credential_type = 1;
 * @return {!proto.vc_api.v1.CredentialType}
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.prototype.getCredentialType = function() {
  return /** @type {!proto.vc_api.v1.CredentialType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeRequest} returns this
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.prototype.setCredentialType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string did = 2;
 * @return {string}
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeRequest} returns this
 */
proto.vc_api.v1.CreateIssuanceChallengeRequest.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.CreateIssuanceChallengeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.CreateIssuanceChallengeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    credentialType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeResponse}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.CreateIssuanceChallengeResponse;
  return proto.vc_api.v1.CreateIssuanceChallengeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.CreateIssuanceChallengeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeResponse}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 3:
      var value = /** @type {!proto.vc_api.v1.CredentialType} */ (reader.readEnum());
      msg.setCredentialType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.CreateIssuanceChallengeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.CreateIssuanceChallengeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCredentialType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string nonce = 1;
 * @return {string}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeResponse} returns this
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string endpoint = 2;
 * @return {string}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeResponse} returns this
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CredentialType credential_type = 3;
 * @return {!proto.vc_api.v1.CredentialType}
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.getCredentialType = function() {
  return /** @type {!proto.vc_api.v1.CredentialType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @return {!proto.vc_api.v1.CreateIssuanceChallengeResponse} returns this
 */
proto.vc_api.v1.CreateIssuanceChallengeResponse.prototype.setCredentialType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.IssueVerifiableCredentialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.IssueVerifiableCredentialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    credentialType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signature: msg.getSignature_asB64(),
    did: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialRequest}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.IssueVerifiableCredentialRequest;
  return proto.vc_api.v1.IssueVerifiableCredentialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.IssueVerifiableCredentialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialRequest}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vc_api.v1.CredentialType} */ (reader.readEnum());
      msg.setCredentialType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.IssueVerifiableCredentialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.IssueVerifiableCredentialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredentialType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional CredentialType credential_type = 1;
 * @return {!proto.vc_api.v1.CredentialType}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.getCredentialType = function() {
  return /** @type {!proto.vc_api.v1.CredentialType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.setCredentialType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string did = 4;
 * @return {string}
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.IssueVerifiableCredentialRequest.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.IssueVerifiableCredentialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.IssueVerifiableCredentialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    credential: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialResponse}
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.IssueVerifiableCredentialResponse;
  return proto.vc_api.v1.IssueVerifiableCredentialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.IssueVerifiableCredentialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialResponse}
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.IssueVerifiableCredentialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.IssueVerifiableCredentialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredential();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string credential = 1;
 * @return {string}
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.prototype.getCredential = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.IssueVerifiableCredentialResponse} returns this
 */
proto.vc_api.v1.IssueVerifiableCredentialResponse.prototype.setCredential = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.CreatePresentationChallengeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.CreatePresentationChallengeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    credentialTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.CreatePresentationChallengeRequest}
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.CreatePresentationChallengeRequest;
  return proto.vc_api.v1.CreatePresentationChallengeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.CreatePresentationChallengeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.CreatePresentationChallengeRequest}
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.vc_api.v1.CredentialType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCredentialTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.CreatePresentationChallengeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.CreatePresentationChallengeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredentialTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated CredentialType credential_types = 1;
 * @return {!Array<!proto.vc_api.v1.CredentialType>}
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.prototype.getCredentialTypesList = function() {
  return /** @type {!Array<!proto.vc_api.v1.CredentialType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.vc_api.v1.CredentialType>} value
 * @return {!proto.vc_api.v1.CreatePresentationChallengeRequest} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.prototype.setCredentialTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @param {number=} opt_index
 * @return {!proto.vc_api.v1.CreatePresentationChallengeRequest} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.prototype.addCredentialTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vc_api.v1.CreatePresentationChallengeRequest} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeRequest.prototype.clearCredentialTypesList = function() {
  return this.setCredentialTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.CreatePresentationChallengeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.CreatePresentationChallengeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    credentialTypesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.CreatePresentationChallengeResponse;
  return proto.vc_api.v1.CreatePresentationChallengeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.CreatePresentationChallengeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.vc_api.v1.CredentialType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCredentialTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.CreatePresentationChallengeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.CreatePresentationChallengeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCredentialTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional string nonce = 1;
 * @return {string}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string endpoint = 2;
 * @return {string}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated CredentialType credential_types = 3;
 * @return {!Array<!proto.vc_api.v1.CredentialType>}
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.getCredentialTypesList = function() {
  return /** @type {!Array<!proto.vc_api.v1.CredentialType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.vc_api.v1.CredentialType>} value
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.setCredentialTypesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @param {number=} opt_index
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.addCredentialTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vc_api.v1.CreatePresentationChallengeResponse} returns this
 */
proto.vc_api.v1.CreatePresentationChallengeResponse.prototype.clearCredentialTypesList = function() {
  return this.setCredentialTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.PresentVerifiableCredentialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.PresentVerifiableCredentialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    presentation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signature: msg.getSignature_asB64(),
    did: jspb.Message.getFieldWithDefault(msg, 4, ""),
    credentialTypeList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.PresentVerifiableCredentialRequest;
  return proto.vc_api.v1.PresentVerifiableCredentialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.PresentVerifiableCredentialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPresentation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 5:
      var values = /** @type {!Array<!proto.vc_api.v1.CredentialType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCredentialType(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.PresentVerifiableCredentialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.PresentVerifiableCredentialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPresentation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCredentialTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional string presentation = 1;
 * @return {string}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getPresentation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.setPresentation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string did = 4;
 * @return {string}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated CredentialType credential_type = 5;
 * @return {!Array<!proto.vc_api.v1.CredentialType>}
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.getCredentialTypeList = function() {
  return /** @type {!Array<!proto.vc_api.v1.CredentialType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.vc_api.v1.CredentialType>} value
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.setCredentialTypeList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @param {number=} opt_index
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.addCredentialType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialRequest} returns this
 */
proto.vc_api.v1.PresentVerifiableCredentialRequest.prototype.clearCredentialTypeList = function() {
  return this.setCredentialTypeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.PresentVerifiableCredentialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.PresentVerifiableCredentialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialResponse}
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.PresentVerifiableCredentialResponse;
  return proto.vc_api.v1.PresentVerifiableCredentialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.PresentVerifiableCredentialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.PresentVerifiableCredentialResponse}
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.PresentVerifiableCredentialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.PresentVerifiableCredentialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.PresentVerifiableCredentialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.WaitForCompletionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.WaitForCompletionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.WaitForCompletionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.WaitForCompletionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.WaitForCompletionRequest}
 */
proto.vc_api.v1.WaitForCompletionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.WaitForCompletionRequest;
  return proto.vc_api.v1.WaitForCompletionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.WaitForCompletionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.WaitForCompletionRequest}
 */
proto.vc_api.v1.WaitForCompletionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.WaitForCompletionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.WaitForCompletionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.WaitForCompletionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.WaitForCompletionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nonce = 1;
 * @return {string}
 */
proto.vc_api.v1.WaitForCompletionRequest.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.WaitForCompletionRequest} returns this
 */
proto.vc_api.v1.WaitForCompletionRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.WaitForCompletionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.WaitForCompletionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.WaitForCompletionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.WaitForCompletionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    did: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.WaitForCompletionResponse}
 */
proto.vc_api.v1.WaitForCompletionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.WaitForCompletionResponse;
  return proto.vc_api.v1.WaitForCompletionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.WaitForCompletionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.WaitForCompletionResponse}
 */
proto.vc_api.v1.WaitForCompletionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.WaitForCompletionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.WaitForCompletionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.WaitForCompletionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.WaitForCompletionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string did = 1;
 * @return {string}
 */
proto.vc_api.v1.WaitForCompletionResponse.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.WaitForCompletionResponse} returns this
 */
proto.vc_api.v1.WaitForCompletionResponse.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.vc_api.v1.WaitForCompletionResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.WaitForCompletionResponse} returns this
 */
proto.vc_api.v1.WaitForCompletionResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    credentialType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    did: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updateType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest;
  return proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vc_api.v1.CredentialType} */ (reader.readEnum());
      msg.setCredentialType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 3:
      var value = /** @type {!proto.vc_api.v1.UpdateVerifiableCredentialStatusType} */ (reader.readEnum());
      msg.setUpdateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredentialType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdateType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional CredentialType credential_type = 1;
 * @return {!proto.vc_api.v1.CredentialType}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.getCredentialType = function() {
  return /** @type {!proto.vc_api.v1.CredentialType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vc_api.v1.CredentialType} value
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest} returns this
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.setCredentialType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string did = 2;
 * @return {string}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest} returns this
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional UpdateVerifiableCredentialStatusType update_type = 3;
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusType}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.getUpdateType = function() {
  return /** @type {!proto.vc_api.v1.UpdateVerifiableCredentialStatusType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusType} value
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest} returns this
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusRequest.prototype.setUpdateType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse;
  return proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.vc_api.v1.CredentialType = {
  CREDENTIAL_TYPE_UNSPECIFIED: 0,
  CREDENTIAL_TYPE_PERMANENT_RESIDENT_CARD: 1,
  CREDENTIAL_TYPE_BANK_CARD: 2,
  CREDENTIAL_TYPE_BANK_ACCOUNT: 3
};

/**
 * @enum {number}
 */
proto.vc_api.v1.UpdateVerifiableCredentialStatusType = {
  UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_UNSPECIFIED: 0,
  UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_REVOCATION: 1,
  UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_SUSPENSION: 2
};

goog.object.extend(exports, proto.vc_api.v1);
