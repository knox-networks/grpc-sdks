/* eslint-disable */
/*Generated by GenDocu.com*/
// package: webhook_api.v1
// file: webhook_api/v1/webhook.proto

var webhook_api_v1_webhook_pb = require("../../webhook_api/v1/webhook_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var WebhookManagerService = (function () {
  function WebhookManagerService() {}
  WebhookManagerService.serviceName = "webhook_api.v1.WebhookManagerService";
  return WebhookManagerService;
}());

WebhookManagerService.CreateWebhook = {
  methodName: "CreateWebhook",
  service: WebhookManagerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.CreateWebhookRequest,
  responseType: webhook_api_v1_webhook_pb.CreateWebhookResponse
};

WebhookManagerService.ListWebhooks = {
  methodName: "ListWebhooks",
  service: WebhookManagerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.ListWebhooksRequest,
  responseType: webhook_api_v1_webhook_pb.ListWebhooksResponse
};

WebhookManagerService.DeleteWebhook = {
  methodName: "DeleteWebhook",
  service: WebhookManagerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.DeleteWebhookRequest,
  responseType: webhook_api_v1_webhook_pb.DeleteWebhookResponse
};

WebhookManagerService.ListEvents = {
  methodName: "ListEvents",
  service: WebhookManagerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.ListEventsRequest,
  responseType: webhook_api_v1_webhook_pb.ListEventsResponse
};

WebhookManagerService.RetryEvent = {
  methodName: "RetryEvent",
  service: WebhookManagerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.RetryEventRequest,
  responseType: webhook_api_v1_webhook_pb.RetryEventResponse
};

WebhookManagerService.Ping = {
  methodName: "Ping",
  service: WebhookManagerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.PingRequest,
  responseType: webhook_api_v1_webhook_pb.PingResponse
};

exports.WebhookManagerService = WebhookManagerService;

function WebhookManagerServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

WebhookManagerServiceClient.prototype.createWebhook = function createWebhook(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WebhookManagerService.CreateWebhook, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WebhookManagerServiceClient.prototype.listWebhooks = function listWebhooks(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WebhookManagerService.ListWebhooks, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WebhookManagerServiceClient.prototype.deleteWebhook = function deleteWebhook(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WebhookManagerService.DeleteWebhook, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WebhookManagerServiceClient.prototype.listEvents = function listEvents(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WebhookManagerService.ListEvents, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WebhookManagerServiceClient.prototype.retryEvent = function retryEvent(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WebhookManagerService.RetryEvent, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WebhookManagerServiceClient.prototype.ping = function ping(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WebhookManagerService.Ping, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.WebhookManagerServiceClient = WebhookManagerServiceClient;

var EventConsumerService = (function () {
  function EventConsumerService() {}
  EventConsumerService.serviceName = "webhook_api.v1.EventConsumerService";
  return EventConsumerService;
}());

EventConsumerService.Event = {
  methodName: "Event",
  service: EventConsumerService,
  requestStream: false,
  responseStream: false,
  requestType: webhook_api_v1_webhook_pb.EventRequest,
  responseType: webhook_api_v1_webhook_pb.EventResponse
};

exports.EventConsumerService = EventConsumerService;

function EventConsumerServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

EventConsumerServiceClient.prototype.event = function event(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(EventConsumerService.Event, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.EventConsumerServiceClient = EventConsumerServiceClient;

