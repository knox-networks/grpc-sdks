/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gateway
// file: gateway/v1/gateway.proto

import * as gateway_v1_gateway_pb from "../../gateway/v1/gateway_pb";
import * as common_v1_common_pb from "../../common/v1/common_pb";
import * as common_v1_packet_pb from "../../common/v1/packet_pb";
import {grpc} from "@improbable-eng/grpc-web";

type MonetaeGatewayAuthenticate = {
  readonly methodName: string;
  readonly service: typeof MonetaeGateway;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_v1_common_pb.AuthenticationRequest;
  readonly responseType: typeof common_v1_common_pb.AuthenticationResponse;
};

type MonetaeGatewayData = {
  readonly methodName: string;
  readonly service: typeof MonetaeGateway;
  readonly requestStream: true;
  readonly responseStream: true;
  readonly requestType: typeof common_v1_packet_pb.Packet;
  readonly responseType: typeof common_v1_packet_pb.Packet;
};

type MonetaeGatewayGetConnections = {
  readonly methodName: string;
  readonly service: typeof MonetaeGateway;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof gateway_v1_gateway_pb.ConnectionsRequest;
  readonly responseType: typeof gateway_v1_gateway_pb.ConnectionsResponse;
};

export class MonetaeGateway {
  static readonly serviceName: string;
  static readonly Authenticate: MonetaeGatewayAuthenticate;
  static readonly Data: MonetaeGatewayData;
  static readonly GetConnections: MonetaeGatewayGetConnections;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class MonetaeGatewayClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  authenticate(
    requestMessage: common_v1_common_pb.AuthenticationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.AuthenticationResponse|null) => void
  ): UnaryResponse;
  authenticate(
    requestMessage: common_v1_common_pb.AuthenticationRequest,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.AuthenticationResponse|null) => void
  ): UnaryResponse;
  data(metadata?: grpc.Metadata): BidirectionalStream<common_v1_packet_pb.Packet, common_v1_packet_pb.Packet>;
  getConnections(
    requestMessage: gateway_v1_gateway_pb.ConnectionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: gateway_v1_gateway_pb.ConnectionsResponse|null) => void
  ): UnaryResponse;
  getConnections(
    requestMessage: gateway_v1_gateway_pb.ConnectionsRequest,
    callback: (error: ServiceError|null, responseMessage: gateway_v1_gateway_pb.ConnectionsResponse|null) => void
  ): UnaryResponse;
}

