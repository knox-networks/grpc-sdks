/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gateway
// file: gateway/v1/gateway.proto

import * as jspb from "google-protobuf";
import * as common_v1_common_pb from "../../common/v1/common_pb";
import * as common_v1_packet_pb from "../../common/v1/packet_pb";

export class LogEntry extends jspb.Message {
  getVerifier(): string;
  setVerifier(value: string): void;

  getNote(): string;
  setNote(value: string): void;

  getTimestamp(): string;
  setTimestamp(value: string): void;

  getOrigin(): string;
  setOrigin(value: string): void;

  getConnectionId(): string;
  setConnectionId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LogEntry.AsObject;
  static toObject(includeInstance: boolean, msg: LogEntry): LogEntry.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LogEntry, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LogEntry;
  static deserializeBinaryFromReader(message: LogEntry, reader: jspb.BinaryReader): LogEntry;
}

export namespace LogEntry {
  export type AsObject = {
    verifier: string,
    note: string,
    timestamp: string,
    origin: string,
    connectionId: string,
  }
}

export class ConnectionsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectionsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectionsRequest): ConnectionsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectionsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectionsRequest;
  static deserializeBinaryFromReader(message: ConnectionsRequest, reader: jspb.BinaryReader): ConnectionsRequest;
}

export namespace ConnectionsRequest {
  export type AsObject = {
  }
}

export class ConnectionsResponse extends jspb.Message {
  clearActiveList(): void;
  getActiveList(): Array<string>;
  setActiveList(value: Array<string>): void;
  addActive(value: string, index?: number): string;

  clearCreatedList(): void;
  getCreatedList(): Array<LogEntry>;
  setCreatedList(value: Array<LogEntry>): void;
  addCreated(value?: LogEntry, index?: number): LogEntry;

  clearRemovedList(): void;
  getRemovedList(): Array<LogEntry>;
  setRemovedList(value: Array<LogEntry>): void;
  addRemoved(value?: LogEntry, index?: number): LogEntry;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectionsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectionsResponse): ConnectionsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectionsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectionsResponse;
  static deserializeBinaryFromReader(message: ConnectionsResponse, reader: jspb.BinaryReader): ConnectionsResponse;
}

export namespace ConnectionsResponse {
  export type AsObject = {
    activeList: Array<string>,
    createdList: Array<LogEntry.AsObject>,
    removedList: Array<LogEntry.AsObject>,
  }
}

