/* eslint-disable */
/*Generated by GenDocu.com*/
// package: issuer_api.v1
// file: issuer_api/v1/issuer.proto

import * as issuer_api_v1_issuer_pb from "../../issuer_api/v1/issuer_pb";
import {grpc} from "@improbable-eng/grpc-web";

type IssuerServiceAuthenticate = {
  readonly methodName: string;
  readonly service: typeof IssuerService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof issuer_api_v1_issuer_pb.AuthenticateRequest;
  readonly responseType: typeof issuer_api_v1_issuer_pb.AuthenticateResponse;
};

type IssuerServiceIssue = {
  readonly methodName: string;
  readonly service: typeof IssuerService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof issuer_api_v1_issuer_pb.IssueRequest;
  readonly responseType: typeof issuer_api_v1_issuer_pb.IssueResponse;
};

type IssuerServiceGetRoles = {
  readonly methodName: string;
  readonly service: typeof IssuerService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof issuer_api_v1_issuer_pb.GetRolesRequest;
  readonly responseType: typeof issuer_api_v1_issuer_pb.GetRolesResponse;
};

type IssuerServiceSetRole = {
  readonly methodName: string;
  readonly service: typeof IssuerService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof issuer_api_v1_issuer_pb.SetRoleRequest;
  readonly responseType: typeof issuer_api_v1_issuer_pb.SetRoleResponse;
};

type IssuerServiceSetAssetDenominations = {
  readonly methodName: string;
  readonly service: typeof IssuerService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof issuer_api_v1_issuer_pb.SetAssetDenominationsRequest;
  readonly responseType: typeof issuer_api_v1_issuer_pb.SetAssetDenominationsResponse;
};

type IssuerServiceSetAssetAuthorities = {
  readonly methodName: string;
  readonly service: typeof IssuerService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof issuer_api_v1_issuer_pb.SetAssetAuthoritiesRequest;
  readonly responseType: typeof issuer_api_v1_issuer_pb.SetAssetAuthoritiesResponse;
};

export class IssuerService {
  static readonly serviceName: string;
  static readonly Authenticate: IssuerServiceAuthenticate;
  static readonly Issue: IssuerServiceIssue;
  static readonly GetRoles: IssuerServiceGetRoles;
  static readonly SetRole: IssuerServiceSetRole;
  static readonly SetAssetDenominations: IssuerServiceSetAssetDenominations;
  static readonly SetAssetAuthorities: IssuerServiceSetAssetAuthorities;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class IssuerServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  authenticate(
    requestMessage: issuer_api_v1_issuer_pb.AuthenticateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.AuthenticateResponse|null) => void
  ): UnaryResponse;
  authenticate(
    requestMessage: issuer_api_v1_issuer_pb.AuthenticateRequest,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.AuthenticateResponse|null) => void
  ): UnaryResponse;
  issue(
    requestMessage: issuer_api_v1_issuer_pb.IssueRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.IssueResponse|null) => void
  ): UnaryResponse;
  issue(
    requestMessage: issuer_api_v1_issuer_pb.IssueRequest,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.IssueResponse|null) => void
  ): UnaryResponse;
  getRoles(
    requestMessage: issuer_api_v1_issuer_pb.GetRolesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.GetRolesResponse|null) => void
  ): UnaryResponse;
  getRoles(
    requestMessage: issuer_api_v1_issuer_pb.GetRolesRequest,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.GetRolesResponse|null) => void
  ): UnaryResponse;
  setRole(
    requestMessage: issuer_api_v1_issuer_pb.SetRoleRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.SetRoleResponse|null) => void
  ): UnaryResponse;
  setRole(
    requestMessage: issuer_api_v1_issuer_pb.SetRoleRequest,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.SetRoleResponse|null) => void
  ): UnaryResponse;
  setAssetDenominations(
    requestMessage: issuer_api_v1_issuer_pb.SetAssetDenominationsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.SetAssetDenominationsResponse|null) => void
  ): UnaryResponse;
  setAssetDenominations(
    requestMessage: issuer_api_v1_issuer_pb.SetAssetDenominationsRequest,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.SetAssetDenominationsResponse|null) => void
  ): UnaryResponse;
  setAssetAuthorities(
    requestMessage: issuer_api_v1_issuer_pb.SetAssetAuthoritiesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.SetAssetAuthoritiesResponse|null) => void
  ): UnaryResponse;
  setAssetAuthorities(
    requestMessage: issuer_api_v1_issuer_pb.SetAssetAuthoritiesRequest,
    callback: (error: ServiceError|null, responseMessage: issuer_api_v1_issuer_pb.SetAssetAuthoritiesResponse|null) => void
  ): UnaryResponse;
}

