/* eslint-disable */
/*Generated by GenDocu.com*/
// package: issuer_api.v1
// file: issuer_api/v1/issuer.proto

var issuer_api_v1_issuer_pb = require("../../issuer_api/v1/issuer_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var IssuerService = (function () {
  function IssuerService() {}
  IssuerService.serviceName = "issuer_api.v1.IssuerService";
  return IssuerService;
}());

IssuerService.Authenticate = {
  methodName: "Authenticate",
  service: IssuerService,
  requestStream: false,
  responseStream: false,
  requestType: issuer_api_v1_issuer_pb.AuthenticateRequest,
  responseType: issuer_api_v1_issuer_pb.AuthenticateResponse
};

IssuerService.Issue = {
  methodName: "Issue",
  service: IssuerService,
  requestStream: false,
  responseStream: false,
  requestType: issuer_api_v1_issuer_pb.IssueRequest,
  responseType: issuer_api_v1_issuer_pb.IssueResponse
};

IssuerService.GetRoles = {
  methodName: "GetRoles",
  service: IssuerService,
  requestStream: false,
  responseStream: false,
  requestType: issuer_api_v1_issuer_pb.GetRolesRequest,
  responseType: issuer_api_v1_issuer_pb.GetRolesResponse
};

IssuerService.SetRole = {
  methodName: "SetRole",
  service: IssuerService,
  requestStream: false,
  responseStream: false,
  requestType: issuer_api_v1_issuer_pb.SetRoleRequest,
  responseType: issuer_api_v1_issuer_pb.SetRoleResponse
};

exports.IssuerService = IssuerService;

function IssuerServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

IssuerServiceClient.prototype.authenticate = function authenticate(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(IssuerService.Authenticate, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

IssuerServiceClient.prototype.issue = function issue(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(IssuerService.Issue, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

IssuerServiceClient.prototype.getRoles = function getRoles(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(IssuerService.GetRoles, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

IssuerServiceClient.prototype.setRole = function setRole(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(IssuerService.SetRole, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.IssuerServiceClient = IssuerServiceClient;

