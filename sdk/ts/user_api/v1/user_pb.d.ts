/* eslint-disable */
/*Generated by GenDocu.com*/
// package: user_api.v1
// file: user_api/v1/user.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";

export class User extends jspb.Message {
  getUuid(): string;
  setUuid(value: string): void;

  getFirstName(): string;
  setFirstName(value: string): void;

  getLastName(): string;
  setLastName(value: string): void;

  getEmail(): string;
  setEmail(value: string): void;

  getRole(): RoleMap[keyof RoleMap];
  setRole(value: RoleMap[keyof RoleMap]): void;

  getAvatar(): string;
  setAvatar(value: string): void;

  getPhone(): string;
  setPhone(value: string): void;

  clearDidsList(): void;
  getDidsList(): Array<string>;
  setDidsList(value: Array<string>): void;
  addDids(value: string, index?: number): string;

  getExternalIdsMap(): jspb.Map<string, string>;
  clearExternalIdsMap(): void;
  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): google_protobuf_struct_pb.Struct | undefined;
  setMetadata(value?: google_protobuf_struct_pb.Struct): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): User.AsObject;
  static toObject(includeInstance: boolean, msg: User): User.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: User, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): User;
  static deserializeBinaryFromReader(message: User, reader: jspb.BinaryReader): User;
}

export namespace User {
  export type AsObject = {
    uuid: string,
    firstName: string,
    lastName: string,
    email: string,
    role: RoleMap[keyof RoleMap],
    avatar: string,
    phone: string,
    didsList: Array<string>,
    externalIdsMap: Array<[string, string]>,
    metadata?: google_protobuf_struct_pb.Struct.AsObject,
  }
}

export class RegisterUserRequest extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  getFirstName(): string;
  setFirstName(value: string): void;

  getLastName(): string;
  setLastName(value: string): void;

  getPassword(): string;
  setPassword(value: string): void;

  getRole(): RoleMap[keyof RoleMap];
  setRole(value: RoleMap[keyof RoleMap]): void;

  getAvatar(): string;
  setAvatar(value: string): void;

  getPhone(): string;
  setPhone(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegisterUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RegisterUserRequest): RegisterUserRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RegisterUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegisterUserRequest;
  static deserializeBinaryFromReader(message: RegisterUserRequest, reader: jspb.BinaryReader): RegisterUserRequest;
}

export namespace RegisterUserRequest {
  export type AsObject = {
    email: string,
    firstName: string,
    lastName: string,
    password: string,
    role: RoleMap[keyof RoleMap],
    avatar: string,
    phone: string,
  }
}

export class AuthToken extends jspb.Message {
  getToken(): string;
  setToken(value: string): void;

  getTokenType(): string;
  setTokenType(value: string): void;

  getExpiresIn(): number;
  setExpiresIn(value: number): void;

  getRefreshToken(): string;
  setRefreshToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthToken.AsObject;
  static toObject(includeInstance: boolean, msg: AuthToken): AuthToken.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthToken, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthToken;
  static deserializeBinaryFromReader(message: AuthToken, reader: jspb.BinaryReader): AuthToken;
}

export namespace AuthToken {
  export type AsObject = {
    token: string,
    tokenType: string,
    expiresIn: number,
    refreshToken: string,
  }
}

export class RegisterUserResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegisterUserResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RegisterUserResponse): RegisterUserResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RegisterUserResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegisterUserResponse;
  static deserializeBinaryFromReader(message: RegisterUserResponse, reader: jspb.BinaryReader): RegisterUserResponse;
}

export namespace RegisterUserResponse {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class ConfirmUserRequest extends jspb.Message {
  getEmailOrPhone(): string;
  setEmailOrPhone(value: string): void;

  getToken(): string;
  setToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConfirmUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConfirmUserRequest): ConfirmUserRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConfirmUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConfirmUserRequest;
  static deserializeBinaryFromReader(message: ConfirmUserRequest, reader: jspb.BinaryReader): ConfirmUserRequest;
}

export namespace ConfirmUserRequest {
  export type AsObject = {
    emailOrPhone: string,
    token: string,
  }
}

export class ConfirmUserResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConfirmUserResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConfirmUserResponse): ConfirmUserResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConfirmUserResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConfirmUserResponse;
  static deserializeBinaryFromReader(message: ConfirmUserResponse, reader: jspb.BinaryReader): ConfirmUserResponse;
}

export namespace ConfirmUserResponse {
  export type AsObject = {
  }
}

export class AuthnWithProviderRequest extends jspb.Message {
  getProvider(): ProviderMap[keyof ProviderMap];
  setProvider(value: ProviderMap[keyof ProviderMap]): void;

  getInstanceName(): string;
  setInstanceName(value: string): void;

  getRequestOrigin(): string;
  setRequestOrigin(value: string): void;

  hasClientState(): boolean;
  clearClientState(): void;
  getClientState(): google_protobuf_struct_pb.Struct | undefined;
  setClientState(value?: google_protobuf_struct_pb.Struct): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnWithProviderRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnWithProviderRequest): AuthnWithProviderRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnWithProviderRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnWithProviderRequest;
  static deserializeBinaryFromReader(message: AuthnWithProviderRequest, reader: jspb.BinaryReader): AuthnWithProviderRequest;
}

export namespace AuthnWithProviderRequest {
  export type AsObject = {
    provider: ProviderMap[keyof ProviderMap],
    instanceName: string,
    requestOrigin: string,
    clientState?: google_protobuf_struct_pb.Struct.AsObject,
  }
}

export class AuthnWithProviderResponse extends jspb.Message {
  getProviderUrl(): string;
  setProviderUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnWithProviderResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnWithProviderResponse): AuthnWithProviderResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnWithProviderResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnWithProviderResponse;
  static deserializeBinaryFromReader(message: AuthnWithProviderResponse, reader: jspb.BinaryReader): AuthnWithProviderResponse;
}

export namespace AuthnWithProviderResponse {
  export type AsObject = {
    providerUrl: string,
  }
}

export class HandleOIDCCallbackRequest extends jspb.Message {
  getCode(): string;
  setCode(value: string): void;

  getState(): string;
  setState(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HandleOIDCCallbackRequest.AsObject;
  static toObject(includeInstance: boolean, msg: HandleOIDCCallbackRequest): HandleOIDCCallbackRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HandleOIDCCallbackRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HandleOIDCCallbackRequest;
  static deserializeBinaryFromReader(message: HandleOIDCCallbackRequest, reader: jspb.BinaryReader): HandleOIDCCallbackRequest;
}

export namespace HandleOIDCCallbackRequest {
  export type AsObject = {
    code: string,
    state: string,
  }
}

export class HandleOIDCCallbackResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  getInstanceName(): string;
  setInstanceName(value: string): void;

  getRequestOrigin(): string;
  setRequestOrigin(value: string): void;

  hasClientState(): boolean;
  clearClientState(): void;
  getClientState(): google_protobuf_struct_pb.Struct | undefined;
  setClientState(value?: google_protobuf_struct_pb.Struct): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HandleOIDCCallbackResponse.AsObject;
  static toObject(includeInstance: boolean, msg: HandleOIDCCallbackResponse): HandleOIDCCallbackResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HandleOIDCCallbackResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HandleOIDCCallbackResponse;
  static deserializeBinaryFromReader(message: HandleOIDCCallbackResponse, reader: jspb.BinaryReader): HandleOIDCCallbackResponse;
}

export namespace HandleOIDCCallbackResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
    instanceName: string,
    requestOrigin: string,
    clientState?: google_protobuf_struct_pb.Struct.AsObject,
  }
}

export class FindByEmailRequest extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindByEmailRequest.AsObject;
  static toObject(includeInstance: boolean, msg: FindByEmailRequest): FindByEmailRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindByEmailRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindByEmailRequest;
  static deserializeBinaryFromReader(message: FindByEmailRequest, reader: jspb.BinaryReader): FindByEmailRequest;
}

export namespace FindByEmailRequest {
  export type AsObject = {
    email: string,
  }
}

export class FindByEmailResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindByEmailResponse.AsObject;
  static toObject(includeInstance: boolean, msg: FindByEmailResponse): FindByEmailResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindByEmailResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindByEmailResponse;
  static deserializeBinaryFromReader(message: FindByEmailResponse, reader: jspb.BinaryReader): FindByEmailResponse;
}

export namespace FindByEmailResponse {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class FindByIDRequest extends jspb.Message {
  getUuid(): string;
  setUuid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindByIDRequest.AsObject;
  static toObject(includeInstance: boolean, msg: FindByIDRequest): FindByIDRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindByIDRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindByIDRequest;
  static deserializeBinaryFromReader(message: FindByIDRequest, reader: jspb.BinaryReader): FindByIDRequest;
}

export namespace FindByIDRequest {
  export type AsObject = {
    uuid: string,
  }
}

export class FindByIDResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindByIDResponse.AsObject;
  static toObject(includeInstance: boolean, msg: FindByIDResponse): FindByIDResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindByIDResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindByIDResponse;
  static deserializeBinaryFromReader(message: FindByIDResponse, reader: jspb.BinaryReader): FindByIDResponse;
}

export namespace FindByIDResponse {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class AuthnWithPasswordRequest extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  getPassword(): string;
  setPassword(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnWithPasswordRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnWithPasswordRequest): AuthnWithPasswordRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnWithPasswordRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnWithPasswordRequest;
  static deserializeBinaryFromReader(message: AuthnWithPasswordRequest, reader: jspb.BinaryReader): AuthnWithPasswordRequest;
}

export namespace AuthnWithPasswordRequest {
  export type AsObject = {
    email: string,
    password: string,
  }
}

export class AuthnWithPasswordResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnWithPasswordResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnWithPasswordResponse): AuthnWithPasswordResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnWithPasswordResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnWithPasswordResponse;
  static deserializeBinaryFromReader(message: AuthnWithPasswordResponse, reader: jspb.BinaryReader): AuthnWithPasswordResponse;
}

export namespace AuthnWithPasswordResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
  }
}

export class RefreshAccessTokenRequest extends jspb.Message {
  getRefreshToken(): string;
  setRefreshToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RefreshAccessTokenRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RefreshAccessTokenRequest): RefreshAccessTokenRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RefreshAccessTokenRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RefreshAccessTokenRequest;
  static deserializeBinaryFromReader(message: RefreshAccessTokenRequest, reader: jspb.BinaryReader): RefreshAccessTokenRequest;
}

export namespace RefreshAccessTokenRequest {
  export type AsObject = {
    refreshToken: string,
  }
}

export class RefreshAccessTokenResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RefreshAccessTokenResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RefreshAccessTokenResponse): RefreshAccessTokenResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RefreshAccessTokenResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RefreshAccessTokenResponse;
  static deserializeBinaryFromReader(message: RefreshAccessTokenResponse, reader: jspb.BinaryReader): RefreshAccessTokenResponse;
}

export namespace RefreshAccessTokenResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
  }
}

export class GetMeRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetMeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetMeRequest): GetMeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetMeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetMeRequest;
  static deserializeBinaryFromReader(message: GetMeRequest, reader: jspb.BinaryReader): GetMeRequest;
}

export namespace GetMeRequest {
  export type AsObject = {
  }
}

export class GetMeResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetMeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetMeResponse): GetMeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetMeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetMeResponse;
  static deserializeBinaryFromReader(message: GetMeResponse, reader: jspb.BinaryReader): GetMeResponse;
}

export namespace GetMeResponse {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class AuthTokenResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthTokenResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthTokenResponse): AuthTokenResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthTokenResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthTokenResponse;
  static deserializeBinaryFromReader(message: AuthTokenResponse, reader: jspb.BinaryReader): AuthTokenResponse;
}

export namespace AuthTokenResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
  }
}

export class CreateAuthnBrowserWithWalletChallengeRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAuthnBrowserWithWalletChallengeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAuthnBrowserWithWalletChallengeRequest): CreateAuthnBrowserWithWalletChallengeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateAuthnBrowserWithWalletChallengeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAuthnBrowserWithWalletChallengeRequest;
  static deserializeBinaryFromReader(message: CreateAuthnBrowserWithWalletChallengeRequest, reader: jspb.BinaryReader): CreateAuthnBrowserWithWalletChallengeRequest;
}

export namespace CreateAuthnBrowserWithWalletChallengeRequest {
  export type AsObject = {
  }
}

export class CreateAuthnBrowserWithWalletChallengeResponse extends jspb.Message {
  hasNonce(): boolean;
  clearNonce(): void;
  getNonce(): string;
  setNonce(value: string): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthTokenResponse | undefined;
  setAuthToken(value?: AuthTokenResponse): void;

  getDidStartCase(): CreateAuthnBrowserWithWalletChallengeResponse.DidStartCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAuthnBrowserWithWalletChallengeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAuthnBrowserWithWalletChallengeResponse): CreateAuthnBrowserWithWalletChallengeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateAuthnBrowserWithWalletChallengeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAuthnBrowserWithWalletChallengeResponse;
  static deserializeBinaryFromReader(message: CreateAuthnBrowserWithWalletChallengeResponse, reader: jspb.BinaryReader): CreateAuthnBrowserWithWalletChallengeResponse;
}

export namespace CreateAuthnBrowserWithWalletChallengeResponse {
  export type AsObject = {
    nonce: string,
    authToken?: AuthTokenResponse.AsObject,
  }

  export enum DidStartCase {
    DID_START_NOT_SET = 0,
    NONCE = 1,
    AUTH_TOKEN = 2,
  }
}

export class AuthnBrowserWithWalletRequest extends jspb.Message {
  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  getNonce(): string;
  setNonce(value: string): void;

  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnBrowserWithWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnBrowserWithWalletRequest): AuthnBrowserWithWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnBrowserWithWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnBrowserWithWalletRequest;
  static deserializeBinaryFromReader(message: AuthnBrowserWithWalletRequest, reader: jspb.BinaryReader): AuthnBrowserWithWalletRequest;
}

export namespace AuthnBrowserWithWalletRequest {
  export type AsObject = {
    signature: Uint8Array | string,
    nonce: string,
    did: string,
  }
}

export class AuthnBrowserWithWalletResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnBrowserWithWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnBrowserWithWalletResponse): AuthnBrowserWithWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnBrowserWithWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnBrowserWithWalletResponse;
  static deserializeBinaryFromReader(message: AuthnBrowserWithWalletResponse, reader: jspb.BinaryReader): AuthnBrowserWithWalletResponse;
}

export namespace AuthnBrowserWithWalletResponse {
  export type AsObject = {
  }
}

export class CreateRegisterWalletChallengeRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateRegisterWalletChallengeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateRegisterWalletChallengeRequest): CreateRegisterWalletChallengeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateRegisterWalletChallengeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateRegisterWalletChallengeRequest;
  static deserializeBinaryFromReader(message: CreateRegisterWalletChallengeRequest, reader: jspb.BinaryReader): CreateRegisterWalletChallengeRequest;
}

export namespace CreateRegisterWalletChallengeRequest {
  export type AsObject = {
  }
}

export class CreateRegisterWalletChallengeResponse extends jspb.Message {
  hasNonce(): boolean;
  clearNonce(): void;
  getNonce(): string;
  setNonce(value: string): void;

  hasOk(): boolean;
  clearOk(): void;
  getOk(): string;
  setOk(value: string): void;

  getRegistrationStartCase(): CreateRegisterWalletChallengeResponse.RegistrationStartCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateRegisterWalletChallengeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateRegisterWalletChallengeResponse): CreateRegisterWalletChallengeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateRegisterWalletChallengeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateRegisterWalletChallengeResponse;
  static deserializeBinaryFromReader(message: CreateRegisterWalletChallengeResponse, reader: jspb.BinaryReader): CreateRegisterWalletChallengeResponse;
}

export namespace CreateRegisterWalletChallengeResponse {
  export type AsObject = {
    nonce: string,
    ok: string,
  }

  export enum RegistrationStartCase {
    REGISTRATION_START_NOT_SET = 0,
    NONCE = 1,
    OK = 2,
  }
}

export class RegisterWalletRequest extends jspb.Message {
  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  getNonce(): string;
  setNonce(value: string): void;

  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegisterWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RegisterWalletRequest): RegisterWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RegisterWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegisterWalletRequest;
  static deserializeBinaryFromReader(message: RegisterWalletRequest, reader: jspb.BinaryReader): RegisterWalletRequest;
}

export namespace RegisterWalletRequest {
  export type AsObject = {
    signature: Uint8Array | string,
    nonce: string,
    did: string,
  }
}

export class RegisterWalletResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegisterWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RegisterWalletResponse): RegisterWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RegisterWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegisterWalletResponse;
  static deserializeBinaryFromReader(message: RegisterWalletResponse, reader: jspb.BinaryReader): RegisterWalletResponse;
}

export namespace RegisterWalletResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
  }
}

export class CreateAuthnWalletChallengeRequest extends jspb.Message {
  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAuthnWalletChallengeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAuthnWalletChallengeRequest): CreateAuthnWalletChallengeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateAuthnWalletChallengeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAuthnWalletChallengeRequest;
  static deserializeBinaryFromReader(message: CreateAuthnWalletChallengeRequest, reader: jspb.BinaryReader): CreateAuthnWalletChallengeRequest;
}

export namespace CreateAuthnWalletChallengeRequest {
  export type AsObject = {
    did: string,
  }
}

export class CreateAuthnWalletChallengeResponse extends jspb.Message {
  getNonce(): string;
  setNonce(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAuthnWalletChallengeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAuthnWalletChallengeResponse): CreateAuthnWalletChallengeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateAuthnWalletChallengeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAuthnWalletChallengeResponse;
  static deserializeBinaryFromReader(message: CreateAuthnWalletChallengeResponse, reader: jspb.BinaryReader): CreateAuthnWalletChallengeResponse;
}

export namespace CreateAuthnWalletChallengeResponse {
  export type AsObject = {
    nonce: string,
  }
}

export class AuthnWalletRequest extends jspb.Message {
  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  getNonce(): string;
  setNonce(value: string): void;

  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnWalletRequest): AuthnWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnWalletRequest;
  static deserializeBinaryFromReader(message: AuthnWalletRequest, reader: jspb.BinaryReader): AuthnWalletRequest;
}

export namespace AuthnWalletRequest {
  export type AsObject = {
    signature: Uint8Array | string,
    nonce: string,
    did: string,
  }
}

export class AuthnWalletResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnWalletResponse): AuthnWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnWalletResponse;
  static deserializeBinaryFromReader(message: AuthnWalletResponse, reader: jspb.BinaryReader): AuthnWalletResponse;
}

export namespace AuthnWalletResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
  }
}

export class HandleSAMLCallbackRequest extends jspb.Message {
  getSamlResponse(): string;
  setSamlResponse(value: string): void;

  getRelayState(): string;
  setRelayState(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HandleSAMLCallbackRequest.AsObject;
  static toObject(includeInstance: boolean, msg: HandleSAMLCallbackRequest): HandleSAMLCallbackRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HandleSAMLCallbackRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HandleSAMLCallbackRequest;
  static deserializeBinaryFromReader(message: HandleSAMLCallbackRequest, reader: jspb.BinaryReader): HandleSAMLCallbackRequest;
}

export namespace HandleSAMLCallbackRequest {
  export type AsObject = {
    samlResponse: string,
    relayState: string,
  }
}

export class HandleSAMLCallbackResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  hasAuthToken(): boolean;
  clearAuthToken(): void;
  getAuthToken(): AuthToken | undefined;
  setAuthToken(value?: AuthToken): void;

  getInstanceName(): string;
  setInstanceName(value: string): void;

  getRequestOrigin(): string;
  setRequestOrigin(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HandleSAMLCallbackResponse.AsObject;
  static toObject(includeInstance: boolean, msg: HandleSAMLCallbackResponse): HandleSAMLCallbackResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HandleSAMLCallbackResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HandleSAMLCallbackResponse;
  static deserializeBinaryFromReader(message: HandleSAMLCallbackResponse, reader: jspb.BinaryReader): HandleSAMLCallbackResponse;
}

export namespace HandleSAMLCallbackResponse {
  export type AsObject = {
    user?: User.AsObject,
    authToken?: AuthToken.AsObject,
    instanceName: string,
    requestOrigin: string,
  }
}

export class SAMLSPMetadataRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SAMLSPMetadataRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SAMLSPMetadataRequest): SAMLSPMetadataRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SAMLSPMetadataRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SAMLSPMetadataRequest;
  static deserializeBinaryFromReader(message: SAMLSPMetadataRequest, reader: jspb.BinaryReader): SAMLSPMetadataRequest;
}

export namespace SAMLSPMetadataRequest {
  export type AsObject = {
  }
}

export class SAMLSPMetadataResponse extends jspb.Message {
  getSpMetadata(): Uint8Array | string;
  getSpMetadata_asU8(): Uint8Array;
  getSpMetadata_asB64(): string;
  setSpMetadata(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SAMLSPMetadataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SAMLSPMetadataResponse): SAMLSPMetadataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SAMLSPMetadataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SAMLSPMetadataResponse;
  static deserializeBinaryFromReader(message: SAMLSPMetadataResponse, reader: jspb.BinaryReader): SAMLSPMetadataResponse;
}

export namespace SAMLSPMetadataResponse {
  export type AsObject = {
    spMetadata: Uint8Array | string,
  }
}

export class GetAppSettingsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAppSettingsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetAppSettingsRequest): GetAppSettingsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetAppSettingsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAppSettingsRequest;
  static deserializeBinaryFromReader(message: GetAppSettingsRequest, reader: jspb.BinaryReader): GetAppSettingsRequest;
}

export namespace GetAppSettingsRequest {
  export type AsObject = {
  }
}

export class AppSettings extends jspb.Message {
  clearAuthnProvidersList(): void;
  getAuthnProvidersList(): Array<AuthnProvider>;
  setAuthnProvidersList(value: Array<AuthnProvider>): void;
  addAuthnProviders(value?: AuthnProvider, index?: number): AuthnProvider;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AppSettings.AsObject;
  static toObject(includeInstance: boolean, msg: AppSettings): AppSettings.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AppSettings, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AppSettings;
  static deserializeBinaryFromReader(message: AppSettings, reader: jspb.BinaryReader): AppSettings;
}

export namespace AppSettings {
  export type AsObject = {
    authnProvidersList: Array<AuthnProvider.AsObject>,
  }
}

export class AuthnProvider extends jspb.Message {
  getProvider(): ProviderMap[keyof ProviderMap];
  setProvider(value: ProviderMap[keyof ProviderMap]): void;

  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthnProvider.AsObject;
  static toObject(includeInstance: boolean, msg: AuthnProvider): AuthnProvider.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthnProvider, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthnProvider;
  static deserializeBinaryFromReader(message: AuthnProvider, reader: jspb.BinaryReader): AuthnProvider;
}

export namespace AuthnProvider {
  export type AsObject = {
    provider: ProviderMap[keyof ProviderMap],
    enabled: boolean,
  }
}

export class GetAppSettingsResponse extends jspb.Message {
  hasAppSettings(): boolean;
  clearAppSettings(): void;
  getAppSettings(): AppSettings | undefined;
  setAppSettings(value?: AppSettings): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAppSettingsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetAppSettingsResponse): GetAppSettingsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetAppSettingsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAppSettingsResponse;
  static deserializeBinaryFromReader(message: GetAppSettingsResponse, reader: jspb.BinaryReader): GetAppSettingsResponse;
}

export namespace GetAppSettingsResponse {
  export type AsObject = {
    appSettings?: AppSettings.AsObject,
  }
}

export class GetUserByDIDRequest extends jspb.Message {
  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUserByDIDRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetUserByDIDRequest): GetUserByDIDRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetUserByDIDRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUserByDIDRequest;
  static deserializeBinaryFromReader(message: GetUserByDIDRequest, reader: jspb.BinaryReader): GetUserByDIDRequest;
}

export namespace GetUserByDIDRequest {
  export type AsObject = {
    did: string,
  }
}

export class GetUserByDIDResponse extends jspb.Message {
  hasUser(): boolean;
  clearUser(): void;
  getUser(): User | undefined;
  setUser(value?: User): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUserByDIDResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetUserByDIDResponse): GetUserByDIDResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetUserByDIDResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUserByDIDResponse;
  static deserializeBinaryFromReader(message: GetUserByDIDResponse, reader: jspb.BinaryReader): GetUserByDIDResponse;
}

export namespace GetUserByDIDResponse {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class AssociateWalletRequest extends jspb.Message {
  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssociateWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AssociateWalletRequest): AssociateWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssociateWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssociateWalletRequest;
  static deserializeBinaryFromReader(message: AssociateWalletRequest, reader: jspb.BinaryReader): AssociateWalletRequest;
}

export namespace AssociateWalletRequest {
  export type AsObject = {
    did: string,
  }
}

export class AssociateWalletResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssociateWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AssociateWalletResponse): AssociateWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssociateWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssociateWalletResponse;
  static deserializeBinaryFromReader(message: AssociateWalletResponse, reader: jspb.BinaryReader): AssociateWalletResponse;
}

export namespace AssociateWalletResponse {
  export type AsObject = {
  }
}

export class DissociateWalletRequest extends jspb.Message {
  getDid(): string;
  setDid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DissociateWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DissociateWalletRequest): DissociateWalletRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DissociateWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DissociateWalletRequest;
  static deserializeBinaryFromReader(message: DissociateWalletRequest, reader: jspb.BinaryReader): DissociateWalletRequest;
}

export namespace DissociateWalletRequest {
  export type AsObject = {
    did: string,
  }
}

export class DissociateWalletResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DissociateWalletResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DissociateWalletResponse): DissociateWalletResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DissociateWalletResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DissociateWalletResponse;
  static deserializeBinaryFromReader(message: DissociateWalletResponse, reader: jspb.BinaryReader): DissociateWalletResponse;
}

export namespace DissociateWalletResponse {
  export type AsObject = {
  }
}

export interface ProviderMap {
  PROVIDER_UNSPECIFIED: 0;
  PROVIDER_GITHUB: 1;
  PROVIDER_FACEBOOK: 2;
  PROVIDER_GOOGLE: 3;
  PROVIDER_SAML: 4;
  PROVIDER_COGNITO: 5;
}

export const Provider: ProviderMap;

export interface RoleMap {
  ROLE_UNSPECIFIED: 0;
  ROLE_USER: 1;
  ROLE_ADMIN: 2;
}

export const Role: RoleMap;

