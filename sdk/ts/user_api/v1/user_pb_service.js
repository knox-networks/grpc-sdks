/* eslint-disable */
/*Generated by GenDocu.com*/
// package: user_api.v1
// file: user_api/v1/user.proto

var user_api_v1_user_pb = require("../../user_api/v1/user_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var UserApiService = (function () {
  function UserApiService() {}
  UserApiService.serviceName = "user_api.v1.UserApiService";
  return UserApiService;
}());

UserApiService.AuthnWithPassword = {
  methodName: "AuthnWithPassword",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.AuthnWithPasswordRequest,
  responseType: user_api_v1_user_pb.AuthnWithPasswordResponse
};

UserApiService.RefreshAccessToken = {
  methodName: "RefreshAccessToken",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.RefreshAccessTokenRequest,
  responseType: user_api_v1_user_pb.RefreshAccessTokenResponse
};

UserApiService.AuthnWithProvider = {
  methodName: "AuthnWithProvider",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.AuthnWithProviderRequest,
  responseType: user_api_v1_user_pb.AuthnWithProviderResponse
};

UserApiService.HandleOIDCCallback = {
  methodName: "HandleOIDCCallback",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.HandleOIDCCallbackRequest,
  responseType: user_api_v1_user_pb.HandleOIDCCallbackResponse
};

UserApiService.HandleSAMLCallback = {
  methodName: "HandleSAMLCallback",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.HandleSAMLCallbackRequest,
  responseType: user_api_v1_user_pb.HandleSAMLCallbackResponse
};

UserApiService.SAMLSPMetadata = {
  methodName: "SAMLSPMetadata",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.SAMLSPMetadataRequest,
  responseType: user_api_v1_user_pb.SAMLSPMetadataResponse
};

UserApiService.CreateAuthnBrowserWithWalletChallenge = {
  methodName: "CreateAuthnBrowserWithWalletChallenge",
  service: UserApiService,
  requestStream: false,
  responseStream: true,
  requestType: user_api_v1_user_pb.CreateAuthnBrowserWithWalletChallengeRequest,
  responseType: user_api_v1_user_pb.CreateAuthnBrowserWithWalletChallengeResponse
};

UserApiService.AuthnBrowserWithWallet = {
  methodName: "AuthnBrowserWithWallet",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.AuthnBrowserWithWalletRequest,
  responseType: user_api_v1_user_pb.AuthnBrowserWithWalletResponse
};

UserApiService.CreateAuthnWalletChallenge = {
  methodName: "CreateAuthnWalletChallenge",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.CreateAuthnWalletChallengeRequest,
  responseType: user_api_v1_user_pb.CreateAuthnWalletChallengeResponse
};

UserApiService.AuthnWallet = {
  methodName: "AuthnWallet",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.AuthnWalletRequest,
  responseType: user_api_v1_user_pb.AuthnWalletResponse
};

UserApiService.CreateRegisterWalletChallenge = {
  methodName: "CreateRegisterWalletChallenge",
  service: UserApiService,
  requestStream: false,
  responseStream: true,
  requestType: user_api_v1_user_pb.CreateRegisterWalletChallengeRequest,
  responseType: user_api_v1_user_pb.CreateRegisterWalletChallengeResponse
};

UserApiService.RegisterWallet = {
  methodName: "RegisterWallet",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.RegisterWalletRequest,
  responseType: user_api_v1_user_pb.RegisterWalletResponse
};

UserApiService.AssociateWallet = {
  methodName: "AssociateWallet",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.AssociateWalletRequest,
  responseType: user_api_v1_user_pb.AssociateWalletResponse
};

UserApiService.DissociateWallet = {
  methodName: "DissociateWallet",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.DissociateWalletRequest,
  responseType: user_api_v1_user_pb.DissociateWalletResponse
};

UserApiService.GetAppSettings = {
  methodName: "GetAppSettings",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.GetAppSettingsRequest,
  responseType: user_api_v1_user_pb.GetAppSettingsResponse
};

UserApiService.RegisterUser = {
  methodName: "RegisterUser",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.RegisterUserRequest,
  responseType: user_api_v1_user_pb.RegisterUserResponse
};

UserApiService.ConfirmUser = {
  methodName: "ConfirmUser",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.ConfirmUserRequest,
  responseType: user_api_v1_user_pb.ConfirmUserResponse
};

UserApiService.FindByEmail = {
  methodName: "FindByEmail",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.FindByEmailRequest,
  responseType: user_api_v1_user_pb.FindByEmailResponse
};

UserApiService.FindByID = {
  methodName: "FindByID",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.FindByIDRequest,
  responseType: user_api_v1_user_pb.FindByIDResponse
};

UserApiService.GetMe = {
  methodName: "GetMe",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.GetMeRequest,
  responseType: user_api_v1_user_pb.GetMeResponse
};

UserApiService.GetUserByDID = {
  methodName: "GetUserByDID",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.GetUserByDIDRequest,
  responseType: user_api_v1_user_pb.GetUserByDIDResponse
};

UserApiService.ListUsers = {
  methodName: "ListUsers",
  service: UserApiService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.ListUsersRequest,
  responseType: user_api_v1_user_pb.ListUsersResponse
};

exports.UserApiService = UserApiService;

function UserApiServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

UserApiServiceClient.prototype.authnWithPassword = function authnWithPassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.AuthnWithPassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.refreshAccessToken = function refreshAccessToken(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.RefreshAccessToken, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.authnWithProvider = function authnWithProvider(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.AuthnWithProvider, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.handleOIDCCallback = function handleOIDCCallback(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.HandleOIDCCallback, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.handleSAMLCallback = function handleSAMLCallback(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.HandleSAMLCallback, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.sAMLSPMetadata = function sAMLSPMetadata(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.SAMLSPMetadata, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.createAuthnBrowserWithWalletChallenge = function createAuthnBrowserWithWalletChallenge(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(UserApiService.CreateAuthnBrowserWithWalletChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.authnBrowserWithWallet = function authnBrowserWithWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.AuthnBrowserWithWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.createAuthnWalletChallenge = function createAuthnWalletChallenge(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.CreateAuthnWalletChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.authnWallet = function authnWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.AuthnWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.createRegisterWalletChallenge = function createRegisterWalletChallenge(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(UserApiService.CreateRegisterWalletChallenge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.registerWallet = function registerWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.RegisterWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.associateWallet = function associateWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.AssociateWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.dissociateWallet = function dissociateWallet(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.DissociateWallet, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.getAppSettings = function getAppSettings(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.GetAppSettings, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.registerUser = function registerUser(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.RegisterUser, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.confirmUser = function confirmUser(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.ConfirmUser, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.findByEmail = function findByEmail(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.FindByEmail, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.findByID = function findByID(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.FindByID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.getMe = function getMe(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.GetMe, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.getUserByDID = function getUserByDID(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.GetUserByDID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UserApiServiceClient.prototype.listUsers = function listUsers(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UserApiService.ListUsers, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.UserApiServiceClient = UserApiServiceClient;

var ApiKeyManagerService = (function () {
  function ApiKeyManagerService() {}
  ApiKeyManagerService.serviceName = "user_api.v1.ApiKeyManagerService";
  return ApiKeyManagerService;
}());

ApiKeyManagerService.CreateApiKey = {
  methodName: "CreateApiKey",
  service: ApiKeyManagerService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.CreateApiKeyRequest,
  responseType: user_api_v1_user_pb.CreateApiKeyResponse
};

ApiKeyManagerService.UpdateApiKeyStatus = {
  methodName: "UpdateApiKeyStatus",
  service: ApiKeyManagerService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.UpdateApiKeyStatusRequest,
  responseType: user_api_v1_user_pb.UpdateApiKeyStatusResponse
};

ApiKeyManagerService.GetApiKeys = {
  methodName: "GetApiKeys",
  service: ApiKeyManagerService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.GetApiKeysRequest,
  responseType: user_api_v1_user_pb.GetApiKeysResponse
};

ApiKeyManagerService.CheckApiKey = {
  methodName: "CheckApiKey",
  service: ApiKeyManagerService,
  requestStream: false,
  responseStream: false,
  requestType: user_api_v1_user_pb.CheckApiKeyRequest,
  responseType: user_api_v1_user_pb.CheckApiKeyResponse
};

exports.ApiKeyManagerService = ApiKeyManagerService;

function ApiKeyManagerServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ApiKeyManagerServiceClient.prototype.createApiKey = function createApiKey(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ApiKeyManagerService.CreateApiKey, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ApiKeyManagerServiceClient.prototype.updateApiKeyStatus = function updateApiKeyStatus(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ApiKeyManagerService.UpdateApiKeyStatus, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ApiKeyManagerServiceClient.prototype.getApiKeys = function getApiKeys(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ApiKeyManagerService.GetApiKeys, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ApiKeyManagerServiceClient.prototype.checkApiKey = function checkApiKey(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ApiKeyManagerService.CheckApiKey, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ApiKeyManagerServiceClient = ApiKeyManagerServiceClient;

