/* eslint-disable */
/*Generated by GenDocu.com*/
// package: common
// file: common/v1/common.proto

import * as common_v1_common_pb from "../../common/v1/common_pb";
import {grpc} from "@improbable-eng/grpc-web";

type ServiceInfoGetVerifier = {
  readonly methodName: string;
  readonly service: typeof ServiceInfo;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_v1_common_pb.GetVerifierRequest;
  readonly responseType: typeof common_v1_common_pb.GetVerifierResponse;
};

type ServiceInfoGetServiceType = {
  readonly methodName: string;
  readonly service: typeof ServiceInfo;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_v1_common_pb.GetServiceTypeRequest;
  readonly responseType: typeof common_v1_common_pb.GetServiceTypeResponse;
};

export class ServiceInfo {
  static readonly serviceName: string;
  static readonly GetVerifier: ServiceInfoGetVerifier;
  static readonly GetServiceType: ServiceInfoGetServiceType;
}

type TransactionServiceNewSimplePayment = {
  readonly methodName: string;
  readonly service: typeof TransactionService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_v1_common_pb.StartSimplePaymentRequest;
  readonly responseType: typeof common_v1_common_pb.StartSimplePaymentResponse;
};

type TransactionServiceNewFundsChange = {
  readonly methodName: string;
  readonly service: typeof TransactionService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_v1_common_pb.StartFundsChangeRequest;
  readonly responseType: typeof common_v1_common_pb.StartFundsChangeResponse;
};

export class TransactionService {
  static readonly serviceName: string;
  static readonly NewSimplePayment: TransactionServiceNewSimplePayment;
  static readonly NewFundsChange: TransactionServiceNewFundsChange;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class ServiceInfoClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getVerifier(
    requestMessage: common_v1_common_pb.GetVerifierRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.GetVerifierResponse|null) => void
  ): UnaryResponse;
  getVerifier(
    requestMessage: common_v1_common_pb.GetVerifierRequest,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.GetVerifierResponse|null) => void
  ): UnaryResponse;
  getServiceType(
    requestMessage: common_v1_common_pb.GetServiceTypeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.GetServiceTypeResponse|null) => void
  ): UnaryResponse;
  getServiceType(
    requestMessage: common_v1_common_pb.GetServiceTypeRequest,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.GetServiceTypeResponse|null) => void
  ): UnaryResponse;
}

export class TransactionServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  newSimplePayment(
    requestMessage: common_v1_common_pb.StartSimplePaymentRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.StartSimplePaymentResponse|null) => void
  ): UnaryResponse;
  newSimplePayment(
    requestMessage: common_v1_common_pb.StartSimplePaymentRequest,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.StartSimplePaymentResponse|null) => void
  ): UnaryResponse;
  newFundsChange(
    requestMessage: common_v1_common_pb.StartFundsChangeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.StartFundsChangeResponse|null) => void
  ): UnaryResponse;
  newFundsChange(
    requestMessage: common_v1_common_pb.StartFundsChangeRequest,
    callback: (error: ServiceError|null, responseMessage: common_v1_common_pb.StartFundsChangeResponse|null) => void
  ): UnaryResponse;
}

