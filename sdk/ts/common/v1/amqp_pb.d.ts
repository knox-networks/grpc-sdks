/* eslint-disable */
/*Generated by GenDocu.com*/
// package: common
// file: common/v1/amqp.proto

import * as jspb from "google-protobuf";
import * as common_v1_packet_pb from "../../common/v1/packet_pb";

export class Payload extends jspb.Message {
  getPayloadType(): PayloadTypeMap[keyof PayloadTypeMap];
  setPayloadType(value: PayloadTypeMap[keyof PayloadTypeMap]): void;

  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Payload.AsObject;
  static toObject(includeInstance: boolean, msg: Payload): Payload.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Payload, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Payload;
  static deserializeBinaryFromReader(message: Payload, reader: jspb.BinaryReader): Payload;
}

export namespace Payload {
  export type AsObject = {
    payloadType: PayloadTypeMap[keyof PayloadTypeMap],
    data: Uint8Array | string,
  }
}

export class NewTransactionData extends jspb.Message {
  hasContract(): boolean;
  clearContract(): void;
  getContract(): common_v1_packet_pb.Contract | undefined;
  setContract(value?: common_v1_packet_pb.Contract): void;

  getOwner(): string;
  setOwner(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NewTransactionData.AsObject;
  static toObject(includeInstance: boolean, msg: NewTransactionData): NewTransactionData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NewTransactionData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NewTransactionData;
  static deserializeBinaryFromReader(message: NewTransactionData, reader: jspb.BinaryReader): NewTransactionData;
}

export namespace NewTransactionData {
  export type AsObject = {
    contract?: common_v1_packet_pb.Contract.AsObject,
    owner: string,
  }
}

export class AckProposalData extends jspb.Message {
  hasContract(): boolean;
  clearContract(): void;
  getContract(): common_v1_packet_pb.Contract | undefined;
  setContract(value?: common_v1_packet_pb.Contract): void;

  getOwner(): string;
  setOwner(value: string): void;

  getOriginator(): string;
  setOriginator(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AckProposalData.AsObject;
  static toObject(includeInstance: boolean, msg: AckProposalData): AckProposalData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AckProposalData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AckProposalData;
  static deserializeBinaryFromReader(message: AckProposalData, reader: jspb.BinaryReader): AckProposalData;
}

export namespace AckProposalData {
  export type AsObject = {
    contract?: common_v1_packet_pb.Contract.AsObject,
    owner: string,
    originator: string,
  }
}

export class ProposalAckNackData extends jspb.Message {
  getOwner(): string;
  setOwner(value: string): void;

  getOriginator(): string;
  setOriginator(value: string): void;

  hasContract(): boolean;
  clearContract(): void;
  getContract(): common_v1_packet_pb.Contract | undefined;
  setContract(value?: common_v1_packet_pb.Contract): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProposalAckNackData.AsObject;
  static toObject(includeInstance: boolean, msg: ProposalAckNackData): ProposalAckNackData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProposalAckNackData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProposalAckNackData;
  static deserializeBinaryFromReader(message: ProposalAckNackData, reader: jspb.BinaryReader): ProposalAckNackData;
}

export namespace ProposalAckNackData {
  export type AsObject = {
    owner: string,
    originator: string,
    contract?: common_v1_packet_pb.Contract.AsObject,
  }
}

export class RevealSecretData extends jspb.Message {
  getContractId(): string;
  setContractId(value: string): void;

  getOwner(): string;
  setOwner(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RevealSecretData.AsObject;
  static toObject(includeInstance: boolean, msg: RevealSecretData): RevealSecretData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RevealSecretData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RevealSecretData;
  static deserializeBinaryFromReader(message: RevealSecretData, reader: jspb.BinaryReader): RevealSecretData;
}

export namespace RevealSecretData {
  export type AsObject = {
    contractId: string,
    owner: string,
  }
}

export class SecretRevealedData extends jspb.Message {
  getOwner(): string;
  setOwner(value: string): void;

  getContractId(): string;
  setContractId(value: string): void;

  getSecret(): string;
  setSecret(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SecretRevealedData.AsObject;
  static toObject(includeInstance: boolean, msg: SecretRevealedData): SecretRevealedData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SecretRevealedData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SecretRevealedData;
  static deserializeBinaryFromReader(message: SecretRevealedData, reader: jspb.BinaryReader): SecretRevealedData;
}

export namespace SecretRevealedData {
  export type AsObject = {
    owner: string,
    contractId: string,
    secret: string,
  }
}

export class ReceiveSecretData extends jspb.Message {
  getContractId(): string;
  setContractId(value: string): void;

  getOwner(): string;
  setOwner(value: string): void;

  getSecret(): string;
  setSecret(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReceiveSecretData.AsObject;
  static toObject(includeInstance: boolean, msg: ReceiveSecretData): ReceiveSecretData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ReceiveSecretData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReceiveSecretData;
  static deserializeBinaryFromReader(message: ReceiveSecretData, reader: jspb.BinaryReader): ReceiveSecretData;
}

export namespace ReceiveSecretData {
  export type AsObject = {
    contractId: string,
    owner: string,
    secret: string,
  }
}

export class ReceiveTerminationData extends jspb.Message {
  getContractId(): string;
  setContractId(value: string): void;

  getOwner(): string;
  setOwner(value: string): void;

  getResult(): TerminationResultMap[keyof TerminationResultMap];
  setResult(value: TerminationResultMap[keyof TerminationResultMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReceiveTerminationData.AsObject;
  static toObject(includeInstance: boolean, msg: ReceiveTerminationData): ReceiveTerminationData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ReceiveTerminationData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReceiveTerminationData;
  static deserializeBinaryFromReader(message: ReceiveTerminationData, reader: jspb.BinaryReader): ReceiveTerminationData;
}

export namespace ReceiveTerminationData {
  export type AsObject = {
    contractId: string,
    owner: string,
    result: TerminationResultMap[keyof TerminationResultMap],
  }
}

export interface PayloadTypeMap {
  NEWTRANSACTION: 0;
  ACKPROPOSAL: 1;
  PROPOSALACKED: 2;
  PROPOSALNACKED: 3;
  REVEALSECRET: 4;
  SECRETREVEALED: 5;
  RECEIVESECRET: 6;
  RECEIVETERMINATION: 7;
}

export const PayloadType: PayloadTypeMap;

export interface TerminationResultMap {
  CONTRACTFAILED: 0;
  TXNFAILED: 1;
  TXNCOMPLETED: 2;
}

export const TerminationResult: TerminationResultMap;

