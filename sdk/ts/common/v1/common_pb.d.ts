/* eslint-disable */
/*Generated by GenDocu.com*/
// package: common
// file: common/v1/common.proto

import * as jspb from "google-protobuf";

export class DynamicVerifier extends jspb.Message {
  getSignatureSystem(): SignatureSystemMap[keyof SignatureSystemMap];
  setSignatureSystem(value: SignatureSystemMap[keyof SignatureSystemMap]): void;

  getVerifier(): Uint8Array | string;
  getVerifier_asU8(): Uint8Array;
  getVerifier_asB64(): string;
  setVerifier(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DynamicVerifier.AsObject;
  static toObject(includeInstance: boolean, msg: DynamicVerifier): DynamicVerifier.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DynamicVerifier, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DynamicVerifier;
  static deserializeBinaryFromReader(message: DynamicVerifier, reader: jspb.BinaryReader): DynamicVerifier;
}

export namespace DynamicVerifier {
  export type AsObject = {
    signatureSystem: SignatureSystemMap[keyof SignatureSystemMap],
    verifier: Uint8Array | string,
  }
}

export class Amount extends jspb.Message {
  getCurrencyCode(): string;
  setCurrencyCode(value: string): void;

  getAmount(): number;
  setAmount(value: number): void;

  getDecimals(): number;
  setDecimals(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Amount.AsObject;
  static toObject(includeInstance: boolean, msg: Amount): Amount.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Amount, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Amount;
  static deserializeBinaryFromReader(message: Amount, reader: jspb.BinaryReader): Amount;
}

export namespace Amount {
  export type AsObject = {
    currencyCode: string,
    amount: number,
    decimals: number,
  }
}

export class Distribution extends jspb.Message {
  getValueMap(): jspb.Map<number, number>;
  clearValueMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Distribution.AsObject;
  static toObject(includeInstance: boolean, msg: Distribution): Distribution.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Distribution, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Distribution;
  static deserializeBinaryFromReader(message: Distribution, reader: jspb.BinaryReader): Distribution;
}

export namespace Distribution {
  export type AsObject = {
    valueMap: Array<[number, number]>,
  }
}

export class AuthenticationRequest extends jspb.Message {
  hasVerifier(): boolean;
  clearVerifier(): void;
  getVerifier(): DynamicVerifier | undefined;
  setVerifier(value?: DynamicVerifier): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthenticationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AuthenticationRequest): AuthenticationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthenticationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthenticationRequest;
  static deserializeBinaryFromReader(message: AuthenticationRequest, reader: jspb.BinaryReader): AuthenticationRequest;
}

export namespace AuthenticationRequest {
  export type AsObject = {
    verifier?: DynamicVerifier.AsObject,
  }
}

export class AuthenticationResponse extends jspb.Message {
  getChallenge(): Uint8Array | string;
  getChallenge_asU8(): Uint8Array;
  getChallenge_asB64(): string;
  setChallenge(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthenticationResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthenticationResponse): AuthenticationResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthenticationResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthenticationResponse;
  static deserializeBinaryFromReader(message: AuthenticationResponse, reader: jspb.BinaryReader): AuthenticationResponse;
}

export namespace AuthenticationResponse {
  export type AsObject = {
    challenge: Uint8Array | string,
  }
}

export class OneConnection extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OneConnection.AsObject;
  static toObject(includeInstance: boolean, msg: OneConnection): OneConnection.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OneConnection, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OneConnection;
  static deserializeBinaryFromReader(message: OneConnection, reader: jspb.BinaryReader): OneConnection;
}

export namespace OneConnection {
  export type AsObject = {
  }
}

export class ManyConnection extends jspb.Message {
  clearAssociatedVerifiersList(): void;
  getAssociatedVerifiersList(): Array<DynamicVerifier>;
  setAssociatedVerifiersList(value: Array<DynamicVerifier>): void;
  addAssociatedVerifiers(value?: DynamicVerifier, index?: number): DynamicVerifier;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ManyConnection.AsObject;
  static toObject(includeInstance: boolean, msg: ManyConnection): ManyConnection.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ManyConnection, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ManyConnection;
  static deserializeBinaryFromReader(message: ManyConnection, reader: jspb.BinaryReader): ManyConnection;
}

export namespace ManyConnection {
  export type AsObject = {
    associatedVerifiersList: Array<DynamicVerifier.AsObject>,
  }
}

export class AssociatedConnection extends jspb.Message {
  hasPrimaryVerifier(): boolean;
  clearPrimaryVerifier(): void;
  getPrimaryVerifier(): DynamicVerifier | undefined;
  setPrimaryVerifier(value?: DynamicVerifier): void;

  hasAssociatedVerifier(): boolean;
  clearAssociatedVerifier(): void;
  getAssociatedVerifier(): DynamicVerifier | undefined;
  setAssociatedVerifier(value?: DynamicVerifier): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssociatedConnection.AsObject;
  static toObject(includeInstance: boolean, msg: AssociatedConnection): AssociatedConnection.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssociatedConnection, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssociatedConnection;
  static deserializeBinaryFromReader(message: AssociatedConnection, reader: jspb.BinaryReader): AssociatedConnection;
}

export namespace AssociatedConnection {
  export type AsObject = {
    primaryVerifier?: DynamicVerifier.AsObject,
    associatedVerifier?: DynamicVerifier.AsObject,
  }
}

export class ConnectionRequest extends jspb.Message {
  hasOne(): boolean;
  clearOne(): void;
  getOne(): OneConnection | undefined;
  setOne(value?: OneConnection): void;

  hasMany(): boolean;
  clearMany(): void;
  getMany(): ManyConnection | undefined;
  setMany(value?: ManyConnection): void;

  hasSignature(): boolean;
  clearSignature(): void;
  getSignature(): AuthenticationSignature | undefined;
  setSignature(value?: AuthenticationSignature): void;

  getConnectionId(): string;
  setConnectionId(value: string): void;

  getRequestTypeCase(): ConnectionRequest.RequestTypeCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectionRequest): ConnectionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectionRequest;
  static deserializeBinaryFromReader(message: ConnectionRequest, reader: jspb.BinaryReader): ConnectionRequest;
}

export namespace ConnectionRequest {
  export type AsObject = {
    one?: OneConnection.AsObject,
    many?: ManyConnection.AsObject,
    signature?: AuthenticationSignature.AsObject,
    connectionId: string,
  }

  export enum RequestTypeCase {
    REQUEST_TYPE_NOT_SET = 0,
    ONE = 1,
    MANY = 2,
  }
}

export class AuthenticationSignature extends jspb.Message {
  hasVerifier(): boolean;
  clearVerifier(): void;
  getVerifier(): DynamicVerifier | undefined;
  setVerifier(value?: DynamicVerifier): void;

  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthenticationSignature.AsObject;
  static toObject(includeInstance: boolean, msg: AuthenticationSignature): AuthenticationSignature.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthenticationSignature, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthenticationSignature;
  static deserializeBinaryFromReader(message: AuthenticationSignature, reader: jspb.BinaryReader): AuthenticationSignature;
}

export namespace AuthenticationSignature {
  export type AsObject = {
    verifier?: DynamicVerifier.AsObject,
    signature: Uint8Array | string,
  }
}

export class AuthorizedSignatureRequest extends jspb.Message {
  getPromissoryFile(): Uint8Array | string;
  getPromissoryFile_asU8(): Uint8Array;
  getPromissoryFile_asB64(): string;
  setPromissoryFile(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthorizedSignatureRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AuthorizedSignatureRequest): AuthorizedSignatureRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthorizedSignatureRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthorizedSignatureRequest;
  static deserializeBinaryFromReader(message: AuthorizedSignatureRequest, reader: jspb.BinaryReader): AuthorizedSignatureRequest;
}

export namespace AuthorizedSignatureRequest {
  export type AsObject = {
    promissoryFile: Uint8Array | string,
  }
}

export class AuthorizedSignatureResponse extends jspb.Message {
  getPromissoryFile(): Uint8Array | string;
  getPromissoryFile_asU8(): Uint8Array;
  getPromissoryFile_asB64(): string;
  setPromissoryFile(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthorizedSignatureResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AuthorizedSignatureResponse): AuthorizedSignatureResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthorizedSignatureResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthorizedSignatureResponse;
  static deserializeBinaryFromReader(message: AuthorizedSignatureResponse, reader: jspb.BinaryReader): AuthorizedSignatureResponse;
}

export namespace AuthorizedSignatureResponse {
  export type AsObject = {
    promissoryFile: Uint8Array | string,
  }
}

export class Media extends jspb.Message {
  getMimeType(): string;
  setMimeType(value: string): void;

  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Media.AsObject;
  static toObject(includeInstance: boolean, msg: Media): Media.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Media, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Media;
  static deserializeBinaryFromReader(message: Media, reader: jspb.BinaryReader): Media;
}

export namespace Media {
  export type AsObject = {
    mimeType: string,
    data: Uint8Array | string,
  }
}

export class Role extends jspb.Message {
  getVerifier(): string;
  setVerifier(value: string): void;

  hasAuthorized(): boolean;
  clearAuthorized(): void;
  getAuthorized(): boolean;
  setAuthorized(value: boolean): void;

  hasIssuePermissions(): boolean;
  clearIssuePermissions(): void;
  getIssuePermissions(): Role.IssuePermissions | undefined;
  setIssuePermissions(value?: Role.IssuePermissions): void;

  getRoleEnumCase(): Role.RoleEnumCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Role.AsObject;
  static toObject(includeInstance: boolean, msg: Role): Role.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Role, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Role;
  static deserializeBinaryFromReader(message: Role, reader: jspb.BinaryReader): Role;
}

export namespace Role {
  export type AsObject = {
    verifier: string,
    authorized: boolean,
    issuePermissions?: Role.IssuePermissions.AsObject,
  }

  export class IssuePermissions extends jspb.Message {
    clearInnerList(): void;
    getInnerList(): Array<Amount>;
    setInnerList(value: Array<Amount>): void;
    addInner(value?: Amount, index?: number): Amount;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IssuePermissions.AsObject;
    static toObject(includeInstance: boolean, msg: IssuePermissions): IssuePermissions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IssuePermissions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IssuePermissions;
    static deserializeBinaryFromReader(message: IssuePermissions, reader: jspb.BinaryReader): IssuePermissions;
  }

  export namespace IssuePermissions {
    export type AsObject = {
      innerList: Array<Amount.AsObject>,
    }
  }

  export enum RoleEnumCase {
    ROLE_ENUM_NOT_SET = 0,
    AUTHORIZED = 3,
    ISSUE_PERMISSIONS = 4,
  }
}

export class GetVerifierRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetVerifierRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetVerifierRequest): GetVerifierRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetVerifierRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetVerifierRequest;
  static deserializeBinaryFromReader(message: GetVerifierRequest, reader: jspb.BinaryReader): GetVerifierRequest;
}

export namespace GetVerifierRequest {
  export type AsObject = {
  }
}

export class GetVerifierResponse extends jspb.Message {
  hasBytes(): boolean;
  clearBytes(): void;
  getBytes(): DynamicVerifier | undefined;
  setBytes(value?: DynamicVerifier): void;

  getMultibase(): string;
  setMultibase(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetVerifierResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetVerifierResponse): GetVerifierResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetVerifierResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetVerifierResponse;
  static deserializeBinaryFromReader(message: GetVerifierResponse, reader: jspb.BinaryReader): GetVerifierResponse;
}

export namespace GetVerifierResponse {
  export type AsObject = {
    bytes?: DynamicVerifier.AsObject,
    multibase: string,
  }
}

export class GetServiceTypeRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetServiceTypeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetServiceTypeRequest): GetServiceTypeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetServiceTypeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetServiceTypeRequest;
  static deserializeBinaryFromReader(message: GetServiceTypeRequest, reader: jspb.BinaryReader): GetServiceTypeRequest;
}

export namespace GetServiceTypeRequest {
  export type AsObject = {
  }
}

export class GetServiceTypeResponse extends jspb.Message {
  getServiceType(): ServiceTypeMap[keyof ServiceTypeMap];
  setServiceType(value: ServiceTypeMap[keyof ServiceTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetServiceTypeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetServiceTypeResponse): GetServiceTypeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetServiceTypeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetServiceTypeResponse;
  static deserializeBinaryFromReader(message: GetServiceTypeResponse, reader: jspb.BinaryReader): GetServiceTypeResponse;
}

export namespace GetServiceTypeResponse {
  export type AsObject = {
    serviceType: ServiceTypeMap[keyof ServiceTypeMap],
  }
}

export class GetInstanceRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetInstanceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetInstanceRequest): GetInstanceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetInstanceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetInstanceRequest;
  static deserializeBinaryFromReader(message: GetInstanceRequest, reader: jspb.BinaryReader): GetInstanceRequest;
}

export namespace GetInstanceRequest {
  export type AsObject = {
  }
}

export class GetInstanceResponse extends jspb.Message {
  getInstanceId(): string;
  setInstanceId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetInstanceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetInstanceResponse): GetInstanceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetInstanceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetInstanceResponse;
  static deserializeBinaryFromReader(message: GetInstanceResponse, reader: jspb.BinaryReader): GetInstanceResponse;
}

export namespace GetInstanceResponse {
  export type AsObject = {
    instanceId: string,
  }
}

export class StartSimplePaymentRequest extends jspb.Message {
  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): Amount | undefined;
  setAmount(value?: Amount): void;

  getRecipient(): string;
  setRecipient(value: string): void;

  clearPromissoriesList(): void;
  getPromissoriesList(): Array<string>;
  setPromissoriesList(value: Array<string>): void;
  addPromissories(value: string, index?: number): string;

  getUserReference(): string;
  setUserReference(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartSimplePaymentRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StartSimplePaymentRequest): StartSimplePaymentRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartSimplePaymentRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartSimplePaymentRequest;
  static deserializeBinaryFromReader(message: StartSimplePaymentRequest, reader: jspb.BinaryReader): StartSimplePaymentRequest;
}

export namespace StartSimplePaymentRequest {
  export type AsObject = {
    amount?: Amount.AsObject,
    recipient: string,
    promissoriesList: Array<string>,
    userReference: string,
  }
}

export class StartSimplePaymentResponse extends jspb.Message {
  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartSimplePaymentResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StartSimplePaymentResponse): StartSimplePaymentResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartSimplePaymentResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartSimplePaymentResponse;
  static deserializeBinaryFromReader(message: StartSimplePaymentResponse, reader: jspb.BinaryReader): StartSimplePaymentResponse;
}

export namespace StartSimplePaymentResponse {
  export type AsObject = {
    uetr: string,
  }
}

export class StartFundsChangeRequest extends jspb.Message {
  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): Amount | undefined;
  setAmount(value?: Amount): void;

  getPromissory(): string;
  setPromissory(value: string): void;

  getUserReference(): string;
  setUserReference(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartFundsChangeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StartFundsChangeRequest): StartFundsChangeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartFundsChangeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartFundsChangeRequest;
  static deserializeBinaryFromReader(message: StartFundsChangeRequest, reader: jspb.BinaryReader): StartFundsChangeRequest;
}

export namespace StartFundsChangeRequest {
  export type AsObject = {
    amount?: Amount.AsObject,
    promissory: string,
    userReference: string,
  }
}

export class StartFundsChangeResponse extends jspb.Message {
  getUetr(): string;
  setUetr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartFundsChangeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StartFundsChangeResponse): StartFundsChangeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartFundsChangeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartFundsChangeResponse;
  static deserializeBinaryFromReader(message: StartFundsChangeResponse, reader: jspb.BinaryReader): StartFundsChangeResponse;
}

export namespace StartFundsChangeResponse {
  export type AsObject = {
    uetr: string,
  }
}

export class TransactionSnapshot extends jspb.Message {
  getStatus(): TransactionStatusMap[keyof TransactionStatusMap];
  setStatus(value: TransactionStatusMap[keyof TransactionStatusMap]): void;

  clearPromissoriesList(): void;
  getPromissoriesList(): Array<string>;
  setPromissoriesList(value: Array<string>): void;
  addPromissories(value: string, index?: number): string;

  hasAmountTransferred(): boolean;
  clearAmountTransferred(): void;
  getAmountTransferred(): Amount | undefined;
  setAmountTransferred(value?: Amount): void;

  getMessage(): string;
  setMessage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TransactionSnapshot.AsObject;
  static toObject(includeInstance: boolean, msg: TransactionSnapshot): TransactionSnapshot.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TransactionSnapshot, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TransactionSnapshot;
  static deserializeBinaryFromReader(message: TransactionSnapshot, reader: jspb.BinaryReader): TransactionSnapshot;
}

export namespace TransactionSnapshot {
  export type AsObject = {
    status: TransactionStatusMap[keyof TransactionStatusMap],
    promissoriesList: Array<string>,
    amountTransferred?: Amount.AsObject,
    message: string,
  }
}

export class Transaction extends jspb.Message {
  getType(): Transaction.TypeMap[keyof Transaction.TypeMap];
  setType(value: Transaction.TypeMap[keyof Transaction.TypeMap]): void;

  getRole(): Transaction.RoleMap[keyof Transaction.RoleMap];
  setRole(value: Transaction.RoleMap[keyof Transaction.RoleMap]): void;

  getUetr(): string;
  setUetr(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): Amount | undefined;
  setAmount(value?: Amount): void;

  getCreated(): string;
  setCreated(value: string): void;

  getUpdated(): string;
  setUpdated(value: string): void;

  getMemo(): string;
  setMemo(value: string): void;

  getOwner(): string;
  setOwner(value: string): void;

  getCounterparty(): string;
  setCounterparty(value: string): void;

  getStatus(): TransactionStatusMap[keyof TransactionStatusMap];
  setStatus(value: TransactionStatusMap[keyof TransactionStatusMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Transaction.AsObject;
  static toObject(includeInstance: boolean, msg: Transaction): Transaction.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Transaction, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Transaction;
  static deserializeBinaryFromReader(message: Transaction, reader: jspb.BinaryReader): Transaction;
}

export namespace Transaction {
  export type AsObject = {
    type: Transaction.TypeMap[keyof Transaction.TypeMap],
    role: Transaction.RoleMap[keyof Transaction.RoleMap],
    uetr: string,
    amount?: Amount.AsObject,
    created: string,
    updated: string,
    memo: string,
    owner: string,
    counterparty: string,
    status: TransactionStatusMap[keyof TransactionStatusMap],
  }

  export interface RoleMap {
    ROLE_STARTER: 0;
    ROLE_RESPONDER: 1;
  }

  export const Role: RoleMap;

  export interface TypeMap {
    TYPE_UNKNOWN: 0;
    TYPE_SIMPLE_PAYMENT: 1;
    TYPE_FUNDS_CHANGE: 2;
  }

  export const Type: TypeMap;
}

export interface ServiceTypeMap {
  UNKNOWNSERVICE: 0;
  GATEWAY: 1;
  NOTARY: 2;
  AUTHORITY: 3;
  TREASURY: 4;
  EMISSARY: 5;
  SHARED: 6;
  IDENTITY: 7;
  VAULT: 8;
  CUSTODIALWALLET: 9;
  ISSUER: 10;
  OVERLOAD: 11;
  FAUCET: 12;
}

export const ServiceType: ServiceTypeMap;

export interface SignatureSystemMap {
  SIGNATURE_SYSTEM_UNSPECIFIED: 0;
  SIGNATURE_SYSTEM_ED25519: 1;
  SIGNATURE_SYSTEM_SECP256K1: 2;
}

export const SignatureSystem: SignatureSystemMap;

export interface TransactionStatusMap {
  STATE_INITIALIZING: 0;
  STATE_AUTHORIZING: 1;
  STATE_SENDING: 2;
  STATE_RECEIVING: 5;
  STATE_COMPLETE: 3;
  STATE_FAILED: 4;
}

export const TransactionStatus: TransactionStatusMap;

