/* eslint-disable */
/*Generated by GenDocu.com*/
// source: common/v1/packet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_v1_common_pb = require('../../common/v1/common_pb.js');
goog.object.extend(proto, common_v1_common_pb);
goog.exportSymbol('proto.common.CancelTransaction', null, global);
goog.exportSymbol('proto.common.CancelTransaction.RejectionReason', null, global);
goog.exportSymbol('proto.common.FundsChangeAck', null, global);
goog.exportSymbol('proto.common.FundsChangeNack', null, global);
goog.exportSymbol('proto.common.FundsChangeNack.RejectionReason', null, global);
goog.exportSymbol('proto.common.FundsChangeRequest', null, global);
goog.exportSymbol('proto.common.Packet', null, global);
goog.exportSymbol('proto.common.PacketType', null, global);
goog.exportSymbol('proto.common.SimplePaymentAck', null, global);
goog.exportSymbol('proto.common.SimplePaymentNack', null, global);
goog.exportSymbol('proto.common.SimplePaymentNack.RejectionReason', null, global);
goog.exportSymbol('proto.common.SimplePaymentRequest', null, global);
goog.exportSymbol('proto.common.SimplePaymentResponse', null, global);
goog.exportSymbol('proto.common.TransactionHeader', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.Packet.displayName = 'proto.common.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TransactionHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.TransactionHeader.repeatedFields_, null);
};
goog.inherits(proto.common.TransactionHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TransactionHeader.displayName = 'proto.common.TransactionHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.SimplePaymentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.SimplePaymentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.SimplePaymentRequest.displayName = 'proto.common.SimplePaymentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.SimplePaymentAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.SimplePaymentAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.SimplePaymentAck.displayName = 'proto.common.SimplePaymentAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.SimplePaymentNack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.SimplePaymentNack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.SimplePaymentNack.displayName = 'proto.common.SimplePaymentNack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.SimplePaymentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.SimplePaymentResponse.repeatedFields_, null);
};
goog.inherits(proto.common.SimplePaymentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.SimplePaymentResponse.displayName = 'proto.common.SimplePaymentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.FundsChangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.FundsChangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.FundsChangeRequest.displayName = 'proto.common.FundsChangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.FundsChangeAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.FundsChangeAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.FundsChangeAck.displayName = 'proto.common.FundsChangeAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.FundsChangeNack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.FundsChangeNack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.FundsChangeNack.displayName = 'proto.common.FundsChangeNack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CancelTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.CancelTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CancelTransaction.displayName = 'proto.common.CancelTransaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64(),
    channel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sender: (f = msg.getSender()) && common_v1_common_pb.DynamicVerifier.toObject(includeInstance, f),
    recipient: (f = msg.getRecipient()) && common_v1_common_pb.DynamicVerifier.toObject(includeInstance, f),
    nonce: msg.getNonce_asB64(),
    transactionHeader: (f = msg.getTransactionHeader()) && proto.common.TransactionHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Packet}
 */
proto.common.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Packet;
  return proto.common.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Packet}
 */
proto.common.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.PacketType} */ (reader.readEnum());
      msg.setPacketType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 4:
      var value = new common_v1_common_pb.DynamicVerifier;
      reader.readMessage(value,common_v1_common_pb.DynamicVerifier.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 5:
      var value = new common_v1_common_pb.DynamicVerifier;
      reader.readMessage(value,common_v1_common_pb.DynamicVerifier.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 7:
      var value = new proto.common.TransactionHeader;
      reader.readMessage(value,proto.common.TransactionHeader.deserializeBinaryFromReader);
      msg.setTransactionHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_v1_common_pb.DynamicVerifier.serializeBinaryToWriter
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_v1_common_pb.DynamicVerifier.serializeBinaryToWriter
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTransactionHeader();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.common.TransactionHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional PacketType packet_type = 1;
 * @return {!proto.common.PacketType}
 */
proto.common.Packet.prototype.getPacketType = function() {
  return /** @type {!proto.common.PacketType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.PacketType} value
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.setPacketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.Packet.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.common.Packet.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.common.Packet.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string channel = 3;
 * @return {string}
 */
proto.common.Packet.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DynamicVerifier sender = 4;
 * @return {?proto.common.DynamicVerifier}
 */
proto.common.Packet.prototype.getSender = function() {
  return /** @type{?proto.common.DynamicVerifier} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.DynamicVerifier, 4));
};


/**
 * @param {?proto.common.DynamicVerifier|undefined} value
 * @return {!proto.common.Packet} returns this
*/
proto.common.Packet.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Packet.prototype.hasSender = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DynamicVerifier recipient = 5;
 * @return {?proto.common.DynamicVerifier}
 */
proto.common.Packet.prototype.getRecipient = function() {
  return /** @type{?proto.common.DynamicVerifier} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.DynamicVerifier, 5));
};


/**
 * @param {?proto.common.DynamicVerifier|undefined} value
 * @return {!proto.common.Packet} returns this
*/
proto.common.Packet.prototype.setRecipient = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.clearRecipient = function() {
  return this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Packet.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes nonce = 6;
 * @return {!(string|Uint8Array)}
 */
proto.common.Packet.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes nonce = 6;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.common.Packet.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.common.Packet.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional TransactionHeader transaction_header = 7;
 * @return {?proto.common.TransactionHeader}
 */
proto.common.Packet.prototype.getTransactionHeader = function() {
  return /** @type{?proto.common.TransactionHeader} */ (
    jspb.Message.getWrapperField(this, proto.common.TransactionHeader, 7));
};


/**
 * @param {?proto.common.TransactionHeader|undefined} value
 * @return {!proto.common.Packet} returns this
*/
proto.common.Packet.prototype.setTransactionHeader = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Packet} returns this
 */
proto.common.Packet.prototype.clearTransactionHeader = function() {
  return this.setTransactionHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Packet.prototype.hasTransactionHeader = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.TransactionHeader.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TransactionHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TransactionHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TransactionHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    starter: (f = msg.getStarter()) && common_v1_common_pb.DynamicVerifier.toObject(includeInstance, f),
    responder: (f = msg.getResponder()) && common_v1_common_pb.DynamicVerifier.toObject(includeInstance, f),
    uetr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signature: msg.getSignature_asB64(),
    userReference: jspb.Message.getFieldWithDefault(msg, 6, ""),
    relatedUetrsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TransactionHeader}
 */
proto.common.TransactionHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TransactionHeader;
  return proto.common.TransactionHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TransactionHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TransactionHeader}
 */
proto.common.TransactionHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_v1_common_pb.DynamicVerifier;
      reader.readMessage(value,common_v1_common_pb.DynamicVerifier.deserializeBinaryFromReader);
      msg.setStarter(value);
      break;
    case 2:
      var value = new common_v1_common_pb.DynamicVerifier;
      reader.readMessage(value,common_v1_common_pb.DynamicVerifier.deserializeBinaryFromReader);
      msg.setResponder(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUetr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserReference(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addRelatedUetrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TransactionHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TransactionHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TransactionHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_v1_common_pb.DynamicVerifier.serializeBinaryToWriter
    );
  }
  f = message.getResponder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_v1_common_pb.DynamicVerifier.serializeBinaryToWriter
    );
  }
  f = message.getUetr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getUserReference();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRelatedUetrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional DynamicVerifier starter = 1;
 * @return {?proto.common.DynamicVerifier}
 */
proto.common.TransactionHeader.prototype.getStarter = function() {
  return /** @type{?proto.common.DynamicVerifier} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.DynamicVerifier, 1));
};


/**
 * @param {?proto.common.DynamicVerifier|undefined} value
 * @return {!proto.common.TransactionHeader} returns this
*/
proto.common.TransactionHeader.prototype.setStarter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.clearStarter = function() {
  return this.setStarter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionHeader.prototype.hasStarter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DynamicVerifier responder = 2;
 * @return {?proto.common.DynamicVerifier}
 */
proto.common.TransactionHeader.prototype.getResponder = function() {
  return /** @type{?proto.common.DynamicVerifier} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.DynamicVerifier, 2));
};


/**
 * @param {?proto.common.DynamicVerifier|undefined} value
 * @return {!proto.common.TransactionHeader} returns this
*/
proto.common.TransactionHeader.prototype.setResponder = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.clearResponder = function() {
  return this.setResponder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionHeader.prototype.hasResponder = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string uetr = 3;
 * @return {string}
 */
proto.common.TransactionHeader.prototype.getUetr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.setUetr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.common.TransactionHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.common.TransactionHeader.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.common.TransactionHeader.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.common.TransactionHeader.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string user_reference = 6;
 * @return {string}
 */
proto.common.TransactionHeader.prototype.getUserReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.setUserReference = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string related_uetrs = 7;
 * @return {!Array<string>}
 */
proto.common.TransactionHeader.prototype.getRelatedUetrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.setRelatedUetrsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.addRelatedUetrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.TransactionHeader} returns this
 */
proto.common.TransactionHeader.prototype.clearRelatedUetrsList = function() {
  return this.setRelatedUetrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.SimplePaymentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.common.SimplePaymentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.SimplePaymentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && common_v1_common_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.SimplePaymentRequest}
 */
proto.common.SimplePaymentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.SimplePaymentRequest;
  return proto.common.SimplePaymentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.SimplePaymentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.SimplePaymentRequest}
 */
proto.common.SimplePaymentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.SimplePaymentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.SimplePaymentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.SimplePaymentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.common.Amount}
 */
proto.common.SimplePaymentRequest.prototype.getAmount = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 1));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.common.SimplePaymentRequest} returns this
*/
proto.common.SimplePaymentRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.SimplePaymentRequest} returns this
 */
proto.common.SimplePaymentRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.SimplePaymentRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.SimplePaymentAck.prototype.toObject = function(opt_includeInstance) {
  return proto.common.SimplePaymentAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.SimplePaymentAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.SimplePaymentAck}
 */
proto.common.SimplePaymentAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.SimplePaymentAck;
  return proto.common.SimplePaymentAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.SimplePaymentAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.SimplePaymentAck}
 */
proto.common.SimplePaymentAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.SimplePaymentAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.SimplePaymentAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.SimplePaymentAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.SimplePaymentNack.prototype.toObject = function(opt_includeInstance) {
  return proto.common.SimplePaymentNack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.SimplePaymentNack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentNack.toObject = function(includeInstance, msg) {
  var f, obj = {
    rejectionReason: jspb.Message.getFieldWithDefault(msg, 1, 0),
    other: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.SimplePaymentNack}
 */
proto.common.SimplePaymentNack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.SimplePaymentNack;
  return proto.common.SimplePaymentNack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.SimplePaymentNack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.SimplePaymentNack}
 */
proto.common.SimplePaymentNack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.SimplePaymentNack.RejectionReason} */ (reader.readEnum());
      msg.setRejectionReason(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOther(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.SimplePaymentNack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.SimplePaymentNack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.SimplePaymentNack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentNack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRejectionReason();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOther();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.common.SimplePaymentNack.RejectionReason = {
  REASON_UNKNOWN: 0,
  REASON_OTHER: 1,
  REASON_AMOUNT_EMPTY: 2,
  REASON_CHANGE_REQUEST_AMOUNT_MISMATCH: 3
};

/**
 * optional RejectionReason rejection_reason = 1;
 * @return {!proto.common.SimplePaymentNack.RejectionReason}
 */
proto.common.SimplePaymentNack.prototype.getRejectionReason = function() {
  return /** @type {!proto.common.SimplePaymentNack.RejectionReason} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.SimplePaymentNack.RejectionReason} value
 * @return {!proto.common.SimplePaymentNack} returns this
 */
proto.common.SimplePaymentNack.prototype.setRejectionReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string other = 2;
 * @return {string}
 */
proto.common.SimplePaymentNack.prototype.getOther = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.SimplePaymentNack} returns this
 */
proto.common.SimplePaymentNack.prototype.setOther = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.SimplePaymentResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.SimplePaymentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.common.SimplePaymentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.SimplePaymentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    receivedAmount: (f = msg.getReceivedAmount()) && common_v1_common_pb.Amount.toObject(includeInstance, f),
    receivedPromissoriesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.SimplePaymentResponse}
 */
proto.common.SimplePaymentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.SimplePaymentResponse;
  return proto.common.SimplePaymentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.SimplePaymentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.SimplePaymentResponse}
 */
proto.common.SimplePaymentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setReceivedAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addReceivedPromissories(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.SimplePaymentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.SimplePaymentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.SimplePaymentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SimplePaymentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceivedAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getReceivedPromissoriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Amount received_amount = 1;
 * @return {?proto.common.Amount}
 */
proto.common.SimplePaymentResponse.prototype.getReceivedAmount = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 1));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.common.SimplePaymentResponse} returns this
*/
proto.common.SimplePaymentResponse.prototype.setReceivedAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.SimplePaymentResponse} returns this
 */
proto.common.SimplePaymentResponse.prototype.clearReceivedAmount = function() {
  return this.setReceivedAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.SimplePaymentResponse.prototype.hasReceivedAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string received_promissories = 2;
 * @return {!Array<string>}
 */
proto.common.SimplePaymentResponse.prototype.getReceivedPromissoriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.SimplePaymentResponse} returns this
 */
proto.common.SimplePaymentResponse.prototype.setReceivedPromissoriesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.SimplePaymentResponse} returns this
 */
proto.common.SimplePaymentResponse.prototype.addReceivedPromissories = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.SimplePaymentResponse} returns this
 */
proto.common.SimplePaymentResponse.prototype.clearReceivedPromissoriesList = function() {
  return this.setReceivedPromissoriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.FundsChangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.common.FundsChangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.FundsChangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.FundsChangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    grossAmount: (f = msg.getGrossAmount()) && common_v1_common_pb.Amount.toObject(includeInstance, f),
    exactAmount: (f = msg.getExactAmount()) && common_v1_common_pb.Amount.toObject(includeInstance, f),
    fees: (f = msg.getFees()) && common_v1_common_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.FundsChangeRequest}
 */
proto.common.FundsChangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.FundsChangeRequest;
  return proto.common.FundsChangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.FundsChangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.FundsChangeRequest}
 */
proto.common.FundsChangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setGrossAmount(value);
      break;
    case 2:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setExactAmount(value);
      break;
    case 3:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setFees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.FundsChangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.FundsChangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.FundsChangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.FundsChangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrossAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getExactAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getFees();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount gross_amount = 1;
 * @return {?proto.common.Amount}
 */
proto.common.FundsChangeRequest.prototype.getGrossAmount = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 1));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.common.FundsChangeRequest} returns this
*/
proto.common.FundsChangeRequest.prototype.setGrossAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.FundsChangeRequest} returns this
 */
proto.common.FundsChangeRequest.prototype.clearGrossAmount = function() {
  return this.setGrossAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.FundsChangeRequest.prototype.hasGrossAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount exact_amount = 2;
 * @return {?proto.common.Amount}
 */
proto.common.FundsChangeRequest.prototype.getExactAmount = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 2));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.common.FundsChangeRequest} returns this
*/
proto.common.FundsChangeRequest.prototype.setExactAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.FundsChangeRequest} returns this
 */
proto.common.FundsChangeRequest.prototype.clearExactAmount = function() {
  return this.setExactAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.FundsChangeRequest.prototype.hasExactAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount fees = 3;
 * @return {?proto.common.Amount}
 */
proto.common.FundsChangeRequest.prototype.getFees = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 3));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.common.FundsChangeRequest} returns this
*/
proto.common.FundsChangeRequest.prototype.setFees = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.FundsChangeRequest} returns this
 */
proto.common.FundsChangeRequest.prototype.clearFees = function() {
  return this.setFees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.FundsChangeRequest.prototype.hasFees = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.FundsChangeAck.prototype.toObject = function(opt_includeInstance) {
  return proto.common.FundsChangeAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.FundsChangeAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.FundsChangeAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.FundsChangeAck}
 */
proto.common.FundsChangeAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.FundsChangeAck;
  return proto.common.FundsChangeAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.FundsChangeAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.FundsChangeAck}
 */
proto.common.FundsChangeAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.FundsChangeAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.FundsChangeAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.FundsChangeAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.FundsChangeAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.FundsChangeNack.prototype.toObject = function(opt_includeInstance) {
  return proto.common.FundsChangeNack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.FundsChangeNack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.FundsChangeNack.toObject = function(includeInstance, msg) {
  var f, obj = {
    rejectionReason: jspb.Message.getFieldWithDefault(msg, 1, 0),
    other: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.FundsChangeNack}
 */
proto.common.FundsChangeNack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.FundsChangeNack;
  return proto.common.FundsChangeNack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.FundsChangeNack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.FundsChangeNack}
 */
proto.common.FundsChangeNack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.FundsChangeNack.RejectionReason} */ (reader.readEnum());
      msg.setRejectionReason(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOther(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.FundsChangeNack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.FundsChangeNack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.FundsChangeNack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.FundsChangeNack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRejectionReason();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOther();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.common.FundsChangeNack.RejectionReason = {
  REASON_UNKNOWN: 0,
  REASON_OTHER: 1,
  REASON_AMOUNT_EMPTY: 2,
  REASON_AMOUNTS_MISMATCH: 3
};

/**
 * optional RejectionReason rejection_reason = 1;
 * @return {!proto.common.FundsChangeNack.RejectionReason}
 */
proto.common.FundsChangeNack.prototype.getRejectionReason = function() {
  return /** @type {!proto.common.FundsChangeNack.RejectionReason} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.FundsChangeNack.RejectionReason} value
 * @return {!proto.common.FundsChangeNack} returns this
 */
proto.common.FundsChangeNack.prototype.setRejectionReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string other = 2;
 * @return {string}
 */
proto.common.FundsChangeNack.prototype.getOther = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.FundsChangeNack} returns this
 */
proto.common.FundsChangeNack.prototype.setOther = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CancelTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CancelTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CancelTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CancelTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    rejectionReason: jspb.Message.getFieldWithDefault(msg, 1, 0),
    other: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CancelTransaction}
 */
proto.common.CancelTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CancelTransaction;
  return proto.common.CancelTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CancelTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CancelTransaction}
 */
proto.common.CancelTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.CancelTransaction.RejectionReason} */ (reader.readEnum());
      msg.setRejectionReason(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOther(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CancelTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CancelTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CancelTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CancelTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRejectionReason();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOther();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.common.CancelTransaction.RejectionReason = {
  REASON_UNKNOWN: 0,
  REASON_OTHER: 1,
  REASON_MISMATCHED_TRANSACTIONS: 2
};

/**
 * optional RejectionReason rejection_reason = 1;
 * @return {!proto.common.CancelTransaction.RejectionReason}
 */
proto.common.CancelTransaction.prototype.getRejectionReason = function() {
  return /** @type {!proto.common.CancelTransaction.RejectionReason} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.CancelTransaction.RejectionReason} value
 * @return {!proto.common.CancelTransaction} returns this
 */
proto.common.CancelTransaction.prototype.setRejectionReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string other = 2;
 * @return {string}
 */
proto.common.CancelTransaction.prototype.getOther = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.CancelTransaction} returns this
 */
proto.common.CancelTransaction.prototype.setOther = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.common.PacketType = {
  UNKNOWN: 0,
  UNSUPPORTED: 1,
  AUTHENTICATE: 2,
  RETURNTOSENDER: 3,
  TERMINATESTREAM: 4,
  KEEPALIVE: 5,
  ACKNOWLEDGEMENT: 6,
  AUTHENTICATEREQUEST: 7,
  AUTHENTICATERESPONSE: 8,
  ADDASSOCIATEDCONNECTION: 9,
  DROPASSOCIATEDCONNECTION: 10,
  PROMISSORY: 100,
  AUTHORIZEPROMISSORY: 101,
  AUTHORIZEANDFORWARDPROMISSORY: 102,
  ARCHIVEPROMISSORY: 103,
  PROMISSORYRECEIPT: 104,
  IDENTITYREQUEST: 200,
  IDENTITYRESPONSE: 201,
  IDENTITYPROOF: 202,
  NOTARYNOTARIZEPROMISSORY: 300,
  NOTARYNOTARIZEANDFORWARDPROMISSORY: 301,
  EMISSARYCONNECTIONIDENTITY: 400,
  REMITTANCEREQUEST: 700,
  REMITTANCERESPONSE: 701,
  SPREQUEST: 1000,
  SPACK: 1001,
  SPNACK: 1002,
  SPSTATUS: 1003,
  SPSTART: 1004,
  FCREQUEST: 1100,
  FCACK: 1101,
  FCNACK: 1102
};

goog.object.extend(exports, proto.common);
