/* eslint-disable */
/*Generated by GenDocu.com*/
// package: common
// file: common/v1/common.proto

var common_v1_common_pb = require("../../common/v1/common_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var ServiceInfo = (function () {
  function ServiceInfo() {}
  ServiceInfo.serviceName = "common.ServiceInfo";
  return ServiceInfo;
}());

ServiceInfo.GetVerifier = {
  methodName: "GetVerifier",
  service: ServiceInfo,
  requestStream: false,
  responseStream: false,
  requestType: common_v1_common_pb.GetVerifierRequest,
  responseType: common_v1_common_pb.GetVerifierResponse
};

ServiceInfo.GetServiceType = {
  methodName: "GetServiceType",
  service: ServiceInfo,
  requestStream: false,
  responseStream: false,
  requestType: common_v1_common_pb.GetServiceTypeRequest,
  responseType: common_v1_common_pb.GetServiceTypeResponse
};

exports.ServiceInfo = ServiceInfo;

function ServiceInfoClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ServiceInfoClient.prototype.getVerifier = function getVerifier(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ServiceInfo.GetVerifier, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceInfoClient.prototype.getServiceType = function getServiceType(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ServiceInfo.GetServiceType, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ServiceInfoClient = ServiceInfoClient;

var TransactionService = (function () {
  function TransactionService() {}
  TransactionService.serviceName = "common.TransactionService";
  return TransactionService;
}());

TransactionService.NewSimplePayment = {
  methodName: "NewSimplePayment",
  service: TransactionService,
  requestStream: false,
  responseStream: false,
  requestType: common_v1_common_pb.StartSimplePaymentRequest,
  responseType: common_v1_common_pb.StartSimplePaymentResponse
};

TransactionService.NewFundsChange = {
  methodName: "NewFundsChange",
  service: TransactionService,
  requestStream: false,
  responseStream: false,
  requestType: common_v1_common_pb.StartFundsChangeRequest,
  responseType: common_v1_common_pb.StartFundsChangeResponse
};

exports.TransactionService = TransactionService;

function TransactionServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

TransactionServiceClient.prototype.newSimplePayment = function newSimplePayment(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(TransactionService.NewSimplePayment, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

TransactionServiceClient.prototype.newFundsChange = function newFundsChange(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(TransactionService.NewFundsChange, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.TransactionServiceClient = TransactionServiceClient;

