/* eslint-disable */
/*Generated by GenDocu.com*/
// source: treasury/v1/treasury.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_v1_common_pb = require('../../common/v1/common_pb.js');
goog.object.extend(proto, common_v1_common_pb);
goog.exportSymbol('proto.treasury.DenominationCount', null, global);
goog.exportSymbol('proto.treasury.GetSupplyRequest', null, global);
goog.exportSymbol('proto.treasury.GetSupplyResponse', null, global);
goog.exportSymbol('proto.treasury.RemittanceRequest', null, global);
goog.exportSymbol('proto.treasury.RemittanceResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treasury.RemittanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treasury.RemittanceRequest.repeatedFields_, null);
};
goog.inherits(proto.treasury.RemittanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treasury.RemittanceRequest.displayName = 'proto.treasury.RemittanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treasury.RemittanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treasury.RemittanceResponse.repeatedFields_, null);
};
goog.inherits(proto.treasury.RemittanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treasury.RemittanceResponse.displayName = 'proto.treasury.RemittanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treasury.GetSupplyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treasury.GetSupplyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treasury.GetSupplyRequest.displayName = 'proto.treasury.GetSupplyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treasury.DenominationCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treasury.DenominationCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treasury.DenominationCount.displayName = 'proto.treasury.DenominationCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treasury.GetSupplyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treasury.GetSupplyResponse.repeatedFields_, null);
};
goog.inherits(proto.treasury.GetSupplyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treasury.GetSupplyResponse.displayName = 'proto.treasury.GetSupplyResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treasury.RemittanceRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treasury.RemittanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treasury.RemittanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treasury.RemittanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.RemittanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && common_v1_common_pb.DynamicVerifier.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && common_v1_common_pb.Amount.toObject(includeInstance, f),
    promissoryFilesList: msg.getPromissoryFilesList_asB64(),
    exchangeRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treasury.RemittanceRequest}
 */
proto.treasury.RemittanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treasury.RemittanceRequest;
  return proto.treasury.RemittanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treasury.RemittanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treasury.RemittanceRequest}
 */
proto.treasury.RemittanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_v1_common_pb.DynamicVerifier;
      reader.readMessage(value,common_v1_common_pb.DynamicVerifier.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPromissoryFiles(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExchangeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treasury.RemittanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treasury.RemittanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treasury.RemittanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.RemittanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_v1_common_pb.DynamicVerifier.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getPromissoryFilesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getExchangeRate();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional common.DynamicVerifier recipient = 1;
 * @return {?proto.common.DynamicVerifier}
 */
proto.treasury.RemittanceRequest.prototype.getRecipient = function() {
  return /** @type{?proto.common.DynamicVerifier} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.DynamicVerifier, 1));
};


/**
 * @param {?proto.common.DynamicVerifier|undefined} value
 * @return {!proto.treasury.RemittanceRequest} returns this
*/
proto.treasury.RemittanceRequest.prototype.setRecipient = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treasury.RemittanceRequest} returns this
 */
proto.treasury.RemittanceRequest.prototype.clearRecipient = function() {
  return this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treasury.RemittanceRequest.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.Amount amount = 2;
 * @return {?proto.common.Amount}
 */
proto.treasury.RemittanceRequest.prototype.getAmount = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 2));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.treasury.RemittanceRequest} returns this
*/
proto.treasury.RemittanceRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treasury.RemittanceRequest} returns this
 */
proto.treasury.RemittanceRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treasury.RemittanceRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes promissory_files = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.treasury.RemittanceRequest.prototype.getPromissoryFilesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes promissory_files = 3;
 * This is a type-conversion wrapper around `getPromissoryFilesList()`
 * @return {!Array<string>}
 */
proto.treasury.RemittanceRequest.prototype.getPromissoryFilesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPromissoryFilesList()));
};


/**
 * repeated bytes promissory_files = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPromissoryFilesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.treasury.RemittanceRequest.prototype.getPromissoryFilesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPromissoryFilesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.treasury.RemittanceRequest} returns this
 */
proto.treasury.RemittanceRequest.prototype.setPromissoryFilesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.treasury.RemittanceRequest} returns this
 */
proto.treasury.RemittanceRequest.prototype.addPromissoryFiles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treasury.RemittanceRequest} returns this
 */
proto.treasury.RemittanceRequest.prototype.clearPromissoryFilesList = function() {
  return this.setPromissoryFilesList([]);
};


/**
 * optional double exchange_rate = 4;
 * @return {number}
 */
proto.treasury.RemittanceRequest.prototype.getExchangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treasury.RemittanceRequest} returns this
 */
proto.treasury.RemittanceRequest.prototype.setExchangeRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treasury.RemittanceResponse.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treasury.RemittanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treasury.RemittanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treasury.RemittanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.RemittanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangedPromissoryFilesList: msg.getExchangedPromissoryFilesList_asB64(),
    feeAmount: (f = msg.getFeeAmount()) && common_v1_common_pb.Amount.toObject(includeInstance, f),
    exchangeRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    refundedPromissoryFilesList: msg.getRefundedPromissoryFilesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treasury.RemittanceResponse}
 */
proto.treasury.RemittanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treasury.RemittanceResponse;
  return proto.treasury.RemittanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treasury.RemittanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treasury.RemittanceResponse}
 */
proto.treasury.RemittanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addExchangedPromissoryFiles(value);
      break;
    case 2:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setFeeAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExchangeRate(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRefundedPromissoryFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treasury.RemittanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treasury.RemittanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treasury.RemittanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.RemittanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangedPromissoryFilesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getFeeAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getExchangeRate();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRefundedPromissoryFilesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * repeated bytes exchanged_promissory_files = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.treasury.RemittanceResponse.prototype.getExchangedPromissoryFilesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes exchanged_promissory_files = 1;
 * This is a type-conversion wrapper around `getExchangedPromissoryFilesList()`
 * @return {!Array<string>}
 */
proto.treasury.RemittanceResponse.prototype.getExchangedPromissoryFilesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getExchangedPromissoryFilesList()));
};


/**
 * repeated bytes exchanged_promissory_files = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExchangedPromissoryFilesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.treasury.RemittanceResponse.prototype.getExchangedPromissoryFilesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getExchangedPromissoryFilesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.setExchangedPromissoryFilesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.addExchangedPromissoryFiles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.clearExchangedPromissoryFilesList = function() {
  return this.setExchangedPromissoryFilesList([]);
};


/**
 * optional common.Amount fee_amount = 2;
 * @return {?proto.common.Amount}
 */
proto.treasury.RemittanceResponse.prototype.getFeeAmount = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 2));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.treasury.RemittanceResponse} returns this
*/
proto.treasury.RemittanceResponse.prototype.setFeeAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.clearFeeAmount = function() {
  return this.setFeeAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treasury.RemittanceResponse.prototype.hasFeeAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double exchange_rate = 3;
 * @return {number}
 */
proto.treasury.RemittanceResponse.prototype.getExchangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.setExchangeRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated bytes refunded_promissory_files = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.treasury.RemittanceResponse.prototype.getRefundedPromissoryFilesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes refunded_promissory_files = 4;
 * This is a type-conversion wrapper around `getRefundedPromissoryFilesList()`
 * @return {!Array<string>}
 */
proto.treasury.RemittanceResponse.prototype.getRefundedPromissoryFilesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRefundedPromissoryFilesList()));
};


/**
 * repeated bytes refunded_promissory_files = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefundedPromissoryFilesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.treasury.RemittanceResponse.prototype.getRefundedPromissoryFilesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRefundedPromissoryFilesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.setRefundedPromissoryFilesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.addRefundedPromissoryFiles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treasury.RemittanceResponse} returns this
 */
proto.treasury.RemittanceResponse.prototype.clearRefundedPromissoryFilesList = function() {
  return this.setRefundedPromissoryFilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treasury.GetSupplyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treasury.GetSupplyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treasury.GetSupplyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.GetSupplyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treasury.GetSupplyRequest}
 */
proto.treasury.GetSupplyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treasury.GetSupplyRequest;
  return proto.treasury.GetSupplyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treasury.GetSupplyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treasury.GetSupplyRequest}
 */
proto.treasury.GetSupplyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treasury.GetSupplyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treasury.GetSupplyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treasury.GetSupplyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.GetSupplyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string currency_code = 1;
 * @return {string}
 */
proto.treasury.GetSupplyRequest.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treasury.GetSupplyRequest} returns this
 */
proto.treasury.GetSupplyRequest.prototype.setCurrencyCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treasury.DenominationCount.prototype.toObject = function(opt_includeInstance) {
  return proto.treasury.DenominationCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treasury.DenominationCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.DenominationCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    denomination: (f = msg.getDenomination()) && common_v1_common_pb.Amount.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: (f = msg.getTotal()) && common_v1_common_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treasury.DenominationCount}
 */
proto.treasury.DenominationCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treasury.DenominationCount;
  return proto.treasury.DenominationCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treasury.DenominationCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treasury.DenominationCount}
 */
proto.treasury.DenominationCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setDenomination(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treasury.DenominationCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treasury.DenominationCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treasury.DenominationCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.DenominationCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenomination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Amount denomination = 1;
 * @return {?proto.common.Amount}
 */
proto.treasury.DenominationCount.prototype.getDenomination = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 1));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.treasury.DenominationCount} returns this
*/
proto.treasury.DenominationCount.prototype.setDenomination = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treasury.DenominationCount} returns this
 */
proto.treasury.DenominationCount.prototype.clearDenomination = function() {
  return this.setDenomination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treasury.DenominationCount.prototype.hasDenomination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.treasury.DenominationCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treasury.DenominationCount} returns this
 */
proto.treasury.DenominationCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional common.Amount total = 3;
 * @return {?proto.common.Amount}
 */
proto.treasury.DenominationCount.prototype.getTotal = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 3));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.treasury.DenominationCount} returns this
*/
proto.treasury.DenominationCount.prototype.setTotal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treasury.DenominationCount} returns this
 */
proto.treasury.DenominationCount.prototype.clearTotal = function() {
  return this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treasury.DenominationCount.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treasury.GetSupplyResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treasury.GetSupplyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treasury.GetSupplyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treasury.GetSupplyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.GetSupplyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    supplyList: jspb.Message.toObjectList(msg.getSupplyList(),
    proto.treasury.DenominationCount.toObject, includeInstance),
    total: (f = msg.getTotal()) && common_v1_common_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treasury.GetSupplyResponse}
 */
proto.treasury.GetSupplyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treasury.GetSupplyResponse;
  return proto.treasury.GetSupplyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treasury.GetSupplyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treasury.GetSupplyResponse}
 */
proto.treasury.GetSupplyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.treasury.DenominationCount;
      reader.readMessage(value,proto.treasury.DenominationCount.deserializeBinaryFromReader);
      msg.addSupply(value);
      break;
    case 2:
      var value = new common_v1_common_pb.Amount;
      reader.readMessage(value,common_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treasury.GetSupplyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treasury.GetSupplyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treasury.GetSupplyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treasury.GetSupplyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupplyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.treasury.DenominationCount.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DenominationCount supply = 1;
 * @return {!Array<!proto.treasury.DenominationCount>}
 */
proto.treasury.GetSupplyResponse.prototype.getSupplyList = function() {
  return /** @type{!Array<!proto.treasury.DenominationCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treasury.DenominationCount, 1));
};


/**
 * @param {!Array<!proto.treasury.DenominationCount>} value
 * @return {!proto.treasury.GetSupplyResponse} returns this
*/
proto.treasury.GetSupplyResponse.prototype.setSupplyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.treasury.DenominationCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treasury.DenominationCount}
 */
proto.treasury.GetSupplyResponse.prototype.addSupply = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.treasury.DenominationCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treasury.GetSupplyResponse} returns this
 */
proto.treasury.GetSupplyResponse.prototype.clearSupplyList = function() {
  return this.setSupplyList([]);
};


/**
 * optional common.Amount total = 2;
 * @return {?proto.common.Amount}
 */
proto.treasury.GetSupplyResponse.prototype.getTotal = function() {
  return /** @type{?proto.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Amount, 2));
};


/**
 * @param {?proto.common.Amount|undefined} value
 * @return {!proto.treasury.GetSupplyResponse} returns this
*/
proto.treasury.GetSupplyResponse.prototype.setTotal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treasury.GetSupplyResponse} returns this
 */
proto.treasury.GetSupplyResponse.prototype.clearTotal = function() {
  return this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treasury.GetSupplyResponse.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.treasury);
