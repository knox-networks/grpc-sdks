/* eslint-disable */
/*Generated by GenDocu.com*/
// package: treasury
// file: treasury/v1/treasury.proto

import * as jspb from "google-protobuf";
import * as common_v1_common_pb from "../../common/v1/common_pb";

export class RemittanceRequest extends jspb.Message {
  hasRecipient(): boolean;
  clearRecipient(): void;
  getRecipient(): common_v1_common_pb.DynamicVerifier | undefined;
  setRecipient(value?: common_v1_common_pb.DynamicVerifier): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): common_v1_common_pb.Amount | undefined;
  setAmount(value?: common_v1_common_pb.Amount): void;

  clearPromissoryFilesList(): void;
  getPromissoryFilesList(): Array<Uint8Array | string>;
  getPromissoryFilesList_asU8(): Array<Uint8Array>;
  getPromissoryFilesList_asB64(): Array<string>;
  setPromissoryFilesList(value: Array<Uint8Array | string>): void;
  addPromissoryFiles(value: Uint8Array | string, index?: number): Uint8Array | string;

  getExchangeRate(): number;
  setExchangeRate(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemittanceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RemittanceRequest): RemittanceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RemittanceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemittanceRequest;
  static deserializeBinaryFromReader(message: RemittanceRequest, reader: jspb.BinaryReader): RemittanceRequest;
}

export namespace RemittanceRequest {
  export type AsObject = {
    recipient?: common_v1_common_pb.DynamicVerifier.AsObject,
    amount?: common_v1_common_pb.Amount.AsObject,
    promissoryFilesList: Array<Uint8Array | string>,
    exchangeRate: number,
  }
}

export class RemittanceResponse extends jspb.Message {
  clearExchangedPromissoryFilesList(): void;
  getExchangedPromissoryFilesList(): Array<Uint8Array | string>;
  getExchangedPromissoryFilesList_asU8(): Array<Uint8Array>;
  getExchangedPromissoryFilesList_asB64(): Array<string>;
  setExchangedPromissoryFilesList(value: Array<Uint8Array | string>): void;
  addExchangedPromissoryFiles(value: Uint8Array | string, index?: number): Uint8Array | string;

  hasFeeAmount(): boolean;
  clearFeeAmount(): void;
  getFeeAmount(): common_v1_common_pb.Amount | undefined;
  setFeeAmount(value?: common_v1_common_pb.Amount): void;

  getExchangeRate(): number;
  setExchangeRate(value: number): void;

  clearRefundedPromissoryFilesList(): void;
  getRefundedPromissoryFilesList(): Array<Uint8Array | string>;
  getRefundedPromissoryFilesList_asU8(): Array<Uint8Array>;
  getRefundedPromissoryFilesList_asB64(): Array<string>;
  setRefundedPromissoryFilesList(value: Array<Uint8Array | string>): void;
  addRefundedPromissoryFiles(value: Uint8Array | string, index?: number): Uint8Array | string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemittanceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RemittanceResponse): RemittanceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RemittanceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemittanceResponse;
  static deserializeBinaryFromReader(message: RemittanceResponse, reader: jspb.BinaryReader): RemittanceResponse;
}

export namespace RemittanceResponse {
  export type AsObject = {
    exchangedPromissoryFilesList: Array<Uint8Array | string>,
    feeAmount?: common_v1_common_pb.Amount.AsObject,
    exchangeRate: number,
    refundedPromissoryFilesList: Array<Uint8Array | string>,
  }
}

export class GetSupplyRequest extends jspb.Message {
  getCurrencyCode(): string;
  setCurrencyCode(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSupplyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSupplyRequest): GetSupplyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetSupplyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSupplyRequest;
  static deserializeBinaryFromReader(message: GetSupplyRequest, reader: jspb.BinaryReader): GetSupplyRequest;
}

export namespace GetSupplyRequest {
  export type AsObject = {
    currencyCode: string,
  }
}

export class DenominationCount extends jspb.Message {
  hasDenomination(): boolean;
  clearDenomination(): void;
  getDenomination(): common_v1_common_pb.Amount | undefined;
  setDenomination(value?: common_v1_common_pb.Amount): void;

  getCount(): number;
  setCount(value: number): void;

  hasTotal(): boolean;
  clearTotal(): void;
  getTotal(): common_v1_common_pb.Amount | undefined;
  setTotal(value?: common_v1_common_pb.Amount): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DenominationCount.AsObject;
  static toObject(includeInstance: boolean, msg: DenominationCount): DenominationCount.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DenominationCount, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DenominationCount;
  static deserializeBinaryFromReader(message: DenominationCount, reader: jspb.BinaryReader): DenominationCount;
}

export namespace DenominationCount {
  export type AsObject = {
    denomination?: common_v1_common_pb.Amount.AsObject,
    count: number,
    total?: common_v1_common_pb.Amount.AsObject,
  }
}

export class GetSupplyResponse extends jspb.Message {
  clearSupplyList(): void;
  getSupplyList(): Array<DenominationCount>;
  setSupplyList(value: Array<DenominationCount>): void;
  addSupply(value?: DenominationCount, index?: number): DenominationCount;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSupplyResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetSupplyResponse): GetSupplyResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetSupplyResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSupplyResponse;
  static deserializeBinaryFromReader(message: GetSupplyResponse, reader: jspb.BinaryReader): GetSupplyResponse;
}

export namespace GetSupplyResponse {
  export type AsObject = {
    supplyList: Array<DenominationCount.AsObject>,
  }
}

