/* eslint-disable */
/*Generated by GenDocu.com*/
// package: treasury
// file: treasury/v1/treasury.proto

var treasury_v1_treasury_pb = require("../../treasury/v1/treasury_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var MonetaeTreasury = (function () {
  function MonetaeTreasury() {}
  MonetaeTreasury.serviceName = "treasury.MonetaeTreasury";
  return MonetaeTreasury;
}());

MonetaeTreasury.GetSupply = {
  methodName: "GetSupply",
  service: MonetaeTreasury,
  requestStream: false,
  responseStream: false,
  requestType: treasury_v1_treasury_pb.GetSupplyRequest,
  responseType: treasury_v1_treasury_pb.GetSupplyResponse
};

MonetaeTreasury.ListTransactions = {
  methodName: "ListTransactions",
  service: MonetaeTreasury,
  requestStream: false,
  responseStream: false,
  requestType: treasury_v1_treasury_pb.ListTransactionsRequest,
  responseType: treasury_v1_treasury_pb.ListTransactionsResponse
};

exports.MonetaeTreasury = MonetaeTreasury;

function MonetaeTreasuryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

MonetaeTreasuryClient.prototype.getSupply = function getSupply(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MonetaeTreasury.GetSupply, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MonetaeTreasuryClient.prototype.listTransactions = function listTransactions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MonetaeTreasury.ListTransactions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.MonetaeTreasuryClient = MonetaeTreasuryClient;

