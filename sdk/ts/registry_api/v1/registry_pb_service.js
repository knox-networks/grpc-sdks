/* eslint-disable */
/*Generated by GenDocu.com*/
// package: registry_api.v1
// file: registry_api/v1/registry.proto

var registry_api_v1_registry_pb = require("../../registry_api/v1/registry_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Registry = (function () {
  function Registry() {}
  Registry.serviceName = "registry_api.v1.Registry";
  return Registry;
}());

Registry.Create = {
  methodName: "Create",
  service: Registry,
  requestStream: false,
  responseStream: false,
  requestType: registry_api_v1_registry_pb.CreateRequest,
  responseType: registry_api_v1_registry_pb.CreateResponse
};

Registry.Read = {
  methodName: "Read",
  service: Registry,
  requestStream: false,
  responseStream: false,
  requestType: registry_api_v1_registry_pb.ReadRequest,
  responseType: registry_api_v1_registry_pb.ReadResponse
};

Registry.Update = {
  methodName: "Update",
  service: Registry,
  requestStream: false,
  responseStream: false,
  requestType: registry_api_v1_registry_pb.UpdateRequest,
  responseType: registry_api_v1_registry_pb.UpdateResponse
};

Registry.Revoke = {
  methodName: "Revoke",
  service: Registry,
  requestStream: false,
  responseStream: false,
  requestType: registry_api_v1_registry_pb.RevokeRequest,
  responseType: registry_api_v1_registry_pb.RevokeResponse
};

exports.Registry = Registry;

function RegistryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RegistryClient.prototype.create = function create(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Registry.Create, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RegistryClient.prototype.read = function read(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Registry.Read, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RegistryClient.prototype.update = function update(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Registry.Update, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RegistryClient.prototype.revoke = function revoke(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Registry.Revoke, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RegistryClient = RegistryClient;

