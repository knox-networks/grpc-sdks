/* eslint-disable */
/*Generated by GenDocu.com*/
// package: business_api.v1
// file: business_api/v1/business.proto

import * as business_api_v1_business_pb from "../../business_api/v1/business_pb";
import {grpc} from "@improbable-eng/grpc-web";

type BusinessServiceList = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.ListRequest;
  readonly responseType: typeof business_api_v1_business_pb.ListResponse;
};

type BusinessServiceClear = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.ClearRequest;
  readonly responseType: typeof business_api_v1_business_pb.ClearResponse;
};

type BusinessServiceSendPayload = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.SendPayloadRequest;
  readonly responseType: typeof business_api_v1_business_pb.SendPayloadResponse;
};

type BusinessServiceSendNewTransaction = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.SendNewTransactionRequest;
  readonly responseType: typeof business_api_v1_business_pb.SendNewTransactionResponse;
};

type BusinessServiceSendProposalAcked = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.SendProposalAckedRequest;
  readonly responseType: typeof business_api_v1_business_pb.SendProposalAckedResponse;
};

type BusinessServiceSendProposalNacked = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.SendProposalNackedRequest;
  readonly responseType: typeof business_api_v1_business_pb.SendProposalNackedResponse;
};

type BusinessServiceSendSecretRevealed = {
  readonly methodName: string;
  readonly service: typeof BusinessService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof business_api_v1_business_pb.SendSecretRevealedRequest;
  readonly responseType: typeof business_api_v1_business_pb.SendSecretRevealedResponse;
};

export class BusinessService {
  static readonly serviceName: string;
  static readonly List: BusinessServiceList;
  static readonly Clear: BusinessServiceClear;
  static readonly SendPayload: BusinessServiceSendPayload;
  static readonly SendNewTransaction: BusinessServiceSendNewTransaction;
  static readonly SendProposalAcked: BusinessServiceSendProposalAcked;
  static readonly SendProposalNacked: BusinessServiceSendProposalNacked;
  static readonly SendSecretRevealed: BusinessServiceSendSecretRevealed;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class BusinessServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  list(
    requestMessage: business_api_v1_business_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.ListResponse|null) => void
  ): UnaryResponse;
  list(
    requestMessage: business_api_v1_business_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.ListResponse|null) => void
  ): UnaryResponse;
  clear(
    requestMessage: business_api_v1_business_pb.ClearRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.ClearResponse|null) => void
  ): UnaryResponse;
  clear(
    requestMessage: business_api_v1_business_pb.ClearRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.ClearResponse|null) => void
  ): UnaryResponse;
  sendPayload(
    requestMessage: business_api_v1_business_pb.SendPayloadRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendPayloadResponse|null) => void
  ): UnaryResponse;
  sendPayload(
    requestMessage: business_api_v1_business_pb.SendPayloadRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendPayloadResponse|null) => void
  ): UnaryResponse;
  sendNewTransaction(
    requestMessage: business_api_v1_business_pb.SendNewTransactionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendNewTransactionResponse|null) => void
  ): UnaryResponse;
  sendNewTransaction(
    requestMessage: business_api_v1_business_pb.SendNewTransactionRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendNewTransactionResponse|null) => void
  ): UnaryResponse;
  sendProposalAcked(
    requestMessage: business_api_v1_business_pb.SendProposalAckedRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendProposalAckedResponse|null) => void
  ): UnaryResponse;
  sendProposalAcked(
    requestMessage: business_api_v1_business_pb.SendProposalAckedRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendProposalAckedResponse|null) => void
  ): UnaryResponse;
  sendProposalNacked(
    requestMessage: business_api_v1_business_pb.SendProposalNackedRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendProposalNackedResponse|null) => void
  ): UnaryResponse;
  sendProposalNacked(
    requestMessage: business_api_v1_business_pb.SendProposalNackedRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendProposalNackedResponse|null) => void
  ): UnaryResponse;
  sendSecretRevealed(
    requestMessage: business_api_v1_business_pb.SendSecretRevealedRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendSecretRevealedResponse|null) => void
  ): UnaryResponse;
  sendSecretRevealed(
    requestMessage: business_api_v1_business_pb.SendSecretRevealedRequest,
    callback: (error: ServiceError|null, responseMessage: business_api_v1_business_pb.SendSecretRevealedResponse|null) => void
  ): UnaryResponse;
}

