/* eslint-disable */
/*Generated by GenDocu.com*/
// package: business_api.v1
// file: business_api/v1/business.proto

var business_api_v1_business_pb = require("../../business_api/v1/business_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var BusinessService = (function () {
  function BusinessService() {}
  BusinessService.serviceName = "business_api.v1.BusinessService";
  return BusinessService;
}());

BusinessService.List = {
  methodName: "List",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.ListRequest,
  responseType: business_api_v1_business_pb.ListResponse
};

BusinessService.Clear = {
  methodName: "Clear",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.ClearRequest,
  responseType: business_api_v1_business_pb.ClearResponse
};

BusinessService.SendPayload = {
  methodName: "SendPayload",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.SendPayloadRequest,
  responseType: business_api_v1_business_pb.SendPayloadResponse
};

BusinessService.SendNewTransaction = {
  methodName: "SendNewTransaction",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.SendNewTransactionRequest,
  responseType: business_api_v1_business_pb.SendNewTransactionResponse
};

BusinessService.SendProposalAcked = {
  methodName: "SendProposalAcked",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.SendProposalAckedRequest,
  responseType: business_api_v1_business_pb.SendProposalAckedResponse
};

BusinessService.SendProposalNacked = {
  methodName: "SendProposalNacked",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.SendProposalNackedRequest,
  responseType: business_api_v1_business_pb.SendProposalNackedResponse
};

BusinessService.SendSecretRevealed = {
  methodName: "SendSecretRevealed",
  service: BusinessService,
  requestStream: false,
  responseStream: false,
  requestType: business_api_v1_business_pb.SendSecretRevealedRequest,
  responseType: business_api_v1_business_pb.SendSecretRevealedResponse
};

exports.BusinessService = BusinessService;

function BusinessServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

BusinessServiceClient.prototype.list = function list(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.List, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BusinessServiceClient.prototype.clear = function clear(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.Clear, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BusinessServiceClient.prototype.sendPayload = function sendPayload(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.SendPayload, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BusinessServiceClient.prototype.sendNewTransaction = function sendNewTransaction(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.SendNewTransaction, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BusinessServiceClient.prototype.sendProposalAcked = function sendProposalAcked(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.SendProposalAcked, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BusinessServiceClient.prototype.sendProposalNacked = function sendProposalNacked(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.SendProposalNacked, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BusinessServiceClient.prototype.sendSecretRevealed = function sendSecretRevealed(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BusinessService.SendSecretRevealed, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.BusinessServiceClient = BusinessServiceClient;

