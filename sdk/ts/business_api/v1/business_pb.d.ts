/* eslint-disable */
/*Generated by GenDocu.com*/
// package: business_api.v1
// file: business_api/v1/business.proto

import * as jspb from "google-protobuf";
import * as common_v1_common_pb from "../../common/v1/common_pb";
import * as common_v1_packet_pb from "../../common/v1/packet_pb";
import * as common_v1_amqp_pb from "../../common/v1/amqp_pb";

export class ListRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListRequest): ListRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListRequest;
  static deserializeBinaryFromReader(message: ListRequest, reader: jspb.BinaryReader): ListRequest;
}

export namespace ListRequest {
  export type AsObject = {
  }
}

export class ListResponse extends jspb.Message {
  clearListList(): void;
  getListList(): Array<string>;
  setListList(value: Array<string>): void;
  addList(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListResponse): ListResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListResponse;
  static deserializeBinaryFromReader(message: ListResponse, reader: jspb.BinaryReader): ListResponse;
}

export namespace ListResponse {
  export type AsObject = {
    listList: Array<string>,
  }
}

export class ClearRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClearRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ClearRequest): ClearRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClearRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClearRequest;
  static deserializeBinaryFromReader(message: ClearRequest, reader: jspb.BinaryReader): ClearRequest;
}

export namespace ClearRequest {
  export type AsObject = {
  }
}

export class ClearResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClearResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ClearResponse): ClearResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClearResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClearResponse;
  static deserializeBinaryFromReader(message: ClearResponse, reader: jspb.BinaryReader): ClearResponse;
}

export namespace ClearResponse {
  export type AsObject = {
  }
}

export class SendPayloadRequest extends jspb.Message {
  hasPayload(): boolean;
  clearPayload(): void;
  getPayload(): common_v1_amqp_pb.Payload | undefined;
  setPayload(value?: common_v1_amqp_pb.Payload): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendPayloadRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SendPayloadRequest): SendPayloadRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendPayloadRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendPayloadRequest;
  static deserializeBinaryFromReader(message: SendPayloadRequest, reader: jspb.BinaryReader): SendPayloadRequest;
}

export namespace SendPayloadRequest {
  export type AsObject = {
    payload?: common_v1_amqp_pb.Payload.AsObject,
  }
}

export class SendPayloadResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendPayloadResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SendPayloadResponse): SendPayloadResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendPayloadResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendPayloadResponse;
  static deserializeBinaryFromReader(message: SendPayloadResponse, reader: jspb.BinaryReader): SendPayloadResponse;
}

export namespace SendPayloadResponse {
  export type AsObject = {
  }
}

export class SendNewTransactionRequest extends jspb.Message {
  getOwner(): string;
  setOwner(value: string): void;

  getMemo(): string;
  setMemo(value: string): void;

  clearCommitmentsList(): void;
  getCommitmentsList(): Array<common_v1_packet_pb.Commitment>;
  setCommitmentsList(value: Array<common_v1_packet_pb.Commitment>): void;
  addCommitments(value?: common_v1_packet_pb.Commitment, index?: number): common_v1_packet_pb.Commitment;

  clearConditionsList(): void;
  getConditionsList(): Array<common_v1_packet_pb.Condition>;
  setConditionsList(value: Array<common_v1_packet_pb.Condition>): void;
  addConditions(value?: common_v1_packet_pb.Condition, index?: number): common_v1_packet_pb.Condition;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendNewTransactionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SendNewTransactionRequest): SendNewTransactionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendNewTransactionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendNewTransactionRequest;
  static deserializeBinaryFromReader(message: SendNewTransactionRequest, reader: jspb.BinaryReader): SendNewTransactionRequest;
}

export namespace SendNewTransactionRequest {
  export type AsObject = {
    owner: string,
    memo: string,
    commitmentsList: Array<common_v1_packet_pb.Commitment.AsObject>,
    conditionsList: Array<common_v1_packet_pb.Condition.AsObject>,
  }
}

export class SendNewTransactionResponse extends jspb.Message {
  getContractId(): string;
  setContractId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendNewTransactionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SendNewTransactionResponse): SendNewTransactionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendNewTransactionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendNewTransactionResponse;
  static deserializeBinaryFromReader(message: SendNewTransactionResponse, reader: jspb.BinaryReader): SendNewTransactionResponse;
}

export namespace SendNewTransactionResponse {
  export type AsObject = {
    contractId: string,
  }
}

export class SendProposalAckedRequest extends jspb.Message {
  getOwner(): string;
  setOwner(value: string): void;

  getContractId(): string;
  setContractId(value: string): void;

  getSecret(): string;
  setSecret(value: string): void;

  getAlgorithm(): common_v1_packet_pb.HashAlgorithmMap[keyof common_v1_packet_pb.HashAlgorithmMap];
  setAlgorithm(value: common_v1_packet_pb.HashAlgorithmMap[keyof common_v1_packet_pb.HashAlgorithmMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendProposalAckedRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SendProposalAckedRequest): SendProposalAckedRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendProposalAckedRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendProposalAckedRequest;
  static deserializeBinaryFromReader(message: SendProposalAckedRequest, reader: jspb.BinaryReader): SendProposalAckedRequest;
}

export namespace SendProposalAckedRequest {
  export type AsObject = {
    owner: string,
    contractId: string,
    secret: string,
    algorithm: common_v1_packet_pb.HashAlgorithmMap[keyof common_v1_packet_pb.HashAlgorithmMap],
  }
}

export class SendProposalAckedResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendProposalAckedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SendProposalAckedResponse): SendProposalAckedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendProposalAckedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendProposalAckedResponse;
  static deserializeBinaryFromReader(message: SendProposalAckedResponse, reader: jspb.BinaryReader): SendProposalAckedResponse;
}

export namespace SendProposalAckedResponse {
  export type AsObject = {
  }
}

export class SendProposalNackedRequest extends jspb.Message {
  getOwner(): string;
  setOwner(value: string): void;

  getContractId(): string;
  setContractId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendProposalNackedRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SendProposalNackedRequest): SendProposalNackedRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendProposalNackedRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendProposalNackedRequest;
  static deserializeBinaryFromReader(message: SendProposalNackedRequest, reader: jspb.BinaryReader): SendProposalNackedRequest;
}

export namespace SendProposalNackedRequest {
  export type AsObject = {
    owner: string,
    contractId: string,
  }
}

export class SendProposalNackedResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendProposalNackedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SendProposalNackedResponse): SendProposalNackedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendProposalNackedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendProposalNackedResponse;
  static deserializeBinaryFromReader(message: SendProposalNackedResponse, reader: jspb.BinaryReader): SendProposalNackedResponse;
}

export namespace SendProposalNackedResponse {
  export type AsObject = {
  }
}

export class SendSecretRevealedRequest extends jspb.Message {
  getOwner(): string;
  setOwner(value: string): void;

  getContractId(): string;
  setContractId(value: string): void;

  getSecret(): string;
  setSecret(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendSecretRevealedRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SendSecretRevealedRequest): SendSecretRevealedRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendSecretRevealedRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendSecretRevealedRequest;
  static deserializeBinaryFromReader(message: SendSecretRevealedRequest, reader: jspb.BinaryReader): SendSecretRevealedRequest;
}

export namespace SendSecretRevealedRequest {
  export type AsObject = {
    owner: string,
    contractId: string,
    secret: string,
  }
}

export class SendSecretRevealedResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendSecretRevealedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SendSecretRevealedResponse): SendSecretRevealedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendSecretRevealedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendSecretRevealedResponse;
  static deserializeBinaryFromReader(message: SendSecretRevealedResponse, reader: jspb.BinaryReader): SendSecretRevealedResponse;
}

export namespace SendSecretRevealedResponse {
  export type AsObject = {
  }
}

