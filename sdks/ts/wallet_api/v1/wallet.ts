/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: wallet_api/v1/wallet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/v1/common";
import * as dependency_2 from "./../../common/v1/packet";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace wallet_api.v1 {
    export class CreateOwnerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_name" in data && data.owner_name != undefined) {
                    this.owner_name = data.owner_name;
                }
            }
        }
        get owner_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner_name?: string;
        }): CreateOwnerRequest {
            const message = new CreateOwnerRequest({});
            if (data.owner_name != null) {
                message.owner_name = data.owner_name;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_name?: string;
            } = {};
            if (this.owner_name != null) {
                data.owner_name = this.owner_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_name.length)
                writer.writeString(1, this.owner_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOwnerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOwnerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOwnerRequest {
            return CreateOwnerRequest.deserialize(bytes);
        }
    }
    export class CreateOwnerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_id?: string;
            api_key?: string;
            owner_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("owner_name" in data && data.owner_name != undefined) {
                    this.owner_name = data.owner_name;
                }
            }
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set owner_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_id?: string;
            api_key?: string;
            owner_name?: string;
        }): CreateOwnerResponse {
            const message = new CreateOwnerResponse({});
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.owner_name != null) {
                message.owner_name = data.owner_name;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_id?: string;
                api_key?: string;
                owner_name?: string;
            } = {};
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.owner_name != null) {
                data.owner_name = this.owner_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_id.length)
                writer.writeString(1, this.owner_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.owner_name.length)
                writer.writeString(3, this.owner_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOwnerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOwnerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        message.owner_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOwnerResponse {
            return CreateOwnerResponse.deserialize(bytes);
        }
    }
    export class CreateWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_name?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_name" in data && data.wallet_name != undefined) {
                    this.wallet_name = data.wallet_name;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get wallet_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            wallet_name?: string;
            api_key?: string;
        }): CreateWalletRequest {
            const message = new CreateWalletRequest({});
            if (data.wallet_name != null) {
                message.wallet_name = data.wallet_name;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_name?: string;
                api_key?: string;
            } = {};
            if (this.wallet_name != null) {
                data.wallet_name = this.wallet_name;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_name.length)
                writer.writeString(1, this.wallet_name);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_name = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWalletRequest {
            return CreateWalletRequest.deserialize(bytes);
        }
    }
    export class CreateWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            wallet_name?: string;
            public_key?: string;
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("wallet_name" in data && data.wallet_name != undefined) {
                    this.wallet_name = data.wallet_name;
                }
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wallet_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            wallet_name?: string;
            public_key?: string;
            did?: string;
        }): CreateWalletResponse {
            const message = new CreateWalletResponse({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.wallet_name != null) {
                message.wallet_name = data.wallet_name;
            }
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                wallet_name?: string;
                public_key?: string;
                did?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.wallet_name != null) {
                data.wallet_name = this.wallet_name;
            }
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.wallet_name.length)
                writer.writeString(2, this.wallet_name);
            if (this.public_key.length)
                writer.writeString(3, this.public_key);
            if (this.did.length)
                writer.writeString(4, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.wallet_name = reader.readString();
                        break;
                    case 3:
                        message.public_key = reader.readString();
                        break;
                    case 4:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWalletResponse {
            return CreateWalletResponse.deserialize(bytes);
        }
    }
    export class ListWalletsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            page_size?: number;
            api_key?: string;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 4) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 5) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            page?: number;
            page_size?: number;
            api_key?: string;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListWalletsRequest {
            const message = new ListWalletsRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                page_size?: number;
                api_key?: string;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.api_key.length)
                writer.writeString(3, this.api_key);
            if (this.has_filters)
                writer.writeMessage(4, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(5, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWalletsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWalletsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.api_key = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWalletsRequest {
            return ListWalletsRequest.deserialize(bytes);
        }
    }
    export class ListWalletsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallets?: ListWalletsResponse.Wallet[];
            total_owned_wallets?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallets" in data && data.wallets != undefined) {
                    this.wallets = data.wallets;
                }
                if ("total_owned_wallets" in data && data.total_owned_wallets != undefined) {
                    this.total_owned_wallets = data.total_owned_wallets;
                }
            }
        }
        get wallets() {
            return pb_1.Message.getRepeatedWrapperField(this, ListWalletsResponse.Wallet, 1) as ListWalletsResponse.Wallet[];
        }
        set wallets(value: ListWalletsResponse.Wallet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_wallets() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_wallets(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            wallets?: ReturnType<typeof ListWalletsResponse.Wallet.prototype.toObject>[];
            total_owned_wallets?: number;
        }): ListWalletsResponse {
            const message = new ListWalletsResponse({});
            if (data.wallets != null) {
                message.wallets = data.wallets.map(item => ListWalletsResponse.Wallet.fromObject(item));
            }
            if (data.total_owned_wallets != null) {
                message.total_owned_wallets = data.total_owned_wallets;
            }
            return message;
        }
        toObject() {
            const data: {
                wallets?: ReturnType<typeof ListWalletsResponse.Wallet.prototype.toObject>[];
                total_owned_wallets?: number;
            } = {};
            if (this.wallets != null) {
                data.wallets = this.wallets.map((item: ListWalletsResponse.Wallet) => item.toObject());
            }
            if (this.total_owned_wallets != null) {
                data.total_owned_wallets = this.total_owned_wallets;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallets.length)
                writer.writeRepeatedMessage(1, this.wallets, (item: ListWalletsResponse.Wallet) => item.serialize(writer));
            if (this.total_owned_wallets != 0)
                writer.writeUint32(2, this.total_owned_wallets);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWalletsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWalletsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.wallets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ListWalletsResponse.Wallet.deserialize(reader), ListWalletsResponse.Wallet));
                        break;
                    case 2:
                        message.total_owned_wallets = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWalletsResponse {
            return ListWalletsResponse.deserialize(bytes);
        }
    }
    export namespace ListWalletsResponse {
        export class Wallet extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                wallet_name?: string;
                wallet_id?: string;
                public_key?: string;
                did?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("wallet_name" in data && data.wallet_name != undefined) {
                        this.wallet_name = data.wallet_name;
                    }
                    if ("wallet_id" in data && data.wallet_id != undefined) {
                        this.wallet_id = data.wallet_id;
                    }
                    if ("public_key" in data && data.public_key != undefined) {
                        this.public_key = data.public_key;
                    }
                    if ("did" in data && data.did != undefined) {
                        this.did = data.did;
                    }
                }
            }
            get wallet_name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set wallet_name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get wallet_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set wallet_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get public_key() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set public_key(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get did() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set did(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                wallet_name?: string;
                wallet_id?: string;
                public_key?: string;
                did?: string;
            }): Wallet {
                const message = new Wallet({});
                if (data.wallet_name != null) {
                    message.wallet_name = data.wallet_name;
                }
                if (data.wallet_id != null) {
                    message.wallet_id = data.wallet_id;
                }
                if (data.public_key != null) {
                    message.public_key = data.public_key;
                }
                if (data.did != null) {
                    message.did = data.did;
                }
                return message;
            }
            toObject() {
                const data: {
                    wallet_name?: string;
                    wallet_id?: string;
                    public_key?: string;
                    did?: string;
                } = {};
                if (this.wallet_name != null) {
                    data.wallet_name = this.wallet_name;
                }
                if (this.wallet_id != null) {
                    data.wallet_id = this.wallet_id;
                }
                if (this.public_key != null) {
                    data.public_key = this.public_key;
                }
                if (this.did != null) {
                    data.did = this.did;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.wallet_name.length)
                    writer.writeString(1, this.wallet_name);
                if (this.wallet_id.length)
                    writer.writeString(2, this.wallet_id);
                if (this.public_key.length)
                    writer.writeString(3, this.public_key);
                if (this.did.length)
                    writer.writeString(4, this.did);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Wallet {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Wallet();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.wallet_name = reader.readString();
                            break;
                        case 2:
                            message.wallet_id = reader.readString();
                            break;
                        case 3:
                            message.public_key = reader.readString();
                            break;
                        case 4:
                            message.did = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Wallet {
                return Wallet.deserialize(bytes);
            }
        }
    }
    export class ListWalletBalancesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            api_key?: string;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 3) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            wallet_id?: string;
            api_key?: string;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListWalletBalancesRequest {
            const message = new ListWalletBalancesRequest({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                api_key?: string;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.has_sort_by)
                writer.writeMessage(3, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWalletBalancesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWalletBalancesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWalletBalancesRequest {
            return ListWalletBalancesRequest.deserialize(bytes);
        }
    }
    export class WalletBalance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: dependency_1.common.Amount;
            file_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("file_count" in data && data.file_count != undefined) {
                    this.file_count = data.file_count;
                }
            }
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 1) as dependency_1.common.Amount;
        }
        set amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get file_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set file_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            file_count?: number;
        }): WalletBalance {
            const message = new WalletBalance({});
            if (data.amount != null) {
                message.amount = dependency_1.common.Amount.fromObject(data.amount);
            }
            if (data.file_count != null) {
                message.file_count = data.file_count;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                file_count?: number;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.file_count != null) {
                data.file_count = this.file_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_amount)
                writer.writeMessage(1, this.amount, () => this.amount.serialize(writer));
            if (this.file_count != 0)
                writer.writeInt64(2, this.file_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WalletBalance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WalletBalance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 2:
                        message.file_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WalletBalance {
            return WalletBalance.deserialize(bytes);
        }
    }
    export class ListWalletBalancesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balances?: WalletBalance[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
            }
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, WalletBalance, 1) as WalletBalance[];
        }
        set balances(value: WalletBalance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            balances?: ReturnType<typeof WalletBalance.prototype.toObject>[];
        }): ListWalletBalancesResponse {
            const message = new ListWalletBalancesResponse({});
            if (data.balances != null) {
                message.balances = data.balances.map(item => WalletBalance.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                balances?: ReturnType<typeof WalletBalance.prototype.toObject>[];
            } = {};
            if (this.balances != null) {
                data.balances = this.balances.map((item: WalletBalance) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balances.length)
                writer.writeRepeatedMessage(1, this.balances, (item: WalletBalance) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWalletBalancesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWalletBalancesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WalletBalance.deserialize(reader), WalletBalance));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWalletBalancesResponse {
            return ListWalletBalancesResponse.deserialize(bytes);
        }
    }
    export class ListAssetFilesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            page_size?: number;
            wallet_id?: string;
            api_key?: string;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 5) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 6) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            page?: number;
            page_size?: number;
            wallet_id?: string;
            api_key?: string;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListAssetFilesRequest {
            const message = new ListAssetFilesRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                page_size?: number;
                wallet_id?: string;
                api_key?: string;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.wallet_id.length)
                writer.writeString(3, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(4, this.api_key);
            if (this.has_filters)
                writer.writeMessage(5, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(6, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAssetFilesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAssetFilesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.wallet_id = reader.readString();
                        break;
                    case 4:
                        message.api_key = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAssetFilesRequest {
            return ListAssetFilesRequest.deserialize(bytes);
        }
    }
    export class ListAssetFilesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            funds?: ListAssetFilesResponse.Fund[];
            total_owned_funds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("funds" in data && data.funds != undefined) {
                    this.funds = data.funds;
                }
                if ("total_owned_funds" in data && data.total_owned_funds != undefined) {
                    this.total_owned_funds = data.total_owned_funds;
                }
            }
        }
        get funds() {
            return pb_1.Message.getRepeatedWrapperField(this, ListAssetFilesResponse.Fund, 1) as ListAssetFilesResponse.Fund[];
        }
        set funds(value: ListAssetFilesResponse.Fund[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_funds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_funds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            funds?: ReturnType<typeof ListAssetFilesResponse.Fund.prototype.toObject>[];
            total_owned_funds?: number;
        }): ListAssetFilesResponse {
            const message = new ListAssetFilesResponse({});
            if (data.funds != null) {
                message.funds = data.funds.map(item => ListAssetFilesResponse.Fund.fromObject(item));
            }
            if (data.total_owned_funds != null) {
                message.total_owned_funds = data.total_owned_funds;
            }
            return message;
        }
        toObject() {
            const data: {
                funds?: ReturnType<typeof ListAssetFilesResponse.Fund.prototype.toObject>[];
                total_owned_funds?: number;
            } = {};
            if (this.funds != null) {
                data.funds = this.funds.map((item: ListAssetFilesResponse.Fund) => item.toObject());
            }
            if (this.total_owned_funds != null) {
                data.total_owned_funds = this.total_owned_funds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.funds.length)
                writer.writeRepeatedMessage(1, this.funds, (item: ListAssetFilesResponse.Fund) => item.serialize(writer));
            if (this.total_owned_funds != 0)
                writer.writeUint32(2, this.total_owned_funds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAssetFilesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAssetFilesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.funds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ListAssetFilesResponse.Fund.deserialize(reader), ListAssetFilesResponse.Fund));
                        break;
                    case 2:
                        message.total_owned_funds = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAssetFilesResponse {
            return ListAssetFilesResponse.deserialize(bytes);
        }
    }
    export namespace ListAssetFilesResponse {
        export class Notary extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                did?: string;
                signature?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("did" in data && data.did != undefined) {
                        this.did = data.did;
                    }
                    if ("signature" in data && data.signature != undefined) {
                        this.signature = data.signature;
                    }
                }
            }
            get did() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set did(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get signature() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set signature(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                did?: string;
                signature?: Uint8Array;
            }): Notary {
                const message = new Notary({});
                if (data.did != null) {
                    message.did = data.did;
                }
                if (data.signature != null) {
                    message.signature = data.signature;
                }
                return message;
            }
            toObject() {
                const data: {
                    did?: string;
                    signature?: Uint8Array;
                } = {};
                if (this.did != null) {
                    data.did = this.did;
                }
                if (this.signature != null) {
                    data.signature = this.signature;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.did.length)
                    writer.writeString(1, this.did);
                if (this.signature.length)
                    writer.writeBytes(2, this.signature);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notary {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Notary();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.did = reader.readString();
                            break;
                        case 2:
                            message.signature = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Notary {
                return Notary.deserialize(bytes);
            }
        }
        export class Promissory extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                version?: string;
                id?: string;
                currency?: string;
                amount?: number;
                decimals?: number;
                authority?: string;
                issuer?: string;
                issuance_date?: string;
                block_depth?: number;
                authorization_signature?: Uint8Array;
                transfer_signature?: Uint8Array;
                notaries?: ListAssetFilesResponse.Notary[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("version" in data && data.version != undefined) {
                        this.version = data.version;
                    }
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("currency" in data && data.currency != undefined) {
                        this.currency = data.currency;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("decimals" in data && data.decimals != undefined) {
                        this.decimals = data.decimals;
                    }
                    if ("authority" in data && data.authority != undefined) {
                        this.authority = data.authority;
                    }
                    if ("issuer" in data && data.issuer != undefined) {
                        this.issuer = data.issuer;
                    }
                    if ("issuance_date" in data && data.issuance_date != undefined) {
                        this.issuance_date = data.issuance_date;
                    }
                    if ("block_depth" in data && data.block_depth != undefined) {
                        this.block_depth = data.block_depth;
                    }
                    if ("authorization_signature" in data && data.authorization_signature != undefined) {
                        this.authorization_signature = data.authorization_signature;
                    }
                    if ("transfer_signature" in data && data.transfer_signature != undefined) {
                        this.transfer_signature = data.transfer_signature;
                    }
                    if ("notaries" in data && data.notaries != undefined) {
                        this.notaries = data.notaries;
                    }
                }
            }
            get version() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set version(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get currency() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set currency(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get decimals() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set decimals(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get authority() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set authority(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get issuer() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set issuer(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get issuance_date() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set issuance_date(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            get block_depth() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set block_depth(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get authorization_signature() {
                return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
            }
            set authorization_signature(value: Uint8Array) {
                pb_1.Message.setField(this, 11, value);
            }
            get transfer_signature() {
                return pb_1.Message.getFieldWithDefault(this, 12, new Uint8Array(0)) as Uint8Array;
            }
            set transfer_signature(value: Uint8Array) {
                pb_1.Message.setField(this, 12, value);
            }
            get notaries() {
                return pb_1.Message.getRepeatedWrapperField(this, ListAssetFilesResponse.Notary, 13) as ListAssetFilesResponse.Notary[];
            }
            set notaries(value: ListAssetFilesResponse.Notary[]) {
                pb_1.Message.setRepeatedWrapperField(this, 13, value);
            }
            static fromObject(data: {
                version?: string;
                id?: string;
                currency?: string;
                amount?: number;
                decimals?: number;
                authority?: string;
                issuer?: string;
                issuance_date?: string;
                block_depth?: number;
                authorization_signature?: Uint8Array;
                transfer_signature?: Uint8Array;
                notaries?: ReturnType<typeof ListAssetFilesResponse.Notary.prototype.toObject>[];
            }): Promissory {
                const message = new Promissory({});
                if (data.version != null) {
                    message.version = data.version;
                }
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.currency != null) {
                    message.currency = data.currency;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.decimals != null) {
                    message.decimals = data.decimals;
                }
                if (data.authority != null) {
                    message.authority = data.authority;
                }
                if (data.issuer != null) {
                    message.issuer = data.issuer;
                }
                if (data.issuance_date != null) {
                    message.issuance_date = data.issuance_date;
                }
                if (data.block_depth != null) {
                    message.block_depth = data.block_depth;
                }
                if (data.authorization_signature != null) {
                    message.authorization_signature = data.authorization_signature;
                }
                if (data.transfer_signature != null) {
                    message.transfer_signature = data.transfer_signature;
                }
                if (data.notaries != null) {
                    message.notaries = data.notaries.map(item => ListAssetFilesResponse.Notary.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    version?: string;
                    id?: string;
                    currency?: string;
                    amount?: number;
                    decimals?: number;
                    authority?: string;
                    issuer?: string;
                    issuance_date?: string;
                    block_depth?: number;
                    authorization_signature?: Uint8Array;
                    transfer_signature?: Uint8Array;
                    notaries?: ReturnType<typeof ListAssetFilesResponse.Notary.prototype.toObject>[];
                } = {};
                if (this.version != null) {
                    data.version = this.version;
                }
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.currency != null) {
                    data.currency = this.currency;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.decimals != null) {
                    data.decimals = this.decimals;
                }
                if (this.authority != null) {
                    data.authority = this.authority;
                }
                if (this.issuer != null) {
                    data.issuer = this.issuer;
                }
                if (this.issuance_date != null) {
                    data.issuance_date = this.issuance_date;
                }
                if (this.block_depth != null) {
                    data.block_depth = this.block_depth;
                }
                if (this.authorization_signature != null) {
                    data.authorization_signature = this.authorization_signature;
                }
                if (this.transfer_signature != null) {
                    data.transfer_signature = this.transfer_signature;
                }
                if (this.notaries != null) {
                    data.notaries = this.notaries.map((item: ListAssetFilesResponse.Notary) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.version.length)
                    writer.writeString(1, this.version);
                if (this.id.length)
                    writer.writeString(3, this.id);
                if (this.currency.length)
                    writer.writeString(4, this.currency);
                if (this.amount != 0)
                    writer.writeInt64(5, this.amount);
                if (this.decimals != 0)
                    writer.writeUint32(6, this.decimals);
                if (this.authority.length)
                    writer.writeString(7, this.authority);
                if (this.issuer.length)
                    writer.writeString(8, this.issuer);
                if (this.issuance_date.length)
                    writer.writeString(9, this.issuance_date);
                if (this.block_depth != 0)
                    writer.writeUint32(10, this.block_depth);
                if (this.authorization_signature.length)
                    writer.writeBytes(11, this.authorization_signature);
                if (this.transfer_signature.length)
                    writer.writeBytes(12, this.transfer_signature);
                if (this.notaries.length)
                    writer.writeRepeatedMessage(13, this.notaries, (item: ListAssetFilesResponse.Notary) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Promissory {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Promissory();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.version = reader.readString();
                            break;
                        case 3:
                            message.id = reader.readString();
                            break;
                        case 4:
                            message.currency = reader.readString();
                            break;
                        case 5:
                            message.amount = reader.readInt64();
                            break;
                        case 6:
                            message.decimals = reader.readUint32();
                            break;
                        case 7:
                            message.authority = reader.readString();
                            break;
                        case 8:
                            message.issuer = reader.readString();
                            break;
                        case 9:
                            message.issuance_date = reader.readString();
                            break;
                        case 10:
                            message.block_depth = reader.readUint32();
                            break;
                        case 11:
                            message.authorization_signature = reader.readBytes();
                            break;
                        case 12:
                            message.transfer_signature = reader.readBytes();
                            break;
                        case 13:
                            reader.readMessage(message.notaries, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ListAssetFilesResponse.Notary.deserialize(reader), ListAssetFilesResponse.Notary));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Promissory {
                return Promissory.deserialize(bytes);
            }
        }
        export class Fund extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                wallet_id?: string;
                promissory?: ListAssetFilesResponse.Promissory;
                reserved?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("wallet_id" in data && data.wallet_id != undefined) {
                        this.wallet_id = data.wallet_id;
                    }
                    if ("promissory" in data && data.promissory != undefined) {
                        this.promissory = data.promissory;
                    }
                    if ("reserved" in data && data.reserved != undefined) {
                        this.reserved = data.reserved;
                    }
                }
            }
            get wallet_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set wallet_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get promissory() {
                return pb_1.Message.getWrapperField(this, ListAssetFilesResponse.Promissory, 2) as ListAssetFilesResponse.Promissory;
            }
            set promissory(value: ListAssetFilesResponse.Promissory) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_promissory() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get reserved() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set reserved(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                wallet_id?: string;
                promissory?: ReturnType<typeof ListAssetFilesResponse.Promissory.prototype.toObject>;
                reserved?: boolean;
            }): Fund {
                const message = new Fund({});
                if (data.wallet_id != null) {
                    message.wallet_id = data.wallet_id;
                }
                if (data.promissory != null) {
                    message.promissory = ListAssetFilesResponse.Promissory.fromObject(data.promissory);
                }
                if (data.reserved != null) {
                    message.reserved = data.reserved;
                }
                return message;
            }
            toObject() {
                const data: {
                    wallet_id?: string;
                    promissory?: ReturnType<typeof ListAssetFilesResponse.Promissory.prototype.toObject>;
                    reserved?: boolean;
                } = {};
                if (this.wallet_id != null) {
                    data.wallet_id = this.wallet_id;
                }
                if (this.promissory != null) {
                    data.promissory = this.promissory.toObject();
                }
                if (this.reserved != null) {
                    data.reserved = this.reserved;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.wallet_id.length)
                    writer.writeString(1, this.wallet_id);
                if (this.has_promissory)
                    writer.writeMessage(2, this.promissory, () => this.promissory.serialize(writer));
                if (this.reserved != false)
                    writer.writeBool(3, this.reserved);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fund {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fund();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.wallet_id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.promissory, () => message.promissory = ListAssetFilesResponse.Promissory.deserialize(reader));
                            break;
                        case 3:
                            message.reserved = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Fund {
                return Fund.deserialize(bytes);
            }
        }
    }
    export class ListCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            page_size?: number;
            wallet_id?: string;
            api_key?: string;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 5) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 6) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            page?: number;
            page_size?: number;
            wallet_id?: string;
            api_key?: string;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListCredentialsRequest {
            const message = new ListCredentialsRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                page_size?: number;
                wallet_id?: string;
                api_key?: string;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.wallet_id.length)
                writer.writeString(3, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(4, this.api_key);
            if (this.has_filters)
                writer.writeMessage(5, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(6, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.wallet_id = reader.readString();
                        break;
                    case 4:
                        message.api_key = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCredentialsRequest {
            return ListCredentialsRequest.deserialize(bytes);
        }
    }
    export class ListCredentialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credentials?: string[];
            total_owned_credentials?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credentials" in data && data.credentials != undefined) {
                    this.credentials = data.credentials;
                }
                if ("total_owned_credentials" in data && data.total_owned_credentials != undefined) {
                    this.total_owned_credentials = data.total_owned_credentials;
                }
            }
        }
        get credentials() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set credentials(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get total_owned_credentials() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_credentials(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            credentials?: string[];
            total_owned_credentials?: number;
        }): ListCredentialsResponse {
            const message = new ListCredentialsResponse({});
            if (data.credentials != null) {
                message.credentials = data.credentials;
            }
            if (data.total_owned_credentials != null) {
                message.total_owned_credentials = data.total_owned_credentials;
            }
            return message;
        }
        toObject() {
            const data: {
                credentials?: string[];
                total_owned_credentials?: number;
            } = {};
            if (this.credentials != null) {
                data.credentials = this.credentials;
            }
            if (this.total_owned_credentials != null) {
                data.total_owned_credentials = this.total_owned_credentials;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credentials.length)
                writer.writeRepeatedString(1, this.credentials);
            if (this.total_owned_credentials != 0)
                writer.writeUint32(2, this.total_owned_credentials);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCredentialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCredentialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.total_owned_credentials = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCredentialsResponse {
            return ListCredentialsResponse.deserialize(bytes);
        }
    }
    export class AddCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_type?: string;
            wallet_id?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            credential_type?: string;
            wallet_id?: string;
            api_key?: string;
        }): AddCredentialRequest {
            const message = new AddCredentialRequest({});
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_type?: string;
                wallet_id?: string;
                api_key?: string;
            } = {};
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_type.length)
                writer.writeString(1, this.credential_type);
            if (this.wallet_id.length)
                writer.writeString(2, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(3, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_type = reader.readString();
                        break;
                    case 2:
                        message.wallet_id = reader.readString();
                        break;
                    case 3:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddCredentialRequest {
            return AddCredentialRequest.deserialize(bytes);
        }
    }
    export class AddCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
            }
        }
        get credential() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            credential?: string;
        }): AddCredentialResponse {
            const message = new AddCredentialResponse({});
            if (data.credential != null) {
                message.credential = data.credential;
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: string;
            } = {};
            if (this.credential != null) {
                data.credential = this.credential;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential.length)
                writer.writeString(1, this.credential);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddCredentialResponse {
            return AddCredentialResponse.deserialize(bytes);
        }
    }
    export class AssociateWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            api_key?: string;
        }): AssociateWalletRequest {
            const message = new AssociateWalletRequest({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                api_key?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssociateWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssociateWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssociateWalletRequest {
            return AssociateWalletRequest.deserialize(bytes);
        }
    }
    export class AssociateWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            did?: string;
            public_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            did?: string;
            public_key?: string;
        }): AssociateWalletResponse {
            const message = new AssociateWalletResponse({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                did?: string;
                public_key?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.did.length)
                writer.writeString(2, this.did);
            if (this.public_key.length)
                writer.writeString(3, this.public_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssociateWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssociateWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.did = reader.readString();
                        break;
                    case 3:
                        message.public_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssociateWalletResponse {
            return AssociateWalletResponse.deserialize(bytes);
        }
    }
    export class CreateAndAssociateWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_name?: string;
            api_key?: string;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_name" in data && data.wallet_name != undefined) {
                    this.wallet_name = data.wallet_name;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get wallet_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            wallet_name?: string;
            api_key?: string;
            token?: string;
        }): CreateAndAssociateWalletRequest {
            const message = new CreateAndAssociateWalletRequest({});
            if (data.wallet_name != null) {
                message.wallet_name = data.wallet_name;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_name?: string;
                api_key?: string;
                token?: string;
            } = {};
            if (this.wallet_name != null) {
                data.wallet_name = this.wallet_name;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_name.length)
                writer.writeString(1, this.wallet_name);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAndAssociateWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAndAssociateWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_name = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAndAssociateWalletRequest {
            return CreateAndAssociateWalletRequest.deserialize(bytes);
        }
    }
    export class CreateAndAssociateWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            wallet_name?: string;
            public_key?: string;
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("wallet_name" in data && data.wallet_name != undefined) {
                    this.wallet_name = data.wallet_name;
                }
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wallet_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            wallet_name?: string;
            public_key?: string;
            did?: string;
        }): CreateAndAssociateWalletResponse {
            const message = new CreateAndAssociateWalletResponse({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.wallet_name != null) {
                message.wallet_name = data.wallet_name;
            }
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                wallet_name?: string;
                public_key?: string;
                did?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.wallet_name != null) {
                data.wallet_name = this.wallet_name;
            }
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.wallet_name.length)
                writer.writeString(2, this.wallet_name);
            if (this.public_key.length)
                writer.writeString(3, this.public_key);
            if (this.did.length)
                writer.writeString(4, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAndAssociateWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAndAssociateWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.wallet_name = reader.readString();
                        break;
                    case 3:
                        message.public_key = reader.readString();
                        break;
                    case 4:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAndAssociateWalletResponse {
            return CreateAndAssociateWalletResponse.deserialize(bytes);
        }
    }
    export class RequestPresentationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            credential_type?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            did?: string;
            credential_type?: string;
            api_key?: string;
        }): RequestPresentationRequest {
            const message = new RequestPresentationRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                credential_type?: string;
                api_key?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.credential_type.length)
                writer.writeString(2, this.credential_type);
            if (this.api_key.length)
                writer.writeString(3, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestPresentationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestPresentationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.credential_type = reader.readString();
                        break;
                    case 3:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestPresentationRequest {
            return RequestPresentationRequest.deserialize(bytes);
        }
    }
    export class RequestPresentationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            presentation?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("presentation" in data && data.presentation != undefined) {
                    this.presentation = data.presentation;
                }
            }
        }
        get presentation() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set presentation(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            presentation?: string;
        }): RequestPresentationResponse {
            const message = new RequestPresentationResponse({});
            if (data.presentation != null) {
                message.presentation = data.presentation;
            }
            return message;
        }
        toObject() {
            const data: {
                presentation?: string;
            } = {};
            if (this.presentation != null) {
                data.presentation = this.presentation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.presentation.length)
                writer.writeString(1, this.presentation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestPresentationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestPresentationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.presentation = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestPresentationResponse {
            return RequestPresentationResponse.deserialize(bytes);
        }
    }
    export class PrepareFundsChangeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: dependency_1.common.Amount;
            user_reference?: string;
            wallet_id?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("user_reference" in data && data.user_reference != undefined) {
                    this.user_reference = data.user_reference;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 1) as dependency_1.common.Amount;
        }
        set amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_reference() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_reference(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            user_reference?: string;
            wallet_id?: string;
            api_key?: string;
        }): PrepareFundsChangeRequest {
            const message = new PrepareFundsChangeRequest({});
            if (data.amount != null) {
                message.amount = dependency_1.common.Amount.fromObject(data.amount);
            }
            if (data.user_reference != null) {
                message.user_reference = data.user_reference;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                user_reference?: string;
                wallet_id?: string;
                api_key?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.user_reference != null) {
                data.user_reference = this.user_reference;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_amount)
                writer.writeMessage(1, this.amount, () => this.amount.serialize(writer));
            if (this.user_reference.length)
                writer.writeString(4, this.user_reference);
            if (this.wallet_id.length)
                writer.writeString(2, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(3, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareFundsChangeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareFundsChangeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 4:
                        message.user_reference = reader.readString();
                        break;
                    case 2:
                        message.wallet_id = reader.readString();
                        break;
                    case 3:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareFundsChangeRequest {
            return PrepareFundsChangeRequest.deserialize(bytes);
        }
    }
    export class PrepareFundsChangeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: PrepareFundsChangeResponse.Status;
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, PrepareFundsChangeResponse.Status.STATUS_UNSPECIFIED) as PrepareFundsChangeResponse.Status;
        }
        set status(value: PrepareFundsChangeResponse.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: PrepareFundsChangeResponse.Status;
            uetr?: string;
        }): PrepareFundsChangeResponse {
            const message = new PrepareFundsChangeResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: PrepareFundsChangeResponse.Status;
                uetr?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != PrepareFundsChangeResponse.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.uetr.length)
                writer.writeString(2, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareFundsChangeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareFundsChangeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareFundsChangeResponse {
            return PrepareFundsChangeResponse.deserialize(bytes);
        }
    }
    export namespace PrepareFundsChangeResponse {
        export enum Status {
            STATUS_UNSPECIFIED = 0,
            STATUS_SUCCESS = 1,
            STATUS_INSUFFICIENT_FUNDS = 2,
            STATUS_FUNDS_PRESENT_NOOP = 3
        }
    }
    export class PrepareTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            wallet_id?: string;
            commitments?: dependency_2.common.Commitment[];
            conditions?: dependency_2.common.Condition[];
            memo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
                if ("conditions" in data && data.conditions != undefined) {
                    this.conditions = data.conditions;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Commitment, 3) as dependency_2.common.Commitment[];
        }
        set commitments(value: dependency_2.common.Commitment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get conditions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Condition, 4) as dependency_2.common.Condition[];
        }
        set conditions(value: dependency_2.common.Condition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            api_key?: string;
            wallet_id?: string;
            commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
            conditions?: ReturnType<typeof dependency_2.common.Condition.prototype.toObject>[];
            memo?: string;
        }): PrepareTransactionRequest {
            const message = new PrepareTransactionRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_2.common.Commitment.fromObject(item));
            }
            if (data.conditions != null) {
                message.conditions = data.conditions.map(item => dependency_2.common.Condition.fromObject(item));
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                wallet_id?: string;
                commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
                conditions?: ReturnType<typeof dependency_2.common.Condition.prototype.toObject>[];
                memo?: string;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_2.common.Commitment) => item.toObject());
            }
            if (this.conditions != null) {
                data.conditions = this.conditions.map((item: dependency_2.common.Condition) => item.toObject());
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.wallet_id.length)
                writer.writeString(2, this.wallet_id);
            if (this.commitments.length)
                writer.writeRepeatedMessage(3, this.commitments, (item: dependency_2.common.Commitment) => item.serialize(writer));
            if (this.conditions.length)
                writer.writeRepeatedMessage(4, this.conditions, (item: dependency_2.common.Condition) => item.serialize(writer));
            if (this.memo.length)
                writer.writeString(5, this.memo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.wallet_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.common.Commitment.deserialize(reader), dependency_2.common.Commitment));
                        break;
                    case 4:
                        reader.readMessage(message.conditions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.common.Condition.deserialize(reader), dependency_2.common.Condition));
                        break;
                    case 5:
                        message.memo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareTransactionRequest {
            return PrepareTransactionRequest.deserialize(bytes);
        }
    }
    export class PrepareTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: PrepareTransactionResponse.Status;
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, PrepareTransactionResponse.Status.UNSPECIFIED) as PrepareTransactionResponse.Status;
        }
        set status(value: PrepareTransactionResponse.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: PrepareTransactionResponse.Status;
            uetr?: string;
        }): PrepareTransactionResponse {
            const message = new PrepareTransactionResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: PrepareTransactionResponse.Status;
                uetr?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != PrepareTransactionResponse.Status.UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.uetr.length)
                writer.writeString(2, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareTransactionResponse {
            return PrepareTransactionResponse.deserialize(bytes);
        }
    }
    export namespace PrepareTransactionResponse {
        export enum Status {
            UNSPECIFIED = 0,
            SUCCESS = 1,
            FAILURE = 2
        }
    }
    export class ListTransactionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            api_key?: string;
            filters?: dependency_1.common.Filter;
            page?: number;
            page_size?: number;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 3) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 6) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            wallet_id?: string;
            api_key?: string;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            page?: number;
            page_size?: number;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListTransactionsRequest {
            const message = new ListTransactionsRequest({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                api_key?: string;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                page?: number;
                page_size?: number;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.has_filters)
                writer.writeMessage(3, this.filters, () => this.filters.serialize(writer));
            if (this.page != 0)
                writer.writeInt32(4, this.page);
            if (this.page_size != 0)
                writer.writeInt32(5, this.page_size);
            if (this.has_sort_by)
                writer.writeMessage(6, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTransactionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTransactionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 4:
                        message.page = reader.readInt32();
                        break;
                    case 5:
                        message.page_size = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTransactionsRequest {
            return ListTransactionsRequest.deserialize(bytes);
        }
    }
    export class ContractSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_id?: string;
            contract_type?: string;
            created?: string;
            counterparties?: string[];
            status?: string;
            memo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("contract_type" in data && data.contract_type != undefined) {
                    this.contract_type = data.contract_type;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("counterparties" in data && data.counterparties != undefined) {
                    this.counterparties = data.counterparties;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
            }
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set created(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get counterparties() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set counterparties(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            contract_id?: string;
            contract_type?: string;
            created?: string;
            counterparties?: string[];
            status?: string;
            memo?: string;
        }): ContractSummary {
            const message = new ContractSummary({});
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.contract_type != null) {
                message.contract_type = data.contract_type;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.counterparties != null) {
                message.counterparties = data.counterparties;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_id?: string;
                contract_type?: string;
                created?: string;
                counterparties?: string[];
                status?: string;
                memo?: string;
            } = {};
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.contract_type != null) {
                data.contract_type = this.contract_type;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.counterparties != null) {
                data.counterparties = this.counterparties;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_id.length)
                writer.writeString(1, this.contract_id);
            if (this.contract_type.length)
                writer.writeString(2, this.contract_type);
            if (this.created.length)
                writer.writeString(3, this.created);
            if (this.counterparties.length)
                writer.writeRepeatedString(4, this.counterparties);
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.memo.length)
                writer.writeString(6, this.memo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_id = reader.readString();
                        break;
                    case 2:
                        message.contract_type = reader.readString();
                        break;
                    case 3:
                        message.created = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        message.memo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractSummary {
            return ContractSummary.deserialize(bytes);
        }
    }
    export class ListTransactionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contracts?: ContractSummary[];
            totalContracts?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contracts" in data && data.contracts != undefined) {
                    this.contracts = data.contracts;
                }
                if ("totalContracts" in data && data.totalContracts != undefined) {
                    this.totalContracts = data.totalContracts;
                }
            }
        }
        get contracts() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractSummary, 1) as ContractSummary[];
        }
        set contracts(value: ContractSummary[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalContracts() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalContracts(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            contracts?: ReturnType<typeof ContractSummary.prototype.toObject>[];
            totalContracts?: number;
        }): ListTransactionsResponse {
            const message = new ListTransactionsResponse({});
            if (data.contracts != null) {
                message.contracts = data.contracts.map(item => ContractSummary.fromObject(item));
            }
            if (data.totalContracts != null) {
                message.totalContracts = data.totalContracts;
            }
            return message;
        }
        toObject() {
            const data: {
                contracts?: ReturnType<typeof ContractSummary.prototype.toObject>[];
                totalContracts?: number;
            } = {};
            if (this.contracts != null) {
                data.contracts = this.contracts.map((item: ContractSummary) => item.toObject());
            }
            if (this.totalContracts != null) {
                data.totalContracts = this.totalContracts;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contracts.length)
                writer.writeRepeatedMessage(1, this.contracts, (item: ContractSummary) => item.serialize(writer));
            if (this.totalContracts != 0)
                writer.writeUint32(2, this.totalContracts);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTransactionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTransactionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contracts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContractSummary.deserialize(reader), ContractSummary));
                        break;
                    case 2:
                        message.totalContracts = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTransactionsResponse {
            return ListTransactionsResponse.deserialize(bytes);
        }
    }
    export class BalanceDetail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance?: WalletBalance;
            kind?: BalanceDetail.Kind;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
            }
        }
        get balance() {
            return pb_1.Message.getWrapperField(this, WalletBalance, 1) as WalletBalance;
        }
        set balance(value: WalletBalance) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_balance() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 2, BalanceDetail.Kind.KIND_AVAILABLE) as BalanceDetail.Kind;
        }
        set kind(value: BalanceDetail.Kind) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            balance?: ReturnType<typeof WalletBalance.prototype.toObject>;
            kind?: BalanceDetail.Kind;
        }): BalanceDetail {
            const message = new BalanceDetail({});
            if (data.balance != null) {
                message.balance = WalletBalance.fromObject(data.balance);
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: ReturnType<typeof WalletBalance.prototype.toObject>;
                kind?: BalanceDetail.Kind;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance.toObject();
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_balance)
                writer.writeMessage(1, this.balance, () => this.balance.serialize(writer));
            if (this.kind != BalanceDetail.Kind.KIND_AVAILABLE)
                writer.writeEnum(2, this.kind);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BalanceDetail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BalanceDetail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balance, () => message.balance = WalletBalance.deserialize(reader));
                        break;
                    case 2:
                        message.kind = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BalanceDetail {
            return BalanceDetail.deserialize(bytes);
        }
    }
    export namespace BalanceDetail {
        export enum Kind {
            KIND_AVAILABLE = 0,
            KIND_RESERVED = 1
        }
    }
    export class ListWalletBalanceDetailsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            api_key?: string;
        }): ListWalletBalanceDetailsRequest {
            const message = new ListWalletBalanceDetailsRequest({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                api_key?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWalletBalanceDetailsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWalletBalanceDetailsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWalletBalanceDetailsRequest {
            return ListWalletBalanceDetailsRequest.deserialize(bytes);
        }
    }
    export class ListWalletBalanceDetailsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balances?: BalanceDetail[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
            }
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, BalanceDetail, 1) as BalanceDetail[];
        }
        set balances(value: BalanceDetail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            balances?: ReturnType<typeof BalanceDetail.prototype.toObject>[];
        }): ListWalletBalanceDetailsResponse {
            const message = new ListWalletBalanceDetailsResponse({});
            if (data.balances != null) {
                message.balances = data.balances.map(item => BalanceDetail.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                balances?: ReturnType<typeof BalanceDetail.prototype.toObject>[];
            } = {};
            if (this.balances != null) {
                data.balances = this.balances.map((item: BalanceDetail) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balances.length)
                writer.writeRepeatedMessage(1, this.balances, (item: BalanceDetail) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWalletBalanceDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWalletBalanceDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BalanceDetail.deserialize(reader), BalanceDetail));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWalletBalanceDetailsResponse {
            return ListWalletBalanceDetailsResponse.deserialize(bytes);
        }
    }
    export class GetTransactionDetailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            api_key?: string;
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            api_key?: string;
            uetr?: string;
        }): GetTransactionDetailRequest {
            const message = new GetTransactionDetailRequest({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                api_key?: string;
                uetr?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.uetr.length)
                writer.writeString(3, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionDetailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionDetailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionDetailRequest {
            return GetTransactionDetailRequest.deserialize(bytes);
        }
    }
    export class GetTransactionDetailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_type?: string;
            commitments?: dependency_2.common.Commitment[];
            created?: string;
            hash_presenter?: string;
            hash?: Uint8Array;
            expiration?: string;
            memo?: string;
            log?: GetTransactionDetailResponse.LogEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_type" in data && data.contract_type != undefined) {
                    this.contract_type = data.contract_type;
                }
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("hash_presenter" in data && data.hash_presenter != undefined) {
                    this.hash_presenter = data.hash_presenter;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("expiration" in data && data.expiration != undefined) {
                    this.expiration = data.expiration;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
            }
        }
        get contract_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Commitment, 2) as dependency_2.common.Commitment[];
        }
        set commitments(value: dependency_2.common.Commitment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set created(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get hash_presenter() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set hash_presenter(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get expiration() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set expiration(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get log() {
            return pb_1.Message.getRepeatedWrapperField(this, GetTransactionDetailResponse.LogEntry, 9) as GetTransactionDetailResponse.LogEntry[];
        }
        set log(value: GetTransactionDetailResponse.LogEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            contract_type?: string;
            commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
            created?: string;
            hash_presenter?: string;
            hash?: Uint8Array;
            expiration?: string;
            memo?: string;
            log?: ReturnType<typeof GetTransactionDetailResponse.LogEntry.prototype.toObject>[];
        }): GetTransactionDetailResponse {
            const message = new GetTransactionDetailResponse({});
            if (data.contract_type != null) {
                message.contract_type = data.contract_type;
            }
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_2.common.Commitment.fromObject(item));
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.hash_presenter != null) {
                message.hash_presenter = data.hash_presenter;
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.expiration != null) {
                message.expiration = data.expiration;
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            if (data.log != null) {
                message.log = data.log.map(item => GetTransactionDetailResponse.LogEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                contract_type?: string;
                commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
                created?: string;
                hash_presenter?: string;
                hash?: Uint8Array;
                expiration?: string;
                memo?: string;
                log?: ReturnType<typeof GetTransactionDetailResponse.LogEntry.prototype.toObject>[];
            } = {};
            if (this.contract_type != null) {
                data.contract_type = this.contract_type;
            }
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_2.common.Commitment) => item.toObject());
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.hash_presenter != null) {
                data.hash_presenter = this.hash_presenter;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.expiration != null) {
                data.expiration = this.expiration;
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            if (this.log != null) {
                data.log = this.log.map((item: GetTransactionDetailResponse.LogEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_type.length)
                writer.writeString(1, this.contract_type);
            if (this.commitments.length)
                writer.writeRepeatedMessage(2, this.commitments, (item: dependency_2.common.Commitment) => item.serialize(writer));
            if (this.created.length)
                writer.writeString(4, this.created);
            if (this.hash_presenter.length)
                writer.writeString(5, this.hash_presenter);
            if (this.hash.length)
                writer.writeBytes(6, this.hash);
            if (this.expiration.length)
                writer.writeString(7, this.expiration);
            if (this.memo.length)
                writer.writeString(8, this.memo);
            if (this.log.length)
                writer.writeRepeatedMessage(9, this.log, (item: GetTransactionDetailResponse.LogEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionDetailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionDetailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.common.Commitment.deserialize(reader), dependency_2.common.Commitment));
                        break;
                    case 4:
                        message.created = reader.readString();
                        break;
                    case 5:
                        message.hash_presenter = reader.readString();
                        break;
                    case 6:
                        message.hash = reader.readBytes();
                        break;
                    case 7:
                        message.expiration = reader.readString();
                        break;
                    case 8:
                        message.memo = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.log, () => pb_1.Message.addToRepeatedWrapperField(message, 9, GetTransactionDetailResponse.LogEntry.deserialize(reader), GetTransactionDetailResponse.LogEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionDetailResponse {
            return GetTransactionDetailResponse.deserialize(bytes);
        }
    }
    export namespace GetTransactionDetailResponse {
        export class LogEntry extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                sender?: string;
                receiver?: string;
                amount?: dependency_1.common.Amount;
                timestamp?: string;
                kind?: string;
                state?: string;
                event?: string;
                promissory_id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("sender" in data && data.sender != undefined) {
                        this.sender = data.sender;
                    }
                    if ("receiver" in data && data.receiver != undefined) {
                        this.receiver = data.receiver;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("kind" in data && data.kind != undefined) {
                        this.kind = data.kind;
                    }
                    if ("state" in data && data.state != undefined) {
                        this.state = data.state;
                    }
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                    if ("promissory_id" in data && data.promissory_id != undefined) {
                        this.promissory_id = data.promissory_id;
                    }
                }
            }
            get sender() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set sender(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get receiver() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set receiver(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get amount() {
                return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 3) as dependency_1.common.Amount;
            }
            set amount(value: dependency_1.common.Amount) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_amount() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set timestamp(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get kind() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set kind(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get state() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set state(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get event() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set event(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get promissory_id() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set promissory_id(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                sender?: string;
                receiver?: string;
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                timestamp?: string;
                kind?: string;
                state?: string;
                event?: string;
                promissory_id?: string;
            }): LogEntry {
                const message = new LogEntry({});
                if (data.sender != null) {
                    message.sender = data.sender;
                }
                if (data.receiver != null) {
                    message.receiver = data.receiver;
                }
                if (data.amount != null) {
                    message.amount = dependency_1.common.Amount.fromObject(data.amount);
                }
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.kind != null) {
                    message.kind = data.kind;
                }
                if (data.state != null) {
                    message.state = data.state;
                }
                if (data.event != null) {
                    message.event = data.event;
                }
                if (data.promissory_id != null) {
                    message.promissory_id = data.promissory_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    sender?: string;
                    receiver?: string;
                    amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                    timestamp?: string;
                    kind?: string;
                    state?: string;
                    event?: string;
                    promissory_id?: string;
                } = {};
                if (this.sender != null) {
                    data.sender = this.sender;
                }
                if (this.receiver != null) {
                    data.receiver = this.receiver;
                }
                if (this.amount != null) {
                    data.amount = this.amount.toObject();
                }
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.kind != null) {
                    data.kind = this.kind;
                }
                if (this.state != null) {
                    data.state = this.state;
                }
                if (this.event != null) {
                    data.event = this.event;
                }
                if (this.promissory_id != null) {
                    data.promissory_id = this.promissory_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.sender.length)
                    writer.writeString(1, this.sender);
                if (this.receiver.length)
                    writer.writeString(2, this.receiver);
                if (this.has_amount)
                    writer.writeMessage(3, this.amount, () => this.amount.serialize(writer));
                if (this.timestamp.length)
                    writer.writeString(4, this.timestamp);
                if (this.kind.length)
                    writer.writeString(5, this.kind);
                if (this.state.length)
                    writer.writeString(6, this.state);
                if (this.event.length)
                    writer.writeString(7, this.event);
                if (this.promissory_id.length)
                    writer.writeString(8, this.promissory_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogEntry {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogEntry();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.sender = reader.readString();
                            break;
                        case 2:
                            message.receiver = reader.readString();
                            break;
                        case 3:
                            reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                            break;
                        case 4:
                            message.timestamp = reader.readString();
                            break;
                        case 5:
                            message.kind = reader.readString();
                            break;
                        case 6:
                            message.state = reader.readString();
                            break;
                        case 7:
                            message.event = reader.readString();
                            break;
                        case 8:
                            message.promissory_id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LogEntry {
                return LogEntry.deserialize(bytes);
            }
        }
    }
    export class PrepareAtomicAssetSwapRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            wallet_id?: string;
            amount?: dependency_1.common.Amount;
            respondent?: string;
            respondent_amount?: dependency_1.common.Amount;
            memo?: string;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("respondent" in data && data.respondent != undefined) {
                    this.respondent = data.respondent;
                }
                if ("respondent_amount" in data && data.respondent_amount != undefined) {
                    this.respondent_amount = data.respondent_amount;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 3) as dependency_1.common.Amount;
        }
        set amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get respondent() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set respondent(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get respondent_amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 5) as dependency_1.common.Amount;
        }
        set respondent_amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_respondent_amount() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            api_key?: string;
            wallet_id?: string;
            amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            respondent?: string;
            respondent_amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            memo?: string;
            timeout?: number;
        }): PrepareAtomicAssetSwapRequest {
            const message = new PrepareAtomicAssetSwapRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.amount != null) {
                message.amount = dependency_1.common.Amount.fromObject(data.amount);
            }
            if (data.respondent != null) {
                message.respondent = data.respondent;
            }
            if (data.respondent_amount != null) {
                message.respondent_amount = dependency_1.common.Amount.fromObject(data.respondent_amount);
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                wallet_id?: string;
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                respondent?: string;
                respondent_amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                memo?: string;
                timeout?: number;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.respondent != null) {
                data.respondent = this.respondent;
            }
            if (this.respondent_amount != null) {
                data.respondent_amount = this.respondent_amount.toObject();
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.wallet_id.length)
                writer.writeString(2, this.wallet_id);
            if (this.has_amount)
                writer.writeMessage(3, this.amount, () => this.amount.serialize(writer));
            if (this.respondent.length)
                writer.writeString(4, this.respondent);
            if (this.has_respondent_amount)
                writer.writeMessage(5, this.respondent_amount, () => this.respondent_amount.serialize(writer));
            if (this.memo.length)
                writer.writeString(6, this.memo);
            if (this.timeout != 0)
                writer.writeUint32(7, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareAtomicAssetSwapRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareAtomicAssetSwapRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.wallet_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 4:
                        message.respondent = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.respondent_amount, () => message.respondent_amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 6:
                        message.memo = reader.readString();
                        break;
                    case 7:
                        message.timeout = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareAtomicAssetSwapRequest {
            return PrepareAtomicAssetSwapRequest.deserialize(bytes);
        }
    }
    export class PrepareAtomicAssetSwapResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: PrepareAtomicAssetSwapResponse.Status;
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, PrepareAtomicAssetSwapResponse.Status.UNSPECIFIED) as PrepareAtomicAssetSwapResponse.Status;
        }
        set status(value: PrepareAtomicAssetSwapResponse.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: PrepareAtomicAssetSwapResponse.Status;
            uetr?: string;
        }): PrepareAtomicAssetSwapResponse {
            const message = new PrepareAtomicAssetSwapResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: PrepareAtomicAssetSwapResponse.Status;
                uetr?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != PrepareAtomicAssetSwapResponse.Status.UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.uetr.length)
                writer.writeString(2, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareAtomicAssetSwapResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareAtomicAssetSwapResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareAtomicAssetSwapResponse {
            return PrepareAtomicAssetSwapResponse.deserialize(bytes);
        }
    }
    export namespace PrepareAtomicAssetSwapResponse {
        export enum Status {
            UNSPECIFIED = 0,
            SUCCESS = 1,
            FAILURE = 2
        }
    }
    export class PrepareCrossBorderPaymentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            wallet_id?: string;
            treasury?: string;
            amount?: dependency_1.common.Amount;
            respondent?: string;
            respondent_amount?: dependency_1.common.Amount;
            memo?: string;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("treasury" in data && data.treasury != undefined) {
                    this.treasury = data.treasury;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("respondent" in data && data.respondent != undefined) {
                    this.respondent = data.respondent;
                }
                if ("respondent_amount" in data && data.respondent_amount != undefined) {
                    this.respondent_amount = data.respondent_amount;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get treasury() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set treasury(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 4) as dependency_1.common.Amount;
        }
        set amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get respondent() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set respondent(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get respondent_amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 6) as dependency_1.common.Amount;
        }
        set respondent_amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_respondent_amount() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            api_key?: string;
            wallet_id?: string;
            treasury?: string;
            amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            respondent?: string;
            respondent_amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            memo?: string;
            timeout?: number;
        }): PrepareCrossBorderPaymentRequest {
            const message = new PrepareCrossBorderPaymentRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.treasury != null) {
                message.treasury = data.treasury;
            }
            if (data.amount != null) {
                message.amount = dependency_1.common.Amount.fromObject(data.amount);
            }
            if (data.respondent != null) {
                message.respondent = data.respondent;
            }
            if (data.respondent_amount != null) {
                message.respondent_amount = dependency_1.common.Amount.fromObject(data.respondent_amount);
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                wallet_id?: string;
                treasury?: string;
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                respondent?: string;
                respondent_amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                memo?: string;
                timeout?: number;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.treasury != null) {
                data.treasury = this.treasury;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.respondent != null) {
                data.respondent = this.respondent;
            }
            if (this.respondent_amount != null) {
                data.respondent_amount = this.respondent_amount.toObject();
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.wallet_id.length)
                writer.writeString(2, this.wallet_id);
            if (this.treasury.length)
                writer.writeString(3, this.treasury);
            if (this.has_amount)
                writer.writeMessage(4, this.amount, () => this.amount.serialize(writer));
            if (this.respondent.length)
                writer.writeString(5, this.respondent);
            if (this.has_respondent_amount)
                writer.writeMessage(6, this.respondent_amount, () => this.respondent_amount.serialize(writer));
            if (this.memo.length)
                writer.writeString(7, this.memo);
            if (this.timeout != 0)
                writer.writeUint32(8, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareCrossBorderPaymentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareCrossBorderPaymentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.wallet_id = reader.readString();
                        break;
                    case 3:
                        message.treasury = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 5:
                        message.respondent = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.respondent_amount, () => message.respondent_amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 7:
                        message.memo = reader.readString();
                        break;
                    case 8:
                        message.timeout = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareCrossBorderPaymentRequest {
            return PrepareCrossBorderPaymentRequest.deserialize(bytes);
        }
    }
    export class PrepareCrossBorderPaymentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: PrepareCrossBorderPaymentResponse.Status;
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, PrepareCrossBorderPaymentResponse.Status.UNSPECIFIED) as PrepareCrossBorderPaymentResponse.Status;
        }
        set status(value: PrepareCrossBorderPaymentResponse.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: PrepareCrossBorderPaymentResponse.Status;
            uetr?: string;
        }): PrepareCrossBorderPaymentResponse {
            const message = new PrepareCrossBorderPaymentResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: PrepareCrossBorderPaymentResponse.Status;
                uetr?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != PrepareCrossBorderPaymentResponse.Status.UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.uetr.length)
                writer.writeString(2, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareCrossBorderPaymentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareCrossBorderPaymentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareCrossBorderPaymentResponse {
            return PrepareCrossBorderPaymentResponse.deserialize(bytes);
        }
    }
    export namespace PrepareCrossBorderPaymentResponse {
        export enum Status {
            UNSPECIFIED = 0,
            SUCCESS = 1,
            FAILURE = 2
        }
    }
    export class PreparePaymentWithImplicitFundsChangeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            recipient?: string;
            amount?: dependency_1.common.Amount;
            user_reference?: string;
            wallet_id?: string;
            api_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("user_reference" in data && data.user_reference != undefined) {
                    this.user_reference = data.user_reference;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get recipient() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 2) as dependency_1.common.Amount;
        }
        set amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_reference() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_reference(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            recipient?: string;
            amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            user_reference?: string;
            wallet_id?: string;
            api_key?: string;
        }): PreparePaymentWithImplicitFundsChangeRequest {
            const message = new PreparePaymentWithImplicitFundsChangeRequest({});
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.amount != null) {
                message.amount = dependency_1.common.Amount.fromObject(data.amount);
            }
            if (data.user_reference != null) {
                message.user_reference = data.user_reference;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            return message;
        }
        toObject() {
            const data: {
                recipient?: string;
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                user_reference?: string;
                wallet_id?: string;
                api_key?: string;
            } = {};
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.user_reference != null) {
                data.user_reference = this.user_reference;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.recipient.length)
                writer.writeString(1, this.recipient);
            if (this.has_amount)
                writer.writeMessage(2, this.amount, () => this.amount.serialize(writer));
            if (this.user_reference.length)
                writer.writeString(3, this.user_reference);
            if (this.wallet_id.length)
                writer.writeString(4, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(5, this.api_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreparePaymentWithImplicitFundsChangeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreparePaymentWithImplicitFundsChangeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.recipient = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 3:
                        message.user_reference = reader.readString();
                        break;
                    case 4:
                        message.wallet_id = reader.readString();
                        break;
                    case 5:
                        message.api_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreparePaymentWithImplicitFundsChangeRequest {
            return PreparePaymentWithImplicitFundsChangeRequest.deserialize(bytes);
        }
    }
    export class PreparePaymentWithImplicitFundsChangeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: PreparePaymentWithImplicitFundsChangeResponse.Status;
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, PreparePaymentWithImplicitFundsChangeResponse.Status.UNSPECIFIED) as PreparePaymentWithImplicitFundsChangeResponse.Status;
        }
        set status(value: PreparePaymentWithImplicitFundsChangeResponse.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: PreparePaymentWithImplicitFundsChangeResponse.Status;
            uetr?: string;
        }): PreparePaymentWithImplicitFundsChangeResponse {
            const message = new PreparePaymentWithImplicitFundsChangeResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: PreparePaymentWithImplicitFundsChangeResponse.Status;
                uetr?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != PreparePaymentWithImplicitFundsChangeResponse.Status.UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.uetr.length)
                writer.writeString(2, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreparePaymentWithImplicitFundsChangeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreparePaymentWithImplicitFundsChangeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreparePaymentWithImplicitFundsChangeResponse {
            return PreparePaymentWithImplicitFundsChangeResponse.deserialize(bytes);
        }
    }
    export namespace PreparePaymentWithImplicitFundsChangeResponse {
        export enum Status {
            UNSPECIFIED = 0,
            SUCCESS = 1,
            FAILURE = 2,
            INSUFFICIENT_FUNDS = 3
        }
    }
    export class ResumePausedTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
            api_key?: string;
            uetr?: string;
            accept?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
                if ("accept" in data && data.accept != undefined) {
                    this.accept = data.accept;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get accept() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set accept(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            wallet_id?: string;
            api_key?: string;
            uetr?: string;
            accept?: boolean;
        }): ResumePausedTransactionRequest {
            const message = new ResumePausedTransactionRequest({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            if (data.accept != null) {
                message.accept = data.accept;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
                api_key?: string;
                uetr?: string;
                accept?: boolean;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            if (this.accept != null) {
                data.accept = this.accept;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.uetr.length)
                writer.writeString(3, this.uetr);
            if (this.accept != false)
                writer.writeBool(4, this.accept);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResumePausedTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResumePausedTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        message.uetr = reader.readString();
                        break;
                    case 4:
                        message.accept = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResumePausedTransactionRequest {
            return ResumePausedTransactionRequest.deserialize(bytes);
        }
    }
    export class ResumePausedTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ResumePausedTransactionResponse {
            const message = new ResumePausedTransactionResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResumePausedTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResumePausedTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResumePausedTransactionResponse {
            return ResumePausedTransactionResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWalletServiceService {
        static definition = {
            CreateOwner: {
                path: "/wallet_api.v1.WalletService/CreateOwner",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateOwnerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateOwnerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateOwnerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateOwnerResponse.deserialize(new Uint8Array(bytes))
            },
            CreateWallet: {
                path: "/wallet_api.v1.WalletService/CreateWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateWalletResponse.deserialize(new Uint8Array(bytes))
            },
            ListWallets: {
                path: "/wallet_api.v1.WalletService/ListWallets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListWalletsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListWalletsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListWalletsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListWalletsResponse.deserialize(new Uint8Array(bytes))
            },
            ListAssetFiles: {
                path: "/wallet_api.v1.WalletService/ListAssetFiles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListAssetFilesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListAssetFilesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListAssetFilesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListAssetFilesResponse.deserialize(new Uint8Array(bytes))
            },
            ListWalletBalances: {
                path: "/wallet_api.v1.WalletService/ListWalletBalances",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListWalletBalancesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListWalletBalancesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListWalletBalancesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListWalletBalancesResponse.deserialize(new Uint8Array(bytes))
            },
            ListCredentials: {
                path: "/wallet_api.v1.WalletService/ListCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListCredentialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListCredentialsResponse.deserialize(new Uint8Array(bytes))
            },
            AddCredential: {
                path: "/wallet_api.v1.WalletService/AddCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            AssociateWallet: {
                path: "/wallet_api.v1.WalletService/AssociateWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssociateWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssociateWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssociateWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssociateWalletResponse.deserialize(new Uint8Array(bytes))
            },
            RequestPresentation: {
                path: "/wallet_api.v1.WalletService/RequestPresentation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestPresentationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestPresentationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RequestPresentationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RequestPresentationResponse.deserialize(new Uint8Array(bytes))
            },
            ListWalletBalanceDetails: {
                path: "/wallet_api.v1.WalletService/ListWalletBalanceDetails",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListWalletBalanceDetailsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListWalletBalanceDetailsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListWalletBalanceDetailsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListWalletBalanceDetailsResponse.deserialize(new Uint8Array(bytes))
            },
            ListTransactions: {
                path: "/wallet_api.v1.WalletService/ListTransactions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListTransactionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListTransactionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListTransactionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListTransactionsResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionDetail: {
                path: "/wallet_api.v1.WalletService/GetTransactionDetail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionDetailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionDetailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTransactionDetailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTransactionDetailResponse.deserialize(new Uint8Array(bytes))
            },
            PrepareTransaction: {
                path: "/wallet_api.v1.WalletService/PrepareTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrepareTransactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrepareTransactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PrepareTransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PrepareTransactionResponse.deserialize(new Uint8Array(bytes))
            },
            PrepareAtomicAssetSwap: {
                path: "/wallet_api.v1.WalletService/PrepareAtomicAssetSwap",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrepareAtomicAssetSwapRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrepareAtomicAssetSwapRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PrepareAtomicAssetSwapResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PrepareAtomicAssetSwapResponse.deserialize(new Uint8Array(bytes))
            },
            PrepareCrossBorderPayment: {
                path: "/wallet_api.v1.WalletService/PrepareCrossBorderPayment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrepareCrossBorderPaymentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrepareCrossBorderPaymentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PrepareCrossBorderPaymentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PrepareCrossBorderPaymentResponse.deserialize(new Uint8Array(bytes))
            },
            PrepareFundsChange: {
                path: "/wallet_api.v1.WalletService/PrepareFundsChange",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrepareFundsChangeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrepareFundsChangeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PrepareFundsChangeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PrepareFundsChangeResponse.deserialize(new Uint8Array(bytes))
            },
            PreparePaymentWithImplicitFundsChange: {
                path: "/wallet_api.v1.WalletService/PreparePaymentWithImplicitFundsChange",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PreparePaymentWithImplicitFundsChangeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PreparePaymentWithImplicitFundsChangeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PreparePaymentWithImplicitFundsChangeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PreparePaymentWithImplicitFundsChangeResponse.deserialize(new Uint8Array(bytes))
            },
            ResumePausedTransaction: {
                path: "/wallet_api.v1.WalletService/ResumePausedTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResumePausedTransactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResumePausedTransactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResumePausedTransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResumePausedTransactionResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateOwner(call: grpc_1.ServerUnaryCall<CreateOwnerRequest, CreateOwnerResponse>, callback: grpc_1.sendUnaryData<CreateOwnerResponse>): void;
        abstract CreateWallet(call: grpc_1.ServerUnaryCall<CreateWalletRequest, CreateWalletResponse>, callback: grpc_1.sendUnaryData<CreateWalletResponse>): void;
        abstract ListWallets(call: grpc_1.ServerUnaryCall<ListWalletsRequest, ListWalletsResponse>, callback: grpc_1.sendUnaryData<ListWalletsResponse>): void;
        abstract ListAssetFiles(call: grpc_1.ServerUnaryCall<ListAssetFilesRequest, ListAssetFilesResponse>, callback: grpc_1.sendUnaryData<ListAssetFilesResponse>): void;
        abstract ListWalletBalances(call: grpc_1.ServerUnaryCall<ListWalletBalancesRequest, ListWalletBalancesResponse>, callback: grpc_1.sendUnaryData<ListWalletBalancesResponse>): void;
        abstract ListCredentials(call: grpc_1.ServerUnaryCall<ListCredentialsRequest, ListCredentialsResponse>, callback: grpc_1.sendUnaryData<ListCredentialsResponse>): void;
        abstract AddCredential(call: grpc_1.ServerUnaryCall<AddCredentialRequest, AddCredentialResponse>, callback: grpc_1.sendUnaryData<AddCredentialResponse>): void;
        abstract AssociateWallet(call: grpc_1.ServerUnaryCall<AssociateWalletRequest, AssociateWalletResponse>, callback: grpc_1.sendUnaryData<AssociateWalletResponse>): void;
        abstract RequestPresentation(call: grpc_1.ServerUnaryCall<RequestPresentationRequest, RequestPresentationResponse>, callback: grpc_1.sendUnaryData<RequestPresentationResponse>): void;
        abstract ListWalletBalanceDetails(call: grpc_1.ServerUnaryCall<ListWalletBalanceDetailsRequest, ListWalletBalanceDetailsResponse>, callback: grpc_1.sendUnaryData<ListWalletBalanceDetailsResponse>): void;
        abstract ListTransactions(call: grpc_1.ServerUnaryCall<ListTransactionsRequest, ListTransactionsResponse>, callback: grpc_1.sendUnaryData<ListTransactionsResponse>): void;
        abstract GetTransactionDetail(call: grpc_1.ServerUnaryCall<GetTransactionDetailRequest, GetTransactionDetailResponse>, callback: grpc_1.sendUnaryData<GetTransactionDetailResponse>): void;
        abstract PrepareTransaction(call: grpc_1.ServerUnaryCall<PrepareTransactionRequest, PrepareTransactionResponse>, callback: grpc_1.sendUnaryData<PrepareTransactionResponse>): void;
        abstract PrepareAtomicAssetSwap(call: grpc_1.ServerUnaryCall<PrepareAtomicAssetSwapRequest, PrepareAtomicAssetSwapResponse>, callback: grpc_1.sendUnaryData<PrepareAtomicAssetSwapResponse>): void;
        abstract PrepareCrossBorderPayment(call: grpc_1.ServerUnaryCall<PrepareCrossBorderPaymentRequest, PrepareCrossBorderPaymentResponse>, callback: grpc_1.sendUnaryData<PrepareCrossBorderPaymentResponse>): void;
        abstract PrepareFundsChange(call: grpc_1.ServerUnaryCall<PrepareFundsChangeRequest, PrepareFundsChangeResponse>, callback: grpc_1.sendUnaryData<PrepareFundsChangeResponse>): void;
        abstract PreparePaymentWithImplicitFundsChange(call: grpc_1.ServerUnaryCall<PreparePaymentWithImplicitFundsChangeRequest, PreparePaymentWithImplicitFundsChangeResponse>, callback: grpc_1.sendUnaryData<PreparePaymentWithImplicitFundsChangeResponse>): void;
        abstract ResumePausedTransaction(call: grpc_1.ServerUnaryCall<ResumePausedTransactionRequest, ResumePausedTransactionResponse>, callback: grpc_1.sendUnaryData<ResumePausedTransactionResponse>): void;
    }
    export class WalletServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedWalletServiceService.definition, "WalletService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateOwner: GrpcUnaryServiceInterface<CreateOwnerRequest, CreateOwnerResponse> = (message: CreateOwnerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateOwnerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateOwnerResponse>, callback?: grpc_1.requestCallback<CreateOwnerResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateOwner(message, metadata, options, callback);
        };
        CreateWallet: GrpcUnaryServiceInterface<CreateWalletRequest, CreateWalletResponse> = (message: CreateWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateWalletResponse>, callback?: grpc_1.requestCallback<CreateWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateWallet(message, metadata, options, callback);
        };
        ListWallets: GrpcUnaryServiceInterface<ListWalletsRequest, ListWalletsResponse> = (message: ListWalletsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListWalletsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListWalletsResponse>, callback?: grpc_1.requestCallback<ListWalletsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListWallets(message, metadata, options, callback);
        };
        ListAssetFiles: GrpcUnaryServiceInterface<ListAssetFilesRequest, ListAssetFilesResponse> = (message: ListAssetFilesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListAssetFilesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListAssetFilesResponse>, callback?: grpc_1.requestCallback<ListAssetFilesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListAssetFiles(message, metadata, options, callback);
        };
        ListWalletBalances: GrpcUnaryServiceInterface<ListWalletBalancesRequest, ListWalletBalancesResponse> = (message: ListWalletBalancesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListWalletBalancesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListWalletBalancesResponse>, callback?: grpc_1.requestCallback<ListWalletBalancesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListWalletBalances(message, metadata, options, callback);
        };
        ListCredentials: GrpcUnaryServiceInterface<ListCredentialsRequest, ListCredentialsResponse> = (message: ListCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListCredentialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListCredentialsResponse>, callback?: grpc_1.requestCallback<ListCredentialsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListCredentials(message, metadata, options, callback);
        };
        AddCredential: GrpcUnaryServiceInterface<AddCredentialRequest, AddCredentialResponse> = (message: AddCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddCredentialResponse>, callback?: grpc_1.requestCallback<AddCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.AddCredential(message, metadata, options, callback);
        };
        AssociateWallet: GrpcUnaryServiceInterface<AssociateWalletRequest, AssociateWalletResponse> = (message: AssociateWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssociateWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssociateWalletResponse>, callback?: grpc_1.requestCallback<AssociateWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.AssociateWallet(message, metadata, options, callback);
        };
        RequestPresentation: GrpcUnaryServiceInterface<RequestPresentationRequest, RequestPresentationResponse> = (message: RequestPresentationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RequestPresentationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RequestPresentationResponse>, callback?: grpc_1.requestCallback<RequestPresentationResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestPresentation(message, metadata, options, callback);
        };
        ListWalletBalanceDetails: GrpcUnaryServiceInterface<ListWalletBalanceDetailsRequest, ListWalletBalanceDetailsResponse> = (message: ListWalletBalanceDetailsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListWalletBalanceDetailsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListWalletBalanceDetailsResponse>, callback?: grpc_1.requestCallback<ListWalletBalanceDetailsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListWalletBalanceDetails(message, metadata, options, callback);
        };
        ListTransactions: GrpcUnaryServiceInterface<ListTransactionsRequest, ListTransactionsResponse> = (message: ListTransactionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListTransactionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListTransactionsResponse>, callback?: grpc_1.requestCallback<ListTransactionsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListTransactions(message, metadata, options, callback);
        };
        GetTransactionDetail: GrpcUnaryServiceInterface<GetTransactionDetailRequest, GetTransactionDetailResponse> = (message: GetTransactionDetailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionDetailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionDetailResponse>, callback?: grpc_1.requestCallback<GetTransactionDetailResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionDetail(message, metadata, options, callback);
        };
        PrepareTransaction: GrpcUnaryServiceInterface<PrepareTransactionRequest, PrepareTransactionResponse> = (message: PrepareTransactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrepareTransactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrepareTransactionResponse>, callback?: grpc_1.requestCallback<PrepareTransactionResponse>): grpc_1.ClientUnaryCall => {
            return super.PrepareTransaction(message, metadata, options, callback);
        };
        PrepareAtomicAssetSwap: GrpcUnaryServiceInterface<PrepareAtomicAssetSwapRequest, PrepareAtomicAssetSwapResponse> = (message: PrepareAtomicAssetSwapRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrepareAtomicAssetSwapResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrepareAtomicAssetSwapResponse>, callback?: grpc_1.requestCallback<PrepareAtomicAssetSwapResponse>): grpc_1.ClientUnaryCall => {
            return super.PrepareAtomicAssetSwap(message, metadata, options, callback);
        };
        PrepareCrossBorderPayment: GrpcUnaryServiceInterface<PrepareCrossBorderPaymentRequest, PrepareCrossBorderPaymentResponse> = (message: PrepareCrossBorderPaymentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrepareCrossBorderPaymentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrepareCrossBorderPaymentResponse>, callback?: grpc_1.requestCallback<PrepareCrossBorderPaymentResponse>): grpc_1.ClientUnaryCall => {
            return super.PrepareCrossBorderPayment(message, metadata, options, callback);
        };
        PrepareFundsChange: GrpcUnaryServiceInterface<PrepareFundsChangeRequest, PrepareFundsChangeResponse> = (message: PrepareFundsChangeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrepareFundsChangeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrepareFundsChangeResponse>, callback?: grpc_1.requestCallback<PrepareFundsChangeResponse>): grpc_1.ClientUnaryCall => {
            return super.PrepareFundsChange(message, metadata, options, callback);
        };
        PreparePaymentWithImplicitFundsChange: GrpcUnaryServiceInterface<PreparePaymentWithImplicitFundsChangeRequest, PreparePaymentWithImplicitFundsChangeResponse> = (message: PreparePaymentWithImplicitFundsChangeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PreparePaymentWithImplicitFundsChangeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PreparePaymentWithImplicitFundsChangeResponse>, callback?: grpc_1.requestCallback<PreparePaymentWithImplicitFundsChangeResponse>): grpc_1.ClientUnaryCall => {
            return super.PreparePaymentWithImplicitFundsChange(message, metadata, options, callback);
        };
        ResumePausedTransaction: GrpcUnaryServiceInterface<ResumePausedTransactionRequest, ResumePausedTransactionResponse> = (message: ResumePausedTransactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResumePausedTransactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResumePausedTransactionResponse>, callback?: grpc_1.requestCallback<ResumePausedTransactionResponse>): grpc_1.ClientUnaryCall => {
            return super.ResumePausedTransaction(message, metadata, options, callback);
        };
    }
}
