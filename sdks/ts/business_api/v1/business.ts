/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: business_api/v1/business.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/v1/common";
import * as dependency_2 from "./../../common/v1/packet";
import * as dependency_3 from "./../../common/v1/amqp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace business_api.v1 {
    export class ListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ListRequest {
            const message = new ListRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRequest {
            return ListRequest.deserialize(bytes);
        }
    }
    export class ListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set list(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            list?: string[];
        }): ListResponse {
            const message = new ListResponse({});
            if (data.list != null) {
                message.list = data.list;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: string[];
            } = {};
            if (this.list != null) {
                data.list = this.list;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedString(1, this.list);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListResponse {
            return ListResponse.deserialize(bytes);
        }
    }
    export class ClearRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ClearRequest {
            const message = new ClearRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearRequest {
            return ClearRequest.deserialize(bytes);
        }
    }
    export class ClearResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ClearResponse {
            const message = new ClearResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearResponse {
            return ClearResponse.deserialize(bytes);
        }
    }
    export class SendPayloadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            payload?: dependency_3.common.Payload;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, dependency_3.common.Payload, 1) as dependency_3.common.Payload;
        }
        set payload(value: dependency_3.common.Payload) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            payload?: ReturnType<typeof dependency_3.common.Payload.prototype.toObject>;
        }): SendPayloadRequest {
            const message = new SendPayloadRequest({});
            if (data.payload != null) {
                message.payload = dependency_3.common.Payload.fromObject(data.payload);
            }
            return message;
        }
        toObject() {
            const data: {
                payload?: ReturnType<typeof dependency_3.common.Payload.prototype.toObject>;
            } = {};
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_payload)
                writer.writeMessage(1, this.payload, () => this.payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendPayloadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendPayloadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.payload, () => message.payload = dependency_3.common.Payload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendPayloadRequest {
            return SendPayloadRequest.deserialize(bytes);
        }
    }
    export class SendPayloadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SendPayloadResponse {
            const message = new SendPayloadResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendPayloadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendPayloadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendPayloadResponse {
            return SendPayloadResponse.deserialize(bytes);
        }
    }
    export class SendNewTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            memo?: string;
            commitments?: dependency_2.common.Commitment[];
            conditions?: dependency_2.common.Condition[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
                if ("conditions" in data && data.conditions != undefined) {
                    this.conditions = data.conditions;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Commitment, 3) as dependency_2.common.Commitment[];
        }
        set commitments(value: dependency_2.common.Commitment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get conditions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Condition, 4) as dependency_2.common.Condition[];
        }
        set conditions(value: dependency_2.common.Condition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            participant?: string;
            memo?: string;
            commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
            conditions?: ReturnType<typeof dependency_2.common.Condition.prototype.toObject>[];
        }): SendNewTransactionRequest {
            const message = new SendNewTransactionRequest({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_2.common.Commitment.fromObject(item));
            }
            if (data.conditions != null) {
                message.conditions = data.conditions.map(item => dependency_2.common.Condition.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                memo?: string;
                commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
                conditions?: ReturnType<typeof dependency_2.common.Condition.prototype.toObject>[];
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_2.common.Commitment) => item.toObject());
            }
            if (this.conditions != null) {
                data.conditions = this.conditions.map((item: dependency_2.common.Condition) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.memo.length)
                writer.writeString(2, this.memo);
            if (this.commitments.length)
                writer.writeRepeatedMessage(3, this.commitments, (item: dependency_2.common.Commitment) => item.serialize(writer));
            if (this.conditions.length)
                writer.writeRepeatedMessage(4, this.conditions, (item: dependency_2.common.Condition) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendNewTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendNewTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.memo = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.common.Commitment.deserialize(reader), dependency_2.common.Commitment));
                        break;
                    case 4:
                        reader.readMessage(message.conditions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.common.Condition.deserialize(reader), dependency_2.common.Condition));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendNewTransactionRequest {
            return SendNewTransactionRequest.deserialize(bytes);
        }
    }
    export class SendNewTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
            }
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            contract_id?: string;
        }): SendNewTransactionResponse {
            const message = new SendNewTransactionResponse({});
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_id?: string;
            } = {};
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_id.length)
                writer.writeString(1, this.contract_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendNewTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendNewTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendNewTransactionResponse {
            return SendNewTransactionResponse.deserialize(bytes);
        }
    }
    export class SendProposalAckedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
            hash?: string;
            algorithm?: dependency_2.common.HashAlgorithm;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("algorithm" in data && data.algorithm != undefined) {
                    this.algorithm = data.algorithm;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get algorithm() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_2.common.HashAlgorithm.SHA256) as dependency_2.common.HashAlgorithm;
        }
        set algorithm(value: dependency_2.common.HashAlgorithm) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
            hash?: string;
            algorithm?: dependency_2.common.HashAlgorithm;
        }): SendProposalAckedRequest {
            const message = new SendProposalAckedRequest({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.algorithm != null) {
                message.algorithm = data.algorithm;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
                hash?: string;
                algorithm?: dependency_2.common.HashAlgorithm;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.algorithm != null) {
                data.algorithm = this.algorithm;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (this.hash.length)
                writer.writeString(3, this.hash);
            if (this.algorithm != dependency_2.common.HashAlgorithm.SHA256)
                writer.writeEnum(4, this.algorithm);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendProposalAckedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendProposalAckedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    case 3:
                        message.hash = reader.readString();
                        break;
                    case 4:
                        message.algorithm = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendProposalAckedRequest {
            return SendProposalAckedRequest.deserialize(bytes);
        }
    }
    export class SendProposalAckedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SendProposalAckedResponse {
            const message = new SendProposalAckedResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendProposalAckedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendProposalAckedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendProposalAckedResponse {
            return SendProposalAckedResponse.deserialize(bytes);
        }
    }
    export class SendProposalNackedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
        }): SendProposalNackedRequest {
            const message = new SendProposalNackedRequest({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendProposalNackedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendProposalNackedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendProposalNackedRequest {
            return SendProposalNackedRequest.deserialize(bytes);
        }
    }
    export class SendProposalNackedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SendProposalNackedResponse {
            const message = new SendProposalNackedResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendProposalNackedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendProposalNackedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendProposalNackedResponse {
            return SendProposalNackedResponse.deserialize(bytes);
        }
    }
    export class SendSecretRevealedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
            secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
            secret?: string;
        }): SendSecretRevealedRequest {
            const message = new SendSecretRevealedRequest({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.secret != null) {
                message.secret = data.secret;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
                secret?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.secret != null) {
                data.secret = this.secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (this.secret.length)
                writer.writeString(3, this.secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendSecretRevealedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendSecretRevealedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    case 3:
                        message.secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendSecretRevealedRequest {
            return SendSecretRevealedRequest.deserialize(bytes);
        }
    }
    export class SendSecretRevealedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SendSecretRevealedResponse {
            const message = new SendSecretRevealedResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendSecretRevealedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendSecretRevealedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendSecretRevealedResponse {
            return SendSecretRevealedResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBusinessService {
        static definition = {
            List: {
                path: "/business_api.v1.Business/List",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListResponse.deserialize(new Uint8Array(bytes))
            },
            Clear: {
                path: "/business_api.v1.Business/Clear",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ClearRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ClearRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ClearResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ClearResponse.deserialize(new Uint8Array(bytes))
            },
            SendPayload: {
                path: "/business_api.v1.Business/SendPayload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendPayloadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendPayloadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendPayloadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendPayloadResponse.deserialize(new Uint8Array(bytes))
            },
            SendNewTransaction: {
                path: "/business_api.v1.Business/SendNewTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendNewTransactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendNewTransactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendNewTransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendNewTransactionResponse.deserialize(new Uint8Array(bytes))
            },
            SendProposalAcked: {
                path: "/business_api.v1.Business/SendProposalAcked",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendProposalAckedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendProposalAckedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendProposalAckedResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendProposalAckedResponse.deserialize(new Uint8Array(bytes))
            },
            SendProposalNacked: {
                path: "/business_api.v1.Business/SendProposalNacked",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendProposalNackedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendProposalNackedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendProposalNackedResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendProposalNackedResponse.deserialize(new Uint8Array(bytes))
            },
            SendSecretRevealed: {
                path: "/business_api.v1.Business/SendSecretRevealed",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendSecretRevealedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendSecretRevealedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendSecretRevealedResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendSecretRevealedResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract List(call: grpc_1.ServerUnaryCall<ListRequest, ListResponse>, callback: grpc_1.sendUnaryData<ListResponse>): void;
        abstract Clear(call: grpc_1.ServerUnaryCall<ClearRequest, ClearResponse>, callback: grpc_1.sendUnaryData<ClearResponse>): void;
        abstract SendPayload(call: grpc_1.ServerUnaryCall<SendPayloadRequest, SendPayloadResponse>, callback: grpc_1.sendUnaryData<SendPayloadResponse>): void;
        abstract SendNewTransaction(call: grpc_1.ServerUnaryCall<SendNewTransactionRequest, SendNewTransactionResponse>, callback: grpc_1.sendUnaryData<SendNewTransactionResponse>): void;
        abstract SendProposalAcked(call: grpc_1.ServerUnaryCall<SendProposalAckedRequest, SendProposalAckedResponse>, callback: grpc_1.sendUnaryData<SendProposalAckedResponse>): void;
        abstract SendProposalNacked(call: grpc_1.ServerUnaryCall<SendProposalNackedRequest, SendProposalNackedResponse>, callback: grpc_1.sendUnaryData<SendProposalNackedResponse>): void;
        abstract SendSecretRevealed(call: grpc_1.ServerUnaryCall<SendSecretRevealedRequest, SendSecretRevealedResponse>, callback: grpc_1.sendUnaryData<SendSecretRevealedResponse>): void;
    }
    export class BusinessClient extends grpc_1.makeGenericClientConstructor(UnimplementedBusinessService.definition, "Business", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        List: GrpcUnaryServiceInterface<ListRequest, ListResponse> = (message: ListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListResponse>, callback?: grpc_1.requestCallback<ListResponse>): grpc_1.ClientUnaryCall => {
            return super.List(message, metadata, options, callback);
        };
        Clear: GrpcUnaryServiceInterface<ClearRequest, ClearResponse> = (message: ClearRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ClearResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ClearResponse>, callback?: grpc_1.requestCallback<ClearResponse>): grpc_1.ClientUnaryCall => {
            return super.Clear(message, metadata, options, callback);
        };
        SendPayload: GrpcUnaryServiceInterface<SendPayloadRequest, SendPayloadResponse> = (message: SendPayloadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendPayloadResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendPayloadResponse>, callback?: grpc_1.requestCallback<SendPayloadResponse>): grpc_1.ClientUnaryCall => {
            return super.SendPayload(message, metadata, options, callback);
        };
        SendNewTransaction: GrpcUnaryServiceInterface<SendNewTransactionRequest, SendNewTransactionResponse> = (message: SendNewTransactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendNewTransactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendNewTransactionResponse>, callback?: grpc_1.requestCallback<SendNewTransactionResponse>): grpc_1.ClientUnaryCall => {
            return super.SendNewTransaction(message, metadata, options, callback);
        };
        SendProposalAcked: GrpcUnaryServiceInterface<SendProposalAckedRequest, SendProposalAckedResponse> = (message: SendProposalAckedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendProposalAckedResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendProposalAckedResponse>, callback?: grpc_1.requestCallback<SendProposalAckedResponse>): grpc_1.ClientUnaryCall => {
            return super.SendProposalAcked(message, metadata, options, callback);
        };
        SendProposalNacked: GrpcUnaryServiceInterface<SendProposalNackedRequest, SendProposalNackedResponse> = (message: SendProposalNackedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendProposalNackedResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendProposalNackedResponse>, callback?: grpc_1.requestCallback<SendProposalNackedResponse>): grpc_1.ClientUnaryCall => {
            return super.SendProposalNacked(message, metadata, options, callback);
        };
        SendSecretRevealed: GrpcUnaryServiceInterface<SendSecretRevealedRequest, SendSecretRevealedResponse> = (message: SendSecretRevealedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendSecretRevealedResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendSecretRevealedResponse>, callback?: grpc_1.requestCallback<SendSecretRevealedResponse>): grpc_1.ClientUnaryCall => {
            return super.SendSecretRevealed(message, metadata, options, callback);
        };
    }
}
