/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: user_api/v1/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/struct";
import * as dependency_2 from "./../../google/protobuf/timestamp";
import * as dependency_3 from "./../../common/v1/common";
import * as dependency_4 from "./../../google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace user_api.v1 {
    export enum Provider {
        PROVIDER_UNSPECIFIED = 0,
        PROVIDER_GITHUB = 1,
        PROVIDER_FACEBOOK = 2,
        PROVIDER_GOOGLE = 3,
        PROVIDER_SAML = 4,
        PROVIDER_COGNITO = 5
    }
    export enum Role {
        ROLE_UNSPECIFIED = 0,
        ROLE_USER = 1,
        ROLE_ADMIN = 2
    }
    export enum ApiKeyStatus {
        API_KEY_STATUS_UNSPECIFIED = 0,
        API_KEY_STATUS_ACTIVE = 1,
        API_KEY_STATUS_INACTIVE = 2
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
            role?: Role;
            avatar?: string;
            phone?: string;
            dids?: string[];
            external_ids?: Map<string, string>;
            metadata?: dependency_1.google.protobuf.Struct;
            account?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("dids" in data && data.dids != undefined) {
                    this.dids = data.dids;
                }
                if ("external_ids" in data && data.external_ids != undefined) {
                    this.external_ids = data.external_ids;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
            if (!this.external_ids)
                this.external_ids = new Map();
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 7, Role.ROLE_UNSPECIFIED) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 7, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get dids() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set dids(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get external_ids() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set external_ids(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 12) as dependency_1.google.protobuf.Struct;
        }
        set metadata(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            uuid?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
            role?: Role;
            avatar?: string;
            phone?: string;
            dids?: string[];
            external_ids?: {
                [key: string]: string;
            };
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            account?: string;
        }): User {
            const message = new User({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.dids != null) {
                message.dids = data.dids;
            }
            if (typeof data.external_ids == "object") {
                message.external_ids = new Map(Object.entries(data.external_ids));
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Struct.fromObject(data.metadata);
            }
            if (data.account != null) {
                message.account = data.account;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                first_name?: string;
                last_name?: string;
                email?: string;
                role?: Role;
                avatar?: string;
                phone?: string;
                dids?: string[];
                external_ids?: {
                    [key: string]: string;
                };
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                account?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.dids != null) {
                data.dids = this.dids;
            }
            if (this.external_ids != null) {
                data.external_ids = (Object.fromEntries)(this.external_ids);
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.account != null) {
                data.account = this.account;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (this.first_name.length)
                writer.writeString(2, this.first_name);
            if (this.last_name.length)
                writer.writeString(3, this.last_name);
            if (this.email.length)
                writer.writeString(6, this.email);
            if (this.role != Role.ROLE_UNSPECIFIED)
                writer.writeEnum(7, this.role);
            if (this.avatar.length)
                writer.writeString(8, this.avatar);
            if (this.phone.length)
                writer.writeString(9, this.phone);
            if (this.dids.length)
                writer.writeRepeatedString(10, this.dids);
            for (const [key, value] of this.external_ids) {
                writer.writeMessage(11, this.external_ids, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_metadata)
                writer.writeMessage(12, this.metadata, () => this.metadata.serialize(writer));
            if (this.account.length)
                writer.writeString(13, this.account);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        message.first_name = reader.readString();
                        break;
                    case 3:
                        message.last_name = reader.readString();
                        break;
                    case 6:
                        message.email = reader.readString();
                        break;
                    case 7:
                        message.role = reader.readEnum();
                        break;
                    case 8:
                        message.avatar = reader.readString();
                        break;
                    case 9:
                        message.phone = reader.readString();
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.external_ids as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 13:
                        message.account = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class RegisterUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            first_name?: string;
            last_name?: string;
            password?: string;
            role?: Role;
            avatar?: string;
            phone?: string;
            account?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 6, Role.ROLE_UNSPECIFIED) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            email?: string;
            first_name?: string;
            last_name?: string;
            password?: string;
            role?: Role;
            avatar?: string;
            phone?: string;
            account?: string;
        }): RegisterUserRequest {
            const message = new RegisterUserRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                first_name?: string;
                last_name?: string;
                password?: string;
                role?: Role;
                avatar?: string;
                phone?: string;
                account?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.first_name.length)
                writer.writeString(2, this.first_name);
            if (this.last_name.length)
                writer.writeString(3, this.last_name);
            if (this.password.length)
                writer.writeString(5, this.password);
            if (this.role != Role.ROLE_UNSPECIFIED)
                writer.writeEnum(6, this.role);
            if (this.avatar.length)
                writer.writeString(7, this.avatar);
            if (this.phone.length)
                writer.writeString(8, this.phone);
            if (this.account.length)
                writer.writeString(9, this.account);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.first_name = reader.readString();
                        break;
                    case 3:
                        message.last_name = reader.readString();
                        break;
                    case 5:
                        message.password = reader.readString();
                        break;
                    case 6:
                        message.role = reader.readEnum();
                        break;
                    case 7:
                        message.avatar = reader.readString();
                        break;
                    case 8:
                        message.phone = reader.readString();
                        break;
                    case 9:
                        message.account = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterUserRequest {
            return RegisterUserRequest.deserialize(bytes);
        }
    }
    export class AuthToken extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            token_type?: string;
            expires_in?: number;
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("token_type" in data && data.token_type != undefined) {
                    this.token_type = data.token_type;
                }
                if ("expires_in" in data && data.expires_in != undefined) {
                    this.expires_in = data.expires_in;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get expires_in() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set expires_in(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            token?: string;
            token_type?: string;
            expires_in?: number;
            refresh_token?: string;
        }): AuthToken {
            const message = new AuthToken({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.token_type != null) {
                message.token_type = data.token_type;
            }
            if (data.expires_in != null) {
                message.expires_in = data.expires_in;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                token_type?: string;
                expires_in?: number;
                refresh_token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.token_type != null) {
                data.token_type = this.token_type;
            }
            if (this.expires_in != null) {
                data.expires_in = this.expires_in;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.token_type.length)
                writer.writeString(2, this.token_type);
            if (this.expires_in != 0)
                writer.writeInt32(3, this.expires_in);
            if (this.refresh_token.length)
                writer.writeString(4, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.token_type = reader.readString();
                        break;
                    case 3:
                        message.expires_in = reader.readInt32();
                        break;
                    case 4:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthToken {
            return AuthToken.deserialize(bytes);
        }
    }
    export class RegisterUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): RegisterUserResponse {
            const message = new RegisterUserResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterUserResponse {
            return RegisterUserResponse.deserialize(bytes);
        }
    }
    export class ConfirmUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email_or_phone?: string;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email_or_phone" in data && data.email_or_phone != undefined) {
                    this.email_or_phone = data.email_or_phone;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get email_or_phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email_or_phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email_or_phone?: string;
            token?: string;
        }): ConfirmUserRequest {
            const message = new ConfirmUserRequest({});
            if (data.email_or_phone != null) {
                message.email_or_phone = data.email_or_phone;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                email_or_phone?: string;
                token?: string;
            } = {};
            if (this.email_or_phone != null) {
                data.email_or_phone = this.email_or_phone;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email_or_phone.length)
                writer.writeString(1, this.email_or_phone);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfirmUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfirmUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email_or_phone = reader.readString();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfirmUserRequest {
            return ConfirmUserRequest.deserialize(bytes);
        }
    }
    export class ConfirmUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ConfirmUserResponse {
            const message = new ConfirmUserResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfirmUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfirmUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfirmUserResponse {
            return ConfirmUserResponse.deserialize(bytes);
        }
    }
    export class AuthnWithProviderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider?: Provider;
            instance_name?: string;
            request_origin?: string;
            client_state?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("instance_name" in data && data.instance_name != undefined) {
                    this.instance_name = data.instance_name;
                }
                if ("request_origin" in data && data.request_origin != undefined) {
                    this.request_origin = data.request_origin;
                }
                if ("client_state" in data && data.client_state != undefined) {
                    this.client_state = data.client_state;
                }
            }
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 1, Provider.PROVIDER_UNSPECIFIED) as Provider;
        }
        set provider(value: Provider) {
            pb_1.Message.setField(this, 1, value);
        }
        get instance_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set instance_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_origin() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_origin(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get client_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 4) as dependency_1.google.protobuf.Struct;
        }
        set client_state(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_client_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            provider?: Provider;
            instance_name?: string;
            request_origin?: string;
            client_state?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): AuthnWithProviderRequest {
            const message = new AuthnWithProviderRequest({});
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.instance_name != null) {
                message.instance_name = data.instance_name;
            }
            if (data.request_origin != null) {
                message.request_origin = data.request_origin;
            }
            if (data.client_state != null) {
                message.client_state = dependency_1.google.protobuf.Struct.fromObject(data.client_state);
            }
            return message;
        }
        toObject() {
            const data: {
                provider?: Provider;
                instance_name?: string;
                request_origin?: string;
                client_state?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.instance_name != null) {
                data.instance_name = this.instance_name;
            }
            if (this.request_origin != null) {
                data.request_origin = this.request_origin;
            }
            if (this.client_state != null) {
                data.client_state = this.client_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider != Provider.PROVIDER_UNSPECIFIED)
                writer.writeEnum(1, this.provider);
            if (this.instance_name.length)
                writer.writeString(2, this.instance_name);
            if (this.request_origin.length)
                writer.writeString(3, this.request_origin);
            if (this.has_client_state)
                writer.writeMessage(4, this.client_state, () => this.client_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnWithProviderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnWithProviderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider = reader.readEnum();
                        break;
                    case 2:
                        message.instance_name = reader.readString();
                        break;
                    case 3:
                        message.request_origin = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.client_state, () => message.client_state = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnWithProviderRequest {
            return AuthnWithProviderRequest.deserialize(bytes);
        }
    }
    export class AuthnWithProviderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider_url" in data && data.provider_url != undefined) {
                    this.provider_url = data.provider_url;
                }
            }
        }
        get provider_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set provider_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            provider_url?: string;
        }): AuthnWithProviderResponse {
            const message = new AuthnWithProviderResponse({});
            if (data.provider_url != null) {
                message.provider_url = data.provider_url;
            }
            return message;
        }
        toObject() {
            const data: {
                provider_url?: string;
            } = {};
            if (this.provider_url != null) {
                data.provider_url = this.provider_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider_url.length)
                writer.writeString(1, this.provider_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnWithProviderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnWithProviderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnWithProviderResponse {
            return AuthnWithProviderResponse.deserialize(bytes);
        }
    }
    export class HandleOIDCCallbackRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
            state?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: string;
            state?: string;
        }): HandleOIDCCallbackRequest {
            const message = new HandleOIDCCallbackRequest({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
                state?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (this.state.length)
                writer.writeString(2, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandleOIDCCallbackRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandleOIDCCallbackRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HandleOIDCCallbackRequest {
            return HandleOIDCCallbackRequest.deserialize(bytes);
        }
    }
    export class HandleOIDCCallbackResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
            instance_name?: string;
            request_origin?: string;
            client_state?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
                if ("instance_name" in data && data.instance_name != undefined) {
                    this.instance_name = data.instance_name;
                }
                if ("request_origin" in data && data.request_origin != undefined) {
                    this.request_origin = data.request_origin;
                }
                if ("client_state" in data && data.client_state != undefined) {
                    this.client_state = data.client_state;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get instance_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set instance_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_origin() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_origin(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get client_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 5) as dependency_1.google.protobuf.Struct;
        }
        set client_state(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_client_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            instance_name?: string;
            request_origin?: string;
            client_state?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): HandleOIDCCallbackResponse {
            const message = new HandleOIDCCallbackResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            if (data.instance_name != null) {
                message.instance_name = data.instance_name;
            }
            if (data.request_origin != null) {
                message.request_origin = data.request_origin;
            }
            if (data.client_state != null) {
                message.client_state = dependency_1.google.protobuf.Struct.fromObject(data.client_state);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
                instance_name?: string;
                request_origin?: string;
                client_state?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            if (this.instance_name != null) {
                data.instance_name = this.instance_name;
            }
            if (this.request_origin != null) {
                data.request_origin = this.request_origin;
            }
            if (this.client_state != null) {
                data.client_state = this.client_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (this.instance_name.length)
                writer.writeString(3, this.instance_name);
            if (this.request_origin.length)
                writer.writeString(4, this.request_origin);
            if (this.has_client_state)
                writer.writeMessage(5, this.client_state, () => this.client_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandleOIDCCallbackResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandleOIDCCallbackResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    case 3:
                        message.instance_name = reader.readString();
                        break;
                    case 4:
                        message.request_origin = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.client_state, () => message.client_state = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HandleOIDCCallbackResponse {
            return HandleOIDCCallbackResponse.deserialize(bytes);
        }
    }
    export class FindByEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): FindByEmailRequest {
            const message = new FindByEmailRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindByEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindByEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindByEmailRequest {
            return FindByEmailRequest.deserialize(bytes);
        }
    }
    export class FindByEmailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): FindByEmailResponse {
            const message = new FindByEmailResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindByEmailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindByEmailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindByEmailResponse {
            return FindByEmailResponse.deserialize(bytes);
        }
    }
    export class FindByIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uuid?: string;
        }): FindByIDRequest {
            const message = new FindByIDRequest({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindByIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindByIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindByIDRequest {
            return FindByIDRequest.deserialize(bytes);
        }
    }
    export class FindByIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): FindByIDResponse {
            const message = new FindByIDResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindByIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindByIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindByIDResponse {
            return FindByIDResponse.deserialize(bytes);
        }
    }
    export class AuthnWithPasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): AuthnWithPasswordRequest {
            const message = new AuthnWithPasswordRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnWithPasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnWithPasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnWithPasswordRequest {
            return AuthnWithPasswordRequest.deserialize(bytes);
        }
    }
    export class AuthnWithPasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
        }): AuthnWithPasswordResponse {
            const message = new AuthnWithPasswordResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnWithPasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnWithPasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnWithPasswordResponse {
            return AuthnWithPasswordResponse.deserialize(bytes);
        }
    }
    export class RefreshAccessTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            refresh_token?: string;
        }): RefreshAccessTokenRequest {
            const message = new RefreshAccessTokenRequest({});
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_token?: string;
            } = {};
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_token.length)
                writer.writeString(1, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshAccessTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshAccessTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshAccessTokenRequest {
            return RefreshAccessTokenRequest.deserialize(bytes);
        }
    }
    export class RefreshAccessTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
        }): RefreshAccessTokenResponse {
            const message = new RefreshAccessTokenResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshAccessTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshAccessTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshAccessTokenResponse {
            return RefreshAccessTokenResponse.deserialize(bytes);
        }
    }
    export class GetMeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetMeRequest {
            const message = new GetMeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMeRequest {
            return GetMeRequest.deserialize(bytes);
        }
    }
    export class GetMeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): GetMeResponse {
            const message = new GetMeResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMeResponse {
            return GetMeResponse.deserialize(bytes);
        }
    }
    export class AuthTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
        }): AuthTokenResponse {
            const message = new AuthTokenResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthTokenResponse {
            return AuthTokenResponse.deserialize(bytes);
        }
    }
    export class CreateAuthnBrowserWithWalletChallengeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CreateAuthnBrowserWithWalletChallengeRequest {
            const message = new CreateAuthnBrowserWithWalletChallengeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAuthnBrowserWithWalletChallengeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAuthnBrowserWithWalletChallengeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAuthnBrowserWithWalletChallengeRequest {
            return CreateAuthnBrowserWithWalletChallengeRequest.deserialize(bytes);
        }
    }
    export class CreateAuthnBrowserWithWalletChallengeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            nonce?: string;
            auth_token?: never;
        } | {
            nonce?: never;
            auth_token?: AuthTokenResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_nonce() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthTokenResponse, 2) as AuthTokenResponse;
        }
        set auth_token(value: AuthTokenResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get did_start() {
            const cases: {
                [index: number]: "none" | "nonce" | "auth_token";
            } = {
                0: "none",
                1: "nonce",
                2: "auth_token"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            nonce?: string;
            auth_token?: ReturnType<typeof AuthTokenResponse.prototype.toObject>;
        }): CreateAuthnBrowserWithWalletChallengeResponse {
            const message = new CreateAuthnBrowserWithWalletChallengeResponse({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.auth_token != null) {
                message.auth_token = AuthTokenResponse.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                auth_token?: ReturnType<typeof AuthTokenResponse.prototype.toObject>;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_nonce)
                writer.writeString(1, this.nonce);
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAuthnBrowserWithWalletChallengeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAuthnBrowserWithWalletChallengeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthTokenResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAuthnBrowserWithWalletChallengeResponse {
            return CreateAuthnBrowserWithWalletChallengeResponse.deserialize(bytes);
        }
    }
    export class AuthnBrowserWithWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
            nonce?: string;
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            signature?: Uint8Array;
            nonce?: string;
            did?: string;
        }): AuthnBrowserWithWalletRequest {
            const message = new AuthnBrowserWithWalletRequest({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
                nonce?: string;
                did?: string;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.did.length)
                writer.writeString(3, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnBrowserWithWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnBrowserWithWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnBrowserWithWalletRequest {
            return AuthnBrowserWithWalletRequest.deserialize(bytes);
        }
    }
    export class AuthnBrowserWithWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AuthnBrowserWithWalletResponse {
            const message = new AuthnBrowserWithWalletResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnBrowserWithWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnBrowserWithWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnBrowserWithWalletResponse {
            return AuthnBrowserWithWalletResponse.deserialize(bytes);
        }
    }
    export class CreateRegisterWalletChallengeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CreateRegisterWalletChallengeRequest {
            const message = new CreateRegisterWalletChallengeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRegisterWalletChallengeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRegisterWalletChallengeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRegisterWalletChallengeRequest {
            return CreateRegisterWalletChallengeRequest.deserialize(bytes);
        }
    }
    export class CreateRegisterWalletChallengeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            nonce?: string;
            ok?: never;
        } | {
            nonce?: never;
            ok?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_nonce() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ok(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get registration_start() {
            const cases: {
                [index: number]: "none" | "nonce" | "ok";
            } = {
                0: "none",
                1: "nonce",
                2: "ok"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            nonce?: string;
            ok?: string;
        }): CreateRegisterWalletChallengeResponse {
            const message = new CreateRegisterWalletChallengeResponse({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                ok?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_nonce)
                writer.writeString(1, this.nonce);
            if (this.has_ok)
                writer.writeString(2, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRegisterWalletChallengeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRegisterWalletChallengeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        message.ok = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRegisterWalletChallengeResponse {
            return CreateRegisterWalletChallengeResponse.deserialize(bytes);
        }
    }
    export class RegisterWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
            nonce?: string;
            did?: string;
            did_type?: string;
            purpose?: string;
            metadata?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("did_type" in data && data.did_type != undefined) {
                    this.did_type = data.did_type;
                }
                if ("purpose" in data && data.purpose != undefined) {
                    this.purpose = data.purpose;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get did_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set did_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get purpose() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set purpose(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 12) as dependency_1.google.protobuf.Struct;
        }
        set metadata(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            signature?: Uint8Array;
            nonce?: string;
            did?: string;
            did_type?: string;
            purpose?: string;
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): RegisterWalletRequest {
            const message = new RegisterWalletRequest({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.did_type != null) {
                message.did_type = data.did_type;
            }
            if (data.purpose != null) {
                message.purpose = data.purpose;
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Struct.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
                nonce?: string;
                did?: string;
                did_type?: string;
                purpose?: string;
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.did_type != null) {
                data.did_type = this.did_type;
            }
            if (this.purpose != null) {
                data.purpose = this.purpose;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.did.length)
                writer.writeString(3, this.did);
            if (this.did_type.length)
                writer.writeString(4, this.did_type);
            if (this.purpose.length)
                writer.writeString(5, this.purpose);
            if (this.has_metadata)
                writer.writeMessage(12, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.did = reader.readString();
                        break;
                    case 4:
                        message.did_type = reader.readString();
                        break;
                    case 5:
                        message.purpose = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterWalletRequest {
            return RegisterWalletRequest.deserialize(bytes);
        }
    }
    export class RegisterWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
        }): RegisterWalletResponse {
            const message = new RegisterWalletResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterWalletResponse {
            return RegisterWalletResponse.deserialize(bytes);
        }
    }
    export class CreateAuthnWalletChallengeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            did?: string;
        }): CreateAuthnWalletChallengeRequest {
            const message = new CreateAuthnWalletChallengeRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAuthnWalletChallengeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAuthnWalletChallengeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAuthnWalletChallengeRequest {
            return CreateAuthnWalletChallengeRequest.deserialize(bytes);
        }
    }
    export class CreateAuthnWalletChallengeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            nonce?: string;
        }): CreateAuthnWalletChallengeResponse {
            const message = new CreateAuthnWalletChallengeResponse({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAuthnWalletChallengeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAuthnWalletChallengeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAuthnWalletChallengeResponse {
            return CreateAuthnWalletChallengeResponse.deserialize(bytes);
        }
    }
    export class AuthnWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
            nonce?: string;
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            signature?: Uint8Array;
            nonce?: string;
            did?: string;
        }): AuthnWalletRequest {
            const message = new AuthnWalletRequest({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
                nonce?: string;
                did?: string;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.did.length)
                writer.writeString(3, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnWalletRequest {
            return AuthnWalletRequest.deserialize(bytes);
        }
    }
    export class AuthnWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
        }): AuthnWalletResponse {
            const message = new AuthnWalletResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnWalletResponse {
            return AuthnWalletResponse.deserialize(bytes);
        }
    }
    export class HandleSAMLCallbackRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            saml_response?: string;
            relay_state?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("saml_response" in data && data.saml_response != undefined) {
                    this.saml_response = data.saml_response;
                }
                if ("relay_state" in data && data.relay_state != undefined) {
                    this.relay_state = data.relay_state;
                }
            }
        }
        get saml_response() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set saml_response(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set relay_state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            saml_response?: string;
            relay_state?: string;
        }): HandleSAMLCallbackRequest {
            const message = new HandleSAMLCallbackRequest({});
            if (data.saml_response != null) {
                message.saml_response = data.saml_response;
            }
            if (data.relay_state != null) {
                message.relay_state = data.relay_state;
            }
            return message;
        }
        toObject() {
            const data: {
                saml_response?: string;
                relay_state?: string;
            } = {};
            if (this.saml_response != null) {
                data.saml_response = this.saml_response;
            }
            if (this.relay_state != null) {
                data.relay_state = this.relay_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.saml_response.length)
                writer.writeString(1, this.saml_response);
            if (this.relay_state.length)
                writer.writeString(2, this.relay_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandleSAMLCallbackRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandleSAMLCallbackRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.saml_response = reader.readString();
                        break;
                    case 2:
                        message.relay_state = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HandleSAMLCallbackRequest {
            return HandleSAMLCallbackRequest.deserialize(bytes);
        }
    }
    export class HandleSAMLCallbackResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            auth_token?: AuthToken;
            instance_name?: string;
            request_origin?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
                if ("instance_name" in data && data.instance_name != undefined) {
                    this.instance_name = data.instance_name;
                }
                if ("request_origin" in data && data.request_origin != undefined) {
                    this.request_origin = data.request_origin;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, AuthToken, 2) as AuthToken;
        }
        set auth_token(value: AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get instance_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set instance_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_origin() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_origin(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
            instance_name?: string;
            request_origin?: string;
        }): HandleSAMLCallbackResponse {
            const message = new HandleSAMLCallbackResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.auth_token != null) {
                message.auth_token = AuthToken.fromObject(data.auth_token);
            }
            if (data.instance_name != null) {
                message.instance_name = data.instance_name;
            }
            if (data.request_origin != null) {
                message.request_origin = data.request_origin;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                auth_token?: ReturnType<typeof AuthToken.prototype.toObject>;
                instance_name?: string;
                request_origin?: string;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            if (this.instance_name != null) {
                data.instance_name = this.instance_name;
            }
            if (this.request_origin != null) {
                data.request_origin = this.request_origin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_auth_token)
                writer.writeMessage(2, this.auth_token, () => this.auth_token.serialize(writer));
            if (this.instance_name.length)
                writer.writeString(3, this.instance_name);
            if (this.request_origin.length)
                writer.writeString(4, this.request_origin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandleSAMLCallbackResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandleSAMLCallbackResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth_token, () => message.auth_token = AuthToken.deserialize(reader));
                        break;
                    case 3:
                        message.instance_name = reader.readString();
                        break;
                    case 4:
                        message.request_origin = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HandleSAMLCallbackResponse {
            return HandleSAMLCallbackResponse.deserialize(bytes);
        }
    }
    export class SAMLSPMetadataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SAMLSPMetadataRequest {
            const message = new SAMLSPMetadataRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SAMLSPMetadataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SAMLSPMetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SAMLSPMetadataRequest {
            return SAMLSPMetadataRequest.deserialize(bytes);
        }
    }
    export class SAMLSPMetadataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sp_metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sp_metadata" in data && data.sp_metadata != undefined) {
                    this.sp_metadata = data.sp_metadata;
                }
            }
        }
        get sp_metadata() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set sp_metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sp_metadata?: Uint8Array;
        }): SAMLSPMetadataResponse {
            const message = new SAMLSPMetadataResponse({});
            if (data.sp_metadata != null) {
                message.sp_metadata = data.sp_metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                sp_metadata?: Uint8Array;
            } = {};
            if (this.sp_metadata != null) {
                data.sp_metadata = this.sp_metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sp_metadata.length)
                writer.writeBytes(1, this.sp_metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SAMLSPMetadataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SAMLSPMetadataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sp_metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SAMLSPMetadataResponse {
            return SAMLSPMetadataResponse.deserialize(bytes);
        }
    }
    export class GetAppSettingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetAppSettingsRequest {
            const message = new GetAppSettingsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAppSettingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAppSettingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAppSettingsRequest {
            return GetAppSettingsRequest.deserialize(bytes);
        }
    }
    export class AppSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authn_providers?: AuthnProvider[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authn_providers" in data && data.authn_providers != undefined) {
                    this.authn_providers = data.authn_providers;
                }
            }
        }
        get authn_providers() {
            return pb_1.Message.getRepeatedWrapperField(this, AuthnProvider, 1) as AuthnProvider[];
        }
        set authn_providers(value: AuthnProvider[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            authn_providers?: ReturnType<typeof AuthnProvider.prototype.toObject>[];
        }): AppSettings {
            const message = new AppSettings({});
            if (data.authn_providers != null) {
                message.authn_providers = data.authn_providers.map(item => AuthnProvider.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                authn_providers?: ReturnType<typeof AuthnProvider.prototype.toObject>[];
            } = {};
            if (this.authn_providers != null) {
                data.authn_providers = this.authn_providers.map((item: AuthnProvider) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authn_providers.length)
                writer.writeRepeatedMessage(1, this.authn_providers, (item: AuthnProvider) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.authn_providers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AuthnProvider.deserialize(reader), AuthnProvider));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppSettings {
            return AppSettings.deserialize(bytes);
        }
    }
    export class AuthnProvider extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider?: Provider;
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 1, Provider.PROVIDER_UNSPECIFIED) as Provider;
        }
        set provider(value: Provider) {
            pb_1.Message.setField(this, 1, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            provider?: Provider;
            enabled?: boolean;
        }): AuthnProvider {
            const message = new AuthnProvider({});
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                provider?: Provider;
                enabled?: boolean;
            } = {};
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider != Provider.PROVIDER_UNSPECIFIED)
                writer.writeEnum(1, this.provider);
            if (this.enabled != false)
                writer.writeBool(2, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnProvider {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnProvider();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider = reader.readEnum();
                        break;
                    case 2:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnProvider {
            return AuthnProvider.deserialize(bytes);
        }
    }
    export class GetAppSettingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_settings?: AppSettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_settings" in data && data.app_settings != undefined) {
                    this.app_settings = data.app_settings;
                }
            }
        }
        get app_settings() {
            return pb_1.Message.getWrapperField(this, AppSettings, 1) as AppSettings;
        }
        set app_settings(value: AppSettings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_app_settings() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            app_settings?: ReturnType<typeof AppSettings.prototype.toObject>;
        }): GetAppSettingsResponse {
            const message = new GetAppSettingsResponse({});
            if (data.app_settings != null) {
                message.app_settings = AppSettings.fromObject(data.app_settings);
            }
            return message;
        }
        toObject() {
            const data: {
                app_settings?: ReturnType<typeof AppSettings.prototype.toObject>;
            } = {};
            if (this.app_settings != null) {
                data.app_settings = this.app_settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_app_settings)
                writer.writeMessage(1, this.app_settings, () => this.app_settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAppSettingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAppSettingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.app_settings, () => message.app_settings = AppSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAppSettingsResponse {
            return GetAppSettingsResponse.deserialize(bytes);
        }
    }
    export class GetUserByDIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            did?: string;
        }): GetUserByDIDRequest {
            const message = new GetUserByDIDRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByDIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByDIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserByDIDRequest {
            return GetUserByDIDRequest.deserialize(bytes);
        }
    }
    export class GetUserByDIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): GetUserByDIDResponse {
            const message = new GetUserByDIDResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByDIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByDIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserByDIDResponse {
            return GetUserByDIDResponse.deserialize(bytes);
        }
    }
    export class AssociateWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            did_type?: string;
            purpose?: string;
            metadata?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("did_type" in data && data.did_type != undefined) {
                    this.did_type = data.did_type;
                }
                if ("purpose" in data && data.purpose != undefined) {
                    this.purpose = data.purpose;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get did_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set did_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get purpose() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set purpose(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 12) as dependency_1.google.protobuf.Struct;
        }
        set metadata(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            did?: string;
            did_type?: string;
            purpose?: string;
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): AssociateWalletRequest {
            const message = new AssociateWalletRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.did_type != null) {
                message.did_type = data.did_type;
            }
            if (data.purpose != null) {
                message.purpose = data.purpose;
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Struct.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                did_type?: string;
                purpose?: string;
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.did_type != null) {
                data.did_type = this.did_type;
            }
            if (this.purpose != null) {
                data.purpose = this.purpose;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.did_type.length)
                writer.writeString(2, this.did_type);
            if (this.purpose.length)
                writer.writeString(3, this.purpose);
            if (this.has_metadata)
                writer.writeMessage(12, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssociateWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssociateWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.did_type = reader.readString();
                        break;
                    case 3:
                        message.purpose = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssociateWalletRequest {
            return AssociateWalletRequest.deserialize(bytes);
        }
    }
    export class AssociateWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AssociateWalletResponse {
            const message = new AssociateWalletResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssociateWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssociateWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssociateWalletResponse {
            return AssociateWalletResponse.deserialize(bytes);
        }
    }
    export class DissociateWalletRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            did?: string;
        }): DissociateWalletRequest {
            const message = new DissociateWalletRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DissociateWalletRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DissociateWalletRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DissociateWalletRequest {
            return DissociateWalletRequest.deserialize(bytes);
        }
    }
    export class DissociateWalletResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DissociateWalletResponse {
            const message = new DissociateWalletResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DissociateWalletResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DissociateWalletResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DissociateWalletResponse {
            return DissociateWalletResponse.deserialize(bytes);
        }
    }
    export class ListUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            page_size?: number;
            sort_by?: dependency_3.common.SortBy;
            filter?: dependency_3.common.Filter;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_3.common.SortBy, 3) as dependency_3.common.SortBy;
        }
        set sort_by(value: dependency_3.common.SortBy) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, dependency_3.common.Filter, 4) as dependency_3.common.Filter;
        }
        set filter(value: dependency_3.common.Filter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filter() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            page?: number;
            page_size?: number;
            sort_by?: ReturnType<typeof dependency_3.common.SortBy.prototype.toObject>;
            filter?: ReturnType<typeof dependency_3.common.Filter.prototype.toObject>;
        }): ListUsersRequest {
            const message = new ListUsersRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_3.common.SortBy.fromObject(data.sort_by);
            }
            if (data.filter != null) {
                message.filter = dependency_3.common.Filter.fromObject(data.filter);
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                page_size?: number;
                sort_by?: ReturnType<typeof dependency_3.common.SortBy.prototype.toObject>;
                filter?: ReturnType<typeof dependency_3.common.Filter.prototype.toObject>;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.has_sort_by)
                writer.writeMessage(3, this.sort_by, () => this.sort_by.serialize(writer));
            if (this.has_filter)
                writer.writeMessage(4, this.filter, () => this.filter.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_3.common.SortBy.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.filter, () => message.filter = dependency_3.common.Filter.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUsersRequest {
            return ListUsersRequest.deserialize(bytes);
        }
    }
    export class ListUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
            total_matching_users?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("total_matching_users" in data && data.total_matching_users != undefined) {
                    this.total_matching_users = data.total_matching_users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_matching_users() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_matching_users(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
            total_matching_users?: number;
        }): ListUsersResponse {
            const message = new ListUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            if (data.total_matching_users != null) {
                message.total_matching_users = data.total_matching_users;
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
                total_matching_users?: number;
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            if (this.total_matching_users != null) {
                data.total_matching_users = this.total_matching_users;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (this.total_matching_users != 0)
                writer.writeInt32(2, this.total_matching_users);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    case 2:
                        message.total_matching_users = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUsersResponse {
            return ListUsersResponse.deserialize(bytes);
        }
    }
    export class ApiKeyEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: string;
            client_name?: string;
            api_key?: string;
            status?: ApiKeyStatus;
            expiry_date?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("client_name" in data && data.client_name != undefined) {
                    this.client_name = data.client_name;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("expiry_date" in data && data.expiry_date != undefined) {
                    this.expiry_date = data.expiry_date;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set client_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, ApiKeyStatus.API_KEY_STATUS_UNSPECIFIED) as ApiKeyStatus;
        }
        set status(value: ApiKeyStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get expiry_date() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 5) as dependency_2.google.protobuf.Timestamp;
        }
        set expiry_date(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_expiry_date() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            client_id?: string;
            client_name?: string;
            api_key?: string;
            status?: ApiKeyStatus;
            expiry_date?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): ApiKeyEntity {
            const message = new ApiKeyEntity({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.client_name != null) {
                message.client_name = data.client_name;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.expiry_date != null) {
                message.expiry_date = dependency_2.google.protobuf.Timestamp.fromObject(data.expiry_date);
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: string;
                client_name?: string;
                api_key?: string;
                status?: ApiKeyStatus;
                expiry_date?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.client_name != null) {
                data.client_name = this.client_name;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.expiry_date != null) {
                data.expiry_date = this.expiry_date.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writeString(1, this.client_id);
            if (this.client_name.length)
                writer.writeString(2, this.client_name);
            if (this.api_key.length)
                writer.writeString(3, this.api_key);
            if (this.status != ApiKeyStatus.API_KEY_STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.status);
            if (this.has_expiry_date)
                writer.writeMessage(5, this.expiry_date, () => this.expiry_date.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiKeyEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiKeyEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.client_name = reader.readString();
                        break;
                    case 3:
                        message.api_key = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.expiry_date, () => message.expiry_date = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApiKeyEntity {
            return ApiKeyEntity.deserialize(bytes);
        }
    }
    export class CreateApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_name" in data && data.client_name != undefined) {
                    this.client_name = data.client_name;
                }
            }
        }
        get client_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            client_name?: string;
        }): CreateApiKeyRequest {
            const message = new CreateApiKeyRequest({});
            if (data.client_name != null) {
                message.client_name = data.client_name;
            }
            return message;
        }
        toObject() {
            const data: {
                client_name?: string;
            } = {};
            if (this.client_name != null) {
                data.client_name = this.client_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_name.length)
                writer.writeString(1, this.client_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApiKeyRequest {
            return CreateApiKeyRequest.deserialize(bytes);
        }
    }
    export class CreateApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key_entity?: ApiKeyEntity;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key_entity" in data && data.api_key_entity != undefined) {
                    this.api_key_entity = data.api_key_entity;
                }
            }
        }
        get api_key_entity() {
            return pb_1.Message.getWrapperField(this, ApiKeyEntity, 1) as ApiKeyEntity;
        }
        set api_key_entity(value: ApiKeyEntity) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_api_key_entity() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            api_key_entity?: ReturnType<typeof ApiKeyEntity.prototype.toObject>;
        }): CreateApiKeyResponse {
            const message = new CreateApiKeyResponse({});
            if (data.api_key_entity != null) {
                message.api_key_entity = ApiKeyEntity.fromObject(data.api_key_entity);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key_entity?: ReturnType<typeof ApiKeyEntity.prototype.toObject>;
            } = {};
            if (this.api_key_entity != null) {
                data.api_key_entity = this.api_key_entity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_api_key_entity)
                writer.writeMessage(1, this.api_key_entity, () => this.api_key_entity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.api_key_entity, () => message.api_key_entity = ApiKeyEntity.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApiKeyResponse {
            return CreateApiKeyResponse.deserialize(bytes);
        }
    }
    export class UpdateApiKeyStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: string;
            api_key?: string;
            api_key_status?: ApiKeyStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("api_key_status" in data && data.api_key_status != undefined) {
                    this.api_key_status = data.api_key_status;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key_status() {
            return pb_1.Message.getFieldWithDefault(this, 3, ApiKeyStatus.API_KEY_STATUS_UNSPECIFIED) as ApiKeyStatus;
        }
        set api_key_status(value: ApiKeyStatus) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            client_id?: string;
            api_key?: string;
            api_key_status?: ApiKeyStatus;
        }): UpdateApiKeyStatusRequest {
            const message = new UpdateApiKeyStatusRequest({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.api_key_status != null) {
                message.api_key_status = data.api_key_status;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: string;
                api_key?: string;
                api_key_status?: ApiKeyStatus;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.api_key_status != null) {
                data.api_key_status = this.api_key_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writeString(1, this.client_id);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.api_key_status != ApiKeyStatus.API_KEY_STATUS_UNSPECIFIED)
                writer.writeEnum(3, this.api_key_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateApiKeyStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateApiKeyStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        message.api_key_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateApiKeyStatusRequest {
            return UpdateApiKeyStatusRequest.deserialize(bytes);
        }
    }
    export class UpdateApiKeyStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateApiKeyStatusResponse {
            const message = new UpdateApiKeyStatusResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateApiKeyStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateApiKeyStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateApiKeyStatusResponse {
            return UpdateApiKeyStatusResponse.deserialize(bytes);
        }
    }
    export class GetApiKeysRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetApiKeysRequest {
            const message = new GetApiKeysRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApiKeysRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApiKeysRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApiKeysRequest {
            return GetApiKeysRequest.deserialize(bytes);
        }
    }
    export class GetApiKeysResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key_entities?: ApiKeyEntity[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key_entities" in data && data.api_key_entities != undefined) {
                    this.api_key_entities = data.api_key_entities;
                }
            }
        }
        get api_key_entities() {
            return pb_1.Message.getRepeatedWrapperField(this, ApiKeyEntity, 1) as ApiKeyEntity[];
        }
        set api_key_entities(value: ApiKeyEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            api_key_entities?: ReturnType<typeof ApiKeyEntity.prototype.toObject>[];
        }): GetApiKeysResponse {
            const message = new GetApiKeysResponse({});
            if (data.api_key_entities != null) {
                message.api_key_entities = data.api_key_entities.map(item => ApiKeyEntity.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                api_key_entities?: ReturnType<typeof ApiKeyEntity.prototype.toObject>[];
            } = {};
            if (this.api_key_entities != null) {
                data.api_key_entities = this.api_key_entities.map((item: ApiKeyEntity) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key_entities.length)
                writer.writeRepeatedMessage(1, this.api_key_entities, (item: ApiKeyEntity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApiKeysResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApiKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.api_key_entities, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ApiKeyEntity.deserialize(reader), ApiKeyEntity));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApiKeysResponse {
            return GetApiKeysResponse.deserialize(bytes);
        }
    }
    export class CheckApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CheckApiKeyRequest {
            const message = new CheckApiKeyRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckApiKeyRequest {
            return CheckApiKeyRequest.deserialize(bytes);
        }
    }
    export class CheckApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_valid" in data && data.is_valid != undefined) {
                    this.is_valid = data.is_valid;
                }
            }
        }
        get is_valid() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_valid(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            is_valid?: boolean;
        }): CheckApiKeyResponse {
            const message = new CheckApiKeyResponse({});
            if (data.is_valid != null) {
                message.is_valid = data.is_valid;
            }
            return message;
        }
        toObject() {
            const data: {
                is_valid?: boolean;
            } = {};
            if (this.is_valid != null) {
                data.is_valid = this.is_valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_valid != false)
                writer.writeBool(3, this.is_valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.is_valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckApiKeyResponse {
            return CheckApiKeyResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserApiServiceService {
        static definition = {
            AuthnWithPassword: {
                path: "/user_api.v1.UserApiService/AuthnWithPassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthnWithPasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthnWithPasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthnWithPasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthnWithPasswordResponse.deserialize(new Uint8Array(bytes))
            },
            RefreshAccessToken: {
                path: "/user_api.v1.UserApiService/RefreshAccessToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefreshAccessTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefreshAccessTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RefreshAccessTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RefreshAccessTokenResponse.deserialize(new Uint8Array(bytes))
            },
            AuthnWithProvider: {
                path: "/user_api.v1.UserApiService/AuthnWithProvider",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthnWithProviderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthnWithProviderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthnWithProviderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthnWithProviderResponse.deserialize(new Uint8Array(bytes))
            },
            HandleOIDCCallback: {
                path: "/user_api.v1.UserApiService/HandleOIDCCallback",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HandleOIDCCallbackRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HandleOIDCCallbackRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HandleOIDCCallbackResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HandleOIDCCallbackResponse.deserialize(new Uint8Array(bytes))
            },
            HandleSAMLCallback: {
                path: "/user_api.v1.UserApiService/HandleSAMLCallback",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HandleSAMLCallbackRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HandleSAMLCallbackRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HandleSAMLCallbackResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HandleSAMLCallbackResponse.deserialize(new Uint8Array(bytes))
            },
            SAMLSPMetadata: {
                path: "/user_api.v1.UserApiService/SAMLSPMetadata",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SAMLSPMetadataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SAMLSPMetadataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SAMLSPMetadataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SAMLSPMetadataResponse.deserialize(new Uint8Array(bytes))
            },
            CreateAuthnBrowserWithWalletChallenge: {
                path: "/user_api.v1.UserApiService/CreateAuthnBrowserWithWalletChallenge",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: CreateAuthnBrowserWithWalletChallengeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateAuthnBrowserWithWalletChallengeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateAuthnBrowserWithWalletChallengeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateAuthnBrowserWithWalletChallengeResponse.deserialize(new Uint8Array(bytes))
            },
            AuthnBrowserWithWallet: {
                path: "/user_api.v1.UserApiService/AuthnBrowserWithWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthnBrowserWithWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthnBrowserWithWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthnBrowserWithWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthnBrowserWithWalletResponse.deserialize(new Uint8Array(bytes))
            },
            CreateAuthnWalletChallenge: {
                path: "/user_api.v1.UserApiService/CreateAuthnWalletChallenge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateAuthnWalletChallengeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateAuthnWalletChallengeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateAuthnWalletChallengeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateAuthnWalletChallengeResponse.deserialize(new Uint8Array(bytes))
            },
            AuthnWallet: {
                path: "/user_api.v1.UserApiService/AuthnWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthnWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthnWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthnWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthnWalletResponse.deserialize(new Uint8Array(bytes))
            },
            CreateRegisterWalletChallenge: {
                path: "/user_api.v1.UserApiService/CreateRegisterWalletChallenge",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: CreateRegisterWalletChallengeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRegisterWalletChallengeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateRegisterWalletChallengeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateRegisterWalletChallengeResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterWallet: {
                path: "/user_api.v1.UserApiService/RegisterWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterWalletResponse.deserialize(new Uint8Array(bytes))
            },
            AssociateWallet: {
                path: "/user_api.v1.UserApiService/AssociateWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssociateWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssociateWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssociateWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssociateWalletResponse.deserialize(new Uint8Array(bytes))
            },
            DissociateWallet: {
                path: "/user_api.v1.UserApiService/DissociateWallet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DissociateWalletRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DissociateWalletRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DissociateWalletResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DissociateWalletResponse.deserialize(new Uint8Array(bytes))
            },
            GetAppSettings: {
                path: "/user_api.v1.UserApiService/GetAppSettings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAppSettingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAppSettingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAppSettingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAppSettingsResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterUser: {
                path: "/user_api.v1.UserApiService/RegisterUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterUserResponse.deserialize(new Uint8Array(bytes))
            },
            ConfirmUser: {
                path: "/user_api.v1.UserApiService/ConfirmUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConfirmUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConfirmUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConfirmUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConfirmUserResponse.deserialize(new Uint8Array(bytes))
            },
            FindByEmail: {
                path: "/user_api.v1.UserApiService/FindByEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindByEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindByEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindByEmailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindByEmailResponse.deserialize(new Uint8Array(bytes))
            },
            FindByID: {
                path: "/user_api.v1.UserApiService/FindByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindByIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindByIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindByIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindByIDResponse.deserialize(new Uint8Array(bytes))
            },
            GetMe: {
                path: "/user_api.v1.UserApiService/GetMe",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMeResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserByDID: {
                path: "/user_api.v1.UserApiService/GetUserByDID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserByDIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserByDIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserByDIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserByDIDResponse.deserialize(new Uint8Array(bytes))
            },
            ListUsers: {
                path: "/user_api.v1.UserApiService/ListUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListUsersResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AuthnWithPassword(call: grpc_1.ServerUnaryCall<AuthnWithPasswordRequest, AuthnWithPasswordResponse>, callback: grpc_1.sendUnaryData<AuthnWithPasswordResponse>): void;
        abstract RefreshAccessToken(call: grpc_1.ServerUnaryCall<RefreshAccessTokenRequest, RefreshAccessTokenResponse>, callback: grpc_1.sendUnaryData<RefreshAccessTokenResponse>): void;
        abstract AuthnWithProvider(call: grpc_1.ServerUnaryCall<AuthnWithProviderRequest, AuthnWithProviderResponse>, callback: grpc_1.sendUnaryData<AuthnWithProviderResponse>): void;
        abstract HandleOIDCCallback(call: grpc_1.ServerUnaryCall<HandleOIDCCallbackRequest, HandleOIDCCallbackResponse>, callback: grpc_1.sendUnaryData<HandleOIDCCallbackResponse>): void;
        abstract HandleSAMLCallback(call: grpc_1.ServerUnaryCall<HandleSAMLCallbackRequest, HandleSAMLCallbackResponse>, callback: grpc_1.sendUnaryData<HandleSAMLCallbackResponse>): void;
        abstract SAMLSPMetadata(call: grpc_1.ServerUnaryCall<SAMLSPMetadataRequest, SAMLSPMetadataResponse>, callback: grpc_1.sendUnaryData<SAMLSPMetadataResponse>): void;
        abstract CreateAuthnBrowserWithWalletChallenge(call: grpc_1.ServerWritableStream<CreateAuthnBrowserWithWalletChallengeRequest, CreateAuthnBrowserWithWalletChallengeResponse>): void;
        abstract AuthnBrowserWithWallet(call: grpc_1.ServerUnaryCall<AuthnBrowserWithWalletRequest, AuthnBrowserWithWalletResponse>, callback: grpc_1.sendUnaryData<AuthnBrowserWithWalletResponse>): void;
        abstract CreateAuthnWalletChallenge(call: grpc_1.ServerUnaryCall<CreateAuthnWalletChallengeRequest, CreateAuthnWalletChallengeResponse>, callback: grpc_1.sendUnaryData<CreateAuthnWalletChallengeResponse>): void;
        abstract AuthnWallet(call: grpc_1.ServerUnaryCall<AuthnWalletRequest, AuthnWalletResponse>, callback: grpc_1.sendUnaryData<AuthnWalletResponse>): void;
        abstract CreateRegisterWalletChallenge(call: grpc_1.ServerWritableStream<CreateRegisterWalletChallengeRequest, CreateRegisterWalletChallengeResponse>): void;
        abstract RegisterWallet(call: grpc_1.ServerUnaryCall<RegisterWalletRequest, RegisterWalletResponse>, callback: grpc_1.sendUnaryData<RegisterWalletResponse>): void;
        abstract AssociateWallet(call: grpc_1.ServerUnaryCall<AssociateWalletRequest, AssociateWalletResponse>, callback: grpc_1.sendUnaryData<AssociateWalletResponse>): void;
        abstract DissociateWallet(call: grpc_1.ServerUnaryCall<DissociateWalletRequest, DissociateWalletResponse>, callback: grpc_1.sendUnaryData<DissociateWalletResponse>): void;
        abstract GetAppSettings(call: grpc_1.ServerUnaryCall<GetAppSettingsRequest, GetAppSettingsResponse>, callback: grpc_1.sendUnaryData<GetAppSettingsResponse>): void;
        abstract RegisterUser(call: grpc_1.ServerUnaryCall<RegisterUserRequest, RegisterUserResponse>, callback: grpc_1.sendUnaryData<RegisterUserResponse>): void;
        abstract ConfirmUser(call: grpc_1.ServerUnaryCall<ConfirmUserRequest, ConfirmUserResponse>, callback: grpc_1.sendUnaryData<ConfirmUserResponse>): void;
        abstract FindByEmail(call: grpc_1.ServerUnaryCall<FindByEmailRequest, FindByEmailResponse>, callback: grpc_1.sendUnaryData<FindByEmailResponse>): void;
        abstract FindByID(call: grpc_1.ServerUnaryCall<FindByIDRequest, FindByIDResponse>, callback: grpc_1.sendUnaryData<FindByIDResponse>): void;
        abstract GetMe(call: grpc_1.ServerUnaryCall<GetMeRequest, GetMeResponse>, callback: grpc_1.sendUnaryData<GetMeResponse>): void;
        abstract GetUserByDID(call: grpc_1.ServerUnaryCall<GetUserByDIDRequest, GetUserByDIDResponse>, callback: grpc_1.sendUnaryData<GetUserByDIDResponse>): void;
        abstract ListUsers(call: grpc_1.ServerUnaryCall<ListUsersRequest, ListUsersResponse>, callback: grpc_1.sendUnaryData<ListUsersResponse>): void;
    }
    export class UserApiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserApiServiceService.definition, "UserApiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AuthnWithPassword: GrpcUnaryServiceInterface<AuthnWithPasswordRequest, AuthnWithPasswordResponse> = (message: AuthnWithPasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthnWithPasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthnWithPasswordResponse>, callback?: grpc_1.requestCallback<AuthnWithPasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.AuthnWithPassword(message, metadata, options, callback);
        };
        RefreshAccessToken: GrpcUnaryServiceInterface<RefreshAccessTokenRequest, RefreshAccessTokenResponse> = (message: RefreshAccessTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RefreshAccessTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RefreshAccessTokenResponse>, callback?: grpc_1.requestCallback<RefreshAccessTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.RefreshAccessToken(message, metadata, options, callback);
        };
        AuthnWithProvider: GrpcUnaryServiceInterface<AuthnWithProviderRequest, AuthnWithProviderResponse> = (message: AuthnWithProviderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthnWithProviderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthnWithProviderResponse>, callback?: grpc_1.requestCallback<AuthnWithProviderResponse>): grpc_1.ClientUnaryCall => {
            return super.AuthnWithProvider(message, metadata, options, callback);
        };
        HandleOIDCCallback: GrpcUnaryServiceInterface<HandleOIDCCallbackRequest, HandleOIDCCallbackResponse> = (message: HandleOIDCCallbackRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HandleOIDCCallbackResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HandleOIDCCallbackResponse>, callback?: grpc_1.requestCallback<HandleOIDCCallbackResponse>): grpc_1.ClientUnaryCall => {
            return super.HandleOIDCCallback(message, metadata, options, callback);
        };
        HandleSAMLCallback: GrpcUnaryServiceInterface<HandleSAMLCallbackRequest, HandleSAMLCallbackResponse> = (message: HandleSAMLCallbackRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HandleSAMLCallbackResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HandleSAMLCallbackResponse>, callback?: grpc_1.requestCallback<HandleSAMLCallbackResponse>): grpc_1.ClientUnaryCall => {
            return super.HandleSAMLCallback(message, metadata, options, callback);
        };
        SAMLSPMetadata: GrpcUnaryServiceInterface<SAMLSPMetadataRequest, SAMLSPMetadataResponse> = (message: SAMLSPMetadataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SAMLSPMetadataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SAMLSPMetadataResponse>, callback?: grpc_1.requestCallback<SAMLSPMetadataResponse>): grpc_1.ClientUnaryCall => {
            return super.SAMLSPMetadata(message, metadata, options, callback);
        };
        CreateAuthnBrowserWithWalletChallenge: GrpcStreamServiceInterface<CreateAuthnBrowserWithWalletChallengeRequest, CreateAuthnBrowserWithWalletChallengeResponse> = (message: CreateAuthnBrowserWithWalletChallengeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<CreateAuthnBrowserWithWalletChallengeResponse> => {
            return super.CreateAuthnBrowserWithWalletChallenge(message, metadata, options);
        };
        AuthnBrowserWithWallet: GrpcUnaryServiceInterface<AuthnBrowserWithWalletRequest, AuthnBrowserWithWalletResponse> = (message: AuthnBrowserWithWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthnBrowserWithWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthnBrowserWithWalletResponse>, callback?: grpc_1.requestCallback<AuthnBrowserWithWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.AuthnBrowserWithWallet(message, metadata, options, callback);
        };
        CreateAuthnWalletChallenge: GrpcUnaryServiceInterface<CreateAuthnWalletChallengeRequest, CreateAuthnWalletChallengeResponse> = (message: CreateAuthnWalletChallengeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateAuthnWalletChallengeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateAuthnWalletChallengeResponse>, callback?: grpc_1.requestCallback<CreateAuthnWalletChallengeResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateAuthnWalletChallenge(message, metadata, options, callback);
        };
        AuthnWallet: GrpcUnaryServiceInterface<AuthnWalletRequest, AuthnWalletResponse> = (message: AuthnWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthnWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthnWalletResponse>, callback?: grpc_1.requestCallback<AuthnWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.AuthnWallet(message, metadata, options, callback);
        };
        CreateRegisterWalletChallenge: GrpcStreamServiceInterface<CreateRegisterWalletChallengeRequest, CreateRegisterWalletChallengeResponse> = (message: CreateRegisterWalletChallengeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<CreateRegisterWalletChallengeResponse> => {
            return super.CreateRegisterWalletChallenge(message, metadata, options);
        };
        RegisterWallet: GrpcUnaryServiceInterface<RegisterWalletRequest, RegisterWalletResponse> = (message: RegisterWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterWalletResponse>, callback?: grpc_1.requestCallback<RegisterWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterWallet(message, metadata, options, callback);
        };
        AssociateWallet: GrpcUnaryServiceInterface<AssociateWalletRequest, AssociateWalletResponse> = (message: AssociateWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssociateWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssociateWalletResponse>, callback?: grpc_1.requestCallback<AssociateWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.AssociateWallet(message, metadata, options, callback);
        };
        DissociateWallet: GrpcUnaryServiceInterface<DissociateWalletRequest, DissociateWalletResponse> = (message: DissociateWalletRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DissociateWalletResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DissociateWalletResponse>, callback?: grpc_1.requestCallback<DissociateWalletResponse>): grpc_1.ClientUnaryCall => {
            return super.DissociateWallet(message, metadata, options, callback);
        };
        GetAppSettings: GrpcUnaryServiceInterface<GetAppSettingsRequest, GetAppSettingsResponse> = (message: GetAppSettingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAppSettingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAppSettingsResponse>, callback?: grpc_1.requestCallback<GetAppSettingsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAppSettings(message, metadata, options, callback);
        };
        RegisterUser: GrpcUnaryServiceInterface<RegisterUserRequest, RegisterUserResponse> = (message: RegisterUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterUserResponse>, callback?: grpc_1.requestCallback<RegisterUserResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterUser(message, metadata, options, callback);
        };
        ConfirmUser: GrpcUnaryServiceInterface<ConfirmUserRequest, ConfirmUserResponse> = (message: ConfirmUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConfirmUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConfirmUserResponse>, callback?: grpc_1.requestCallback<ConfirmUserResponse>): grpc_1.ClientUnaryCall => {
            return super.ConfirmUser(message, metadata, options, callback);
        };
        FindByEmail: GrpcUnaryServiceInterface<FindByEmailRequest, FindByEmailResponse> = (message: FindByEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindByEmailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindByEmailResponse>, callback?: grpc_1.requestCallback<FindByEmailResponse>): grpc_1.ClientUnaryCall => {
            return super.FindByEmail(message, metadata, options, callback);
        };
        FindByID: GrpcUnaryServiceInterface<FindByIDRequest, FindByIDResponse> = (message: FindByIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindByIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindByIDResponse>, callback?: grpc_1.requestCallback<FindByIDResponse>): grpc_1.ClientUnaryCall => {
            return super.FindByID(message, metadata, options, callback);
        };
        GetMe: GrpcUnaryServiceInterface<GetMeRequest, GetMeResponse> = (message: GetMeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetMeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetMeResponse>, callback?: grpc_1.requestCallback<GetMeResponse>): grpc_1.ClientUnaryCall => {
            return super.GetMe(message, metadata, options, callback);
        };
        GetUserByDID: GrpcUnaryServiceInterface<GetUserByDIDRequest, GetUserByDIDResponse> = (message: GetUserByDIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserByDIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserByDIDResponse>, callback?: grpc_1.requestCallback<GetUserByDIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUserByDID(message, metadata, options, callback);
        };
        ListUsers: GrpcUnaryServiceInterface<ListUsersRequest, ListUsersResponse> = (message: ListUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListUsersResponse>, callback?: grpc_1.requestCallback<ListUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.ListUsers(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedApiKeyManagerServiceService {
        static definition = {
            CreateApiKey: {
                path: "/user_api.v1.ApiKeyManagerService/CreateApiKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateApiKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateApiKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateApiKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateApiKeyResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateApiKeyStatus: {
                path: "/user_api.v1.ApiKeyManagerService/UpdateApiKeyStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateApiKeyStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateApiKeyStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateApiKeyStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateApiKeyStatusResponse.deserialize(new Uint8Array(bytes))
            },
            GetApiKeys: {
                path: "/user_api.v1.ApiKeyManagerService/GetApiKeys",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetApiKeysRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetApiKeysRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetApiKeysResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetApiKeysResponse.deserialize(new Uint8Array(bytes))
            },
            CheckApiKey: {
                path: "/user_api.v1.ApiKeyManagerService/CheckApiKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckApiKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckApiKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckApiKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckApiKeyResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateApiKey(call: grpc_1.ServerUnaryCall<CreateApiKeyRequest, CreateApiKeyResponse>, callback: grpc_1.sendUnaryData<CreateApiKeyResponse>): void;
        abstract UpdateApiKeyStatus(call: grpc_1.ServerUnaryCall<UpdateApiKeyStatusRequest, UpdateApiKeyStatusResponse>, callback: grpc_1.sendUnaryData<UpdateApiKeyStatusResponse>): void;
        abstract GetApiKeys(call: grpc_1.ServerUnaryCall<GetApiKeysRequest, GetApiKeysResponse>, callback: grpc_1.sendUnaryData<GetApiKeysResponse>): void;
        abstract CheckApiKey(call: grpc_1.ServerUnaryCall<CheckApiKeyRequest, CheckApiKeyResponse>, callback: grpc_1.sendUnaryData<CheckApiKeyResponse>): void;
    }
    export class ApiKeyManagerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedApiKeyManagerServiceService.definition, "ApiKeyManagerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateApiKey: GrpcUnaryServiceInterface<CreateApiKeyRequest, CreateApiKeyResponse> = (message: CreateApiKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateApiKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateApiKeyResponse>, callback?: grpc_1.requestCallback<CreateApiKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateApiKey(message, metadata, options, callback);
        };
        UpdateApiKeyStatus: GrpcUnaryServiceInterface<UpdateApiKeyStatusRequest, UpdateApiKeyStatusResponse> = (message: UpdateApiKeyStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateApiKeyStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateApiKeyStatusResponse>, callback?: grpc_1.requestCallback<UpdateApiKeyStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateApiKeyStatus(message, metadata, options, callback);
        };
        GetApiKeys: GrpcUnaryServiceInterface<GetApiKeysRequest, GetApiKeysResponse> = (message: GetApiKeysRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetApiKeysResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetApiKeysResponse>, callback?: grpc_1.requestCallback<GetApiKeysResponse>): grpc_1.ClientUnaryCall => {
            return super.GetApiKeys(message, metadata, options, callback);
        };
        CheckApiKey: GrpcUnaryServiceInterface<CheckApiKeyRequest, CheckApiKeyResponse> = (message: CheckApiKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckApiKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckApiKeyResponse>, callback?: grpc_1.requestCallback<CheckApiKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckApiKey(message, metadata, options, callback);
        };
    }
}
