/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: authority_api/v1/authority.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/v1/common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace authority_api.v1 {
    export class SetIssuerLimitRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: dependency_1.common.Amount;
            issuer_public_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("issuer_public_key" in data && data.issuer_public_key != undefined) {
                    this.issuer_public_key = data.issuer_public_key;
                }
            }
        }
        get limit() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 1) as dependency_1.common.Amount;
        }
        set limit(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_limit() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get issuer_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set issuer_public_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            limit?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            issuer_public_key?: string;
        }): SetIssuerLimitRequest {
            const message = new SetIssuerLimitRequest({});
            if (data.limit != null) {
                message.limit = dependency_1.common.Amount.fromObject(data.limit);
            }
            if (data.issuer_public_key != null) {
                message.issuer_public_key = data.issuer_public_key;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                issuer_public_key?: string;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit.toObject();
            }
            if (this.issuer_public_key != null) {
                data.issuer_public_key = this.issuer_public_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_limit)
                writer.writeMessage(1, this.limit, () => this.limit.serialize(writer));
            if (this.issuer_public_key.length)
                writer.writeString(2, this.issuer_public_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetIssuerLimitRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetIssuerLimitRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.limit, () => message.limit = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 2:
                        message.issuer_public_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetIssuerLimitRequest {
            return SetIssuerLimitRequest.deserialize(bytes);
        }
    }
    export class SetIssuerLimitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: dependency_1.common.Amount;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get limit() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 1) as dependency_1.common.Amount;
        }
        set limit(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_limit() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            limit?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            signature?: Uint8Array;
        }): SetIssuerLimitResponse {
            const message = new SetIssuerLimitResponse({});
            if (data.limit != null) {
                message.limit = dependency_1.common.Amount.fromObject(data.limit);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                signature?: Uint8Array;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_limit)
                writer.writeMessage(1, this.limit, () => this.limit.serialize(writer));
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetIssuerLimitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetIssuerLimitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.limit, () => message.limit = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetIssuerLimitResponse {
            return SetIssuerLimitResponse.deserialize(bytes);
        }
    }
    export class GetIssuerLimitsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            issuer_public_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("issuer_public_key" in data && data.issuer_public_key != undefined) {
                    this.issuer_public_key = data.issuer_public_key;
                }
            }
        }
        get issuer_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set issuer_public_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            issuer_public_key?: string;
        }): GetIssuerLimitsRequest {
            const message = new GetIssuerLimitsRequest({});
            if (data.issuer_public_key != null) {
                message.issuer_public_key = data.issuer_public_key;
            }
            return message;
        }
        toObject() {
            const data: {
                issuer_public_key?: string;
            } = {};
            if (this.issuer_public_key != null) {
                data.issuer_public_key = this.issuer_public_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.issuer_public_key.length)
                writer.writeString(2, this.issuer_public_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetIssuerLimitsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetIssuerLimitsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.issuer_public_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetIssuerLimitsRequest {
            return GetIssuerLimitsRequest.deserialize(bytes);
        }
    }
    export class GetIssuerLimitsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: dependency_1.common.Amount[];
            issuer_public_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("issuer_public_key" in data && data.issuer_public_key != undefined) {
                    this.issuer_public_key = data.issuer_public_key;
                }
            }
        }
        get limit() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.Amount, 1) as dependency_1.common.Amount[];
        }
        set limit(value: dependency_1.common.Amount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get issuer_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set issuer_public_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            limit?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>[];
            issuer_public_key?: string;
        }): GetIssuerLimitsResponse {
            const message = new GetIssuerLimitsResponse({});
            if (data.limit != null) {
                message.limit = data.limit.map(item => dependency_1.common.Amount.fromObject(item));
            }
            if (data.issuer_public_key != null) {
                message.issuer_public_key = data.issuer_public_key;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>[];
                issuer_public_key?: string;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit.map((item: dependency_1.common.Amount) => item.toObject());
            }
            if (this.issuer_public_key != null) {
                data.issuer_public_key = this.issuer_public_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit.length)
                writer.writeRepeatedMessage(1, this.limit, (item: dependency_1.common.Amount) => item.serialize(writer));
            if (this.issuer_public_key.length)
                writer.writeString(2, this.issuer_public_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetIssuerLimitsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetIssuerLimitsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.limit, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.common.Amount.deserialize(reader), dependency_1.common.Amount));
                        break;
                    case 2:
                        message.issuer_public_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetIssuerLimitsResponse {
            return GetIssuerLimitsResponse.deserialize(bytes);
        }
    }
    export class AuthorizeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            promissory_file?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("promissory_file" in data && data.promissory_file != undefined) {
                    this.promissory_file = data.promissory_file;
                }
            }
        }
        get promissory_file() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set promissory_file(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            promissory_file?: Uint8Array;
        }): AuthorizeRequest {
            const message = new AuthorizeRequest({});
            if (data.promissory_file != null) {
                message.promissory_file = data.promissory_file;
            }
            return message;
        }
        toObject() {
            const data: {
                promissory_file?: Uint8Array;
            } = {};
            if (this.promissory_file != null) {
                data.promissory_file = this.promissory_file;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.promissory_file.length)
                writer.writeBytes(1, this.promissory_file);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthorizeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthorizeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.promissory_file = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthorizeRequest {
            return AuthorizeRequest.deserialize(bytes);
        }
    }
    export class AuthorizeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            promissory_file?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("promissory_file" in data && data.promissory_file != undefined) {
                    this.promissory_file = data.promissory_file;
                }
            }
        }
        get promissory_file() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set promissory_file(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            promissory_file?: Uint8Array;
        }): AuthorizeResponse {
            const message = new AuthorizeResponse({});
            if (data.promissory_file != null) {
                message.promissory_file = data.promissory_file;
            }
            return message;
        }
        toObject() {
            const data: {
                promissory_file?: Uint8Array;
            } = {};
            if (this.promissory_file != null) {
                data.promissory_file = this.promissory_file;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.promissory_file.length)
                writer.writeBytes(1, this.promissory_file);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthorizeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthorizeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.promissory_file = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthorizeResponse {
            return AuthorizeResponse.deserialize(bytes);
        }
    }
    export class GetNetworkInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetNetworkInfoRequest {
            const message = new GetNetworkInfoRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNetworkInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNetworkInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNetworkInfoRequest {
            return GetNetworkInfoRequest.deserialize(bytes);
        }
    }
    export class GetNetworkInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            emissary?: string;
            transaction_manager?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("emissary" in data && data.emissary != undefined) {
                    this.emissary = data.emissary;
                }
                if ("transaction_manager" in data && data.transaction_manager != undefined) {
                    this.transaction_manager = data.transaction_manager;
                }
            }
        }
        get emissary() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set emissary(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction_manager() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set transaction_manager(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            emissary?: string;
            transaction_manager?: string;
        }): GetNetworkInfoResponse {
            const message = new GetNetworkInfoResponse({});
            if (data.emissary != null) {
                message.emissary = data.emissary;
            }
            if (data.transaction_manager != null) {
                message.transaction_manager = data.transaction_manager;
            }
            return message;
        }
        toObject() {
            const data: {
                emissary?: string;
                transaction_manager?: string;
            } = {};
            if (this.emissary != null) {
                data.emissary = this.emissary;
            }
            if (this.transaction_manager != null) {
                data.transaction_manager = this.transaction_manager;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.emissary.length)
                writer.writeString(1, this.emissary);
            if (this.transaction_manager.length)
                writer.writeString(2, this.transaction_manager);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNetworkInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNetworkInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.emissary = reader.readString();
                        break;
                    case 2:
                        message.transaction_manager = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNetworkInfoResponse {
            return GetNetworkInfoResponse.deserialize(bytes);
        }
    }
    export class GetNotaryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set verifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            verifier?: string;
        }): GetNotaryRequest {
            const message = new GetNotaryRequest({});
            if (data.verifier != null) {
                message.verifier = data.verifier;
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: string;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.verifier.length)
                writer.writeString(1, this.verifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNotaryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNotaryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.verifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNotaryRequest {
            return GetNotaryRequest.deserialize(bytes);
        }
    }
    export class GetNotaryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signature?: Uint8Array;
        }): GetNotaryResponse {
            const message = new GetNotaryResponse({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNotaryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNotaryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNotaryResponse {
            return GetNotaryResponse.deserialize(bytes);
        }
    }
    export class ListGovernedAssetsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ListGovernedAssetsRequest {
            const message = new ListGovernedAssetsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListGovernedAssetsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListGovernedAssetsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListGovernedAssetsRequest {
            return ListGovernedAssetsRequest.deserialize(bytes);
        }
    }
    export class ListGovernedAssetsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            asset_data?: Map<string, dependency_1.common.AssetDenomination>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("asset_data" in data && data.asset_data != undefined) {
                    this.asset_data = data.asset_data;
                }
            }
            if (!this.asset_data)
                this.asset_data = new Map();
        }
        get asset_data() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_1.common.AssetDenomination>;
        }
        set asset_data(value: Map<string, dependency_1.common.AssetDenomination>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            asset_data?: {
                [key: string]: ReturnType<typeof dependency_1.common.AssetDenomination.prototype.toObject>;
            };
        }): ListGovernedAssetsResponse {
            const message = new ListGovernedAssetsResponse({});
            if (typeof data.asset_data == "object") {
                message.asset_data = new Map(Object.entries(data.asset_data).map(([key, value]) => [key, dependency_1.common.AssetDenomination.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                asset_data?: {
                    [key: string]: ReturnType<typeof dependency_1.common.AssetDenomination.prototype.toObject>;
                };
            } = {};
            if (this.asset_data != null) {
                data.asset_data = (Object.fromEntries)((Array.from)(this.asset_data).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.asset_data) {
                writer.writeMessage(1, this.asset_data, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListGovernedAssetsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListGovernedAssetsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.asset_data as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.common.AssetDenomination.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListGovernedAssetsResponse {
            return ListGovernedAssetsResponse.deserialize(bytes);
        }
    }
    export class SetGovernedAssetsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            asset_data?: Map<string, dependency_1.common.AssetDenomination>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("asset_data" in data && data.asset_data != undefined) {
                    this.asset_data = data.asset_data;
                }
            }
            if (!this.asset_data)
                this.asset_data = new Map();
        }
        get asset_data() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_1.common.AssetDenomination>;
        }
        set asset_data(value: Map<string, dependency_1.common.AssetDenomination>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            asset_data?: {
                [key: string]: ReturnType<typeof dependency_1.common.AssetDenomination.prototype.toObject>;
            };
        }): SetGovernedAssetsRequest {
            const message = new SetGovernedAssetsRequest({});
            if (typeof data.asset_data == "object") {
                message.asset_data = new Map(Object.entries(data.asset_data).map(([key, value]) => [key, dependency_1.common.AssetDenomination.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                asset_data?: {
                    [key: string]: ReturnType<typeof dependency_1.common.AssetDenomination.prototype.toObject>;
                };
            } = {};
            if (this.asset_data != null) {
                data.asset_data = (Object.fromEntries)((Array.from)(this.asset_data).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.asset_data) {
                writer.writeMessage(1, this.asset_data, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGovernedAssetsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGovernedAssetsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.asset_data as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.common.AssetDenomination.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGovernedAssetsRequest {
            return SetGovernedAssetsRequest.deserialize(bytes);
        }
    }
    export class SetGovernedAssetsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetGovernedAssetsResponse {
            const message = new SetGovernedAssetsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGovernedAssetsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGovernedAssetsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGovernedAssetsResponse {
            return SetGovernedAssetsResponse.deserialize(bytes);
        }
    }
    export class AddAssetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            currency_code?: string;
            asset_denomination?: dependency_1.common.AssetDenomination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("currency_code" in data && data.currency_code != undefined) {
                    this.currency_code = data.currency_code;
                }
                if ("asset_denomination" in data && data.asset_denomination != undefined) {
                    this.asset_denomination = data.asset_denomination;
                }
            }
        }
        get currency_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set currency_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get asset_denomination() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AssetDenomination, 2) as dependency_1.common.AssetDenomination;
        }
        set asset_denomination(value: dependency_1.common.AssetDenomination) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_asset_denomination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            currency_code?: string;
            asset_denomination?: ReturnType<typeof dependency_1.common.AssetDenomination.prototype.toObject>;
        }): AddAssetRequest {
            const message = new AddAssetRequest({});
            if (data.currency_code != null) {
                message.currency_code = data.currency_code;
            }
            if (data.asset_denomination != null) {
                message.asset_denomination = dependency_1.common.AssetDenomination.fromObject(data.asset_denomination);
            }
            return message;
        }
        toObject() {
            const data: {
                currency_code?: string;
                asset_denomination?: ReturnType<typeof dependency_1.common.AssetDenomination.prototype.toObject>;
            } = {};
            if (this.currency_code != null) {
                data.currency_code = this.currency_code;
            }
            if (this.asset_denomination != null) {
                data.asset_denomination = this.asset_denomination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.currency_code.length)
                writer.writeString(1, this.currency_code);
            if (this.has_asset_denomination)
                writer.writeMessage(2, this.asset_denomination, () => this.asset_denomination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAssetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAssetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.currency_code = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.asset_denomination, () => message.asset_denomination = dependency_1.common.AssetDenomination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddAssetRequest {
            return AddAssetRequest.deserialize(bytes);
        }
    }
    export class AddAssetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddAssetResponse {
            const message = new AddAssetResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAssetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAssetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddAssetResponse {
            return AddAssetResponse.deserialize(bytes);
        }
    }
    export class RemoveAssetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            currency_code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("currency_code" in data && data.currency_code != undefined) {
                    this.currency_code = data.currency_code;
                }
            }
        }
        get currency_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set currency_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            currency_code?: string;
        }): RemoveAssetRequest {
            const message = new RemoveAssetRequest({});
            if (data.currency_code != null) {
                message.currency_code = data.currency_code;
            }
            return message;
        }
        toObject() {
            const data: {
                currency_code?: string;
            } = {};
            if (this.currency_code != null) {
                data.currency_code = this.currency_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.currency_code.length)
                writer.writeString(1, this.currency_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveAssetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveAssetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.currency_code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveAssetRequest {
            return RemoveAssetRequest.deserialize(bytes);
        }
    }
    export class RemoveAssetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RemoveAssetResponse {
            const message = new RemoveAssetResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveAssetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveAssetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveAssetResponse {
            return RemoveAssetResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthorityService {
        static definition = {
            SetIssuerLimit: {
                path: "/authority_api.v1.Authority/SetIssuerLimit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetIssuerLimitRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetIssuerLimitRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetIssuerLimitResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetIssuerLimitResponse.deserialize(new Uint8Array(bytes))
            },
            GetIssuerLimits: {
                path: "/authority_api.v1.Authority/GetIssuerLimits",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetIssuerLimitsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetIssuerLimitsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetIssuerLimitsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetIssuerLimitsResponse.deserialize(new Uint8Array(bytes))
            },
            GetNetworkInfo: {
                path: "/authority_api.v1.Authority/GetNetworkInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNetworkInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNetworkInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetNetworkInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetNetworkInfoResponse.deserialize(new Uint8Array(bytes))
            },
            GetNotary: {
                path: "/authority_api.v1.Authority/GetNotary",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNotaryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNotaryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetNotaryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetNotaryResponse.deserialize(new Uint8Array(bytes))
            },
            ListGovernedAssets: {
                path: "/authority_api.v1.Authority/ListGovernedAssets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListGovernedAssetsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListGovernedAssetsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListGovernedAssetsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListGovernedAssetsResponse.deserialize(new Uint8Array(bytes))
            },
            SetGovernedAssets: {
                path: "/authority_api.v1.Authority/SetGovernedAssets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetGovernedAssetsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetGovernedAssetsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetGovernedAssetsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetGovernedAssetsResponse.deserialize(new Uint8Array(bytes))
            },
            AddAsset: {
                path: "/authority_api.v1.Authority/AddAsset",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddAssetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddAssetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddAssetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddAssetResponse.deserialize(new Uint8Array(bytes))
            },
            RemoveAsset: {
                path: "/authority_api.v1.Authority/RemoveAsset",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RemoveAssetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RemoveAssetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RemoveAssetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RemoveAssetResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SetIssuerLimit(call: grpc_1.ServerUnaryCall<SetIssuerLimitRequest, SetIssuerLimitResponse>, callback: grpc_1.sendUnaryData<SetIssuerLimitResponse>): void;
        abstract GetIssuerLimits(call: grpc_1.ServerUnaryCall<GetIssuerLimitsRequest, GetIssuerLimitsResponse>, callback: grpc_1.sendUnaryData<GetIssuerLimitsResponse>): void;
        abstract GetNetworkInfo(call: grpc_1.ServerUnaryCall<GetNetworkInfoRequest, GetNetworkInfoResponse>, callback: grpc_1.sendUnaryData<GetNetworkInfoResponse>): void;
        abstract GetNotary(call: grpc_1.ServerUnaryCall<GetNotaryRequest, GetNotaryResponse>, callback: grpc_1.sendUnaryData<GetNotaryResponse>): void;
        abstract ListGovernedAssets(call: grpc_1.ServerUnaryCall<ListGovernedAssetsRequest, ListGovernedAssetsResponse>, callback: grpc_1.sendUnaryData<ListGovernedAssetsResponse>): void;
        abstract SetGovernedAssets(call: grpc_1.ServerUnaryCall<SetGovernedAssetsRequest, SetGovernedAssetsResponse>, callback: grpc_1.sendUnaryData<SetGovernedAssetsResponse>): void;
        abstract AddAsset(call: grpc_1.ServerUnaryCall<AddAssetRequest, AddAssetResponse>, callback: grpc_1.sendUnaryData<AddAssetResponse>): void;
        abstract RemoveAsset(call: grpc_1.ServerUnaryCall<RemoveAssetRequest, RemoveAssetResponse>, callback: grpc_1.sendUnaryData<RemoveAssetResponse>): void;
    }
    export class AuthorityClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthorityService.definition, "Authority", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SetIssuerLimit: GrpcUnaryServiceInterface<SetIssuerLimitRequest, SetIssuerLimitResponse> = (message: SetIssuerLimitRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetIssuerLimitResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetIssuerLimitResponse>, callback?: grpc_1.requestCallback<SetIssuerLimitResponse>): grpc_1.ClientUnaryCall => {
            return super.SetIssuerLimit(message, metadata, options, callback);
        };
        GetIssuerLimits: GrpcUnaryServiceInterface<GetIssuerLimitsRequest, GetIssuerLimitsResponse> = (message: GetIssuerLimitsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetIssuerLimitsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetIssuerLimitsResponse>, callback?: grpc_1.requestCallback<GetIssuerLimitsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetIssuerLimits(message, metadata, options, callback);
        };
        GetNetworkInfo: GrpcUnaryServiceInterface<GetNetworkInfoRequest, GetNetworkInfoResponse> = (message: GetNetworkInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetNetworkInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetNetworkInfoResponse>, callback?: grpc_1.requestCallback<GetNetworkInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.GetNetworkInfo(message, metadata, options, callback);
        };
        GetNotary: GrpcUnaryServiceInterface<GetNotaryRequest, GetNotaryResponse> = (message: GetNotaryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetNotaryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetNotaryResponse>, callback?: grpc_1.requestCallback<GetNotaryResponse>): grpc_1.ClientUnaryCall => {
            return super.GetNotary(message, metadata, options, callback);
        };
        ListGovernedAssets: GrpcUnaryServiceInterface<ListGovernedAssetsRequest, ListGovernedAssetsResponse> = (message: ListGovernedAssetsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListGovernedAssetsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListGovernedAssetsResponse>, callback?: grpc_1.requestCallback<ListGovernedAssetsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListGovernedAssets(message, metadata, options, callback);
        };
        SetGovernedAssets: GrpcUnaryServiceInterface<SetGovernedAssetsRequest, SetGovernedAssetsResponse> = (message: SetGovernedAssetsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetGovernedAssetsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetGovernedAssetsResponse>, callback?: grpc_1.requestCallback<SetGovernedAssetsResponse>): grpc_1.ClientUnaryCall => {
            return super.SetGovernedAssets(message, metadata, options, callback);
        };
        AddAsset: GrpcUnaryServiceInterface<AddAssetRequest, AddAssetResponse> = (message: AddAssetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddAssetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddAssetResponse>, callback?: grpc_1.requestCallback<AddAssetResponse>): grpc_1.ClientUnaryCall => {
            return super.AddAsset(message, metadata, options, callback);
        };
        RemoveAsset: GrpcUnaryServiceInterface<RemoveAssetRequest, RemoveAssetResponse> = (message: RemoveAssetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RemoveAssetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RemoveAssetResponse>, callback?: grpc_1.requestCallback<RemoveAssetResponse>): grpc_1.ClientUnaryCall => {
            return super.RemoveAsset(message, metadata, options, callback);
        };
    }
}
