/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: gateway/v1/gateway.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/v1/common";
import * as dependency_2 from "./../../common/v1/packet";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace gateway {
    export class LogEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verifier?: string;
            note?: string;
            timestamp?: string;
            origin?: string;
            connection_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
                if ("connection_id" in data && data.connection_id != undefined) {
                    this.connection_id = data.connection_id;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set verifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get note() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set note(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get origin() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set origin(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get connection_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set connection_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            verifier?: string;
            note?: string;
            timestamp?: string;
            origin?: string;
            connection_id?: string;
        }): LogEntry {
            const message = new LogEntry({});
            if (data.verifier != null) {
                message.verifier = data.verifier;
            }
            if (data.note != null) {
                message.note = data.note;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.origin != null) {
                message.origin = data.origin;
            }
            if (data.connection_id != null) {
                message.connection_id = data.connection_id;
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: string;
                note?: string;
                timestamp?: string;
                origin?: string;
                connection_id?: string;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier;
            }
            if (this.note != null) {
                data.note = this.note;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.origin != null) {
                data.origin = this.origin;
            }
            if (this.connection_id != null) {
                data.connection_id = this.connection_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.verifier.length)
                writer.writeString(1, this.verifier);
            if (this.note.length)
                writer.writeString(2, this.note);
            if (this.timestamp.length)
                writer.writeString(3, this.timestamp);
            if (this.origin.length)
                writer.writeString(4, this.origin);
            if (this.connection_id.length)
                writer.writeString(5, this.connection_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.verifier = reader.readString();
                        break;
                    case 2:
                        message.note = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readString();
                        break;
                    case 4:
                        message.origin = reader.readString();
                        break;
                    case 5:
                        message.connection_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogEntry {
            return LogEntry.deserialize(bytes);
        }
    }
    export class ConnectionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ConnectionsRequest {
            const message = new ConnectionsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectionsRequest {
            return ConnectionsRequest.deserialize(bytes);
        }
    }
    export class ConnectionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            active?: string[];
            created?: LogEntry[];
            removed?: LogEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("removed" in data && data.removed != undefined) {
                    this.removed = data.removed;
                }
            }
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set active(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getRepeatedWrapperField(this, LogEntry, 2) as LogEntry[];
        }
        set created(value: LogEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get removed() {
            return pb_1.Message.getRepeatedWrapperField(this, LogEntry, 3) as LogEntry[];
        }
        set removed(value: LogEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            active?: string[];
            created?: ReturnType<typeof LogEntry.prototype.toObject>[];
            removed?: ReturnType<typeof LogEntry.prototype.toObject>[];
        }): ConnectionsResponse {
            const message = new ConnectionsResponse({});
            if (data.active != null) {
                message.active = data.active;
            }
            if (data.created != null) {
                message.created = data.created.map(item => LogEntry.fromObject(item));
            }
            if (data.removed != null) {
                message.removed = data.removed.map(item => LogEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                active?: string[];
                created?: ReturnType<typeof LogEntry.prototype.toObject>[];
                removed?: ReturnType<typeof LogEntry.prototype.toObject>[];
            } = {};
            if (this.active != null) {
                data.active = this.active;
            }
            if (this.created != null) {
                data.created = this.created.map((item: LogEntry) => item.toObject());
            }
            if (this.removed != null) {
                data.removed = this.removed.map((item: LogEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.active.length)
                writer.writeRepeatedString(1, this.active);
            if (this.created.length)
                writer.writeRepeatedMessage(2, this.created, (item: LogEntry) => item.serialize(writer));
            if (this.removed.length)
                writer.writeRepeatedMessage(3, this.removed, (item: LogEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.created, () => pb_1.Message.addToRepeatedWrapperField(message, 2, LogEntry.deserialize(reader), LogEntry));
                        break;
                    case 3:
                        reader.readMessage(message.removed, () => pb_1.Message.addToRepeatedWrapperField(message, 3, LogEntry.deserialize(reader), LogEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectionsResponse {
            return ConnectionsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGatewayService {
        static definition = {
            Authenticate: {
                path: "/gateway.Gateway/Authenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.AuthenticationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.AuthenticationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.common.AuthenticationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.common.AuthenticationResponse.deserialize(new Uint8Array(bytes))
            },
            Data: {
                path: "/gateway.Gateway/Data",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: dependency_2.common.Packet) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.common.Packet.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.common.Packet) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.common.Packet.deserialize(new Uint8Array(bytes))
            },
            GetConnections: {
                path: "/gateway.Gateway/GetConnections",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConnectionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConnectionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConnectionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConnectionsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Authenticate(call: grpc_1.ServerUnaryCall<dependency_1.common.AuthenticationRequest, dependency_1.common.AuthenticationResponse>, callback: grpc_1.sendUnaryData<dependency_1.common.AuthenticationResponse>): void;
        abstract Data(call: grpc_1.ServerDuplexStream<dependency_2.common.Packet, dependency_2.common.Packet>): void;
        abstract GetConnections(call: grpc_1.ServerUnaryCall<ConnectionsRequest, ConnectionsResponse>, callback: grpc_1.sendUnaryData<ConnectionsResponse>): void;
    }
    export class GatewayClient extends grpc_1.makeGenericClientConstructor(UnimplementedGatewayService.definition, "Gateway", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Authenticate: GrpcUnaryServiceInterface<dependency_1.common.AuthenticationRequest, dependency_1.common.AuthenticationResponse> = (message: dependency_1.common.AuthenticationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.AuthenticationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.AuthenticationResponse>, callback?: grpc_1.requestCallback<dependency_1.common.AuthenticationResponse>): grpc_1.ClientUnaryCall => {
            return super.Authenticate(message, metadata, options, callback);
        };
        Data: GrpcChunkServiceInterface<dependency_2.common.Packet, dependency_2.common.Packet> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<dependency_2.common.Packet, dependency_2.common.Packet> => {
            return super.Data(metadata, options);
        };
        GetConnections: GrpcUnaryServiceInterface<ConnectionsRequest, ConnectionsResponse> = (message: ConnectionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConnectionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConnectionsResponse>, callback?: grpc_1.requestCallback<ConnectionsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetConnections(message, metadata, options, callback);
        };
    }
}
