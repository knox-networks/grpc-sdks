/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: webhook_api/v1/webhook.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/v1/common";
import * as dependency_2 from "./../../common/v1/packet";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace webhook_api.v1 {
    export enum DeliveryStage {
        DELIVERY_STAGE_UNSPECIFIED = 0,
        DELIVERY_STAGE_FIRST_RETRY = 1,
        DELIVERY_STAGE_SECOND_RETRY = 2,
        DELIVERY_STAGE_THIRD_RETRY = 3,
        DELIVERY_STAGE_FOURTH_RETRY = 4,
        DELIVERY_STAGE_FIFTH_RETRY = 5,
        DELIVERY_STAGE_FAILED = 6,
        DELIVERY_STAGE_SUCCESS = 7
    }
    export enum EventType {
        EVENT_TYPE_UNSPECIFIED = 0,
        EVENT_TYPE_WALLET_CREATED = 1,
        EVENT_TYPE_PROMISSORY_RECEIVED = 2,
        EVENT_TYPE_PING = 3,
        EVENT_TYPE_CONTRACT_PROPOSAL_COMPLETED = 4,
        EVENT_TYPE_CONTRACT_PAYMENT_COMPLETED = 5
    }
    export enum DeliveryMethodType {
        DELIVERY_METHOD_TYPE_UNSPECIFIED = 0,
        DELIVERY_METHOD_TYPE_HTTP = 1,
        DELIVERY_METHOD_TYPE_GRPC = 2
    }
    export enum ScheduleReactionType {
        SCHEDULE_REACTION_TYPE_UNSPECIFIED = 0,
        SCHEDULE_REACTION_TYPE_CREATE_CONTRACT = 1
    }
    export enum PrevalidationTriggerType {
        PREVALIDATION_TRIGGER_UNSPECIFIED = 0,
        PREVALIDATION_TRIGGER_CONSIDERING_CONTRACT = 1
    }
    export enum ValidationOperator {
        VALIDATION_OPERATOR_UNSPECIFIED = 0,
        VALIDATION_OPERATOR_EQUAL = 1,
        VALIDATION_OPERATOR_GREATER_THAN = 2,
        VALIDATION_OPERATOR_GREATER_THAN_OR_EQUAL = 3,
        VALIDATION_OPERATOR_LESS_THAN = 4,
        VALIDATION_OPERATOR_LESS_THAN_OR_EQUAL = 5,
        VALIDATION_OPERATOR_NOT_EQUAL = 6
    }
    export enum ValidationTarget {
        VALIDATION_TARGET_UNSPECIFIED = 0,
        VALIDATION_TARGET_RECIPIENT_BALANCE = 1,
        VALIDATION_TARGET_RECIPIENT_CREDENTIALS = 2
    }
    export class Webhook extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            owner_id?: string;
            name?: string;
            webhook_url?: string;
            supported_events?: EventType[];
            delivery_method?: DeliveryMethodType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("webhook_url" in data && data.webhook_url != undefined) {
                    this.webhook_url = data.webhook_url;
                }
                if ("supported_events" in data && data.supported_events != undefined) {
                    this.supported_events = data.supported_events;
                }
                if ("delivery_method" in data && data.delivery_method != undefined) {
                    this.delivery_method = data.delivery_method;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get webhook_url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set webhook_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get supported_events() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as EventType[];
        }
        set supported_events(value: EventType[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get delivery_method() {
            return pb_1.Message.getFieldWithDefault(this, 6, DeliveryMethodType.DELIVERY_METHOD_TYPE_UNSPECIFIED) as DeliveryMethodType;
        }
        set delivery_method(value: DeliveryMethodType) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            owner_id?: string;
            name?: string;
            webhook_url?: string;
            supported_events?: EventType[];
            delivery_method?: DeliveryMethodType;
        }): Webhook {
            const message = new Webhook({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.webhook_url != null) {
                message.webhook_url = data.webhook_url;
            }
            if (data.supported_events != null) {
                message.supported_events = data.supported_events;
            }
            if (data.delivery_method != null) {
                message.delivery_method = data.delivery_method;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                owner_id?: string;
                name?: string;
                webhook_url?: string;
                supported_events?: EventType[];
                delivery_method?: DeliveryMethodType;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.webhook_url != null) {
                data.webhook_url = this.webhook_url;
            }
            if (this.supported_events != null) {
                data.supported_events = this.supported_events;
            }
            if (this.delivery_method != null) {
                data.delivery_method = this.delivery_method;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.owner_id.length)
                writer.writeString(2, this.owner_id);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.webhook_url.length)
                writer.writeString(4, this.webhook_url);
            if (this.supported_events.length)
                writer.writePackedEnum(5, this.supported_events);
            if (this.delivery_method != DeliveryMethodType.DELIVERY_METHOD_TYPE_UNSPECIFIED)
                writer.writeEnum(6, this.delivery_method);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Webhook {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Webhook();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.owner_id = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.webhook_url = reader.readString();
                        break;
                    case 5:
                        message.supported_events = reader.readPackedEnum();
                        break;
                    case 6:
                        message.delivery_method = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Webhook {
            return Webhook.deserialize(bytes);
        }
    }
    export class CreateWalletPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            did?: string;
            created?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set created(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            did?: string;
            created?: string;
        }): CreateWalletPayload {
            const message = new CreateWalletPayload({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                did?: string;
                created?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.did.length)
                writer.writeString(2, this.did);
            if (this.created.length)
                writer.writeString(3, this.created);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWalletPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWalletPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.did = reader.readString();
                        break;
                    case 3:
                        message.created = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWalletPayload {
            return CreateWalletPayload.deserialize(bytes);
        }
    }
    export class PromissoryReceivedPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wallet_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
            }
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            wallet_id?: string;
        }): PromissoryReceivedPayload {
            const message = new PromissoryReceivedPayload({});
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            return message;
        }
        toObject() {
            const data: {
                wallet_id?: string;
            } = {};
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wallet_id.length)
                writer.writeString(1, this.wallet_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromissoryReceivedPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PromissoryReceivedPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wallet_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromissoryReceivedPayload {
            return PromissoryReceivedPayload.deserialize(bytes);
        }
    }
    export class PingPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): PingPayload {
            const message = new PingPayload({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingPayload {
            return PingPayload.deserialize(bytes);
        }
    }
    export class ContractProposalCompletedPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_id?: string;
            owner_id?: string;
            wallet_id?: string;
            commitments?: dependency_2.common.Commitment[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
            }
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Commitment, 4) as dependency_2.common.Commitment[];
        }
        set commitments(value: dependency_2.common.Commitment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            contract_id?: string;
            owner_id?: string;
            wallet_id?: string;
            commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
        }): ContractProposalCompletedPayload {
            const message = new ContractProposalCompletedPayload({});
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_2.common.Commitment.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                contract_id?: string;
                owner_id?: string;
                wallet_id?: string;
                commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
            } = {};
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_2.common.Commitment) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_id.length)
                writer.writeString(1, this.contract_id);
            if (this.owner_id.length)
                writer.writeString(2, this.owner_id);
            if (this.wallet_id.length)
                writer.writeString(3, this.wallet_id);
            if (this.commitments.length)
                writer.writeRepeatedMessage(4, this.commitments, (item: dependency_2.common.Commitment) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractProposalCompletedPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractProposalCompletedPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_id = reader.readString();
                        break;
                    case 2:
                        message.owner_id = reader.readString();
                        break;
                    case 3:
                        message.wallet_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.common.Commitment.deserialize(reader), dependency_2.common.Commitment));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractProposalCompletedPayload {
            return ContractProposalCompletedPayload.deserialize(bytes);
        }
    }
    export class ContractPaymentCompletedPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_id?: string;
            owner_id?: string;
            wallet_id?: string;
            commitments?: dependency_2.common.Commitment[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("wallet_id" in data && data.wallet_id != undefined) {
                    this.wallet_id = data.wallet_id;
                }
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
            }
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set wallet_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Commitment, 4) as dependency_2.common.Commitment[];
        }
        set commitments(value: dependency_2.common.Commitment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            contract_id?: string;
            owner_id?: string;
            wallet_id?: string;
            commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
        }): ContractPaymentCompletedPayload {
            const message = new ContractPaymentCompletedPayload({});
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.wallet_id != null) {
                message.wallet_id = data.wallet_id;
            }
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_2.common.Commitment.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                contract_id?: string;
                owner_id?: string;
                wallet_id?: string;
                commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
            } = {};
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.wallet_id != null) {
                data.wallet_id = this.wallet_id;
            }
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_2.common.Commitment) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_id.length)
                writer.writeString(1, this.contract_id);
            if (this.owner_id.length)
                writer.writeString(2, this.owner_id);
            if (this.wallet_id.length)
                writer.writeString(3, this.wallet_id);
            if (this.commitments.length)
                writer.writeRepeatedMessage(4, this.commitments, (item: dependency_2.common.Commitment) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractPaymentCompletedPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractPaymentCompletedPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_id = reader.readString();
                        break;
                    case 2:
                        message.owner_id = reader.readString();
                        break;
                    case 3:
                        message.wallet_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.common.Commitment.deserialize(reader), dependency_2.common.Commitment));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractPaymentCompletedPayload {
            return ContractPaymentCompletedPayload.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[6, 7, 8, 10, 11]];
        constructor(data?: any[] | ({
            event_type?: EventType;
            signature?: string;
            event_id?: string;
            delivery_date?: string;
            owner_id?: string;
            created_date?: string;
        } & (({
            wallet_created_payload?: CreateWalletPayload;
            promissory_received_payload?: never;
            ping_payload?: never;
            contract_proposal_completed_payload?: never;
            contract_payment_completed_payload?: never;
        } | {
            wallet_created_payload?: never;
            promissory_received_payload?: PromissoryReceivedPayload;
            ping_payload?: never;
            contract_proposal_completed_payload?: never;
            contract_payment_completed_payload?: never;
        } | {
            wallet_created_payload?: never;
            promissory_received_payload?: never;
            ping_payload?: PingPayload;
            contract_proposal_completed_payload?: never;
            contract_payment_completed_payload?: never;
        } | {
            wallet_created_payload?: never;
            promissory_received_payload?: never;
            ping_payload?: never;
            contract_proposal_completed_payload?: ContractProposalCompletedPayload;
            contract_payment_completed_payload?: never;
        } | {
            wallet_created_payload?: never;
            promissory_received_payload?: never;
            ping_payload?: never;
            contract_proposal_completed_payload?: never;
            contract_payment_completed_payload?: ContractPaymentCompletedPayload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("delivery_date" in data && data.delivery_date != undefined) {
                    this.delivery_date = data.delivery_date;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("wallet_created_payload" in data && data.wallet_created_payload != undefined) {
                    this.wallet_created_payload = data.wallet_created_payload;
                }
                if ("promissory_received_payload" in data && data.promissory_received_payload != undefined) {
                    this.promissory_received_payload = data.promissory_received_payload;
                }
                if ("ping_payload" in data && data.ping_payload != undefined) {
                    this.ping_payload = data.ping_payload;
                }
                if ("contract_proposal_completed_payload" in data && data.contract_proposal_completed_payload != undefined) {
                    this.contract_proposal_completed_payload = data.contract_proposal_completed_payload;
                }
                if ("contract_payment_completed_payload" in data && data.contract_payment_completed_payload != undefined) {
                    this.contract_payment_completed_payload = data.contract_payment_completed_payload;
                }
                if ("created_date" in data && data.created_date != undefined) {
                    this.created_date = data.created_date;
                }
            }
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, EventType.EVENT_TYPE_UNSPECIFIED) as EventType;
        }
        set event_type(value: EventType) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get delivery_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set delivery_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set owner_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get wallet_created_payload() {
            return pb_1.Message.getWrapperField(this, CreateWalletPayload, 6) as CreateWalletPayload;
        }
        set wallet_created_payload(value: CreateWalletPayload) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_wallet_created_payload() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get promissory_received_payload() {
            return pb_1.Message.getWrapperField(this, PromissoryReceivedPayload, 7) as PromissoryReceivedPayload;
        }
        set promissory_received_payload(value: PromissoryReceivedPayload) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_promissory_received_payload() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get ping_payload() {
            return pb_1.Message.getWrapperField(this, PingPayload, 8) as PingPayload;
        }
        set ping_payload(value: PingPayload) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_ping_payload() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get contract_proposal_completed_payload() {
            return pb_1.Message.getWrapperField(this, ContractProposalCompletedPayload, 10) as ContractProposalCompletedPayload;
        }
        set contract_proposal_completed_payload(value: ContractProposalCompletedPayload) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_contract_proposal_completed_payload() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get contract_payment_completed_payload() {
            return pb_1.Message.getWrapperField(this, ContractPaymentCompletedPayload, 11) as ContractPaymentCompletedPayload;
        }
        set contract_payment_completed_payload(value: ContractPaymentCompletedPayload) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_contract_payment_completed_payload() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get created_date() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set created_date(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "wallet_created_payload" | "promissory_received_payload" | "ping_payload" | "contract_proposal_completed_payload" | "contract_payment_completed_payload";
            } = {
                0: "none",
                6: "wallet_created_payload",
                7: "promissory_received_payload",
                8: "ping_payload",
                10: "contract_proposal_completed_payload",
                11: "contract_payment_completed_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6, 7, 8, 10, 11])];
        }
        static fromObject(data: {
            event_type?: EventType;
            signature?: string;
            event_id?: string;
            delivery_date?: string;
            owner_id?: string;
            wallet_created_payload?: ReturnType<typeof CreateWalletPayload.prototype.toObject>;
            promissory_received_payload?: ReturnType<typeof PromissoryReceivedPayload.prototype.toObject>;
            ping_payload?: ReturnType<typeof PingPayload.prototype.toObject>;
            contract_proposal_completed_payload?: ReturnType<typeof ContractProposalCompletedPayload.prototype.toObject>;
            contract_payment_completed_payload?: ReturnType<typeof ContractPaymentCompletedPayload.prototype.toObject>;
            created_date?: string;
        }): Event {
            const message = new Event({});
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.delivery_date != null) {
                message.delivery_date = data.delivery_date;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.wallet_created_payload != null) {
                message.wallet_created_payload = CreateWalletPayload.fromObject(data.wallet_created_payload);
            }
            if (data.promissory_received_payload != null) {
                message.promissory_received_payload = PromissoryReceivedPayload.fromObject(data.promissory_received_payload);
            }
            if (data.ping_payload != null) {
                message.ping_payload = PingPayload.fromObject(data.ping_payload);
            }
            if (data.contract_proposal_completed_payload != null) {
                message.contract_proposal_completed_payload = ContractProposalCompletedPayload.fromObject(data.contract_proposal_completed_payload);
            }
            if (data.contract_payment_completed_payload != null) {
                message.contract_payment_completed_payload = ContractPaymentCompletedPayload.fromObject(data.contract_payment_completed_payload);
            }
            if (data.created_date != null) {
                message.created_date = data.created_date;
            }
            return message;
        }
        toObject() {
            const data: {
                event_type?: EventType;
                signature?: string;
                event_id?: string;
                delivery_date?: string;
                owner_id?: string;
                wallet_created_payload?: ReturnType<typeof CreateWalletPayload.prototype.toObject>;
                promissory_received_payload?: ReturnType<typeof PromissoryReceivedPayload.prototype.toObject>;
                ping_payload?: ReturnType<typeof PingPayload.prototype.toObject>;
                contract_proposal_completed_payload?: ReturnType<typeof ContractProposalCompletedPayload.prototype.toObject>;
                contract_payment_completed_payload?: ReturnType<typeof ContractPaymentCompletedPayload.prototype.toObject>;
                created_date?: string;
            } = {};
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.delivery_date != null) {
                data.delivery_date = this.delivery_date;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.wallet_created_payload != null) {
                data.wallet_created_payload = this.wallet_created_payload.toObject();
            }
            if (this.promissory_received_payload != null) {
                data.promissory_received_payload = this.promissory_received_payload.toObject();
            }
            if (this.ping_payload != null) {
                data.ping_payload = this.ping_payload.toObject();
            }
            if (this.contract_proposal_completed_payload != null) {
                data.contract_proposal_completed_payload = this.contract_proposal_completed_payload.toObject();
            }
            if (this.contract_payment_completed_payload != null) {
                data.contract_payment_completed_payload = this.contract_payment_completed_payload.toObject();
            }
            if (this.created_date != null) {
                data.created_date = this.created_date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_type != EventType.EVENT_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.event_type);
            if (this.signature.length)
                writer.writeString(2, this.signature);
            if (this.event_id.length)
                writer.writeString(3, this.event_id);
            if (this.delivery_date.length)
                writer.writeString(4, this.delivery_date);
            if (this.owner_id.length)
                writer.writeString(5, this.owner_id);
            if (this.has_wallet_created_payload)
                writer.writeMessage(6, this.wallet_created_payload, () => this.wallet_created_payload.serialize(writer));
            if (this.has_promissory_received_payload)
                writer.writeMessage(7, this.promissory_received_payload, () => this.promissory_received_payload.serialize(writer));
            if (this.has_ping_payload)
                writer.writeMessage(8, this.ping_payload, () => this.ping_payload.serialize(writer));
            if (this.has_contract_proposal_completed_payload)
                writer.writeMessage(10, this.contract_proposal_completed_payload, () => this.contract_proposal_completed_payload.serialize(writer));
            if (this.has_contract_payment_completed_payload)
                writer.writeMessage(11, this.contract_payment_completed_payload, () => this.contract_payment_completed_payload.serialize(writer));
            if (this.created_date.length)
                writer.writeString(9, this.created_date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_type = reader.readEnum();
                        break;
                    case 2:
                        message.signature = reader.readString();
                        break;
                    case 3:
                        message.event_id = reader.readString();
                        break;
                    case 4:
                        message.delivery_date = reader.readString();
                        break;
                    case 5:
                        message.owner_id = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.wallet_created_payload, () => message.wallet_created_payload = CreateWalletPayload.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.promissory_received_payload, () => message.promissory_received_payload = PromissoryReceivedPayload.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.ping_payload, () => message.ping_payload = PingPayload.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.contract_proposal_completed_payload, () => message.contract_proposal_completed_payload = ContractProposalCompletedPayload.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.contract_payment_completed_payload, () => message.contract_payment_completed_payload = ContractPaymentCompletedPayload.deserialize(reader));
                        break;
                    case 9:
                        message.created_date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class CreateWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            name?: string;
            supported_events?: EventType[];
            webhook_url?: string;
            delivery_method?: DeliveryMethodType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("supported_events" in data && data.supported_events != undefined) {
                    this.supported_events = data.supported_events;
                }
                if ("webhook_url" in data && data.webhook_url != undefined) {
                    this.webhook_url = data.webhook_url;
                }
                if ("delivery_method" in data && data.delivery_method != undefined) {
                    this.delivery_method = data.delivery_method;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get supported_events() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as EventType[];
        }
        set supported_events(value: EventType[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get webhook_url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set webhook_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get delivery_method() {
            return pb_1.Message.getFieldWithDefault(this, 5, DeliveryMethodType.DELIVERY_METHOD_TYPE_UNSPECIFIED) as DeliveryMethodType;
        }
        set delivery_method(value: DeliveryMethodType) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            api_key?: string;
            name?: string;
            supported_events?: EventType[];
            webhook_url?: string;
            delivery_method?: DeliveryMethodType;
        }): CreateWebhookRequest {
            const message = new CreateWebhookRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.supported_events != null) {
                message.supported_events = data.supported_events;
            }
            if (data.webhook_url != null) {
                message.webhook_url = data.webhook_url;
            }
            if (data.delivery_method != null) {
                message.delivery_method = data.delivery_method;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                name?: string;
                supported_events?: EventType[];
                webhook_url?: string;
                delivery_method?: DeliveryMethodType;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.supported_events != null) {
                data.supported_events = this.supported_events;
            }
            if (this.webhook_url != null) {
                data.webhook_url = this.webhook_url;
            }
            if (this.delivery_method != null) {
                data.delivery_method = this.delivery_method;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.supported_events.length)
                writer.writePackedEnum(3, this.supported_events);
            if (this.webhook_url.length)
                writer.writeString(4, this.webhook_url);
            if (this.delivery_method != DeliveryMethodType.DELIVERY_METHOD_TYPE_UNSPECIFIED)
                writer.writeEnum(5, this.delivery_method);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.supported_events = reader.readPackedEnum();
                        break;
                    case 4:
                        message.webhook_url = reader.readString();
                        break;
                    case 5:
                        message.delivery_method = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWebhookRequest {
            return CreateWebhookRequest.deserialize(bytes);
        }
    }
    export class CreateWebhookResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhook_public_key?: string;
            webhook?: Webhook;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhook_public_key" in data && data.webhook_public_key != undefined) {
                    this.webhook_public_key = data.webhook_public_key;
                }
                if ("webhook" in data && data.webhook != undefined) {
                    this.webhook = data.webhook;
                }
            }
        }
        get webhook_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set webhook_public_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get webhook() {
            return pb_1.Message.getWrapperField(this, Webhook, 2) as Webhook;
        }
        set webhook(value: Webhook) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_webhook() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            webhook_public_key?: string;
            webhook?: ReturnType<typeof Webhook.prototype.toObject>;
        }): CreateWebhookResponse {
            const message = new CreateWebhookResponse({});
            if (data.webhook_public_key != null) {
                message.webhook_public_key = data.webhook_public_key;
            }
            if (data.webhook != null) {
                message.webhook = Webhook.fromObject(data.webhook);
            }
            return message;
        }
        toObject() {
            const data: {
                webhook_public_key?: string;
                webhook?: ReturnType<typeof Webhook.prototype.toObject>;
            } = {};
            if (this.webhook_public_key != null) {
                data.webhook_public_key = this.webhook_public_key;
            }
            if (this.webhook != null) {
                data.webhook = this.webhook.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhook_public_key.length)
                writer.writeString(1, this.webhook_public_key);
            if (this.has_webhook)
                writer.writeMessage(2, this.webhook, () => this.webhook.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWebhookResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWebhookResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.webhook_public_key = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.webhook, () => message.webhook = Webhook.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWebhookResponse {
            return CreateWebhookResponse.deserialize(bytes);
        }
    }
    export class ListWebhooksRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            page?: number;
            page_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            api_key?: string;
            page?: number;
            page_size?: number;
        }): ListWebhooksRequest {
            const message = new ListWebhooksRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                page?: number;
                page_size?: number;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWebhooksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWebhooksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWebhooksRequest {
            return ListWebhooksRequest.deserialize(bytes);
        }
    }
    export class ListWebhooksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhooks?: Webhook[];
            total_owned_webhooks?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhooks" in data && data.webhooks != undefined) {
                    this.webhooks = data.webhooks;
                }
                if ("total_owned_webhooks" in data && data.total_owned_webhooks != undefined) {
                    this.total_owned_webhooks = data.total_owned_webhooks;
                }
            }
        }
        get webhooks() {
            return pb_1.Message.getRepeatedWrapperField(this, Webhook, 1) as Webhook[];
        }
        set webhooks(value: Webhook[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_webhooks() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_webhooks(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            webhooks?: ReturnType<typeof Webhook.prototype.toObject>[];
            total_owned_webhooks?: number;
        }): ListWebhooksResponse {
            const message = new ListWebhooksResponse({});
            if (data.webhooks != null) {
                message.webhooks = data.webhooks.map(item => Webhook.fromObject(item));
            }
            if (data.total_owned_webhooks != null) {
                message.total_owned_webhooks = data.total_owned_webhooks;
            }
            return message;
        }
        toObject() {
            const data: {
                webhooks?: ReturnType<typeof Webhook.prototype.toObject>[];
                total_owned_webhooks?: number;
            } = {};
            if (this.webhooks != null) {
                data.webhooks = this.webhooks.map((item: Webhook) => item.toObject());
            }
            if (this.total_owned_webhooks != null) {
                data.total_owned_webhooks = this.total_owned_webhooks;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhooks.length)
                writer.writeRepeatedMessage(1, this.webhooks, (item: Webhook) => item.serialize(writer));
            if (this.total_owned_webhooks != 0)
                writer.writeUint32(2, this.total_owned_webhooks);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWebhooksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWebhooksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.webhooks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Webhook.deserialize(reader), Webhook));
                        break;
                    case 2:
                        message.total_owned_webhooks = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWebhooksResponse {
            return ListWebhooksResponse.deserialize(bytes);
        }
    }
    export class DeleteWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            webhook_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("webhook_id" in data && data.webhook_id != undefined) {
                    this.webhook_id = data.webhook_id;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get webhook_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set webhook_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            api_key?: string;
            webhook_id?: string;
        }): DeleteWebhookRequest {
            const message = new DeleteWebhookRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.webhook_id != null) {
                message.webhook_id = data.webhook_id;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                webhook_id?: string;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.webhook_id != null) {
                data.webhook_id = this.webhook_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.webhook_id.length)
                writer.writeString(2, this.webhook_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.webhook_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteWebhookRequest {
            return DeleteWebhookRequest.deserialize(bytes);
        }
    }
    export class DeleteWebhookResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteWebhookResponse {
            const message = new DeleteWebhookResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteWebhookResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteWebhookResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteWebhookResponse {
            return DeleteWebhookResponse.deserialize(bytes);
        }
    }
    export class EventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event?: Event;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
            }
        }
        get event() {
            return pb_1.Message.getWrapperField(this, Event, 1) as Event;
        }
        set event(value: Event) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            event?: ReturnType<typeof Event.prototype.toObject>;
        }): EventRequest {
            const message = new EventRequest({});
            if (data.event != null) {
                message.event = Event.fromObject(data.event);
            }
            return message;
        }
        toObject() {
            const data: {
                event?: ReturnType<typeof Event.prototype.toObject>;
            } = {};
            if (this.event != null) {
                data.event = this.event.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event)
                writer.writeMessage(1, this.event, () => this.event.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event, () => message.event = Event.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventRequest {
            return EventRequest.deserialize(bytes);
        }
    }
    export class EventResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EventResponse {
            const message = new EventResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventResponse {
            return EventResponse.deserialize(bytes);
        }
    }
    export class ListEventsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 4) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 5) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListEventsRequest {
            const message = new ListEventsRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                page?: number;
                page_size?: number;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.has_filters)
                writer.writeMessage(4, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(5, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEventsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEventsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEventsRequest {
            return ListEventsRequest.deserialize(bytes);
        }
    }
    export class ListEventsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: Event[];
            total_owned_events?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("total_owned_events" in data && data.total_owned_events != undefined) {
                    this.total_owned_events = data.total_owned_events;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 1) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_events() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_events(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof Event.prototype.toObject>[];
            total_owned_events?: number;
        }): ListEventsResponse {
            const message = new ListEventsResponse({});
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            if (data.total_owned_events != null) {
                message.total_owned_events = data.total_owned_events;
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof Event.prototype.toObject>[];
                total_owned_events?: number;
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            if (this.total_owned_events != null) {
                data.total_owned_events = this.total_owned_events;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: Event) => item.serialize(writer));
            if (this.total_owned_events != 0)
                writer.writeUint32(2, this.total_owned_events);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEventsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEventsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Event.deserialize(reader), Event));
                        break;
                    case 2:
                        message.total_owned_events = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEventsResponse {
            return ListEventsResponse.deserialize(bytes);
        }
    }
    export class RetryEventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            event_id?: string;
            webhook_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("webhook_id" in data && data.webhook_id != undefined) {
                    this.webhook_id = data.webhook_id;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get webhook_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set webhook_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            api_key?: string;
            event_id?: string;
            webhook_id?: string;
        }): RetryEventRequest {
            const message = new RetryEventRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.webhook_id != null) {
                message.webhook_id = data.webhook_id;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                event_id?: string;
                webhook_id?: string;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.webhook_id != null) {
                data.webhook_id = this.webhook_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.event_id.length)
                writer.writeString(2, this.event_id);
            if (this.webhook_id.length)
                writer.writeString(3, this.webhook_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RetryEventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RetryEventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.event_id = reader.readString();
                        break;
                    case 3:
                        message.webhook_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RetryEventRequest {
            return RetryEventRequest.deserialize(bytes);
        }
    }
    export class RetryEventResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RetryEventResponse {
            const message = new RetryEventResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RetryEventResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RetryEventResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RetryEventResponse {
            return RetryEventResponse.deserialize(bytes);
        }
    }
    export class PingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            api_key?: string;
            message?: string;
        }): PingRequest {
            const message = new PingRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                message?: string;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingRequest {
            return PingRequest.deserialize(bytes);
        }
    }
    export class PingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): PingResponse {
            const message = new PingResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingResponse {
            return PingResponse.deserialize(bytes);
        }
    }
    export class ListDeliveryHistoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 4) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 5) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListDeliveryHistoryRequest {
            const message = new ListDeliveryHistoryRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                page?: number;
                page_size?: number;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.has_filters)
                writer.writeMessage(4, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(5, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDeliveryHistoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDeliveryHistoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDeliveryHistoryRequest {
            return ListDeliveryHistoryRequest.deserialize(bytes);
        }
    }
    export class ListDeliveryHistoryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delivery_history?: ListDeliveryHistoryResponse.DeliveryHistory[];
            total_owned_delivery_history?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delivery_history" in data && data.delivery_history != undefined) {
                    this.delivery_history = data.delivery_history;
                }
                if ("total_owned_delivery_history" in data && data.total_owned_delivery_history != undefined) {
                    this.total_owned_delivery_history = data.total_owned_delivery_history;
                }
            }
        }
        get delivery_history() {
            return pb_1.Message.getRepeatedWrapperField(this, ListDeliveryHistoryResponse.DeliveryHistory, 1) as ListDeliveryHistoryResponse.DeliveryHistory[];
        }
        set delivery_history(value: ListDeliveryHistoryResponse.DeliveryHistory[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_delivery_history() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_delivery_history(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            delivery_history?: ReturnType<typeof ListDeliveryHistoryResponse.DeliveryHistory.prototype.toObject>[];
            total_owned_delivery_history?: number;
        }): ListDeliveryHistoryResponse {
            const message = new ListDeliveryHistoryResponse({});
            if (data.delivery_history != null) {
                message.delivery_history = data.delivery_history.map(item => ListDeliveryHistoryResponse.DeliveryHistory.fromObject(item));
            }
            if (data.total_owned_delivery_history != null) {
                message.total_owned_delivery_history = data.total_owned_delivery_history;
            }
            return message;
        }
        toObject() {
            const data: {
                delivery_history?: ReturnType<typeof ListDeliveryHistoryResponse.DeliveryHistory.prototype.toObject>[];
                total_owned_delivery_history?: number;
            } = {};
            if (this.delivery_history != null) {
                data.delivery_history = this.delivery_history.map((item: ListDeliveryHistoryResponse.DeliveryHistory) => item.toObject());
            }
            if (this.total_owned_delivery_history != null) {
                data.total_owned_delivery_history = this.total_owned_delivery_history;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delivery_history.length)
                writer.writeRepeatedMessage(1, this.delivery_history, (item: ListDeliveryHistoryResponse.DeliveryHistory) => item.serialize(writer));
            if (this.total_owned_delivery_history != 0)
                writer.writeUint32(2, this.total_owned_delivery_history);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDeliveryHistoryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDeliveryHistoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.delivery_history, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ListDeliveryHistoryResponse.DeliveryHistory.deserialize(reader), ListDeliveryHistoryResponse.DeliveryHistory));
                        break;
                    case 2:
                        message.total_owned_delivery_history = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDeliveryHistoryResponse {
            return ListDeliveryHistoryResponse.deserialize(bytes);
        }
    }
    export namespace ListDeliveryHistoryResponse {
        export class DeliveryHistory extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                webhook_id?: string;
                event_id?: string;
                owner_id?: string;
                delivery_stage?: DeliveryStage;
                created?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("webhook_id" in data && data.webhook_id != undefined) {
                        this.webhook_id = data.webhook_id;
                    }
                    if ("event_id" in data && data.event_id != undefined) {
                        this.event_id = data.event_id;
                    }
                    if ("owner_id" in data && data.owner_id != undefined) {
                        this.owner_id = data.owner_id;
                    }
                    if ("delivery_stage" in data && data.delivery_stage != undefined) {
                        this.delivery_stage = data.delivery_stage;
                    }
                    if ("created" in data && data.created != undefined) {
                        this.created = data.created;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get webhook_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set webhook_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get event_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set event_id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get owner_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set owner_id(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get delivery_stage() {
                return pb_1.Message.getFieldWithDefault(this, 5, DeliveryStage.DELIVERY_STAGE_UNSPECIFIED) as DeliveryStage;
            }
            set delivery_stage(value: DeliveryStage) {
                pb_1.Message.setField(this, 5, value);
            }
            get created() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set created(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                id?: string;
                webhook_id?: string;
                event_id?: string;
                owner_id?: string;
                delivery_stage?: DeliveryStage;
                created?: string;
            }): DeliveryHistory {
                const message = new DeliveryHistory({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.webhook_id != null) {
                    message.webhook_id = data.webhook_id;
                }
                if (data.event_id != null) {
                    message.event_id = data.event_id;
                }
                if (data.owner_id != null) {
                    message.owner_id = data.owner_id;
                }
                if (data.delivery_stage != null) {
                    message.delivery_stage = data.delivery_stage;
                }
                if (data.created != null) {
                    message.created = data.created;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    webhook_id?: string;
                    event_id?: string;
                    owner_id?: string;
                    delivery_stage?: DeliveryStage;
                    created?: string;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.webhook_id != null) {
                    data.webhook_id = this.webhook_id;
                }
                if (this.event_id != null) {
                    data.event_id = this.event_id;
                }
                if (this.owner_id != null) {
                    data.owner_id = this.owner_id;
                }
                if (this.delivery_stage != null) {
                    data.delivery_stage = this.delivery_stage;
                }
                if (this.created != null) {
                    data.created = this.created;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.webhook_id.length)
                    writer.writeString(2, this.webhook_id);
                if (this.event_id.length)
                    writer.writeString(3, this.event_id);
                if (this.owner_id.length)
                    writer.writeString(4, this.owner_id);
                if (this.delivery_stage != DeliveryStage.DELIVERY_STAGE_UNSPECIFIED)
                    writer.writeEnum(5, this.delivery_stage);
                if (this.created.length)
                    writer.writeString(6, this.created);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeliveryHistory {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeliveryHistory();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.webhook_id = reader.readString();
                            break;
                        case 3:
                            message.event_id = reader.readString();
                            break;
                        case 4:
                            message.owner_id = reader.readString();
                            break;
                        case 5:
                            message.delivery_stage = reader.readEnum();
                            break;
                        case 6:
                            message.created = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DeliveryHistory {
                return DeliveryHistory.deserialize(bytes);
            }
        }
    }
    export class ScheduledReaction extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            id?: string;
            name?: string;
            reaction_type?: ScheduleReactionType;
            cron_tab?: string;
        } & (({
            create_contract_payload?: CreateContractReactionPayload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("reaction_type" in data && data.reaction_type != undefined) {
                    this.reaction_type = data.reaction_type;
                }
                if ("cron_tab" in data && data.cron_tab != undefined) {
                    this.cron_tab = data.cron_tab;
                }
                if ("create_contract_payload" in data && data.create_contract_payload != undefined) {
                    this.create_contract_payload = data.create_contract_payload;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reaction_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, ScheduleReactionType.SCHEDULE_REACTION_TYPE_UNSPECIFIED) as ScheduleReactionType;
        }
        set reaction_type(value: ScheduleReactionType) {
            pb_1.Message.setField(this, 3, value);
        }
        get cron_tab() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set cron_tab(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_contract_payload() {
            return pb_1.Message.getWrapperField(this, CreateContractReactionPayload, 5) as CreateContractReactionPayload;
        }
        set create_contract_payload(value: CreateContractReactionPayload) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_create_contract_payload() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "create_contract_payload";
            } = {
                0: "none",
                5: "create_contract_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            reaction_type?: ScheduleReactionType;
            cron_tab?: string;
            create_contract_payload?: ReturnType<typeof CreateContractReactionPayload.prototype.toObject>;
        }): ScheduledReaction {
            const message = new ScheduledReaction({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.reaction_type != null) {
                message.reaction_type = data.reaction_type;
            }
            if (data.cron_tab != null) {
                message.cron_tab = data.cron_tab;
            }
            if (data.create_contract_payload != null) {
                message.create_contract_payload = CreateContractReactionPayload.fromObject(data.create_contract_payload);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                reaction_type?: ScheduleReactionType;
                cron_tab?: string;
                create_contract_payload?: ReturnType<typeof CreateContractReactionPayload.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.reaction_type != null) {
                data.reaction_type = this.reaction_type;
            }
            if (this.cron_tab != null) {
                data.cron_tab = this.cron_tab;
            }
            if (this.create_contract_payload != null) {
                data.create_contract_payload = this.create_contract_payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.reaction_type != ScheduleReactionType.SCHEDULE_REACTION_TYPE_UNSPECIFIED)
                writer.writeEnum(3, this.reaction_type);
            if (this.cron_tab.length)
                writer.writeString(4, this.cron_tab);
            if (this.has_create_contract_payload)
                writer.writeMessage(5, this.create_contract_payload, () => this.create_contract_payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScheduledReaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScheduledReaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.reaction_type = reader.readEnum();
                        break;
                    case 4:
                        message.cron_tab = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.create_contract_payload, () => message.create_contract_payload = CreateContractReactionPayload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScheduledReaction {
            return ScheduledReaction.deserialize(bytes);
        }
    }
    export class CreateContractReactionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender_wallet_id?: string;
            commitments?: dependency_2.common.Commitment[];
            conditions?: dependency_2.common.Condition[];
            timeout_secs?: number;
            memo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender_wallet_id" in data && data.sender_wallet_id != undefined) {
                    this.sender_wallet_id = data.sender_wallet_id;
                }
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
                if ("conditions" in data && data.conditions != undefined) {
                    this.conditions = data.conditions;
                }
                if ("timeout_secs" in data && data.timeout_secs != undefined) {
                    this.timeout_secs = data.timeout_secs;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
            }
        }
        get sender_wallet_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender_wallet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Commitment, 2) as dependency_2.common.Commitment[];
        }
        set commitments(value: dependency_2.common.Commitment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get conditions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.common.Condition, 3) as dependency_2.common.Condition[];
        }
        set conditions(value: dependency_2.common.Condition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get timeout_secs() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timeout_secs(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            sender_wallet_id?: string;
            commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
            conditions?: ReturnType<typeof dependency_2.common.Condition.prototype.toObject>[];
            timeout_secs?: number;
            memo?: string;
        }): CreateContractReactionPayload {
            const message = new CreateContractReactionPayload({});
            if (data.sender_wallet_id != null) {
                message.sender_wallet_id = data.sender_wallet_id;
            }
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_2.common.Commitment.fromObject(item));
            }
            if (data.conditions != null) {
                message.conditions = data.conditions.map(item => dependency_2.common.Condition.fromObject(item));
            }
            if (data.timeout_secs != null) {
                message.timeout_secs = data.timeout_secs;
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            return message;
        }
        toObject() {
            const data: {
                sender_wallet_id?: string;
                commitments?: ReturnType<typeof dependency_2.common.Commitment.prototype.toObject>[];
                conditions?: ReturnType<typeof dependency_2.common.Condition.prototype.toObject>[];
                timeout_secs?: number;
                memo?: string;
            } = {};
            if (this.sender_wallet_id != null) {
                data.sender_wallet_id = this.sender_wallet_id;
            }
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_2.common.Commitment) => item.toObject());
            }
            if (this.conditions != null) {
                data.conditions = this.conditions.map((item: dependency_2.common.Condition) => item.toObject());
            }
            if (this.timeout_secs != null) {
                data.timeout_secs = this.timeout_secs;
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender_wallet_id.length)
                writer.writeString(1, this.sender_wallet_id);
            if (this.commitments.length)
                writer.writeRepeatedMessage(2, this.commitments, (item: dependency_2.common.Commitment) => item.serialize(writer));
            if (this.conditions.length)
                writer.writeRepeatedMessage(3, this.conditions, (item: dependency_2.common.Condition) => item.serialize(writer));
            if (this.timeout_secs != 0)
                writer.writeUint32(4, this.timeout_secs);
            if (this.memo.length)
                writer.writeString(5, this.memo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateContractReactionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateContractReactionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender_wallet_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.common.Commitment.deserialize(reader), dependency_2.common.Commitment));
                        break;
                    case 3:
                        reader.readMessage(message.conditions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.common.Condition.deserialize(reader), dependency_2.common.Condition));
                        break;
                    case 4:
                        message.timeout_secs = reader.readUint32();
                        break;
                    case 5:
                        message.memo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateContractReactionPayload {
            return CreateContractReactionPayload.deserialize(bytes);
        }
    }
    export class CreateScheduledReactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            api_key?: string;
            name?: string;
            reaction_type?: ScheduleReactionType;
            cron_tab?: string;
        } & (({
            create_contract_payload?: CreateContractReactionPayload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("reaction_type" in data && data.reaction_type != undefined) {
                    this.reaction_type = data.reaction_type;
                }
                if ("cron_tab" in data && data.cron_tab != undefined) {
                    this.cron_tab = data.cron_tab;
                }
                if ("create_contract_payload" in data && data.create_contract_payload != undefined) {
                    this.create_contract_payload = data.create_contract_payload;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reaction_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, ScheduleReactionType.SCHEDULE_REACTION_TYPE_UNSPECIFIED) as ScheduleReactionType;
        }
        set reaction_type(value: ScheduleReactionType) {
            pb_1.Message.setField(this, 3, value);
        }
        get cron_tab() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set cron_tab(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_contract_payload() {
            return pb_1.Message.getWrapperField(this, CreateContractReactionPayload, 5) as CreateContractReactionPayload;
        }
        set create_contract_payload(value: CreateContractReactionPayload) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_create_contract_payload() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get reaction_payload() {
            const cases: {
                [index: number]: "none" | "create_contract_payload";
            } = {
                0: "none",
                5: "create_contract_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            api_key?: string;
            name?: string;
            reaction_type?: ScheduleReactionType;
            cron_tab?: string;
            create_contract_payload?: ReturnType<typeof CreateContractReactionPayload.prototype.toObject>;
        }): CreateScheduledReactionRequest {
            const message = new CreateScheduledReactionRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.reaction_type != null) {
                message.reaction_type = data.reaction_type;
            }
            if (data.cron_tab != null) {
                message.cron_tab = data.cron_tab;
            }
            if (data.create_contract_payload != null) {
                message.create_contract_payload = CreateContractReactionPayload.fromObject(data.create_contract_payload);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                name?: string;
                reaction_type?: ScheduleReactionType;
                cron_tab?: string;
                create_contract_payload?: ReturnType<typeof CreateContractReactionPayload.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.reaction_type != null) {
                data.reaction_type = this.reaction_type;
            }
            if (this.cron_tab != null) {
                data.cron_tab = this.cron_tab;
            }
            if (this.create_contract_payload != null) {
                data.create_contract_payload = this.create_contract_payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.reaction_type != ScheduleReactionType.SCHEDULE_REACTION_TYPE_UNSPECIFIED)
                writer.writeEnum(3, this.reaction_type);
            if (this.cron_tab.length)
                writer.writeString(4, this.cron_tab);
            if (this.has_create_contract_payload)
                writer.writeMessage(5, this.create_contract_payload, () => this.create_contract_payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateScheduledReactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateScheduledReactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.reaction_type = reader.readEnum();
                        break;
                    case 4:
                        message.cron_tab = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.create_contract_payload, () => message.create_contract_payload = CreateContractReactionPayload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateScheduledReactionRequest {
            return CreateScheduledReactionRequest.deserialize(bytes);
        }
    }
    export class CreateScheduledReactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scheduled_reaction?: ScheduledReaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scheduled_reaction" in data && data.scheduled_reaction != undefined) {
                    this.scheduled_reaction = data.scheduled_reaction;
                }
            }
        }
        get scheduled_reaction() {
            return pb_1.Message.getWrapperField(this, ScheduledReaction, 1) as ScheduledReaction;
        }
        set scheduled_reaction(value: ScheduledReaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_scheduled_reaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            scheduled_reaction?: ReturnType<typeof ScheduledReaction.prototype.toObject>;
        }): CreateScheduledReactionResponse {
            const message = new CreateScheduledReactionResponse({});
            if (data.scheduled_reaction != null) {
                message.scheduled_reaction = ScheduledReaction.fromObject(data.scheduled_reaction);
            }
            return message;
        }
        toObject() {
            const data: {
                scheduled_reaction?: ReturnType<typeof ScheduledReaction.prototype.toObject>;
            } = {};
            if (this.scheduled_reaction != null) {
                data.scheduled_reaction = this.scheduled_reaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_scheduled_reaction)
                writer.writeMessage(1, this.scheduled_reaction, () => this.scheduled_reaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateScheduledReactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateScheduledReactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scheduled_reaction, () => message.scheduled_reaction = ScheduledReaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateScheduledReactionResponse {
            return CreateScheduledReactionResponse.deserialize(bytes);
        }
    }
    export class ListScheduledReactionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 4) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 5) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListScheduledReactionsRequest {
            const message = new ListScheduledReactionsRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                page?: number;
                page_size?: number;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.has_filters)
                writer.writeMessage(4, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(5, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListScheduledReactionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListScheduledReactionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListScheduledReactionsRequest {
            return ListScheduledReactionsRequest.deserialize(bytes);
        }
    }
    export class ListScheduledReactionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scheduled_reactions?: ScheduledReaction[];
            total_owned_scheduled_reactions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scheduled_reactions" in data && data.scheduled_reactions != undefined) {
                    this.scheduled_reactions = data.scheduled_reactions;
                }
                if ("total_owned_scheduled_reactions" in data && data.total_owned_scheduled_reactions != undefined) {
                    this.total_owned_scheduled_reactions = data.total_owned_scheduled_reactions;
                }
            }
        }
        get scheduled_reactions() {
            return pb_1.Message.getRepeatedWrapperField(this, ScheduledReaction, 1) as ScheduledReaction[];
        }
        set scheduled_reactions(value: ScheduledReaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_scheduled_reactions() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_scheduled_reactions(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scheduled_reactions?: ReturnType<typeof ScheduledReaction.prototype.toObject>[];
            total_owned_scheduled_reactions?: number;
        }): ListScheduledReactionsResponse {
            const message = new ListScheduledReactionsResponse({});
            if (data.scheduled_reactions != null) {
                message.scheduled_reactions = data.scheduled_reactions.map(item => ScheduledReaction.fromObject(item));
            }
            if (data.total_owned_scheduled_reactions != null) {
                message.total_owned_scheduled_reactions = data.total_owned_scheduled_reactions;
            }
            return message;
        }
        toObject() {
            const data: {
                scheduled_reactions?: ReturnType<typeof ScheduledReaction.prototype.toObject>[];
                total_owned_scheduled_reactions?: number;
            } = {};
            if (this.scheduled_reactions != null) {
                data.scheduled_reactions = this.scheduled_reactions.map((item: ScheduledReaction) => item.toObject());
            }
            if (this.total_owned_scheduled_reactions != null) {
                data.total_owned_scheduled_reactions = this.total_owned_scheduled_reactions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scheduled_reactions.length)
                writer.writeRepeatedMessage(1, this.scheduled_reactions, (item: ScheduledReaction) => item.serialize(writer));
            if (this.total_owned_scheduled_reactions != 0)
                writer.writeUint32(2, this.total_owned_scheduled_reactions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListScheduledReactionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListScheduledReactionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scheduled_reactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ScheduledReaction.deserialize(reader), ScheduledReaction));
                        break;
                    case 2:
                        message.total_owned_scheduled_reactions = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListScheduledReactionsResponse {
            return ListScheduledReactionsResponse.deserialize(bytes);
        }
    }
    export class DeleteScheduledReactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            scheduled_reaction_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("scheduled_reaction_id" in data && data.scheduled_reaction_id != undefined) {
                    this.scheduled_reaction_id = data.scheduled_reaction_id;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scheduled_reaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scheduled_reaction_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            api_key?: string;
            scheduled_reaction_id?: string;
        }): DeleteScheduledReactionRequest {
            const message = new DeleteScheduledReactionRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.scheduled_reaction_id != null) {
                message.scheduled_reaction_id = data.scheduled_reaction_id;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                scheduled_reaction_id?: string;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.scheduled_reaction_id != null) {
                data.scheduled_reaction_id = this.scheduled_reaction_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.scheduled_reaction_id.length)
                writer.writeString(2, this.scheduled_reaction_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteScheduledReactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteScheduledReactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.scheduled_reaction_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteScheduledReactionRequest {
            return DeleteScheduledReactionRequest.deserialize(bytes);
        }
    }
    export class DeleteScheduledReactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteScheduledReactionResponse {
            const message = new DeleteScheduledReactionResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteScheduledReactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteScheduledReactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteScheduledReactionResponse {
            return DeleteScheduledReactionResponse.deserialize(bytes);
        }
    }
    export class Prevalidation extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            id?: string;
            name?: string;
            trigger_type?: PrevalidationTriggerType;
            created?: string;
        } & (({
            considering_contract_prevalidation?: ConsideringContractPrevalidation;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("trigger_type" in data && data.trigger_type != undefined) {
                    this.trigger_type = data.trigger_type;
                }
                if ("considering_contract_prevalidation" in data && data.considering_contract_prevalidation != undefined) {
                    this.considering_contract_prevalidation = data.considering_contract_prevalidation;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, PrevalidationTriggerType.PREVALIDATION_TRIGGER_UNSPECIFIED) as PrevalidationTriggerType;
        }
        set trigger_type(value: PrevalidationTriggerType) {
            pb_1.Message.setField(this, 3, value);
        }
        get considering_contract_prevalidation() {
            return pb_1.Message.getWrapperField(this, ConsideringContractPrevalidation, 4) as ConsideringContractPrevalidation;
        }
        set considering_contract_prevalidation(value: ConsideringContractPrevalidation) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_considering_contract_prevalidation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set created(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "considering_contract_prevalidation";
            } = {
                0: "none",
                4: "considering_contract_prevalidation"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            trigger_type?: PrevalidationTriggerType;
            considering_contract_prevalidation?: ReturnType<typeof ConsideringContractPrevalidation.prototype.toObject>;
            created?: string;
        }): Prevalidation {
            const message = new Prevalidation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.trigger_type != null) {
                message.trigger_type = data.trigger_type;
            }
            if (data.considering_contract_prevalidation != null) {
                message.considering_contract_prevalidation = ConsideringContractPrevalidation.fromObject(data.considering_contract_prevalidation);
            }
            if (data.created != null) {
                message.created = data.created;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                trigger_type?: PrevalidationTriggerType;
                considering_contract_prevalidation?: ReturnType<typeof ConsideringContractPrevalidation.prototype.toObject>;
                created?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.trigger_type != null) {
                data.trigger_type = this.trigger_type;
            }
            if (this.considering_contract_prevalidation != null) {
                data.considering_contract_prevalidation = this.considering_contract_prevalidation.toObject();
            }
            if (this.created != null) {
                data.created = this.created;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.trigger_type != PrevalidationTriggerType.PREVALIDATION_TRIGGER_UNSPECIFIED)
                writer.writeEnum(3, this.trigger_type);
            if (this.has_considering_contract_prevalidation)
                writer.writeMessage(4, this.considering_contract_prevalidation, () => this.considering_contract_prevalidation.serialize(writer));
            if (this.created.length)
                writer.writeString(5, this.created);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prevalidation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Prevalidation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.trigger_type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.considering_contract_prevalidation, () => message.considering_contract_prevalidation = ConsideringContractPrevalidation.deserialize(reader));
                        break;
                    case 5:
                        message.created = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Prevalidation {
            return Prevalidation.deserialize(bytes);
        }
    }
    export class ValidationCondition extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            target?: ValidationTarget;
            operator?: ValidationOperator;
        } & (({
            amount_value?: dependency_1.common.Amount;
            string_value?: never;
        } | {
            amount_value?: never;
            string_value?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
                if ("amount_value" in data && data.amount_value != undefined) {
                    this.amount_value = data.amount_value;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
            }
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 1, ValidationTarget.VALIDATION_TARGET_UNSPECIFIED) as ValidationTarget;
        }
        set target(value: ValidationTarget) {
            pb_1.Message.setField(this, 1, value);
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 2, ValidationOperator.VALIDATION_OPERATOR_UNSPECIFIED) as ValidationOperator;
        }
        set operator(value: ValidationOperator) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount_value() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 3) as dependency_1.common.Amount;
        }
        set amount_value(value: dependency_1.common.Amount) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_amount_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set string_value(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "amount_value" | "string_value";
            } = {
                0: "none",
                3: "amount_value",
                4: "string_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            target?: ValidationTarget;
            operator?: ValidationOperator;
            amount_value?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            string_value?: string;
        }): ValidationCondition {
            const message = new ValidationCondition({});
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.operator != null) {
                message.operator = data.operator;
            }
            if (data.amount_value != null) {
                message.amount_value = dependency_1.common.Amount.fromObject(data.amount_value);
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            return message;
        }
        toObject() {
            const data: {
                target?: ValidationTarget;
                operator?: ValidationOperator;
                amount_value?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                string_value?: string;
            } = {};
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.operator != null) {
                data.operator = this.operator;
            }
            if (this.amount_value != null) {
                data.amount_value = this.amount_value.toObject();
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target != ValidationTarget.VALIDATION_TARGET_UNSPECIFIED)
                writer.writeEnum(1, this.target);
            if (this.operator != ValidationOperator.VALIDATION_OPERATOR_UNSPECIFIED)
                writer.writeEnum(2, this.operator);
            if (this.has_amount_value)
                writer.writeMessage(3, this.amount_value, () => this.amount_value.serialize(writer));
            if (this.has_string_value)
                writer.writeString(4, this.string_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidationCondition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidationCondition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target = reader.readEnum();
                        break;
                    case 2:
                        message.operator = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.amount_value, () => message.amount_value = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 4:
                        message.string_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidationCondition {
            return ValidationCondition.deserialize(bytes);
        }
    }
    export class ConsideringContractPrevalidation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            conditions?: ValidationCondition[];
            outcome?: ConsideringContractPrevalidation.ValidationOutcome;
            logical_base?: dependency_1.common.LogicalOperator;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("conditions" in data && data.conditions != undefined) {
                    this.conditions = data.conditions;
                }
                if ("outcome" in data && data.outcome != undefined) {
                    this.outcome = data.outcome;
                }
                if ("logical_base" in data && data.logical_base != undefined) {
                    this.logical_base = data.logical_base;
                }
            }
        }
        get conditions() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidationCondition, 1) as ValidationCondition[];
        }
        set conditions(value: ValidationCondition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get outcome() {
            return pb_1.Message.getFieldWithDefault(this, 2, ConsideringContractPrevalidation.ValidationOutcome.CONSIDERING_CONTRACT_OUTCOME_UNSPECIFIED) as ConsideringContractPrevalidation.ValidationOutcome;
        }
        set outcome(value: ConsideringContractPrevalidation.ValidationOutcome) {
            pb_1.Message.setField(this, 2, value);
        }
        get logical_base() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.common.LogicalOperator.LOGICAL_OPERATOR_UNSPECIFIED) as dependency_1.common.LogicalOperator;
        }
        set logical_base(value: dependency_1.common.LogicalOperator) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            conditions?: ReturnType<typeof ValidationCondition.prototype.toObject>[];
            outcome?: ConsideringContractPrevalidation.ValidationOutcome;
            logical_base?: dependency_1.common.LogicalOperator;
        }): ConsideringContractPrevalidation {
            const message = new ConsideringContractPrevalidation({});
            if (data.conditions != null) {
                message.conditions = data.conditions.map(item => ValidationCondition.fromObject(item));
            }
            if (data.outcome != null) {
                message.outcome = data.outcome;
            }
            if (data.logical_base != null) {
                message.logical_base = data.logical_base;
            }
            return message;
        }
        toObject() {
            const data: {
                conditions?: ReturnType<typeof ValidationCondition.prototype.toObject>[];
                outcome?: ConsideringContractPrevalidation.ValidationOutcome;
                logical_base?: dependency_1.common.LogicalOperator;
            } = {};
            if (this.conditions != null) {
                data.conditions = this.conditions.map((item: ValidationCondition) => item.toObject());
            }
            if (this.outcome != null) {
                data.outcome = this.outcome;
            }
            if (this.logical_base != null) {
                data.logical_base = this.logical_base;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.conditions.length)
                writer.writeRepeatedMessage(1, this.conditions, (item: ValidationCondition) => item.serialize(writer));
            if (this.outcome != ConsideringContractPrevalidation.ValidationOutcome.CONSIDERING_CONTRACT_OUTCOME_UNSPECIFIED)
                writer.writeEnum(2, this.outcome);
            if (this.logical_base != dependency_1.common.LogicalOperator.LOGICAL_OPERATOR_UNSPECIFIED)
                writer.writeEnum(3, this.logical_base);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsideringContractPrevalidation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsideringContractPrevalidation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.conditions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ValidationCondition.deserialize(reader), ValidationCondition));
                        break;
                    case 2:
                        message.outcome = reader.readEnum();
                        break;
                    case 3:
                        message.logical_base = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsideringContractPrevalidation {
            return ConsideringContractPrevalidation.deserialize(bytes);
        }
    }
    export namespace ConsideringContractPrevalidation {
        export enum ValidationOutcome {
            CONSIDERING_CONTRACT_OUTCOME_UNSPECIFIED = 0,
            CONSIDERING_CONTRACT_OUTCOME_ACCEPTED = 1,
            CONSIDERING_CONTRACT_OUTCOME_REJECTED = 2
        }
    }
    export class CreatePrevalidationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            api_key?: string;
            name?: string;
            trigger_type?: PrevalidationTriggerType;
        } & (({
            considering_contract_prevalidation?: ConsideringContractPrevalidation;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("trigger_type" in data && data.trigger_type != undefined) {
                    this.trigger_type = data.trigger_type;
                }
                if ("considering_contract_prevalidation" in data && data.considering_contract_prevalidation != undefined) {
                    this.considering_contract_prevalidation = data.considering_contract_prevalidation;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, PrevalidationTriggerType.PREVALIDATION_TRIGGER_UNSPECIFIED) as PrevalidationTriggerType;
        }
        set trigger_type(value: PrevalidationTriggerType) {
            pb_1.Message.setField(this, 3, value);
        }
        get considering_contract_prevalidation() {
            return pb_1.Message.getWrapperField(this, ConsideringContractPrevalidation, 4) as ConsideringContractPrevalidation;
        }
        set considering_contract_prevalidation(value: ConsideringContractPrevalidation) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_considering_contract_prevalidation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get trigger() {
            const cases: {
                [index: number]: "none" | "considering_contract_prevalidation";
            } = {
                0: "none",
                4: "considering_contract_prevalidation"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            api_key?: string;
            name?: string;
            trigger_type?: PrevalidationTriggerType;
            considering_contract_prevalidation?: ReturnType<typeof ConsideringContractPrevalidation.prototype.toObject>;
        }): CreatePrevalidationRequest {
            const message = new CreatePrevalidationRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.trigger_type != null) {
                message.trigger_type = data.trigger_type;
            }
            if (data.considering_contract_prevalidation != null) {
                message.considering_contract_prevalidation = ConsideringContractPrevalidation.fromObject(data.considering_contract_prevalidation);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                name?: string;
                trigger_type?: PrevalidationTriggerType;
                considering_contract_prevalidation?: ReturnType<typeof ConsideringContractPrevalidation.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.trigger_type != null) {
                data.trigger_type = this.trigger_type;
            }
            if (this.considering_contract_prevalidation != null) {
                data.considering_contract_prevalidation = this.considering_contract_prevalidation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.trigger_type != PrevalidationTriggerType.PREVALIDATION_TRIGGER_UNSPECIFIED)
                writer.writeEnum(3, this.trigger_type);
            if (this.has_considering_contract_prevalidation)
                writer.writeMessage(4, this.considering_contract_prevalidation, () => this.considering_contract_prevalidation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePrevalidationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePrevalidationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.trigger_type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.considering_contract_prevalidation, () => message.considering_contract_prevalidation = ConsideringContractPrevalidation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePrevalidationRequest {
            return CreatePrevalidationRequest.deserialize(bytes);
        }
    }
    export class CreatePrevalidationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prevalidation?: Prevalidation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prevalidation" in data && data.prevalidation != undefined) {
                    this.prevalidation = data.prevalidation;
                }
            }
        }
        get prevalidation() {
            return pb_1.Message.getWrapperField(this, Prevalidation, 1) as Prevalidation;
        }
        set prevalidation(value: Prevalidation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_prevalidation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            prevalidation?: ReturnType<typeof Prevalidation.prototype.toObject>;
        }): CreatePrevalidationResponse {
            const message = new CreatePrevalidationResponse({});
            if (data.prevalidation != null) {
                message.prevalidation = Prevalidation.fromObject(data.prevalidation);
            }
            return message;
        }
        toObject() {
            const data: {
                prevalidation?: ReturnType<typeof Prevalidation.prototype.toObject>;
            } = {};
            if (this.prevalidation != null) {
                data.prevalidation = this.prevalidation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_prevalidation)
                writer.writeMessage(1, this.prevalidation, () => this.prevalidation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePrevalidationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePrevalidationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.prevalidation, () => message.prevalidation = Prevalidation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePrevalidationResponse {
            return CreatePrevalidationResponse.deserialize(bytes);
        }
    }
    export class ListPrevalidationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: dependency_1.common.Filter;
            sort_by?: dependency_1.common.SortBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sort_by" in data && data.sort_by != undefined) {
                    this.sort_by = data.sort_by;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Filter, 4) as dependency_1.common.Filter;
        }
        set filters(value: dependency_1.common.Filter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sort_by() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SortBy, 5) as dependency_1.common.SortBy;
        }
        set sort_by(value: dependency_1.common.SortBy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_sort_by() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            api_key?: string;
            page?: number;
            page_size?: number;
            filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
            sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
        }): ListPrevalidationsRequest {
            const message = new ListPrevalidationsRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.filters != null) {
                message.filters = dependency_1.common.Filter.fromObject(data.filters);
            }
            if (data.sort_by != null) {
                message.sort_by = dependency_1.common.SortBy.fromObject(data.sort_by);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                page?: number;
                page_size?: number;
                filters?: ReturnType<typeof dependency_1.common.Filter.prototype.toObject>;
                sort_by?: ReturnType<typeof dependency_1.common.SortBy.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.sort_by != null) {
                data.sort_by = this.sort_by.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.has_filters)
                writer.writeMessage(4, this.filters, () => this.filters.serialize(writer));
            if (this.has_sort_by)
                writer.writeMessage(5, this.sort_by, () => this.sort_by.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPrevalidationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPrevalidationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.common.Filter.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sort_by, () => message.sort_by = dependency_1.common.SortBy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPrevalidationsRequest {
            return ListPrevalidationsRequest.deserialize(bytes);
        }
    }
    export class ListPrevalidationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prevalidations?: Prevalidation[];
            total_owned_prevalidations?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prevalidations" in data && data.prevalidations != undefined) {
                    this.prevalidations = data.prevalidations;
                }
                if ("total_owned_prevalidations" in data && data.total_owned_prevalidations != undefined) {
                    this.total_owned_prevalidations = data.total_owned_prevalidations;
                }
            }
        }
        get prevalidations() {
            return pb_1.Message.getRepeatedWrapperField(this, Prevalidation, 1) as Prevalidation[];
        }
        set prevalidations(value: Prevalidation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_owned_prevalidations() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_owned_prevalidations(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            prevalidations?: ReturnType<typeof Prevalidation.prototype.toObject>[];
            total_owned_prevalidations?: number;
        }): ListPrevalidationsResponse {
            const message = new ListPrevalidationsResponse({});
            if (data.prevalidations != null) {
                message.prevalidations = data.prevalidations.map(item => Prevalidation.fromObject(item));
            }
            if (data.total_owned_prevalidations != null) {
                message.total_owned_prevalidations = data.total_owned_prevalidations;
            }
            return message;
        }
        toObject() {
            const data: {
                prevalidations?: ReturnType<typeof Prevalidation.prototype.toObject>[];
                total_owned_prevalidations?: number;
            } = {};
            if (this.prevalidations != null) {
                data.prevalidations = this.prevalidations.map((item: Prevalidation) => item.toObject());
            }
            if (this.total_owned_prevalidations != null) {
                data.total_owned_prevalidations = this.total_owned_prevalidations;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prevalidations.length)
                writer.writeRepeatedMessage(1, this.prevalidations, (item: Prevalidation) => item.serialize(writer));
            if (this.total_owned_prevalidations != 0)
                writer.writeUint32(2, this.total_owned_prevalidations);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPrevalidationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPrevalidationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.prevalidations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Prevalidation.deserialize(reader), Prevalidation));
                        break;
                    case 2:
                        message.total_owned_prevalidations = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPrevalidationsResponse {
            return ListPrevalidationsResponse.deserialize(bytes);
        }
    }
    export class DeletePrevalidationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: string;
            prevalidation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("prevalidation_id" in data && data.prevalidation_id != undefined) {
                    this.prevalidation_id = data.prevalidation_id;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get prevalidation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set prevalidation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            api_key?: string;
            prevalidation_id?: string;
        }): DeletePrevalidationRequest {
            const message = new DeletePrevalidationRequest({});
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.prevalidation_id != null) {
                message.prevalidation_id = data.prevalidation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: string;
                prevalidation_id?: string;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.prevalidation_id != null) {
                data.prevalidation_id = this.prevalidation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_key.length)
                writer.writeString(1, this.api_key);
            if (this.prevalidation_id.length)
                writer.writeString(2, this.prevalidation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePrevalidationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletePrevalidationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.api_key = reader.readString();
                        break;
                    case 2:
                        message.prevalidation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePrevalidationRequest {
            return DeletePrevalidationRequest.deserialize(bytes);
        }
    }
    export class DeletePrevalidationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeletePrevalidationResponse {
            const message = new DeletePrevalidationResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePrevalidationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletePrevalidationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePrevalidationResponse {
            return DeletePrevalidationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWebhookManagerServiceService {
        static definition = {
            CreateWebhook: {
                path: "/webhook_api.v1.WebhookManagerService/CreateWebhook",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateWebhookRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateWebhookRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateWebhookResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateWebhookResponse.deserialize(new Uint8Array(bytes))
            },
            ListWebhooks: {
                path: "/webhook_api.v1.WebhookManagerService/ListWebhooks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListWebhooksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListWebhooksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListWebhooksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListWebhooksResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteWebhook: {
                path: "/webhook_api.v1.WebhookManagerService/DeleteWebhook",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteWebhookRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteWebhookRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteWebhookResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteWebhookResponse.deserialize(new Uint8Array(bytes))
            },
            ListEvents: {
                path: "/webhook_api.v1.WebhookManagerService/ListEvents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListEventsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListEventsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListEventsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListEventsResponse.deserialize(new Uint8Array(bytes))
            },
            RetryEvent: {
                path: "/webhook_api.v1.WebhookManagerService/RetryEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RetryEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RetryEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RetryEventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RetryEventResponse.deserialize(new Uint8Array(bytes))
            },
            Ping: {
                path: "/webhook_api.v1.WebhookManagerService/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PingResponse.deserialize(new Uint8Array(bytes))
            },
            ListDeliveryHistory: {
                path: "/webhook_api.v1.WebhookManagerService/ListDeliveryHistory",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListDeliveryHistoryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListDeliveryHistoryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListDeliveryHistoryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListDeliveryHistoryResponse.deserialize(new Uint8Array(bytes))
            },
            CreateScheduledReaction: {
                path: "/webhook_api.v1.WebhookManagerService/CreateScheduledReaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateScheduledReactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateScheduledReactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateScheduledReactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateScheduledReactionResponse.deserialize(new Uint8Array(bytes))
            },
            ListScheduledReactions: {
                path: "/webhook_api.v1.WebhookManagerService/ListScheduledReactions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListScheduledReactionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListScheduledReactionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListScheduledReactionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListScheduledReactionsResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteScheduledReaction: {
                path: "/webhook_api.v1.WebhookManagerService/DeleteScheduledReaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteScheduledReactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteScheduledReactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteScheduledReactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteScheduledReactionResponse.deserialize(new Uint8Array(bytes))
            },
            CreatePrevalidation: {
                path: "/webhook_api.v1.WebhookManagerService/CreatePrevalidation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePrevalidationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePrevalidationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePrevalidationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePrevalidationResponse.deserialize(new Uint8Array(bytes))
            },
            ListPrevalidations: {
                path: "/webhook_api.v1.WebhookManagerService/ListPrevalidations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListPrevalidationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListPrevalidationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListPrevalidationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListPrevalidationsResponse.deserialize(new Uint8Array(bytes))
            },
            DeletePrevalidation: {
                path: "/webhook_api.v1.WebhookManagerService/DeletePrevalidation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeletePrevalidationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeletePrevalidationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeletePrevalidationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeletePrevalidationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateWebhook(call: grpc_1.ServerUnaryCall<CreateWebhookRequest, CreateWebhookResponse>, callback: grpc_1.sendUnaryData<CreateWebhookResponse>): void;
        abstract ListWebhooks(call: grpc_1.ServerUnaryCall<ListWebhooksRequest, ListWebhooksResponse>, callback: grpc_1.sendUnaryData<ListWebhooksResponse>): void;
        abstract DeleteWebhook(call: grpc_1.ServerUnaryCall<DeleteWebhookRequest, DeleteWebhookResponse>, callback: grpc_1.sendUnaryData<DeleteWebhookResponse>): void;
        abstract ListEvents(call: grpc_1.ServerUnaryCall<ListEventsRequest, ListEventsResponse>, callback: grpc_1.sendUnaryData<ListEventsResponse>): void;
        abstract RetryEvent(call: grpc_1.ServerUnaryCall<RetryEventRequest, RetryEventResponse>, callback: grpc_1.sendUnaryData<RetryEventResponse>): void;
        abstract Ping(call: grpc_1.ServerUnaryCall<PingRequest, PingResponse>, callback: grpc_1.sendUnaryData<PingResponse>): void;
        abstract ListDeliveryHistory(call: grpc_1.ServerUnaryCall<ListDeliveryHistoryRequest, ListDeliveryHistoryResponse>, callback: grpc_1.sendUnaryData<ListDeliveryHistoryResponse>): void;
        abstract CreateScheduledReaction(call: grpc_1.ServerUnaryCall<CreateScheduledReactionRequest, CreateScheduledReactionResponse>, callback: grpc_1.sendUnaryData<CreateScheduledReactionResponse>): void;
        abstract ListScheduledReactions(call: grpc_1.ServerUnaryCall<ListScheduledReactionsRequest, ListScheduledReactionsResponse>, callback: grpc_1.sendUnaryData<ListScheduledReactionsResponse>): void;
        abstract DeleteScheduledReaction(call: grpc_1.ServerUnaryCall<DeleteScheduledReactionRequest, DeleteScheduledReactionResponse>, callback: grpc_1.sendUnaryData<DeleteScheduledReactionResponse>): void;
        abstract CreatePrevalidation(call: grpc_1.ServerUnaryCall<CreatePrevalidationRequest, CreatePrevalidationResponse>, callback: grpc_1.sendUnaryData<CreatePrevalidationResponse>): void;
        abstract ListPrevalidations(call: grpc_1.ServerUnaryCall<ListPrevalidationsRequest, ListPrevalidationsResponse>, callback: grpc_1.sendUnaryData<ListPrevalidationsResponse>): void;
        abstract DeletePrevalidation(call: grpc_1.ServerUnaryCall<DeletePrevalidationRequest, DeletePrevalidationResponse>, callback: grpc_1.sendUnaryData<DeletePrevalidationResponse>): void;
    }
    export class WebhookManagerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedWebhookManagerServiceService.definition, "WebhookManagerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateWebhook: GrpcUnaryServiceInterface<CreateWebhookRequest, CreateWebhookResponse> = (message: CreateWebhookRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateWebhookResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateWebhookResponse>, callback?: grpc_1.requestCallback<CreateWebhookResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateWebhook(message, metadata, options, callback);
        };
        ListWebhooks: GrpcUnaryServiceInterface<ListWebhooksRequest, ListWebhooksResponse> = (message: ListWebhooksRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListWebhooksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListWebhooksResponse>, callback?: grpc_1.requestCallback<ListWebhooksResponse>): grpc_1.ClientUnaryCall => {
            return super.ListWebhooks(message, metadata, options, callback);
        };
        DeleteWebhook: GrpcUnaryServiceInterface<DeleteWebhookRequest, DeleteWebhookResponse> = (message: DeleteWebhookRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteWebhookResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteWebhookResponse>, callback?: grpc_1.requestCallback<DeleteWebhookResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteWebhook(message, metadata, options, callback);
        };
        ListEvents: GrpcUnaryServiceInterface<ListEventsRequest, ListEventsResponse> = (message: ListEventsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListEventsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListEventsResponse>, callback?: grpc_1.requestCallback<ListEventsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListEvents(message, metadata, options, callback);
        };
        RetryEvent: GrpcUnaryServiceInterface<RetryEventRequest, RetryEventResponse> = (message: RetryEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RetryEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RetryEventResponse>, callback?: grpc_1.requestCallback<RetryEventResponse>): grpc_1.ClientUnaryCall => {
            return super.RetryEvent(message, metadata, options, callback);
        };
        Ping: GrpcUnaryServiceInterface<PingRequest, PingResponse> = (message: PingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PingResponse>, callback?: grpc_1.requestCallback<PingResponse>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        ListDeliveryHistory: GrpcUnaryServiceInterface<ListDeliveryHistoryRequest, ListDeliveryHistoryResponse> = (message: ListDeliveryHistoryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListDeliveryHistoryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListDeliveryHistoryResponse>, callback?: grpc_1.requestCallback<ListDeliveryHistoryResponse>): grpc_1.ClientUnaryCall => {
            return super.ListDeliveryHistory(message, metadata, options, callback);
        };
        CreateScheduledReaction: GrpcUnaryServiceInterface<CreateScheduledReactionRequest, CreateScheduledReactionResponse> = (message: CreateScheduledReactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateScheduledReactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateScheduledReactionResponse>, callback?: grpc_1.requestCallback<CreateScheduledReactionResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateScheduledReaction(message, metadata, options, callback);
        };
        ListScheduledReactions: GrpcUnaryServiceInterface<ListScheduledReactionsRequest, ListScheduledReactionsResponse> = (message: ListScheduledReactionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListScheduledReactionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListScheduledReactionsResponse>, callback?: grpc_1.requestCallback<ListScheduledReactionsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListScheduledReactions(message, metadata, options, callback);
        };
        DeleteScheduledReaction: GrpcUnaryServiceInterface<DeleteScheduledReactionRequest, DeleteScheduledReactionResponse> = (message: DeleteScheduledReactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteScheduledReactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteScheduledReactionResponse>, callback?: grpc_1.requestCallback<DeleteScheduledReactionResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteScheduledReaction(message, metadata, options, callback);
        };
        CreatePrevalidation: GrpcUnaryServiceInterface<CreatePrevalidationRequest, CreatePrevalidationResponse> = (message: CreatePrevalidationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePrevalidationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePrevalidationResponse>, callback?: grpc_1.requestCallback<CreatePrevalidationResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePrevalidation(message, metadata, options, callback);
        };
        ListPrevalidations: GrpcUnaryServiceInterface<ListPrevalidationsRequest, ListPrevalidationsResponse> = (message: ListPrevalidationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListPrevalidationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListPrevalidationsResponse>, callback?: grpc_1.requestCallback<ListPrevalidationsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListPrevalidations(message, metadata, options, callback);
        };
        DeletePrevalidation: GrpcUnaryServiceInterface<DeletePrevalidationRequest, DeletePrevalidationResponse> = (message: DeletePrevalidationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeletePrevalidationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeletePrevalidationResponse>, callback?: grpc_1.requestCallback<DeletePrevalidationResponse>): grpc_1.ClientUnaryCall => {
            return super.DeletePrevalidation(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedEventConsumerServiceService {
        static definition = {
            Event: {
                path: "/webhook_api.v1.EventConsumerService/Event",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Event(call: grpc_1.ServerUnaryCall<EventRequest, EventResponse>, callback: grpc_1.sendUnaryData<EventResponse>): void;
    }
    export class EventConsumerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEventConsumerServiceService.definition, "EventConsumerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Event: GrpcUnaryServiceInterface<EventRequest, EventResponse> = (message: EventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventResponse>, callback?: grpc_1.requestCallback<EventResponse>): grpc_1.ClientUnaryCall => {
            return super.Event(message, metadata, options, callback);
        };
    }
}
