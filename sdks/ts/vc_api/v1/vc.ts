/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: vc_api/v1/vc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace vc_api.v1 {
    export enum CredentialType {
        CREDENTIAL_TYPE_UNSPECIFIED = 0,
        CREDENTIAL_TYPE_PERMANENT_RESIDENT_CARD = 1,
        CREDENTIAL_TYPE_BANK_CARD = 2,
        CREDENTIAL_TYPE_BANK_ACCOUNT = 3
    }
    export enum UpdateVerifiableCredentialStatusType {
        UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_UNSPECIFIED = 0,
        UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_REVOCATION = 1,
        UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_SUSPENSION = 2
    }
    export class CredentialProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            created?: string;
            verification_method?: string;
            proof_purpose?: string;
            proof_value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("verification_method" in data && data.verification_method != undefined) {
                    this.verification_method = data.verification_method;
                }
                if ("proof_purpose" in data && data.proof_purpose != undefined) {
                    this.proof_purpose = data.proof_purpose;
                }
                if ("proof_value" in data && data.proof_value != undefined) {
                    this.proof_value = data.proof_value;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set created(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get verification_method() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set verification_method(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get proof_purpose() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set proof_purpose(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get proof_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set proof_value(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            type?: string;
            created?: string;
            verification_method?: string;
            proof_purpose?: string;
            proof_value?: string;
        }): CredentialProof {
            const message = new CredentialProof({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.verification_method != null) {
                message.verification_method = data.verification_method;
            }
            if (data.proof_purpose != null) {
                message.proof_purpose = data.proof_purpose;
            }
            if (data.proof_value != null) {
                message.proof_value = data.proof_value;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                created?: string;
                verification_method?: string;
                proof_purpose?: string;
                proof_value?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.verification_method != null) {
                data.verification_method = this.verification_method;
            }
            if (this.proof_purpose != null) {
                data.proof_purpose = this.proof_purpose;
            }
            if (this.proof_value != null) {
                data.proof_value = this.proof_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.created.length)
                writer.writeString(2, this.created);
            if (this.verification_method.length)
                writer.writeString(3, this.verification_method);
            if (this.proof_purpose.length)
                writer.writeString(4, this.proof_purpose);
            if (this.proof_value.length)
                writer.writeString(5, this.proof_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CredentialProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.created = reader.readString();
                        break;
                    case 3:
                        message.verification_method = reader.readString();
                        break;
                    case 4:
                        message.proof_purpose = reader.readString();
                        break;
                    case 5:
                        message.proof_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CredentialProof {
            return CredentialProof.deserialize(bytes);
        }
    }
    export class CreateIssuanceChallengeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_type?: CredentialType;
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, CredentialType.CREDENTIAL_TYPE_UNSPECIFIED) as CredentialType;
        }
        set credential_type(value: CredentialType) {
            pb_1.Message.setField(this, 1, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            credential_type?: CredentialType;
            did?: string;
        }): CreateIssuanceChallengeRequest {
            const message = new CreateIssuanceChallengeRequest({});
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_type?: CredentialType;
                did?: string;
            } = {};
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_type != CredentialType.CREDENTIAL_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.credential_type);
            if (this.did.length)
                writer.writeString(2, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateIssuanceChallengeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateIssuanceChallengeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_type = reader.readEnum();
                        break;
                    case 2:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateIssuanceChallengeRequest {
            return CreateIssuanceChallengeRequest.deserialize(bytes);
        }
    }
    export class CreateIssuanceChallengeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
            endpoint?: string;
            credential_type?: CredentialType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, CredentialType.CREDENTIAL_TYPE_UNSPECIFIED) as CredentialType;
        }
        set credential_type(value: CredentialType) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            nonce?: string;
            endpoint?: string;
            credential_type?: CredentialType;
        }): CreateIssuanceChallengeResponse {
            const message = new CreateIssuanceChallengeResponse({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                endpoint?: string;
                credential_type?: CredentialType;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (this.endpoint.length)
                writer.writeString(2, this.endpoint);
            if (this.credential_type != CredentialType.CREDENTIAL_TYPE_UNSPECIFIED)
                writer.writeEnum(3, this.credential_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateIssuanceChallengeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateIssuanceChallengeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        message.endpoint = reader.readString();
                        break;
                    case 3:
                        message.credential_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateIssuanceChallengeResponse {
            return CreateIssuanceChallengeResponse.deserialize(bytes);
        }
    }
    export class IssueVerifiableCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_type?: CredentialType;
            nonce?: string;
            signature?: Uint8Array;
            did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
            }
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, CredentialType.CREDENTIAL_TYPE_UNSPECIFIED) as CredentialType;
        }
        set credential_type(value: CredentialType) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            credential_type?: CredentialType;
            nonce?: string;
            signature?: Uint8Array;
            did?: string;
        }): IssueVerifiableCredentialRequest {
            const message = new IssueVerifiableCredentialRequest({});
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_type?: CredentialType;
                nonce?: string;
                signature?: Uint8Array;
                did?: string;
            } = {};
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_type != CredentialType.CREDENTIAL_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.credential_type);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.signature.length)
                writer.writeBytes(3, this.signature);
            if (this.did.length)
                writer.writeString(4, this.did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueVerifiableCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueVerifiableCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_type = reader.readEnum();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.signature = reader.readBytes();
                        break;
                    case 4:
                        message.did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueVerifiableCredentialRequest {
            return IssueVerifiableCredentialRequest.deserialize(bytes);
        }
    }
    export class IssueVerifiableCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
            }
        }
        get credential() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            credential?: string;
        }): IssueVerifiableCredentialResponse {
            const message = new IssueVerifiableCredentialResponse({});
            if (data.credential != null) {
                message.credential = data.credential;
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: string;
            } = {};
            if (this.credential != null) {
                data.credential = this.credential;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential.length)
                writer.writeString(1, this.credential);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueVerifiableCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueVerifiableCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueVerifiableCredentialResponse {
            return IssueVerifiableCredentialResponse.deserialize(bytes);
        }
    }
    export class CreatePresentationChallengeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_types?: CredentialType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_types" in data && data.credential_types != undefined) {
                    this.credential_types = data.credential_types;
                }
            }
        }
        get credential_types() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as CredentialType[];
        }
        set credential_types(value: CredentialType[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            credential_types?: CredentialType[];
        }): CreatePresentationChallengeRequest {
            const message = new CreatePresentationChallengeRequest({});
            if (data.credential_types != null) {
                message.credential_types = data.credential_types;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_types?: CredentialType[];
            } = {};
            if (this.credential_types != null) {
                data.credential_types = this.credential_types;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_types.length)
                writer.writePackedEnum(1, this.credential_types);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePresentationChallengeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePresentationChallengeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_types = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePresentationChallengeRequest {
            return CreatePresentationChallengeRequest.deserialize(bytes);
        }
    }
    export class CreatePresentationChallengeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
            endpoint?: string;
            credential_types?: CredentialType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("credential_types" in data && data.credential_types != undefined) {
                    this.credential_types = data.credential_types;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get credential_types() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as CredentialType[];
        }
        set credential_types(value: CredentialType[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            nonce?: string;
            endpoint?: string;
            credential_types?: CredentialType[];
        }): CreatePresentationChallengeResponse {
            const message = new CreatePresentationChallengeResponse({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.credential_types != null) {
                message.credential_types = data.credential_types;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                endpoint?: string;
                credential_types?: CredentialType[];
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.credential_types != null) {
                data.credential_types = this.credential_types;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (this.endpoint.length)
                writer.writeString(2, this.endpoint);
            if (this.credential_types.length)
                writer.writePackedEnum(3, this.credential_types);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePresentationChallengeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePresentationChallengeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        message.endpoint = reader.readString();
                        break;
                    case 3:
                        message.credential_types = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePresentationChallengeResponse {
            return CreatePresentationChallengeResponse.deserialize(bytes);
        }
    }
    export class PresentVerifiableCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            presentation?: string;
            nonce?: string;
            signature?: Uint8Array;
            did?: string;
            credential_type?: CredentialType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("presentation" in data && data.presentation != undefined) {
                    this.presentation = data.presentation;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
            }
        }
        get presentation() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set presentation(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as CredentialType[];
        }
        set credential_type(value: CredentialType[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            presentation?: string;
            nonce?: string;
            signature?: Uint8Array;
            did?: string;
            credential_type?: CredentialType[];
        }): PresentVerifiableCredentialRequest {
            const message = new PresentVerifiableCredentialRequest({});
            if (data.presentation != null) {
                message.presentation = data.presentation;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            return message;
        }
        toObject() {
            const data: {
                presentation?: string;
                nonce?: string;
                signature?: Uint8Array;
                did?: string;
                credential_type?: CredentialType[];
            } = {};
            if (this.presentation != null) {
                data.presentation = this.presentation;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.presentation.length)
                writer.writeString(1, this.presentation);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.signature.length)
                writer.writeBytes(3, this.signature);
            if (this.did.length)
                writer.writeString(4, this.did);
            if (this.credential_type.length)
                writer.writePackedEnum(5, this.credential_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PresentVerifiableCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PresentVerifiableCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.presentation = reader.readString();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.signature = reader.readBytes();
                        break;
                    case 4:
                        message.did = reader.readString();
                        break;
                    case 5:
                        message.credential_type = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PresentVerifiableCredentialRequest {
            return PresentVerifiableCredentialRequest.deserialize(bytes);
        }
    }
    export class PresentVerifiableCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PresentVerifiableCredentialResponse {
            const message = new PresentVerifiableCredentialResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PresentVerifiableCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PresentVerifiableCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PresentVerifiableCredentialResponse {
            return PresentVerifiableCredentialResponse.deserialize(bytes);
        }
    }
    export class WaitForCompletionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            nonce?: string;
        }): WaitForCompletionRequest {
            const message = new WaitForCompletionRequest({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaitForCompletionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaitForCompletionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WaitForCompletionRequest {
            return WaitForCompletionRequest.deserialize(bytes);
        }
    }
    export class WaitForCompletionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            did?: string;
            data?: string;
        }): WaitForCompletionResponse {
            const message = new WaitForCompletionResponse({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                data?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.data.length)
                writer.writeString(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaitForCompletionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaitForCompletionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WaitForCompletionResponse {
            return WaitForCompletionResponse.deserialize(bytes);
        }
    }
    export class UpdateVerifiableCredentialStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_type?: CredentialType;
            did?: string;
            update_type?: UpdateVerifiableCredentialStatusType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
            }
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, CredentialType.CREDENTIAL_TYPE_UNSPECIFIED) as CredentialType;
        }
        set credential_type(value: CredentialType) {
            pb_1.Message.setField(this, 1, value);
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, UpdateVerifiableCredentialStatusType.UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_UNSPECIFIED) as UpdateVerifiableCredentialStatusType;
        }
        set update_type(value: UpdateVerifiableCredentialStatusType) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            credential_type?: CredentialType;
            did?: string;
            update_type?: UpdateVerifiableCredentialStatusType;
        }): UpdateVerifiableCredentialStatusRequest {
            const message = new UpdateVerifiableCredentialStatusRequest({});
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_type?: CredentialType;
                did?: string;
                update_type?: UpdateVerifiableCredentialStatusType;
            } = {};
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_type != CredentialType.CREDENTIAL_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.credential_type);
            if (this.did.length)
                writer.writeString(2, this.did);
            if (this.update_type != UpdateVerifiableCredentialStatusType.UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_UNSPECIFIED)
                writer.writeEnum(3, this.update_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateVerifiableCredentialStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateVerifiableCredentialStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_type = reader.readEnum();
                        break;
                    case 2:
                        message.did = reader.readString();
                        break;
                    case 3:
                        message.update_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateVerifiableCredentialStatusRequest {
            return UpdateVerifiableCredentialStatusRequest.deserialize(bytes);
        }
    }
    export class UpdateVerifiableCredentialStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateVerifiableCredentialStatusResponse {
            const message = new UpdateVerifiableCredentialStatusResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateVerifiableCredentialStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateVerifiableCredentialStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateVerifiableCredentialStatusResponse {
            return UpdateVerifiableCredentialStatusResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCredentialAdapterServiceService {
        static definition = {
            CreateIssuanceChallenge: {
                path: "/vc_api.v1.CredentialAdapterService/CreateIssuanceChallenge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateIssuanceChallengeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateIssuanceChallengeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateIssuanceChallengeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateIssuanceChallengeResponse.deserialize(new Uint8Array(bytes))
            },
            IssueVerifiableCredential: {
                path: "/vc_api.v1.CredentialAdapterService/IssueVerifiableCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IssueVerifiableCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IssueVerifiableCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IssueVerifiableCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IssueVerifiableCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            CreatePresentationChallenge: {
                path: "/vc_api.v1.CredentialAdapterService/CreatePresentationChallenge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePresentationChallengeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePresentationChallengeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePresentationChallengeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePresentationChallengeResponse.deserialize(new Uint8Array(bytes))
            },
            PresentVerifiableCredential: {
                path: "/vc_api.v1.CredentialAdapterService/PresentVerifiableCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PresentVerifiableCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PresentVerifiableCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PresentVerifiableCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PresentVerifiableCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            WaitForCompletion: {
                path: "/vc_api.v1.CredentialAdapterService/WaitForCompletion",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: WaitForCompletionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WaitForCompletionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WaitForCompletionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WaitForCompletionResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateVerifiableCredentialStatus: {
                path: "/vc_api.v1.CredentialAdapterService/UpdateVerifiableCredentialStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateVerifiableCredentialStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateVerifiableCredentialStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateVerifiableCredentialStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateVerifiableCredentialStatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateIssuanceChallenge(call: grpc_1.ServerUnaryCall<CreateIssuanceChallengeRequest, CreateIssuanceChallengeResponse>, callback: grpc_1.sendUnaryData<CreateIssuanceChallengeResponse>): void;
        abstract IssueVerifiableCredential(call: grpc_1.ServerUnaryCall<IssueVerifiableCredentialRequest, IssueVerifiableCredentialResponse>, callback: grpc_1.sendUnaryData<IssueVerifiableCredentialResponse>): void;
        abstract CreatePresentationChallenge(call: grpc_1.ServerUnaryCall<CreatePresentationChallengeRequest, CreatePresentationChallengeResponse>, callback: grpc_1.sendUnaryData<CreatePresentationChallengeResponse>): void;
        abstract PresentVerifiableCredential(call: grpc_1.ServerUnaryCall<PresentVerifiableCredentialRequest, PresentVerifiableCredentialResponse>, callback: grpc_1.sendUnaryData<PresentVerifiableCredentialResponse>): void;
        abstract WaitForCompletion(call: grpc_1.ServerWritableStream<WaitForCompletionRequest, WaitForCompletionResponse>): void;
        abstract UpdateVerifiableCredentialStatus(call: grpc_1.ServerUnaryCall<UpdateVerifiableCredentialStatusRequest, UpdateVerifiableCredentialStatusResponse>, callback: grpc_1.sendUnaryData<UpdateVerifiableCredentialStatusResponse>): void;
    }
    export class CredentialAdapterServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCredentialAdapterServiceService.definition, "CredentialAdapterService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateIssuanceChallenge: GrpcUnaryServiceInterface<CreateIssuanceChallengeRequest, CreateIssuanceChallengeResponse> = (message: CreateIssuanceChallengeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateIssuanceChallengeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateIssuanceChallengeResponse>, callback?: grpc_1.requestCallback<CreateIssuanceChallengeResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateIssuanceChallenge(message, metadata, options, callback);
        };
        IssueVerifiableCredential: GrpcUnaryServiceInterface<IssueVerifiableCredentialRequest, IssueVerifiableCredentialResponse> = (message: IssueVerifiableCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IssueVerifiableCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IssueVerifiableCredentialResponse>, callback?: grpc_1.requestCallback<IssueVerifiableCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.IssueVerifiableCredential(message, metadata, options, callback);
        };
        CreatePresentationChallenge: GrpcUnaryServiceInterface<CreatePresentationChallengeRequest, CreatePresentationChallengeResponse> = (message: CreatePresentationChallengeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePresentationChallengeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePresentationChallengeResponse>, callback?: grpc_1.requestCallback<CreatePresentationChallengeResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePresentationChallenge(message, metadata, options, callback);
        };
        PresentVerifiableCredential: GrpcUnaryServiceInterface<PresentVerifiableCredentialRequest, PresentVerifiableCredentialResponse> = (message: PresentVerifiableCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PresentVerifiableCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PresentVerifiableCredentialResponse>, callback?: grpc_1.requestCallback<PresentVerifiableCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.PresentVerifiableCredential(message, metadata, options, callback);
        };
        WaitForCompletion: GrpcStreamServiceInterface<WaitForCompletionRequest, WaitForCompletionResponse> = (message: WaitForCompletionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<WaitForCompletionResponse> => {
            return super.WaitForCompletion(message, metadata, options);
        };
        UpdateVerifiableCredentialStatus: GrpcUnaryServiceInterface<UpdateVerifiableCredentialStatusRequest, UpdateVerifiableCredentialStatusResponse> = (message: UpdateVerifiableCredentialStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateVerifiableCredentialStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateVerifiableCredentialStatusResponse>, callback?: grpc_1.requestCallback<UpdateVerifiableCredentialStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateVerifiableCredentialStatus(message, metadata, options, callback);
        };
    }
}
