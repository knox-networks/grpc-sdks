/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: common/v1/amqp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./packet";
import * as pb_1 from "google-protobuf";
export namespace common {
    export enum PayloadType {
        NewTransaction = 0,
        AckProposal = 1,
        ProposalAcked = 2,
        ProposalNacked = 3,
        RevealSecret = 4,
        SecretRevealed = 5,
        ReceiveSecret = 6,
        ReceiveTermination = 7
    }
    export enum TerminationResult {
        ContractFailed = 0,
        TxnFailed = 1,
        TxnCompleted = 2
    }
    export class Payload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            payload_type?: PayloadType;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("payload_type" in data && data.payload_type != undefined) {
                    this.payload_type = data.payload_type;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get payload_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, PayloadType.NewTransaction) as PayloadType;
        }
        set payload_type(value: PayloadType) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            payload_type?: PayloadType;
            data?: Uint8Array;
        }): Payload {
            const message = new Payload({});
            if (data.payload_type != null) {
                message.payload_type = data.payload_type;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                payload_type?: PayloadType;
                data?: Uint8Array;
            } = {};
            if (this.payload_type != null) {
                data.payload_type = this.payload_type;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.payload_type != PayloadType.NewTransaction)
                writer.writeEnum(1, this.payload_type);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Payload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Payload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.payload_type = reader.readEnum();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Payload {
            return Payload.deserialize(bytes);
        }
    }
    export class NewTransactionData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract?: dependency_1.common.Contract;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Contract, 2) as dependency_1.common.Contract;
        }
        set contract(value: dependency_1.common.Contract) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_contract() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            participant?: string;
            contract?: ReturnType<typeof dependency_1.common.Contract.prototype.toObject>;
        }): NewTransactionData {
            const message = new NewTransactionData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract != null) {
                message.contract = dependency_1.common.Contract.fromObject(data.contract);
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract?: ReturnType<typeof dependency_1.common.Contract.prototype.toObject>;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract != null) {
                data.contract = this.contract.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.has_contract)
                writer.writeMessage(2, this.contract, () => this.contract.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTransactionData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewTransactionData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.contract, () => message.contract = dependency_1.common.Contract.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTransactionData {
            return NewTransactionData.deserialize(bytes);
        }
    }
    export class AckProposalData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract?: dependency_1.common.Contract;
            originator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("originator" in data && data.originator != undefined) {
                    this.originator = data.originator;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Contract, 2) as dependency_1.common.Contract;
        }
        set contract(value: dependency_1.common.Contract) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_contract() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get originator() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set originator(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant?: string;
            contract?: ReturnType<typeof dependency_1.common.Contract.prototype.toObject>;
            originator?: string;
        }): AckProposalData {
            const message = new AckProposalData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract != null) {
                message.contract = dependency_1.common.Contract.fromObject(data.contract);
            }
            if (data.originator != null) {
                message.originator = data.originator;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract?: ReturnType<typeof dependency_1.common.Contract.prototype.toObject>;
                originator?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract != null) {
                data.contract = this.contract.toObject();
            }
            if (this.originator != null) {
                data.originator = this.originator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.has_contract)
                writer.writeMessage(2, this.contract, () => this.contract.serialize(writer));
            if (this.originator.length)
                writer.writeString(3, this.originator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AckProposalData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AckProposalData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.contract, () => message.contract = dependency_1.common.Contract.deserialize(reader));
                        break;
                    case 3:
                        message.originator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AckProposalData {
            return AckProposalData.deserialize(bytes);
        }
    }
    export class ProposalAckNackData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract?: dependency_1.common.Contract;
            originator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("originator" in data && data.originator != undefined) {
                    this.originator = data.originator;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Contract, 2) as dependency_1.common.Contract;
        }
        set contract(value: dependency_1.common.Contract) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_contract() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get originator() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set originator(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant?: string;
            contract?: ReturnType<typeof dependency_1.common.Contract.prototype.toObject>;
            originator?: string;
        }): ProposalAckNackData {
            const message = new ProposalAckNackData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract != null) {
                message.contract = dependency_1.common.Contract.fromObject(data.contract);
            }
            if (data.originator != null) {
                message.originator = data.originator;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract?: ReturnType<typeof dependency_1.common.Contract.prototype.toObject>;
                originator?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract != null) {
                data.contract = this.contract.toObject();
            }
            if (this.originator != null) {
                data.originator = this.originator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.has_contract)
                writer.writeMessage(2, this.contract, () => this.contract.serialize(writer));
            if (this.originator.length)
                writer.writeString(3, this.originator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalAckNackData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalAckNackData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.contract, () => message.contract = dependency_1.common.Contract.deserialize(reader));
                        break;
                    case 3:
                        message.originator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposalAckNackData {
            return ProposalAckNackData.deserialize(bytes);
        }
    }
    export class RevealSecretData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
        }): RevealSecretData {
            const message = new RevealSecretData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevealSecretData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevealSecretData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevealSecretData {
            return RevealSecretData.deserialize(bytes);
        }
    }
    export class SecretRevealedData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
            secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
            secret?: string;
        }): SecretRevealedData {
            const message = new SecretRevealedData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.secret != null) {
                message.secret = data.secret;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
                secret?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.secret != null) {
                data.secret = this.secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (this.secret.length)
                writer.writeString(3, this.secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretRevealedData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretRevealedData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    case 3:
                        message.secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretRevealedData {
            return SecretRevealedData.deserialize(bytes);
        }
    }
    export class ReceiveSecretData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
            secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
            secret?: string;
        }): ReceiveSecretData {
            const message = new ReceiveSecretData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.secret != null) {
                message.secret = data.secret;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
                secret?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.secret != null) {
                data.secret = this.secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (this.secret.length)
                writer.writeString(3, this.secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceiveSecretData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceiveSecretData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    case 3:
                        message.secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReceiveSecretData {
            return ReceiveSecretData.deserialize(bytes);
        }
    }
    export class ReceiveTerminationData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
            contract_id?: string;
            result?: TerminationResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 3, TerminationResult.ContractFailed) as TerminationResult;
        }
        set result(value: TerminationResult) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant?: string;
            contract_id?: string;
            result?: TerminationResult;
        }): ReceiveTerminationData {
            const message = new ReceiveTerminationData({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
                contract_id?: string;
                result?: TerminationResult;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (this.contract_id.length)
                writer.writeString(2, this.contract_id);
            if (this.result != TerminationResult.ContractFailed)
                writer.writeEnum(3, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceiveTerminationData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceiveTerminationData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    case 2:
                        message.contract_id = reader.readString();
                        break;
                    case 3:
                        message.result = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReceiveTerminationData {
            return ReceiveTerminationData.deserialize(bytes);
        }
    }
}
