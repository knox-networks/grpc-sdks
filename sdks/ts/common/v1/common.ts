/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: common/v1/common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace common {
    export enum ServiceType {
        UnknownService = 0,
        Gateway = 1,
        Notary = 2,
        Authority = 3,
        Treasury = 4,
        Emissary = 5,
        Shared = 6,
        Identity = 7,
        Vault = 8,
        CustodialWallet = 9,
        Issuer = 10,
        Overload = 11,
        Faucet = 12,
        TransactionManager = 13,
        Recovery = 14
    }
    export enum SignatureSystem {
        SIGNATURE_SYSTEM_UNSPECIFIED = 0,
        SIGNATURE_SYSTEM_ED25519 = 1,
        SIGNATURE_SYSTEM_SECP256K1 = 2
    }
    export enum LogicalOperator {
        LOGICAL_OPERATOR_UNSPECIFIED = 0,
        LOGICAL_OPERATOR_AND = 1,
        LOGICAL_OPERATOR_OR = 2
    }
    export enum SortDirection {
        SORT_DIRECTION_UNSPECIFIED = 0,
        SORT_DIRECTION_ASCENDING = 1,
        SORT_DIRECTION_DESCENDING = 2
    }
    export class DynamicVerifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature_system?: SignatureSystem;
            verifier?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature_system" in data && data.signature_system != undefined) {
                    this.signature_system = data.signature_system;
                }
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
            }
        }
        get signature_system() {
            return pb_1.Message.getFieldWithDefault(this, 1, SignatureSystem.SIGNATURE_SYSTEM_UNSPECIFIED) as SignatureSystem;
        }
        set signature_system(value: SignatureSystem) {
            pb_1.Message.setField(this, 1, value);
        }
        get verifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set verifier(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            signature_system?: SignatureSystem;
            verifier?: Uint8Array;
        }): DynamicVerifier {
            const message = new DynamicVerifier({});
            if (data.signature_system != null) {
                message.signature_system = data.signature_system;
            }
            if (data.verifier != null) {
                message.verifier = data.verifier;
            }
            return message;
        }
        toObject() {
            const data: {
                signature_system?: SignatureSystem;
                verifier?: Uint8Array;
            } = {};
            if (this.signature_system != null) {
                data.signature_system = this.signature_system;
            }
            if (this.verifier != null) {
                data.verifier = this.verifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature_system != SignatureSystem.SIGNATURE_SYSTEM_UNSPECIFIED)
                writer.writeEnum(1, this.signature_system);
            if (this.verifier.length)
                writer.writeBytes(2, this.verifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DynamicVerifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DynamicVerifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature_system = reader.readEnum();
                        break;
                    case 2:
                        message.verifier = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DynamicVerifier {
            return DynamicVerifier.deserialize(bytes);
        }
    }
    export class Amount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            currency_code?: string;
            amount?: number;
            decimals?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("currency_code" in data && data.currency_code != undefined) {
                    this.currency_code = data.currency_code;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("decimals" in data && data.decimals != undefined) {
                    this.decimals = data.decimals;
                }
            }
        }
        get currency_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set currency_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get decimals() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set decimals(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            currency_code?: string;
            amount?: number;
            decimals?: number;
        }): Amount {
            const message = new Amount({});
            if (data.currency_code != null) {
                message.currency_code = data.currency_code;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.decimals != null) {
                message.decimals = data.decimals;
            }
            return message;
        }
        toObject() {
            const data: {
                currency_code?: string;
                amount?: number;
                decimals?: number;
            } = {};
            if (this.currency_code != null) {
                data.currency_code = this.currency_code;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.decimals != null) {
                data.decimals = this.decimals;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.currency_code.length)
                writer.writeString(1, this.currency_code);
            if (this.amount != 0)
                writer.writeInt64(2, this.amount);
            if (this.decimals != 0)
                writer.writeUint32(3, this.decimals);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Amount {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Amount();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.currency_code = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readInt64();
                        break;
                    case 3:
                        message.decimals = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Amount {
            return Amount.deserialize(bytes);
        }
    }
    export class Distribution extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Map<number, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
            if (!this.value)
                this.value = new Map();
        }
        get value() {
            return pb_1.Message.getField(this, 1) as any as Map<number, number>;
        }
        set value(value: Map<number, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            value?: {
                [key: number]: number;
            };
        }): Distribution {
            const message = new Distribution({});
            if (typeof data.value == "object") {
                message.value = new Map(Object.entries(data.value).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                value?: {
                    [key: number]: number;
                };
            } = {};
            if (this.value != null) {
                data.value = (Object.fromEntries)(this.value);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.value) {
                writer.writeMessage(1, this.value, () => {
                    writer.writeInt64(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Distribution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Distribution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.value as any, reader, reader.readInt64, reader.readInt32));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Distribution {
            return Distribution.deserialize(bytes);
        }
    }
    export class AuthenticationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verifier?: DynamicVerifier;
            connection_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
                if ("connection_id" in data && data.connection_id != undefined) {
                    this.connection_id = data.connection_id;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getWrapperField(this, DynamicVerifier, 1) as DynamicVerifier;
        }
        set verifier(value: DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_verifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get connection_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set connection_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
            connection_id?: string;
        }): AuthenticationRequest {
            const message = new AuthenticationRequest({});
            if (data.verifier != null) {
                message.verifier = DynamicVerifier.fromObject(data.verifier);
            }
            if (data.connection_id != null) {
                message.connection_id = data.connection_id;
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
                connection_id?: string;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier.toObject();
            }
            if (this.connection_id != null) {
                data.connection_id = this.connection_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_verifier)
                writer.writeMessage(1, this.verifier, () => this.verifier.serialize(writer));
            if (this.connection_id.length)
                writer.writeString(2, this.connection_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.verifier, () => message.verifier = DynamicVerifier.deserialize(reader));
                        break;
                    case 2:
                        message.connection_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticationRequest {
            return AuthenticationRequest.deserialize(bytes);
        }
    }
    export class AuthenticationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            challenge?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("challenge" in data && data.challenge != undefined) {
                    this.challenge = data.challenge;
                }
            }
        }
        get challenge() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set challenge(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            challenge?: Uint8Array;
        }): AuthenticationResponse {
            const message = new AuthenticationResponse({});
            if (data.challenge != null) {
                message.challenge = data.challenge;
            }
            return message;
        }
        toObject() {
            const data: {
                challenge?: Uint8Array;
            } = {};
            if (this.challenge != null) {
                data.challenge = this.challenge;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.challenge.length)
                writer.writeBytes(1, this.challenge);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.challenge = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticationResponse {
            return AuthenticationResponse.deserialize(bytes);
        }
    }
    export class OneConnection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): OneConnection {
            const message = new OneConnection({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OneConnection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OneConnection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OneConnection {
            return OneConnection.deserialize(bytes);
        }
    }
    export class ManyVerifierConnection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            associated?: DynamicVerifier[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("associated" in data && data.associated != undefined) {
                    this.associated = data.associated;
                }
            }
        }
        get associated() {
            return pb_1.Message.getRepeatedWrapperField(this, DynamicVerifier, 2) as DynamicVerifier[];
        }
        set associated(value: DynamicVerifier[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            associated?: ReturnType<typeof DynamicVerifier.prototype.toObject>[];
        }): ManyVerifierConnection {
            const message = new ManyVerifierConnection({});
            if (data.associated != null) {
                message.associated = data.associated.map(item => DynamicVerifier.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                associated?: ReturnType<typeof DynamicVerifier.prototype.toObject>[];
            } = {};
            if (this.associated != null) {
                data.associated = this.associated.map((item: DynamicVerifier) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.associated.length)
                writer.writeRepeatedMessage(2, this.associated, (item: DynamicVerifier) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManyVerifierConnection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManyVerifierConnection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.associated, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DynamicVerifier.deserialize(reader), DynamicVerifier));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManyVerifierConnection {
            return ManyVerifierConnection.deserialize(bytes);
        }
    }
    export class ManyUetrConnection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            associated?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("associated" in data && data.associated != undefined) {
                    this.associated = data.associated;
                }
            }
        }
        get associated() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set associated(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            associated?: string[];
        }): ManyUetrConnection {
            const message = new ManyUetrConnection({});
            if (data.associated != null) {
                message.associated = data.associated;
            }
            return message;
        }
        toObject() {
            const data: {
                associated?: string[];
            } = {};
            if (this.associated != null) {
                data.associated = this.associated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.associated.length)
                writer.writeRepeatedString(3, this.associated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManyUetrConnection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManyUetrConnection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManyUetrConnection {
            return ManyUetrConnection.deserialize(bytes);
        }
    }
    export class AssociatedVerifierConnection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            primary_verifier?: DynamicVerifier;
            associated_verifier?: DynamicVerifier;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("primary_verifier" in data && data.primary_verifier != undefined) {
                    this.primary_verifier = data.primary_verifier;
                }
                if ("associated_verifier" in data && data.associated_verifier != undefined) {
                    this.associated_verifier = data.associated_verifier;
                }
            }
        }
        get primary_verifier() {
            return pb_1.Message.getWrapperField(this, DynamicVerifier, 1) as DynamicVerifier;
        }
        set primary_verifier(value: DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_primary_verifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get associated_verifier() {
            return pb_1.Message.getWrapperField(this, DynamicVerifier, 2) as DynamicVerifier;
        }
        set associated_verifier(value: DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_associated_verifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            primary_verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
            associated_verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
        }): AssociatedVerifierConnection {
            const message = new AssociatedVerifierConnection({});
            if (data.primary_verifier != null) {
                message.primary_verifier = DynamicVerifier.fromObject(data.primary_verifier);
            }
            if (data.associated_verifier != null) {
                message.associated_verifier = DynamicVerifier.fromObject(data.associated_verifier);
            }
            return message;
        }
        toObject() {
            const data: {
                primary_verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
                associated_verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
            } = {};
            if (this.primary_verifier != null) {
                data.primary_verifier = this.primary_verifier.toObject();
            }
            if (this.associated_verifier != null) {
                data.associated_verifier = this.associated_verifier.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_primary_verifier)
                writer.writeMessage(1, this.primary_verifier, () => this.primary_verifier.serialize(writer));
            if (this.has_associated_verifier)
                writer.writeMessage(2, this.associated_verifier, () => this.associated_verifier.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssociatedVerifierConnection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssociatedVerifierConnection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.primary_verifier, () => message.primary_verifier = DynamicVerifier.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.associated_verifier, () => message.associated_verifier = DynamicVerifier.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssociatedVerifierConnection {
            return AssociatedVerifierConnection.deserialize(bytes);
        }
    }
    export class ConnectionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({
            signature?: AuthenticationSignature;
            connection_id?: string;
        } & (({
            one?: OneConnection;
            many_verifier?: never;
            many_uetr?: never;
        } | {
            one?: never;
            many_verifier?: ManyVerifierConnection;
            many_uetr?: never;
        } | {
            one?: never;
            many_verifier?: never;
            many_uetr?: ManyUetrConnection;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("one" in data && data.one != undefined) {
                    this.one = data.one;
                }
                if ("many_verifier" in data && data.many_verifier != undefined) {
                    this.many_verifier = data.many_verifier;
                }
                if ("many_uetr" in data && data.many_uetr != undefined) {
                    this.many_uetr = data.many_uetr;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("connection_id" in data && data.connection_id != undefined) {
                    this.connection_id = data.connection_id;
                }
            }
        }
        get one() {
            return pb_1.Message.getWrapperField(this, OneConnection, 1) as OneConnection;
        }
        set one(value: OneConnection) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_one() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get many_verifier() {
            return pb_1.Message.getWrapperField(this, ManyVerifierConnection, 2) as ManyVerifierConnection;
        }
        set many_verifier(value: ManyVerifierConnection) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_many_verifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get many_uetr() {
            return pb_1.Message.getWrapperField(this, ManyUetrConnection, 3) as ManyUetrConnection;
        }
        set many_uetr(value: ManyUetrConnection) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_many_uetr() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get signature() {
            return pb_1.Message.getWrapperField(this, AuthenticationSignature, 4) as AuthenticationSignature;
        }
        set signature(value: AuthenticationSignature) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_signature() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get connection_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set connection_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get request_type() {
            const cases: {
                [index: number]: "none" | "one" | "many_verifier" | "many_uetr";
            } = {
                0: "none",
                1: "one",
                2: "many_verifier",
                3: "many_uetr"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            one?: ReturnType<typeof OneConnection.prototype.toObject>;
            many_verifier?: ReturnType<typeof ManyVerifierConnection.prototype.toObject>;
            many_uetr?: ReturnType<typeof ManyUetrConnection.prototype.toObject>;
            signature?: ReturnType<typeof AuthenticationSignature.prototype.toObject>;
            connection_id?: string;
        }): ConnectionRequest {
            const message = new ConnectionRequest({});
            if (data.one != null) {
                message.one = OneConnection.fromObject(data.one);
            }
            if (data.many_verifier != null) {
                message.many_verifier = ManyVerifierConnection.fromObject(data.many_verifier);
            }
            if (data.many_uetr != null) {
                message.many_uetr = ManyUetrConnection.fromObject(data.many_uetr);
            }
            if (data.signature != null) {
                message.signature = AuthenticationSignature.fromObject(data.signature);
            }
            if (data.connection_id != null) {
                message.connection_id = data.connection_id;
            }
            return message;
        }
        toObject() {
            const data: {
                one?: ReturnType<typeof OneConnection.prototype.toObject>;
                many_verifier?: ReturnType<typeof ManyVerifierConnection.prototype.toObject>;
                many_uetr?: ReturnType<typeof ManyUetrConnection.prototype.toObject>;
                signature?: ReturnType<typeof AuthenticationSignature.prototype.toObject>;
                connection_id?: string;
            } = {};
            if (this.one != null) {
                data.one = this.one.toObject();
            }
            if (this.many_verifier != null) {
                data.many_verifier = this.many_verifier.toObject();
            }
            if (this.many_uetr != null) {
                data.many_uetr = this.many_uetr.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature.toObject();
            }
            if (this.connection_id != null) {
                data.connection_id = this.connection_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_one)
                writer.writeMessage(1, this.one, () => this.one.serialize(writer));
            if (this.has_many_verifier)
                writer.writeMessage(2, this.many_verifier, () => this.many_verifier.serialize(writer));
            if (this.has_many_uetr)
                writer.writeMessage(3, this.many_uetr, () => this.many_uetr.serialize(writer));
            if (this.has_signature)
                writer.writeMessage(4, this.signature, () => this.signature.serialize(writer));
            if (this.connection_id.length)
                writer.writeString(5, this.connection_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.one, () => message.one = OneConnection.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.many_verifier, () => message.many_verifier = ManyVerifierConnection.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.many_uetr, () => message.many_uetr = ManyUetrConnection.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.signature, () => message.signature = AuthenticationSignature.deserialize(reader));
                        break;
                    case 5:
                        message.connection_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectionRequest {
            return ConnectionRequest.deserialize(bytes);
        }
    }
    export class AuthenticationSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verifier?: DynamicVerifier;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getWrapperField(this, DynamicVerifier, 1) as DynamicVerifier;
        }
        set verifier(value: DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_verifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
            signature?: Uint8Array;
        }): AuthenticationSignature {
            const message = new AuthenticationSignature({});
            if (data.verifier != null) {
                message.verifier = DynamicVerifier.fromObject(data.verifier);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
                signature?: Uint8Array;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_verifier)
                writer.writeMessage(1, this.verifier, () => this.verifier.serialize(writer));
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticationSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticationSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.verifier, () => message.verifier = DynamicVerifier.deserialize(reader));
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticationSignature {
            return AuthenticationSignature.deserialize(bytes);
        }
    }
    export class AuthorizedSignatureResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            promissory_file?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("promissory_file" in data && data.promissory_file != undefined) {
                    this.promissory_file = data.promissory_file;
                }
            }
        }
        get promissory_file() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set promissory_file(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            promissory_file?: Uint8Array;
        }): AuthorizedSignatureResponse {
            const message = new AuthorizedSignatureResponse({});
            if (data.promissory_file != null) {
                message.promissory_file = data.promissory_file;
            }
            return message;
        }
        toObject() {
            const data: {
                promissory_file?: Uint8Array;
            } = {};
            if (this.promissory_file != null) {
                data.promissory_file = this.promissory_file;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.promissory_file.length)
                writer.writeBytes(1, this.promissory_file);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthorizedSignatureResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthorizedSignatureResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.promissory_file = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthorizedSignatureResponse {
            return AuthorizedSignatureResponse.deserialize(bytes);
        }
    }
    export class Media extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mime_type?: string;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get mime_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            mime_type?: string;
            data?: Uint8Array;
        }): Media {
            const message = new Media({});
            if (data.mime_type != null) {
                message.mime_type = data.mime_type;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                mime_type?: string;
                data?: Uint8Array;
            } = {};
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mime_type.length)
                writer.writeString(1, this.mime_type);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Media {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Media();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mime_type = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Media {
            return Media.deserialize(bytes);
        }
    }
    export class Role extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            verifier?: string;
        } & (({
            authorized?: boolean;
            issue_permissions?: never;
        } | {
            authorized?: never;
            issue_permissions?: Role.IssuePermissions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
                if ("authorized" in data && data.authorized != undefined) {
                    this.authorized = data.authorized;
                }
                if ("issue_permissions" in data && data.issue_permissions != undefined) {
                    this.issue_permissions = data.issue_permissions;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set verifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authorized() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set authorized(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_authorized() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get issue_permissions() {
            return pb_1.Message.getWrapperField(this, Role.IssuePermissions, 4) as Role.IssuePermissions;
        }
        set issue_permissions(value: Role.IssuePermissions) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_issue_permissions() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get role_enum() {
            const cases: {
                [index: number]: "none" | "authorized" | "issue_permissions";
            } = {
                0: "none",
                3: "authorized",
                4: "issue_permissions"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            verifier?: string;
            authorized?: boolean;
            issue_permissions?: ReturnType<typeof Role.IssuePermissions.prototype.toObject>;
        }): Role {
            const message = new Role({});
            if (data.verifier != null) {
                message.verifier = data.verifier;
            }
            if (data.authorized != null) {
                message.authorized = data.authorized;
            }
            if (data.issue_permissions != null) {
                message.issue_permissions = Role.IssuePermissions.fromObject(data.issue_permissions);
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: string;
                authorized?: boolean;
                issue_permissions?: ReturnType<typeof Role.IssuePermissions.prototype.toObject>;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier;
            }
            if (this.authorized != null) {
                data.authorized = this.authorized;
            }
            if (this.issue_permissions != null) {
                data.issue_permissions = this.issue_permissions.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.verifier.length)
                writer.writeString(1, this.verifier);
            if (this.has_authorized)
                writer.writeBool(3, this.authorized);
            if (this.has_issue_permissions)
                writer.writeMessage(4, this.issue_permissions, () => this.issue_permissions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Role {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Role();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.verifier = reader.readString();
                        break;
                    case 3:
                        message.authorized = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.issue_permissions, () => message.issue_permissions = Role.IssuePermissions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Role {
            return Role.deserialize(bytes);
        }
    }
    export namespace Role {
        export class IssuePermissions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                inner?: Amount[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("inner" in data && data.inner != undefined) {
                        this.inner = data.inner;
                    }
                }
            }
            get inner() {
                return pb_1.Message.getRepeatedWrapperField(this, Amount, 2) as Amount[];
            }
            set inner(value: Amount[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                inner?: ReturnType<typeof Amount.prototype.toObject>[];
            }): IssuePermissions {
                const message = new IssuePermissions({});
                if (data.inner != null) {
                    message.inner = data.inner.map(item => Amount.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    inner?: ReturnType<typeof Amount.prototype.toObject>[];
                } = {};
                if (this.inner != null) {
                    data.inner = this.inner.map((item: Amount) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.inner.length)
                    writer.writeRepeatedMessage(2, this.inner, (item: Amount) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssuePermissions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssuePermissions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 2:
                            reader.readMessage(message.inner, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Amount.deserialize(reader), Amount));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IssuePermissions {
                return IssuePermissions.deserialize(bytes);
            }
        }
    }
    export class GetVerifierRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetVerifierRequest {
            const message = new GetVerifierRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVerifierRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVerifierRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVerifierRequest {
            return GetVerifierRequest.deserialize(bytes);
        }
    }
    export class GetVerifierResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bytes?: DynamicVerifier;
            multibase?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
                if ("multibase" in data && data.multibase != undefined) {
                    this.multibase = data.multibase;
                }
            }
        }
        get bytes() {
            return pb_1.Message.getWrapperField(this, DynamicVerifier, 1) as DynamicVerifier;
        }
        set bytes(value: DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_bytes() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get multibase() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set multibase(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            bytes?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
            multibase?: string;
        }): GetVerifierResponse {
            const message = new GetVerifierResponse({});
            if (data.bytes != null) {
                message.bytes = DynamicVerifier.fromObject(data.bytes);
            }
            if (data.multibase != null) {
                message.multibase = data.multibase;
            }
            return message;
        }
        toObject() {
            const data: {
                bytes?: ReturnType<typeof DynamicVerifier.prototype.toObject>;
                multibase?: string;
            } = {};
            if (this.bytes != null) {
                data.bytes = this.bytes.toObject();
            }
            if (this.multibase != null) {
                data.multibase = this.multibase;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bytes)
                writer.writeMessage(1, this.bytes, () => this.bytes.serialize(writer));
            if (this.multibase.length)
                writer.writeString(2, this.multibase);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVerifierResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVerifierResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bytes, () => message.bytes = DynamicVerifier.deserialize(reader));
                        break;
                    case 2:
                        message.multibase = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVerifierResponse {
            return GetVerifierResponse.deserialize(bytes);
        }
    }
    export class GetServiceTypeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetServiceTypeRequest {
            const message = new GetServiceTypeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceTypeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceTypeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceTypeRequest {
            return GetServiceTypeRequest.deserialize(bytes);
        }
    }
    export class GetServiceTypeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_type?: ServiceType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_type" in data && data.service_type != undefined) {
                    this.service_type = data.service_type;
                }
            }
        }
        get service_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ServiceType.UnknownService) as ServiceType;
        }
        set service_type(value: ServiceType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            service_type?: ServiceType;
        }): GetServiceTypeResponse {
            const message = new GetServiceTypeResponse({});
            if (data.service_type != null) {
                message.service_type = data.service_type;
            }
            return message;
        }
        toObject() {
            const data: {
                service_type?: ServiceType;
            } = {};
            if (this.service_type != null) {
                data.service_type = this.service_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_type != ServiceType.UnknownService)
                writer.writeEnum(1, this.service_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceTypeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceTypeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceTypeResponse {
            return GetServiceTypeResponse.deserialize(bytes);
        }
    }
    export class GetInstanceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetInstanceRequest {
            const message = new GetInstanceRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInstanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInstanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInstanceRequest {
            return GetInstanceRequest.deserialize(bytes);
        }
    }
    export class GetInstanceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            instance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("instance_id" in data && data.instance_id != undefined) {
                    this.instance_id = data.instance_id;
                }
            }
        }
        get instance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set instance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            instance_id?: string;
        }): GetInstanceResponse {
            const message = new GetInstanceResponse({});
            if (data.instance_id != null) {
                message.instance_id = data.instance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                instance_id?: string;
            } = {};
            if (this.instance_id != null) {
                data.instance_id = this.instance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.instance_id.length)
                writer.writeString(1, this.instance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInstanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInstanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.instance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInstanceResponse {
            return GetInstanceResponse.deserialize(bytes);
        }
    }
    export class StartFundsChangeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: Amount;
            promissory?: string;
            user_reference?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("promissory" in data && data.promissory != undefined) {
                    this.promissory = data.promissory;
                }
                if ("user_reference" in data && data.user_reference != undefined) {
                    this.user_reference = data.user_reference;
                }
            }
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, Amount, 1) as Amount;
        }
        set amount(value: Amount) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get promissory() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set promissory(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_reference() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_reference(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            amount?: ReturnType<typeof Amount.prototype.toObject>;
            promissory?: string;
            user_reference?: string;
        }): StartFundsChangeRequest {
            const message = new StartFundsChangeRequest({});
            if (data.amount != null) {
                message.amount = Amount.fromObject(data.amount);
            }
            if (data.promissory != null) {
                message.promissory = data.promissory;
            }
            if (data.user_reference != null) {
                message.user_reference = data.user_reference;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: ReturnType<typeof Amount.prototype.toObject>;
                promissory?: string;
                user_reference?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.promissory != null) {
                data.promissory = this.promissory;
            }
            if (this.user_reference != null) {
                data.user_reference = this.user_reference;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_amount)
                writer.writeMessage(1, this.amount, () => this.amount.serialize(writer));
            if (this.promissory.length)
                writer.writeString(2, this.promissory);
            if (this.user_reference.length)
                writer.writeString(3, this.user_reference);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartFundsChangeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartFundsChangeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.amount, () => message.amount = Amount.deserialize(reader));
                        break;
                    case 2:
                        message.promissory = reader.readString();
                        break;
                    case 3:
                        message.user_reference = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartFundsChangeRequest {
            return StartFundsChangeRequest.deserialize(bytes);
        }
    }
    export class StartFundsChangeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uetr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
            }
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uetr?: string;
        }): StartFundsChangeResponse {
            const message = new StartFundsChangeResponse({});
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            return message;
        }
        toObject() {
            const data: {
                uetr?: string;
            } = {};
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uetr.length)
                writer.writeString(1, this.uetr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartFundsChangeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartFundsChangeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uetr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartFundsChangeResponse {
            return StartFundsChangeResponse.deserialize(bytes);
        }
    }
    export class FilterItem extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({
            field?: string;
            operator?: FilterItem.FilterOperator;
        } & (({
            str_value?: string;
            int_value?: never;
            bool_value?: never;
            rfc3339_datetime_value?: never;
            uuid_value?: never;
        } | {
            str_value?: never;
            int_value?: number;
            bool_value?: never;
            rfc3339_datetime_value?: never;
            uuid_value?: never;
        } | {
            str_value?: never;
            int_value?: never;
            bool_value?: boolean;
            rfc3339_datetime_value?: never;
            uuid_value?: never;
        } | {
            str_value?: never;
            int_value?: never;
            bool_value?: never;
            rfc3339_datetime_value?: string;
            uuid_value?: never;
        } | {
            str_value?: never;
            int_value?: never;
            bool_value?: never;
            rfc3339_datetime_value?: never;
            uuid_value?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
                if ("str_value" in data && data.str_value != undefined) {
                    this.str_value = data.str_value;
                }
                if ("int_value" in data && data.int_value != undefined) {
                    this.int_value = data.int_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("rfc3339_datetime_value" in data && data.rfc3339_datetime_value != undefined) {
                    this.rfc3339_datetime_value = data.rfc3339_datetime_value;
                }
                if ("uuid_value" in data && data.uuid_value != undefined) {
                    this.uuid_value = data.uuid_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 2, FilterItem.FilterOperator.FILTER_OPERATOR_UNSPECIFIED) as FilterItem.FilterOperator;
        }
        set operator(value: FilterItem.FilterOperator) {
            pb_1.Message.setField(this, 2, value);
        }
        get str_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set str_value(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_str_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get int_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set int_value(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_int_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get rfc3339_datetime_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set rfc3339_datetime_value(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_rfc3339_datetime_value() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get uuid_value() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set uuid_value(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_uuid_value() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "str_value" | "int_value" | "bool_value" | "rfc3339_datetime_value" | "uuid_value";
            } = {
                0: "none",
                3: "str_value",
                4: "int_value",
                5: "bool_value",
                6: "rfc3339_datetime_value",
                7: "uuid_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            field?: string;
            operator?: FilterItem.FilterOperator;
            str_value?: string;
            int_value?: number;
            bool_value?: boolean;
            rfc3339_datetime_value?: string;
            uuid_value?: string;
        }): FilterItem {
            const message = new FilterItem({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.operator != null) {
                message.operator = data.operator;
            }
            if (data.str_value != null) {
                message.str_value = data.str_value;
            }
            if (data.int_value != null) {
                message.int_value = data.int_value;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.rfc3339_datetime_value != null) {
                message.rfc3339_datetime_value = data.rfc3339_datetime_value;
            }
            if (data.uuid_value != null) {
                message.uuid_value = data.uuid_value;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                operator?: FilterItem.FilterOperator;
                str_value?: string;
                int_value?: number;
                bool_value?: boolean;
                rfc3339_datetime_value?: string;
                uuid_value?: string;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.operator != null) {
                data.operator = this.operator;
            }
            if (this.str_value != null) {
                data.str_value = this.str_value;
            }
            if (this.int_value != null) {
                data.int_value = this.int_value;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.rfc3339_datetime_value != null) {
                data.rfc3339_datetime_value = this.rfc3339_datetime_value;
            }
            if (this.uuid_value != null) {
                data.uuid_value = this.uuid_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.operator != FilterItem.FilterOperator.FILTER_OPERATOR_UNSPECIFIED)
                writer.writeEnum(2, this.operator);
            if (this.has_str_value)
                writer.writeString(3, this.str_value);
            if (this.has_int_value)
                writer.writeInt64(4, this.int_value);
            if (this.has_bool_value)
                writer.writeBool(5, this.bool_value);
            if (this.has_rfc3339_datetime_value)
                writer.writeString(6, this.rfc3339_datetime_value);
            if (this.has_uuid_value)
                writer.writeString(7, this.uuid_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilterItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilterItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.operator = reader.readEnum();
                        break;
                    case 3:
                        message.str_value = reader.readString();
                        break;
                    case 4:
                        message.int_value = reader.readInt64();
                        break;
                    case 5:
                        message.bool_value = reader.readBool();
                        break;
                    case 6:
                        message.rfc3339_datetime_value = reader.readString();
                        break;
                    case 7:
                        message.uuid_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FilterItem {
            return FilterItem.deserialize(bytes);
        }
    }
    export namespace FilterItem {
        export enum FilterOperator {
            FILTER_OPERATOR_UNSPECIFIED = 0,
            FILTER_OPERATOR_EQ = 1,
            FILTER_OPERATOR_NE = 2,
            FILTER_OPERATOR_GT = 3,
            FILTER_OPERATOR_GTE = 4,
            FILTER_OPERATOR_LT = 5,
            FILTER_OPERATOR_LTE = 6,
            FILTER_OPERATOR_IN = 7,
            FILTER_OPERATOR_NOT_IN = 8
        }
    }
    export class Filter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: FilterItem[];
            operator?: LogicalOperator;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
            }
        }
        get filters() {
            return pb_1.Message.getRepeatedWrapperField(this, FilterItem, 1) as FilterItem[];
        }
        set filters(value: FilterItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 2, LogicalOperator.LOGICAL_OPERATOR_UNSPECIFIED) as LogicalOperator;
        }
        set operator(value: LogicalOperator) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            filters?: ReturnType<typeof FilterItem.prototype.toObject>[];
            operator?: LogicalOperator;
        }): Filter {
            const message = new Filter({});
            if (data.filters != null) {
                message.filters = data.filters.map(item => FilterItem.fromObject(item));
            }
            if (data.operator != null) {
                message.operator = data.operator;
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof FilterItem.prototype.toObject>[];
                operator?: LogicalOperator;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.map((item: FilterItem) => item.toObject());
            }
            if (this.operator != null) {
                data.operator = this.operator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.filters.length)
                writer.writeRepeatedMessage(1, this.filters, (item: FilterItem) => item.serialize(writer));
            if (this.operator != LogicalOperator.LOGICAL_OPERATOR_UNSPECIFIED)
                writer.writeEnum(2, this.operator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Filter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Filter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FilterItem.deserialize(reader), FilterItem));
                        break;
                    case 2:
                        message.operator = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Filter {
            return Filter.deserialize(bytes);
        }
    }
    export class SortItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            direction?: SortDirection;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get direction() {
            return pb_1.Message.getFieldWithDefault(this, 2, SortDirection.SORT_DIRECTION_UNSPECIFIED) as SortDirection;
        }
        set direction(value: SortDirection) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            field?: string;
            direction?: SortDirection;
        }): SortItem {
            const message = new SortItem({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.direction != null) {
                message.direction = data.direction;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                direction?: SortDirection;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.direction != null) {
                data.direction = this.direction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.direction != SortDirection.SORT_DIRECTION_UNSPECIFIED)
                writer.writeEnum(2, this.direction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.direction = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortItem {
            return SortItem.deserialize(bytes);
        }
    }
    export class SortBy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: SortItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, SortItem, 1) as SortItem[];
        }
        set items(value: SortItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof SortItem.prototype.toObject>[];
        }): SortBy {
            const message = new SortBy({});
            if (data.items != null) {
                message.items = data.items.map(item => SortItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof SortItem.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: SortItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: SortItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortBy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortBy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SortItem.deserialize(reader), SortItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortBy {
            return SortBy.deserialize(bytes);
        }
    }
    export class AssetAuthority extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verifier?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set verifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            verifier?: string;
            url?: string;
        }): AssetAuthority {
            const message = new AssetAuthority({});
            if (data.verifier != null) {
                message.verifier = data.verifier;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: string;
                url?: string;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.verifier.length)
                writer.writeString(1, this.verifier);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetAuthority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetAuthority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.verifier = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetAuthority {
            return AssetAuthority.deserialize(bytes);
        }
    }
    export class AssetDenomination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            denominations?: number[];
            precision?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denominations" in data && data.denominations != undefined) {
                    this.denominations = data.denominations;
                }
                if ("precision" in data && data.precision != undefined) {
                    this.precision = data.precision;
                }
            }
        }
        get denominations() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set denominations(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get precision() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set precision(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            denominations?: number[];
            precision?: number;
        }): AssetDenomination {
            const message = new AssetDenomination({});
            if (data.denominations != null) {
                message.denominations = data.denominations;
            }
            if (data.precision != null) {
                message.precision = data.precision;
            }
            return message;
        }
        toObject() {
            const data: {
                denominations?: number[];
                precision?: number;
            } = {};
            if (this.denominations != null) {
                data.denominations = this.denominations;
            }
            if (this.precision != null) {
                data.precision = this.precision;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.denominations.length)
                writer.writePackedInt64(1, this.denominations);
            if (this.precision != 0)
                writer.writeUint32(2, this.precision);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetDenomination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetDenomination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denominations = reader.readPackedInt64();
                        break;
                    case 2:
                        message.precision = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetDenomination {
            return AssetDenomination.deserialize(bytes);
        }
    }
}
