/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: registry_api/v1/registry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../../google/protobuf/struct";
import * as dependency_3 from "./../../google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace registry_api.v1 {
    export enum ResolutionOptionAccept {
        RESOLUTION_OPTION_ACCEPT_UNSPECIFIED = 0,
        RESOLUTION_OPTION_ACCEPT_JSON_LD = 1
    }
    export enum IssuerStatus {
        ISSUER_STATUS_UNSPECIFIED = 0,
        ISSUER_STATUS_ACTIVE = 1,
        ISSUER_STATUS_SUSPENDED = 2
    }
    export enum StatusPurpose {
        STATUS_PURPOSE_UNSPECIFIED = 0,
        STATUS_PURPOSE_REVOCATION = 1,
        STATUS_PURPOSE_SUSPENSION = 2
    }
    export class CreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            document?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("document" in data && data.document != undefined) {
                    this.document = data.document;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set document(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            did?: string;
            document?: string;
        }): CreateRequest {
            const message = new CreateRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.document != null) {
                message.document = data.document;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                document?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.document != null) {
                data.document = this.document;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.document.length)
                writer.writeString(2, this.document);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.document = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRequest {
            return CreateRequest.deserialize(bytes);
        }
    }
    export class CreateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CreateResponse {
            const message = new CreateResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateResponse {
            return CreateResponse.deserialize(bytes);
        }
    }
    export class ResolveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            resolutionOption?: ResolutionOption;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("resolutionOption" in data && data.resolutionOption != undefined) {
                    this.resolutionOption = data.resolutionOption;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resolutionOption() {
            return pb_1.Message.getWrapperField(this, ResolutionOption, 2) as ResolutionOption;
        }
        set resolutionOption(value: ResolutionOption) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_resolutionOption() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            did?: string;
            resolutionOption?: ReturnType<typeof ResolutionOption.prototype.toObject>;
        }): ResolveRequest {
            const message = new ResolveRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.resolutionOption != null) {
                message.resolutionOption = ResolutionOption.fromObject(data.resolutionOption);
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                resolutionOption?: ReturnType<typeof ResolutionOption.prototype.toObject>;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.resolutionOption != null) {
                data.resolutionOption = this.resolutionOption.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.has_resolutionOption)
                writer.writeMessage(2, this.resolutionOption, () => this.resolutionOption.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.resolutionOption, () => message.resolutionOption = ResolutionOption.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolveRequest {
            return ResolveRequest.deserialize(bytes);
        }
    }
    export class ResolveRepresentationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            resolutionOption?: ResolutionOption;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("resolutionOption" in data && data.resolutionOption != undefined) {
                    this.resolutionOption = data.resolutionOption;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resolutionOption() {
            return pb_1.Message.getWrapperField(this, ResolutionOption, 2) as ResolutionOption;
        }
        set resolutionOption(value: ResolutionOption) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_resolutionOption() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            did?: string;
            resolutionOption?: ReturnType<typeof ResolutionOption.prototype.toObject>;
        }): ResolveRepresentationRequest {
            const message = new ResolveRepresentationRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.resolutionOption != null) {
                message.resolutionOption = ResolutionOption.fromObject(data.resolutionOption);
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                resolutionOption?: ReturnType<typeof ResolutionOption.prototype.toObject>;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.resolutionOption != null) {
                data.resolutionOption = this.resolutionOption.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.has_resolutionOption)
                writer.writeMessage(2, this.resolutionOption, () => this.resolutionOption.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolveRepresentationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolveRepresentationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.resolutionOption, () => message.resolutionOption = ResolutionOption.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolveRepresentationRequest {
            return ResolveRepresentationRequest.deserialize(bytes);
        }
    }
    export class ResolutionOption extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accept?: ResolutionOptionAccept;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accept" in data && data.accept != undefined) {
                    this.accept = data.accept;
                }
            }
        }
        get accept() {
            return pb_1.Message.getFieldWithDefault(this, 1, ResolutionOptionAccept.RESOLUTION_OPTION_ACCEPT_UNSPECIFIED) as ResolutionOptionAccept;
        }
        set accept(value: ResolutionOptionAccept) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            accept?: ResolutionOptionAccept;
        }): ResolutionOption {
            const message = new ResolutionOption({});
            if (data.accept != null) {
                message.accept = data.accept;
            }
            return message;
        }
        toObject() {
            const data: {
                accept?: ResolutionOptionAccept;
            } = {};
            if (this.accept != null) {
                data.accept = this.accept;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accept != ResolutionOptionAccept.RESOLUTION_OPTION_ACCEPT_UNSPECIFIED)
                writer.writeEnum(1, this.accept);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolutionOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolutionOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accept = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolutionOption {
            return ResolutionOption.deserialize(bytes);
        }
    }
    export class DidDocumentMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_created() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_updated() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): DidDocumentMetadata {
            const message = new DidDocumentMetadata({});
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_created)
                writer.writeMessage(1, this.created, () => this.created.serialize(writer));
            if (this.has_updated)
                writer.writeMessage(2, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DidDocumentMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DidDocumentMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DidDocumentMetadata {
            return DidDocumentMetadata.deserialize(bytes);
        }
    }
    export class ResolveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            didResolutionMetadata?: ResolutionMetadata;
            didDocument?: dependency_2.google.protobuf.Struct;
            didDocumentMetadata?: DidDocumentMetadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("didResolutionMetadata" in data && data.didResolutionMetadata != undefined) {
                    this.didResolutionMetadata = data.didResolutionMetadata;
                }
                if ("didDocument" in data && data.didDocument != undefined) {
                    this.didDocument = data.didDocument;
                }
                if ("didDocumentMetadata" in data && data.didDocumentMetadata != undefined) {
                    this.didDocumentMetadata = data.didDocumentMetadata;
                }
            }
        }
        get didResolutionMetadata() {
            return pb_1.Message.getWrapperField(this, ResolutionMetadata, 1) as ResolutionMetadata;
        }
        set didResolutionMetadata(value: ResolutionMetadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_didResolutionMetadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get didDocument() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 2) as dependency_2.google.protobuf.Struct;
        }
        set didDocument(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_didDocument() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get didDocumentMetadata() {
            return pb_1.Message.getWrapperField(this, DidDocumentMetadata, 3) as DidDocumentMetadata;
        }
        set didDocumentMetadata(value: DidDocumentMetadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_didDocumentMetadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            didResolutionMetadata?: ReturnType<typeof ResolutionMetadata.prototype.toObject>;
            didDocument?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            didDocumentMetadata?: ReturnType<typeof DidDocumentMetadata.prototype.toObject>;
        }): ResolveResponse {
            const message = new ResolveResponse({});
            if (data.didResolutionMetadata != null) {
                message.didResolutionMetadata = ResolutionMetadata.fromObject(data.didResolutionMetadata);
            }
            if (data.didDocument != null) {
                message.didDocument = dependency_2.google.protobuf.Struct.fromObject(data.didDocument);
            }
            if (data.didDocumentMetadata != null) {
                message.didDocumentMetadata = DidDocumentMetadata.fromObject(data.didDocumentMetadata);
            }
            return message;
        }
        toObject() {
            const data: {
                didResolutionMetadata?: ReturnType<typeof ResolutionMetadata.prototype.toObject>;
                didDocument?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
                didDocumentMetadata?: ReturnType<typeof DidDocumentMetadata.prototype.toObject>;
            } = {};
            if (this.didResolutionMetadata != null) {
                data.didResolutionMetadata = this.didResolutionMetadata.toObject();
            }
            if (this.didDocument != null) {
                data.didDocument = this.didDocument.toObject();
            }
            if (this.didDocumentMetadata != null) {
                data.didDocumentMetadata = this.didDocumentMetadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_didResolutionMetadata)
                writer.writeMessage(1, this.didResolutionMetadata, () => this.didResolutionMetadata.serialize(writer));
            if (this.has_didDocument)
                writer.writeMessage(2, this.didDocument, () => this.didDocument.serialize(writer));
            if (this.has_didDocumentMetadata)
                writer.writeMessage(3, this.didDocumentMetadata, () => this.didDocumentMetadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.didResolutionMetadata, () => message.didResolutionMetadata = ResolutionMetadata.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.didDocument, () => message.didDocument = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.didDocumentMetadata, () => message.didDocumentMetadata = DidDocumentMetadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolveResponse {
            return ResolveResponse.deserialize(bytes);
        }
    }
    export class ResolveRepresentationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            didDocumentStream?: string;
            didResolutionMetadata?: ResolutionMetadata;
            didDocumentMetadata?: DidDocumentMetadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("didDocumentStream" in data && data.didDocumentStream != undefined) {
                    this.didDocumentStream = data.didDocumentStream;
                }
                if ("didResolutionMetadata" in data && data.didResolutionMetadata != undefined) {
                    this.didResolutionMetadata = data.didResolutionMetadata;
                }
                if ("didDocumentMetadata" in data && data.didDocumentMetadata != undefined) {
                    this.didDocumentMetadata = data.didDocumentMetadata;
                }
            }
        }
        get didDocumentStream() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set didDocumentStream(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get didResolutionMetadata() {
            return pb_1.Message.getWrapperField(this, ResolutionMetadata, 2) as ResolutionMetadata;
        }
        set didResolutionMetadata(value: ResolutionMetadata) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_didResolutionMetadata() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get didDocumentMetadata() {
            return pb_1.Message.getWrapperField(this, DidDocumentMetadata, 3) as DidDocumentMetadata;
        }
        set didDocumentMetadata(value: DidDocumentMetadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_didDocumentMetadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            didDocumentStream?: string;
            didResolutionMetadata?: ReturnType<typeof ResolutionMetadata.prototype.toObject>;
            didDocumentMetadata?: ReturnType<typeof DidDocumentMetadata.prototype.toObject>;
        }): ResolveRepresentationResponse {
            const message = new ResolveRepresentationResponse({});
            if (data.didDocumentStream != null) {
                message.didDocumentStream = data.didDocumentStream;
            }
            if (data.didResolutionMetadata != null) {
                message.didResolutionMetadata = ResolutionMetadata.fromObject(data.didResolutionMetadata);
            }
            if (data.didDocumentMetadata != null) {
                message.didDocumentMetadata = DidDocumentMetadata.fromObject(data.didDocumentMetadata);
            }
            return message;
        }
        toObject() {
            const data: {
                didDocumentStream?: string;
                didResolutionMetadata?: ReturnType<typeof ResolutionMetadata.prototype.toObject>;
                didDocumentMetadata?: ReturnType<typeof DidDocumentMetadata.prototype.toObject>;
            } = {};
            if (this.didDocumentStream != null) {
                data.didDocumentStream = this.didDocumentStream;
            }
            if (this.didResolutionMetadata != null) {
                data.didResolutionMetadata = this.didResolutionMetadata.toObject();
            }
            if (this.didDocumentMetadata != null) {
                data.didDocumentMetadata = this.didDocumentMetadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.didDocumentStream.length)
                writer.writeString(1, this.didDocumentStream);
            if (this.has_didResolutionMetadata)
                writer.writeMessage(2, this.didResolutionMetadata, () => this.didResolutionMetadata.serialize(writer));
            if (this.has_didDocumentMetadata)
                writer.writeMessage(3, this.didDocumentMetadata, () => this.didDocumentMetadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolveRepresentationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolveRepresentationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.didDocumentStream = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.didResolutionMetadata, () => message.didResolutionMetadata = ResolutionMetadata.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.didDocumentMetadata, () => message.didDocumentMetadata = DidDocumentMetadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolveRepresentationResponse {
            return ResolveRepresentationResponse.deserialize(bytes);
        }
    }
    export class ResolutionMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4]];
        constructor(data?: any[] | ({} & (({
            contentType?: string;
        }) | ({
            duration?: number;
        }) | ({
            didUrl?: ResolutionMetadataDidUrl;
        }) | ({
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contentType" in data && data.contentType != undefined) {
                    this.contentType = data.contentType;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("didUrl" in data && data.didUrl != undefined) {
                    this.didUrl = data.didUrl;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get contentType() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contentType(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_contentType() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get didUrl() {
            return pb_1.Message.getWrapperField(this, ResolutionMetadataDidUrl, 3) as ResolutionMetadataDidUrl;
        }
        set didUrl(value: ResolutionMetadataDidUrl) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[2], value);
        }
        get has_didUrl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _contentType() {
            const cases: {
                [index: number]: "none" | "contentType";
            } = {
                0: "none",
                1: "contentType"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _duration() {
            const cases: {
                [index: number]: "none" | "duration";
            } = {
                0: "none",
                2: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _didUrl() {
            const cases: {
                [index: number]: "none" | "didUrl";
            } = {
                0: "none",
                3: "didUrl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                4: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            contentType?: string;
            duration?: number;
            didUrl?: ReturnType<typeof ResolutionMetadataDidUrl.prototype.toObject>;
            error?: string;
        }): ResolutionMetadata {
            const message = new ResolutionMetadata({});
            if (data.contentType != null) {
                message.contentType = data.contentType;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.didUrl != null) {
                message.didUrl = ResolutionMetadataDidUrl.fromObject(data.didUrl);
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                contentType?: string;
                duration?: number;
                didUrl?: ReturnType<typeof ResolutionMetadataDidUrl.prototype.toObject>;
                error?: string;
            } = {};
            if (this.contentType != null) {
                data.contentType = this.contentType;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.didUrl != null) {
                data.didUrl = this.didUrl.toObject();
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contentType)
                writer.writeString(1, this.contentType);
            if (this.has_duration)
                writer.writeInt64(2, this.duration);
            if (this.has_didUrl)
                writer.writeMessage(3, this.didUrl, () => this.didUrl.serialize(writer));
            if (this.has_error)
                writer.writeString(4, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolutionMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolutionMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contentType = reader.readString();
                        break;
                    case 2:
                        message.duration = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.didUrl, () => message.didUrl = ResolutionMetadataDidUrl.deserialize(reader));
                        break;
                    case 4:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolutionMetadata {
            return ResolutionMetadata.deserialize(bytes);
        }
    }
    export class ResolutionMetadataDidUrl extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            methodName?: string;
            methodSpecificId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("methodName" in data && data.methodName != undefined) {
                    this.methodName = data.methodName;
                }
                if ("methodSpecificId" in data && data.methodSpecificId != undefined) {
                    this.methodSpecificId = data.methodSpecificId;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get methodName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set methodName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get methodSpecificId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set methodSpecificId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            did?: string;
            methodName?: string;
            methodSpecificId?: string;
        }): ResolutionMetadataDidUrl {
            const message = new ResolutionMetadataDidUrl({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.methodName != null) {
                message.methodName = data.methodName;
            }
            if (data.methodSpecificId != null) {
                message.methodSpecificId = data.methodSpecificId;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                methodName?: string;
                methodSpecificId?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.methodName != null) {
                data.methodName = this.methodName;
            }
            if (this.methodSpecificId != null) {
                data.methodSpecificId = this.methodSpecificId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.methodName.length)
                writer.writeString(2, this.methodName);
            if (this.methodSpecificId.length)
                writer.writeString(3, this.methodSpecificId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolutionMetadataDidUrl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolutionMetadataDidUrl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.methodName = reader.readString();
                        break;
                    case 3:
                        message.methodSpecificId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolutionMetadataDidUrl {
            return ResolutionMetadataDidUrl.deserialize(bytes);
        }
    }
    export class UpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            document?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("document" in data && data.document != undefined) {
                    this.document = data.document;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set document(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            did?: string;
            document?: string;
        }): UpdateRequest {
            const message = new UpdateRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.document != null) {
                message.document = data.document;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                document?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.document != null) {
                data.document = this.document;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.document.length)
                writer.writeString(2, this.document);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.document = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRequest {
            return UpdateRequest.deserialize(bytes);
        }
    }
    export class UpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateResponse {
            const message = new UpdateResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateResponse {
            return UpdateResponse.deserialize(bytes);
        }
    }
    export class RevokeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did?: string;
            document?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did" in data && data.did != undefined) {
                    this.did = data.did;
                }
                if ("document" in data && data.document != undefined) {
                    this.document = data.document;
                }
            }
        }
        get did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set document(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            did?: string;
            document?: string;
        }): RevokeRequest {
            const message = new RevokeRequest({});
            if (data.did != null) {
                message.did = data.did;
            }
            if (data.document != null) {
                message.document = data.document;
            }
            return message;
        }
        toObject() {
            const data: {
                did?: string;
                document?: string;
            } = {};
            if (this.did != null) {
                data.did = this.did;
            }
            if (this.document != null) {
                data.document = this.document;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did.length)
                writer.writeString(1, this.did);
            if (this.document.length)
                writer.writeString(2, this.document);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did = reader.readString();
                        break;
                    case 2:
                        message.document = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeRequest {
            return RevokeRequest.deserialize(bytes);
        }
    }
    export class RevokeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RevokeResponse {
            const message = new RevokeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeResponse {
            return RevokeResponse.deserialize(bytes);
        }
    }
    export class PostalAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            country?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            street?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("postal_code" in data && data.postal_code != undefined) {
                    this.postal_code = data.postal_code;
                }
                if ("street" in data && data.street != undefined) {
                    this.street = data.street;
                }
            }
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get postal_code() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set postal_code(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get street() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set street(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            country?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            street?: string;
        }): PostalAddress {
            const message = new PostalAddress({});
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.postal_code != null) {
                message.postal_code = data.postal_code;
            }
            if (data.street != null) {
                message.street = data.street;
            }
            return message;
        }
        toObject() {
            const data: {
                country?: string;
                city?: string;
                state?: string;
                postal_code?: string;
                street?: string;
            } = {};
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.postal_code != null) {
                data.postal_code = this.postal_code;
            }
            if (this.street != null) {
                data.street = this.street;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.country.length)
                writer.writeString(1, this.country);
            if (this.city.length)
                writer.writeString(2, this.city);
            if (this.state.length)
                writer.writeString(3, this.state);
            if (this.postal_code.length)
                writer.writeString(4, this.postal_code);
            if (this.street.length)
                writer.writeString(5, this.street);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostalAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostalAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.country = reader.readString();
                        break;
                    case 2:
                        message.city = reader.readString();
                        break;
                    case 3:
                        message.state = reader.readString();
                        break;
                    case 4:
                        message.postal_code = reader.readString();
                        break;
                    case 5:
                        message.street = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PostalAddress {
            return PostalAddress.deserialize(bytes);
        }
    }
    export class CredentialIssuer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            issuer_did?: string;
            issuer_name?: string;
            email?: string;
            website?: string;
            postal_address?: PostalAddress;
            status?: IssuerStatus;
            metadata?: dependency_2.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("issuer_did" in data && data.issuer_did != undefined) {
                    this.issuer_did = data.issuer_did;
                }
                if ("issuer_name" in data && data.issuer_name != undefined) {
                    this.issuer_name = data.issuer_name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("website" in data && data.website != undefined) {
                    this.website = data.website;
                }
                if ("postal_address" in data && data.postal_address != undefined) {
                    this.postal_address = data.postal_address;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get issuer_did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set issuer_did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get issuer_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set issuer_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get website() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set website(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get postal_address() {
            return pb_1.Message.getWrapperField(this, PostalAddress, 5) as PostalAddress;
        }
        set postal_address(value: PostalAddress) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_postal_address() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, IssuerStatus.ISSUER_STATUS_UNSPECIFIED) as IssuerStatus;
        }
        set status(value: IssuerStatus) {
            pb_1.Message.setField(this, 6, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 7) as dependency_2.google.protobuf.Struct;
        }
        set metadata(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            issuer_did?: string;
            issuer_name?: string;
            email?: string;
            website?: string;
            postal_address?: ReturnType<typeof PostalAddress.prototype.toObject>;
            status?: IssuerStatus;
            metadata?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
        }): CredentialIssuer {
            const message = new CredentialIssuer({});
            if (data.issuer_did != null) {
                message.issuer_did = data.issuer_did;
            }
            if (data.issuer_name != null) {
                message.issuer_name = data.issuer_name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.website != null) {
                message.website = data.website;
            }
            if (data.postal_address != null) {
                message.postal_address = PostalAddress.fromObject(data.postal_address);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.metadata != null) {
                message.metadata = dependency_2.google.protobuf.Struct.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                issuer_did?: string;
                issuer_name?: string;
                email?: string;
                website?: string;
                postal_address?: ReturnType<typeof PostalAddress.prototype.toObject>;
                status?: IssuerStatus;
                metadata?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.issuer_did != null) {
                data.issuer_did = this.issuer_did;
            }
            if (this.issuer_name != null) {
                data.issuer_name = this.issuer_name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.website != null) {
                data.website = this.website;
            }
            if (this.postal_address != null) {
                data.postal_address = this.postal_address.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.issuer_did.length)
                writer.writeString(1, this.issuer_did);
            if (this.issuer_name.length)
                writer.writeString(2, this.issuer_name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.website.length)
                writer.writeString(4, this.website);
            if (this.has_postal_address)
                writer.writeMessage(5, this.postal_address, () => this.postal_address.serialize(writer));
            if (this.status != IssuerStatus.ISSUER_STATUS_UNSPECIFIED)
                writer.writeEnum(6, this.status);
            if (this.has_metadata)
                writer.writeMessage(7, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CredentialIssuer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialIssuer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.issuer_did = reader.readString();
                        break;
                    case 2:
                        message.issuer_name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.website = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.postal_address, () => message.postal_address = PostalAddress.deserialize(reader));
                        break;
                    case 6:
                        message.status = reader.readEnum();
                        break;
                    case 7:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CredentialIssuer {
            return CredentialIssuer.deserialize(bytes);
        }
    }
    export class CreateCredentialIssuerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_issuer?: CredentialIssuer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_issuer" in data && data.credential_issuer != undefined) {
                    this.credential_issuer = data.credential_issuer;
                }
            }
        }
        get credential_issuer() {
            return pb_1.Message.getWrapperField(this, CredentialIssuer, 1) as CredentialIssuer;
        }
        set credential_issuer(value: CredentialIssuer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential_issuer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            credential_issuer?: ReturnType<typeof CredentialIssuer.prototype.toObject>;
        }): CreateCredentialIssuerRequest {
            const message = new CreateCredentialIssuerRequest({});
            if (data.credential_issuer != null) {
                message.credential_issuer = CredentialIssuer.fromObject(data.credential_issuer);
            }
            return message;
        }
        toObject() {
            const data: {
                credential_issuer?: ReturnType<typeof CredentialIssuer.prototype.toObject>;
            } = {};
            if (this.credential_issuer != null) {
                data.credential_issuer = this.credential_issuer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential_issuer)
                writer.writeMessage(1, this.credential_issuer, () => this.credential_issuer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCredentialIssuerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCredentialIssuerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential_issuer, () => message.credential_issuer = CredentialIssuer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCredentialIssuerRequest {
            return CreateCredentialIssuerRequest.deserialize(bytes);
        }
    }
    export class CreateCredentialIssuerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): CreateCredentialIssuerResponse {
            const message = new CreateCredentialIssuerResponse({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCredentialIssuerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCredentialIssuerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCredentialIssuerResponse {
            return CreateCredentialIssuerResponse.deserialize(bytes);
        }
    }
    export class GetCredentialIssuerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            issuer_did?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("issuer_did" in data && data.issuer_did != undefined) {
                    this.issuer_did = data.issuer_did;
                }
            }
        }
        get issuer_did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set issuer_did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            issuer_did?: string;
        }): GetCredentialIssuerRequest {
            const message = new GetCredentialIssuerRequest({});
            if (data.issuer_did != null) {
                message.issuer_did = data.issuer_did;
            }
            return message;
        }
        toObject() {
            const data: {
                issuer_did?: string;
            } = {};
            if (this.issuer_did != null) {
                data.issuer_did = this.issuer_did;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.issuer_did.length)
                writer.writeString(1, this.issuer_did);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCredentialIssuerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCredentialIssuerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.issuer_did = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCredentialIssuerRequest {
            return GetCredentialIssuerRequest.deserialize(bytes);
        }
    }
    export class GetCredentialIssuerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_issuer?: CredentialIssuer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_issuer" in data && data.credential_issuer != undefined) {
                    this.credential_issuer = data.credential_issuer;
                }
            }
        }
        get credential_issuer() {
            return pb_1.Message.getWrapperField(this, CredentialIssuer, 1) as CredentialIssuer;
        }
        set credential_issuer(value: CredentialIssuer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential_issuer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            credential_issuer?: ReturnType<typeof CredentialIssuer.prototype.toObject>;
        }): GetCredentialIssuerResponse {
            const message = new GetCredentialIssuerResponse({});
            if (data.credential_issuer != null) {
                message.credential_issuer = CredentialIssuer.fromObject(data.credential_issuer);
            }
            return message;
        }
        toObject() {
            const data: {
                credential_issuer?: ReturnType<typeof CredentialIssuer.prototype.toObject>;
            } = {};
            if (this.credential_issuer != null) {
                data.credential_issuer = this.credential_issuer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential_issuer)
                writer.writeMessage(1, this.credential_issuer, () => this.credential_issuer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCredentialIssuerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCredentialIssuerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential_issuer, () => message.credential_issuer = CredentialIssuer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCredentialIssuerResponse {
            return GetCredentialIssuerResponse.deserialize(bytes);
        }
    }
    export class UpdateCredentialIssuerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_issuer?: CredentialIssuer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_issuer" in data && data.credential_issuer != undefined) {
                    this.credential_issuer = data.credential_issuer;
                }
            }
        }
        get credential_issuer() {
            return pb_1.Message.getWrapperField(this, CredentialIssuer, 1) as CredentialIssuer;
        }
        set credential_issuer(value: CredentialIssuer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential_issuer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            credential_issuer?: ReturnType<typeof CredentialIssuer.prototype.toObject>;
        }): UpdateCredentialIssuerRequest {
            const message = new UpdateCredentialIssuerRequest({});
            if (data.credential_issuer != null) {
                message.credential_issuer = CredentialIssuer.fromObject(data.credential_issuer);
            }
            return message;
        }
        toObject() {
            const data: {
                credential_issuer?: ReturnType<typeof CredentialIssuer.prototype.toObject>;
            } = {};
            if (this.credential_issuer != null) {
                data.credential_issuer = this.credential_issuer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential_issuer)
                writer.writeMessage(1, this.credential_issuer, () => this.credential_issuer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCredentialIssuerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCredentialIssuerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential_issuer, () => message.credential_issuer = CredentialIssuer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCredentialIssuerRequest {
            return UpdateCredentialIssuerRequest.deserialize(bytes);
        }
    }
    export class UpdateCredentialIssuerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): UpdateCredentialIssuerResponse {
            const message = new UpdateCredentialIssuerResponse({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCredentialIssuerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCredentialIssuerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCredentialIssuerResponse {
            return UpdateCredentialIssuerResponse.deserialize(bytes);
        }
    }
    export class StatusListEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
            credential_issuer_id?: string;
            status_purpose?: StatusPurpose;
            credential_type?: string;
            status_list_index?: number;
            status_list_credential_id?: string;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("credential_issuer_id" in data && data.credential_issuer_id != undefined) {
                    this.credential_issuer_id = data.credential_issuer_id;
                }
                if ("status_purpose" in data && data.status_purpose != undefined) {
                    this.status_purpose = data.status_purpose;
                }
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("status_list_index" in data && data.status_list_index != undefined) {
                    this.status_list_index = data.status_list_index;
                }
                if ("status_list_credential_id" in data && data.status_list_credential_id != undefined) {
                    this.status_list_credential_id = data.status_list_credential_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_issuer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_issuer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status_purpose() {
            return pb_1.Message.getFieldWithDefault(this, 3, StatusPurpose.STATUS_PURPOSE_UNSPECIFIED) as StatusPurpose;
        }
        set status_purpose(value: StatusPurpose) {
            pb_1.Message.setField(this, 3, value);
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set credential_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status_list_index() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set status_list_index(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get status_list_credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status_list_credential_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            credential_id?: string;
            credential_issuer_id?: string;
            status_purpose?: StatusPurpose;
            credential_type?: string;
            status_list_index?: number;
            status_list_credential_id?: string;
            status?: boolean;
        }): StatusListEntry {
            const message = new StatusListEntry({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.credential_issuer_id != null) {
                message.credential_issuer_id = data.credential_issuer_id;
            }
            if (data.status_purpose != null) {
                message.status_purpose = data.status_purpose;
            }
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.status_list_index != null) {
                message.status_list_index = data.status_list_index;
            }
            if (data.status_list_credential_id != null) {
                message.status_list_credential_id = data.status_list_credential_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
                credential_issuer_id?: string;
                status_purpose?: StatusPurpose;
                credential_type?: string;
                status_list_index?: number;
                status_list_credential_id?: string;
                status?: boolean;
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.credential_issuer_id != null) {
                data.credential_issuer_id = this.credential_issuer_id;
            }
            if (this.status_purpose != null) {
                data.status_purpose = this.status_purpose;
            }
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.status_list_index != null) {
                data.status_list_index = this.status_list_index;
            }
            if (this.status_list_credential_id != null) {
                data.status_list_credential_id = this.status_list_credential_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (this.credential_issuer_id.length)
                writer.writeString(2, this.credential_issuer_id);
            if (this.status_purpose != StatusPurpose.STATUS_PURPOSE_UNSPECIFIED)
                writer.writeEnum(3, this.status_purpose);
            if (this.credential_type.length)
                writer.writeString(4, this.credential_type);
            if (this.status_list_index != 0)
                writer.writeInt64(5, this.status_list_index);
            if (this.status_list_credential_id.length)
                writer.writeString(6, this.status_list_credential_id);
            if (this.status != false)
                writer.writeBool(7, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusListEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusListEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    case 2:
                        message.credential_issuer_id = reader.readString();
                        break;
                    case 3:
                        message.status_purpose = reader.readEnum();
                        break;
                    case 4:
                        message.credential_type = reader.readString();
                        break;
                    case 5:
                        message.status_list_index = reader.readInt64();
                        break;
                    case 6:
                        message.status_list_credential_id = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusListEntry {
            return StatusListEntry.deserialize(bytes);
        }
    }
    export class CreateStatusListEntryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
            credential_issuer_id?: string;
            status_purpose?: StatusPurpose;
            credential_type?: string;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("credential_issuer_id" in data && data.credential_issuer_id != undefined) {
                    this.credential_issuer_id = data.credential_issuer_id;
                }
                if ("status_purpose" in data && data.status_purpose != undefined) {
                    this.status_purpose = data.status_purpose;
                }
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_issuer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_issuer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status_purpose() {
            return pb_1.Message.getFieldWithDefault(this, 3, StatusPurpose.STATUS_PURPOSE_UNSPECIFIED) as StatusPurpose;
        }
        set status_purpose(value: StatusPurpose) {
            pb_1.Message.setField(this, 3, value);
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set credential_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            credential_id?: string;
            credential_issuer_id?: string;
            status_purpose?: StatusPurpose;
            credential_type?: string;
            status?: boolean;
        }): CreateStatusListEntryRequest {
            const message = new CreateStatusListEntryRequest({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.credential_issuer_id != null) {
                message.credential_issuer_id = data.credential_issuer_id;
            }
            if (data.status_purpose != null) {
                message.status_purpose = data.status_purpose;
            }
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
                credential_issuer_id?: string;
                status_purpose?: StatusPurpose;
                credential_type?: string;
                status?: boolean;
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.credential_issuer_id != null) {
                data.credential_issuer_id = this.credential_issuer_id;
            }
            if (this.status_purpose != null) {
                data.status_purpose = this.status_purpose;
            }
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (this.credential_issuer_id.length)
                writer.writeString(2, this.credential_issuer_id);
            if (this.status_purpose != StatusPurpose.STATUS_PURPOSE_UNSPECIFIED)
                writer.writeEnum(3, this.status_purpose);
            if (this.credential_type.length)
                writer.writeString(4, this.credential_type);
            if (this.status != false)
                writer.writeBool(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateStatusListEntryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateStatusListEntryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    case 2:
                        message.credential_issuer_id = reader.readString();
                        break;
                    case 3:
                        message.status_purpose = reader.readEnum();
                        break;
                    case 4:
                        message.credential_type = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateStatusListEntryRequest {
            return CreateStatusListEntryRequest.deserialize(bytes);
        }
    }
    export class CreateStatusListEntryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status_list_entry?: StatusListEntry;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status_list_entry" in data && data.status_list_entry != undefined) {
                    this.status_list_entry = data.status_list_entry;
                }
            }
        }
        get status_list_entry() {
            return pb_1.Message.getWrapperField(this, StatusListEntry, 1) as StatusListEntry;
        }
        set status_list_entry(value: StatusListEntry) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_status_list_entry() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            status_list_entry?: ReturnType<typeof StatusListEntry.prototype.toObject>;
        }): CreateStatusListEntryResponse {
            const message = new CreateStatusListEntryResponse({});
            if (data.status_list_entry != null) {
                message.status_list_entry = StatusListEntry.fromObject(data.status_list_entry);
            }
            return message;
        }
        toObject() {
            const data: {
                status_list_entry?: ReturnType<typeof StatusListEntry.prototype.toObject>;
            } = {};
            if (this.status_list_entry != null) {
                data.status_list_entry = this.status_list_entry.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status_list_entry)
                writer.writeMessage(1, this.status_list_entry, () => this.status_list_entry.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateStatusListEntryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateStatusListEntryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status_list_entry, () => message.status_list_entry = StatusListEntry.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateStatusListEntryResponse {
            return CreateStatusListEntryResponse.deserialize(bytes);
        }
    }
    export class GetStatusListCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status_list_credential_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status_list_credential_id" in data && data.status_list_credential_id != undefined) {
                    this.status_list_credential_id = data.status_list_credential_id;
                }
            }
        }
        get status_list_credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status_list_credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status_list_credential_id?: string;
        }): GetStatusListCredentialRequest {
            const message = new GetStatusListCredentialRequest({});
            if (data.status_list_credential_id != null) {
                message.status_list_credential_id = data.status_list_credential_id;
            }
            return message;
        }
        toObject() {
            const data: {
                status_list_credential_id?: string;
            } = {};
            if (this.status_list_credential_id != null) {
                data.status_list_credential_id = this.status_list_credential_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status_list_credential_id.length)
                writer.writeString(1, this.status_list_credential_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatusListCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatusListCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status_list_credential_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatusListCredentialRequest {
            return GetStatusListCredentialRequest.deserialize(bytes);
        }
    }
    export class GetStatusListCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status_list_credential?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status_list_credential" in data && data.status_list_credential != undefined) {
                    this.status_list_credential = data.status_list_credential;
                }
            }
        }
        get status_list_credential() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status_list_credential(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status_list_credential?: string;
        }): GetStatusListCredentialResponse {
            const message = new GetStatusListCredentialResponse({});
            if (data.status_list_credential != null) {
                message.status_list_credential = data.status_list_credential;
            }
            return message;
        }
        toObject() {
            const data: {
                status_list_credential?: string;
            } = {};
            if (this.status_list_credential != null) {
                data.status_list_credential = this.status_list_credential;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status_list_credential.length)
                writer.writeString(1, this.status_list_credential);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatusListCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatusListCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status_list_credential = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatusListCredentialResponse {
            return GetStatusListCredentialResponse.deserialize(bytes);
        }
    }
    export class UpdateStatusListEntryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
            credential_issuer_id?: string;
            status_purpose?: StatusPurpose;
            credential_type?: string;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("credential_issuer_id" in data && data.credential_issuer_id != undefined) {
                    this.credential_issuer_id = data.credential_issuer_id;
                }
                if ("status_purpose" in data && data.status_purpose != undefined) {
                    this.status_purpose = data.status_purpose;
                }
                if ("credential_type" in data && data.credential_type != undefined) {
                    this.credential_type = data.credential_type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_issuer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_issuer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status_purpose() {
            return pb_1.Message.getFieldWithDefault(this, 3, StatusPurpose.STATUS_PURPOSE_UNSPECIFIED) as StatusPurpose;
        }
        set status_purpose(value: StatusPurpose) {
            pb_1.Message.setField(this, 3, value);
        }
        get credential_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set credential_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            credential_id?: string;
            credential_issuer_id?: string;
            status_purpose?: StatusPurpose;
            credential_type?: string;
            status?: boolean;
        }): UpdateStatusListEntryRequest {
            const message = new UpdateStatusListEntryRequest({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.credential_issuer_id != null) {
                message.credential_issuer_id = data.credential_issuer_id;
            }
            if (data.status_purpose != null) {
                message.status_purpose = data.status_purpose;
            }
            if (data.credential_type != null) {
                message.credential_type = data.credential_type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
                credential_issuer_id?: string;
                status_purpose?: StatusPurpose;
                credential_type?: string;
                status?: boolean;
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.credential_issuer_id != null) {
                data.credential_issuer_id = this.credential_issuer_id;
            }
            if (this.status_purpose != null) {
                data.status_purpose = this.status_purpose;
            }
            if (this.credential_type != null) {
                data.credential_type = this.credential_type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (this.credential_issuer_id.length)
                writer.writeString(2, this.credential_issuer_id);
            if (this.status_purpose != StatusPurpose.STATUS_PURPOSE_UNSPECIFIED)
                writer.writeEnum(3, this.status_purpose);
            if (this.credential_type.length)
                writer.writeString(4, this.credential_type);
            if (this.status != false)
                writer.writeBool(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateStatusListEntryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateStatusListEntryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    case 2:
                        message.credential_issuer_id = reader.readString();
                        break;
                    case 3:
                        message.status_purpose = reader.readEnum();
                        break;
                    case 4:
                        message.credential_type = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateStatusListEntryRequest {
            return UpdateStatusListEntryRequest.deserialize(bytes);
        }
    }
    export class UpdateStatusListEntryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateStatusListEntryResponse {
            const message = new UpdateStatusListEntryResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateStatusListEntryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateStatusListEntryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateStatusListEntryResponse {
            return UpdateStatusListEntryResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRegistryServiceService {
        static definition = {
            Create: {
                path: "/registry_api.v1.RegistryService/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateResponse.deserialize(new Uint8Array(bytes))
            },
            Resolve: {
                path: "/registry_api.v1.RegistryService/Resolve",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResolveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResolveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResolveResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResolveResponse.deserialize(new Uint8Array(bytes))
            },
            ResolveRepresentation: {
                path: "/registry_api.v1.RegistryService/ResolveRepresentation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResolveRepresentationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResolveRepresentationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResolveRepresentationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResolveRepresentationResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/registry_api.v1.RegistryService/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateResponse.deserialize(new Uint8Array(bytes))
            },
            Revoke: {
                path: "/registry_api.v1.RegistryService/Revoke",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RevokeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RevokeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RevokeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RevokeResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateRequest, CreateResponse>, callback: grpc_1.sendUnaryData<CreateResponse>): void;
        abstract Resolve(call: grpc_1.ServerUnaryCall<ResolveRequest, ResolveResponse>, callback: grpc_1.sendUnaryData<ResolveResponse>): void;
        abstract ResolveRepresentation(call: grpc_1.ServerUnaryCall<ResolveRepresentationRequest, ResolveRepresentationResponse>, callback: grpc_1.sendUnaryData<ResolveRepresentationResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateRequest, UpdateResponse>, callback: grpc_1.sendUnaryData<UpdateResponse>): void;
        abstract Revoke(call: grpc_1.ServerUnaryCall<RevokeRequest, RevokeResponse>, callback: grpc_1.sendUnaryData<RevokeResponse>): void;
    }
    export class RegistryServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedRegistryServiceService.definition, "RegistryService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateRequest, CreateResponse> = (message: CreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateResponse>, callback?: grpc_1.requestCallback<CreateResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Resolve: GrpcUnaryServiceInterface<ResolveRequest, ResolveResponse> = (message: ResolveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResolveResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResolveResponse>, callback?: grpc_1.requestCallback<ResolveResponse>): grpc_1.ClientUnaryCall => {
            return super.Resolve(message, metadata, options, callback);
        };
        ResolveRepresentation: GrpcUnaryServiceInterface<ResolveRepresentationRequest, ResolveRepresentationResponse> = (message: ResolveRepresentationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResolveRepresentationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResolveRepresentationResponse>, callback?: grpc_1.requestCallback<ResolveRepresentationResponse>): grpc_1.ClientUnaryCall => {
            return super.ResolveRepresentation(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateRequest, UpdateResponse> = (message: UpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateResponse>, callback?: grpc_1.requestCallback<UpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Revoke: GrpcUnaryServiceInterface<RevokeRequest, RevokeResponse> = (message: RevokeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RevokeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RevokeResponse>, callback?: grpc_1.requestCallback<RevokeResponse>): grpc_1.ClientUnaryCall => {
            return super.Revoke(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedCredentialIssuerRegistryServiceService {
        static definition = {
            CreateCredentialIssuer: {
                path: "/registry_api.v1.CredentialIssuerRegistryService/CreateCredentialIssuer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCredentialIssuerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCredentialIssuerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateCredentialIssuerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateCredentialIssuerResponse.deserialize(new Uint8Array(bytes))
            },
            GetCredentialIssuer: {
                path: "/registry_api.v1.CredentialIssuerRegistryService/GetCredentialIssuer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCredentialIssuerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCredentialIssuerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialIssuerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialIssuerResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateCredentialIssuer: {
                path: "/registry_api.v1.CredentialIssuerRegistryService/UpdateCredentialIssuer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCredentialIssuerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCredentialIssuerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateCredentialIssuerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateCredentialIssuerResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateCredentialIssuer(call: grpc_1.ServerUnaryCall<CreateCredentialIssuerRequest, CreateCredentialIssuerResponse>, callback: grpc_1.sendUnaryData<CreateCredentialIssuerResponse>): void;
        abstract GetCredentialIssuer(call: grpc_1.ServerUnaryCall<GetCredentialIssuerRequest, GetCredentialIssuerResponse>, callback: grpc_1.sendUnaryData<GetCredentialIssuerResponse>): void;
        abstract UpdateCredentialIssuer(call: grpc_1.ServerUnaryCall<UpdateCredentialIssuerRequest, UpdateCredentialIssuerResponse>, callback: grpc_1.sendUnaryData<UpdateCredentialIssuerResponse>): void;
    }
    export class CredentialIssuerRegistryServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCredentialIssuerRegistryServiceService.definition, "CredentialIssuerRegistryService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateCredentialIssuer: GrpcUnaryServiceInterface<CreateCredentialIssuerRequest, CreateCredentialIssuerResponse> = (message: CreateCredentialIssuerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateCredentialIssuerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateCredentialIssuerResponse>, callback?: grpc_1.requestCallback<CreateCredentialIssuerResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateCredentialIssuer(message, metadata, options, callback);
        };
        GetCredentialIssuer: GrpcUnaryServiceInterface<GetCredentialIssuerRequest, GetCredentialIssuerResponse> = (message: GetCredentialIssuerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialIssuerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialIssuerResponse>, callback?: grpc_1.requestCallback<GetCredentialIssuerResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCredentialIssuer(message, metadata, options, callback);
        };
        UpdateCredentialIssuer: GrpcUnaryServiceInterface<UpdateCredentialIssuerRequest, UpdateCredentialIssuerResponse> = (message: UpdateCredentialIssuerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateCredentialIssuerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateCredentialIssuerResponse>, callback?: grpc_1.requestCallback<UpdateCredentialIssuerResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateCredentialIssuer(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedStatusListRegistryServiceService {
        static definition = {
            CreateStatusListEntry: {
                path: "/registry_api.v1.StatusListRegistryService/CreateStatusListEntry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateStatusListEntryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateStatusListEntryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateStatusListEntryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateStatusListEntryResponse.deserialize(new Uint8Array(bytes))
            },
            GetStatusListCredential: {
                path: "/registry_api.v1.StatusListRegistryService/GetStatusListCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStatusListCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStatusListCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStatusListCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStatusListCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateStatusListEntry: {
                path: "/registry_api.v1.StatusListRegistryService/UpdateStatusListEntry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateStatusListEntryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateStatusListEntryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateStatusListEntryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateStatusListEntryResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateStatusListEntry(call: grpc_1.ServerUnaryCall<CreateStatusListEntryRequest, CreateStatusListEntryResponse>, callback: grpc_1.sendUnaryData<CreateStatusListEntryResponse>): void;
        abstract GetStatusListCredential(call: grpc_1.ServerUnaryCall<GetStatusListCredentialRequest, GetStatusListCredentialResponse>, callback: grpc_1.sendUnaryData<GetStatusListCredentialResponse>): void;
        abstract UpdateStatusListEntry(call: grpc_1.ServerUnaryCall<UpdateStatusListEntryRequest, UpdateStatusListEntryResponse>, callback: grpc_1.sendUnaryData<UpdateStatusListEntryResponse>): void;
    }
    export class StatusListRegistryServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedStatusListRegistryServiceService.definition, "StatusListRegistryService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateStatusListEntry: GrpcUnaryServiceInterface<CreateStatusListEntryRequest, CreateStatusListEntryResponse> = (message: CreateStatusListEntryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateStatusListEntryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateStatusListEntryResponse>, callback?: grpc_1.requestCallback<CreateStatusListEntryResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateStatusListEntry(message, metadata, options, callback);
        };
        GetStatusListCredential: GrpcUnaryServiceInterface<GetStatusListCredentialRequest, GetStatusListCredentialResponse> = (message: GetStatusListCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStatusListCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStatusListCredentialResponse>, callback?: grpc_1.requestCallback<GetStatusListCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStatusListCredential(message, metadata, options, callback);
        };
        UpdateStatusListEntry: GrpcUnaryServiceInterface<UpdateStatusListEntryRequest, UpdateStatusListEntryResponse> = (message: UpdateStatusListEntryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateStatusListEntryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateStatusListEntryResponse>, callback?: grpc_1.requestCallback<UpdateStatusListEntryResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateStatusListEntry(message, metadata, options, callback);
        };
    }
}
