/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: issuer_api/v1/issuer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/v1/common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace issuer_api.v1 {
    export class IssueRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            authentication_signature?: dependency_1.common.AuthenticationSignature;
            amount?: dependency_1.common.Amount;
            authority?: dependency_1.common.DynamicVerifier;
            recipient?: dependency_1.common.DynamicVerifier;
            session?: string;
            signature_system?: dependency_1.common.SignatureSystem;
        } & (({
            distribution?: dependency_1.common.Distribution;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authentication_signature" in data && data.authentication_signature != undefined) {
                    this.authentication_signature = data.authentication_signature;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("distribution" in data && data.distribution != undefined) {
                    this.distribution = data.distribution;
                }
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("signature_system" in data && data.signature_system != undefined) {
                    this.signature_system = data.signature_system;
                }
            }
        }
        get authentication_signature() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AuthenticationSignature, 1) as dependency_1.common.AuthenticationSignature;
        }
        set authentication_signature(value: dependency_1.common.AuthenticationSignature) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_authentication_signature() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Amount, 2) as dependency_1.common.Amount;
        }
        set amount(value: dependency_1.common.Amount) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get authority() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.DynamicVerifier, 3) as dependency_1.common.DynamicVerifier;
        }
        set authority(value: dependency_1.common.DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_authority() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get recipient() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.DynamicVerifier, 5) as dependency_1.common.DynamicVerifier;
        }
        set recipient(value: dependency_1.common.DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_recipient() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get distribution() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Distribution, 4) as dependency_1.common.Distribution;
        }
        set distribution(value: dependency_1.common.Distribution) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_distribution() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get signature_system() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.common.SignatureSystem.SIGNATURE_SYSTEM_UNSPECIFIED) as dependency_1.common.SignatureSystem;
        }
        set signature_system(value: dependency_1.common.SignatureSystem) {
            pb_1.Message.setField(this, 7, value);
        }
        get _distribution() {
            const cases: {
                [index: number]: "none" | "distribution";
            } = {
                0: "none",
                4: "distribution"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            authentication_signature?: ReturnType<typeof dependency_1.common.AuthenticationSignature.prototype.toObject>;
            amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
            authority?: ReturnType<typeof dependency_1.common.DynamicVerifier.prototype.toObject>;
            recipient?: ReturnType<typeof dependency_1.common.DynamicVerifier.prototype.toObject>;
            distribution?: ReturnType<typeof dependency_1.common.Distribution.prototype.toObject>;
            session?: string;
            signature_system?: dependency_1.common.SignatureSystem;
        }): IssueRequest {
            const message = new IssueRequest({});
            if (data.authentication_signature != null) {
                message.authentication_signature = dependency_1.common.AuthenticationSignature.fromObject(data.authentication_signature);
            }
            if (data.amount != null) {
                message.amount = dependency_1.common.Amount.fromObject(data.amount);
            }
            if (data.authority != null) {
                message.authority = dependency_1.common.DynamicVerifier.fromObject(data.authority);
            }
            if (data.recipient != null) {
                message.recipient = dependency_1.common.DynamicVerifier.fromObject(data.recipient);
            }
            if (data.distribution != null) {
                message.distribution = dependency_1.common.Distribution.fromObject(data.distribution);
            }
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.signature_system != null) {
                message.signature_system = data.signature_system;
            }
            return message;
        }
        toObject() {
            const data: {
                authentication_signature?: ReturnType<typeof dependency_1.common.AuthenticationSignature.prototype.toObject>;
                amount?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>;
                authority?: ReturnType<typeof dependency_1.common.DynamicVerifier.prototype.toObject>;
                recipient?: ReturnType<typeof dependency_1.common.DynamicVerifier.prototype.toObject>;
                distribution?: ReturnType<typeof dependency_1.common.Distribution.prototype.toObject>;
                session?: string;
                signature_system?: dependency_1.common.SignatureSystem;
            } = {};
            if (this.authentication_signature != null) {
                data.authentication_signature = this.authentication_signature.toObject();
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.authority != null) {
                data.authority = this.authority.toObject();
            }
            if (this.recipient != null) {
                data.recipient = this.recipient.toObject();
            }
            if (this.distribution != null) {
                data.distribution = this.distribution.toObject();
            }
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.signature_system != null) {
                data.signature_system = this.signature_system;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_authentication_signature)
                writer.writeMessage(1, this.authentication_signature, () => this.authentication_signature.serialize(writer));
            if (this.has_amount)
                writer.writeMessage(2, this.amount, () => this.amount.serialize(writer));
            if (this.has_authority)
                writer.writeMessage(3, this.authority, () => this.authority.serialize(writer));
            if (this.has_recipient)
                writer.writeMessage(5, this.recipient, () => this.recipient.serialize(writer));
            if (this.has_distribution)
                writer.writeMessage(4, this.distribution, () => this.distribution.serialize(writer));
            if (this.session.length)
                writer.writeString(6, this.session);
            if (this.signature_system != dependency_1.common.SignatureSystem.SIGNATURE_SYSTEM_UNSPECIFIED)
                writer.writeEnum(7, this.signature_system);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.authentication_signature, () => message.authentication_signature = dependency_1.common.AuthenticationSignature.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.common.Amount.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.authority, () => message.authority = dependency_1.common.DynamicVerifier.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.recipient, () => message.recipient = dependency_1.common.DynamicVerifier.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.distribution, () => message.distribution = dependency_1.common.Distribution.deserialize(reader));
                        break;
                    case 6:
                        message.session = reader.readString();
                        break;
                    case 7:
                        message.signature_system = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueRequest {
            return IssueRequest.deserialize(bytes);
        }
    }
    export class IssueResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: IssueResponse.Status;
            uetr?: string;
            num_promissory_files?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("uetr" in data && data.uetr != undefined) {
                    this.uetr = data.uetr;
                }
                if ("num_promissory_files" in data && data.num_promissory_files != undefined) {
                    this.num_promissory_files = data.num_promissory_files;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, IssueResponse.Status.UNSPECIFIED) as IssueResponse.Status;
        }
        set status(value: IssueResponse.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get uetr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uetr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get num_promissory_files() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set num_promissory_files(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            status?: IssueResponse.Status;
            uetr?: string;
            num_promissory_files?: number;
        }): IssueResponse {
            const message = new IssueResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.uetr != null) {
                message.uetr = data.uetr;
            }
            if (data.num_promissory_files != null) {
                message.num_promissory_files = data.num_promissory_files;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: IssueResponse.Status;
                uetr?: string;
                num_promissory_files?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.uetr != null) {
                data.uetr = this.uetr;
            }
            if (this.num_promissory_files != null) {
                data.num_promissory_files = this.num_promissory_files;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != IssueResponse.Status.UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.uetr.length)
                writer.writeString(2, this.uetr);
            if (this.num_promissory_files != 0)
                writer.writeUint32(3, this.num_promissory_files);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.uetr = reader.readString();
                        break;
                    case 3:
                        message.num_promissory_files = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueResponse {
            return IssueResponse.deserialize(bytes);
        }
    }
    export namespace IssueResponse {
        export enum Status {
            UNSPECIFIED = 0,
            SUCCESS = 1,
            FAILURE = 2
        }
    }
    export class AuthenticateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verifier?: dependency_1.common.DynamicVerifier;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verifier" in data && data.verifier != undefined) {
                    this.verifier = data.verifier;
                }
            }
        }
        get verifier() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.DynamicVerifier, 1) as dependency_1.common.DynamicVerifier;
        }
        set verifier(value: dependency_1.common.DynamicVerifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_verifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            verifier?: ReturnType<typeof dependency_1.common.DynamicVerifier.prototype.toObject>;
        }): AuthenticateRequest {
            const message = new AuthenticateRequest({});
            if (data.verifier != null) {
                message.verifier = dependency_1.common.DynamicVerifier.fromObject(data.verifier);
            }
            return message;
        }
        toObject() {
            const data: {
                verifier?: ReturnType<typeof dependency_1.common.DynamicVerifier.prototype.toObject>;
            } = {};
            if (this.verifier != null) {
                data.verifier = this.verifier.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_verifier)
                writer.writeMessage(1, this.verifier, () => this.verifier.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.verifier, () => message.verifier = dependency_1.common.DynamicVerifier.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateRequest {
            return AuthenticateRequest.deserialize(bytes);
        }
    }
    export class AuthenticateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            challenge?: Uint8Array;
            session?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("challenge" in data && data.challenge != undefined) {
                    this.challenge = data.challenge;
                }
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
            }
        }
        get challenge() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set challenge(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            challenge?: Uint8Array;
            session?: string;
        }): AuthenticateResponse {
            const message = new AuthenticateResponse({});
            if (data.challenge != null) {
                message.challenge = data.challenge;
            }
            if (data.session != null) {
                message.session = data.session;
            }
            return message;
        }
        toObject() {
            const data: {
                challenge?: Uint8Array;
                session?: string;
            } = {};
            if (this.challenge != null) {
                data.challenge = this.challenge;
            }
            if (this.session != null) {
                data.session = this.session;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.challenge.length)
                writer.writeBytes(1, this.challenge);
            if (this.session.length)
                writer.writeString(2, this.session);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.challenge = reader.readBytes();
                        break;
                    case 2:
                        message.session = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateResponse {
            return AuthenticateResponse.deserialize(bytes);
        }
    }
    export class GetLimitsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetLimitsRequest {
            const message = new GetLimitsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLimitsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLimitsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLimitsRequest {
            return GetLimitsRequest.deserialize(bytes);
        }
    }
    export class IssuanceLimits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inner?: dependency_1.common.Amount[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inner" in data && data.inner != undefined) {
                    this.inner = data.inner;
                }
            }
        }
        get inner() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.Amount, 2) as dependency_1.common.Amount[];
        }
        set inner(value: dependency_1.common.Amount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            inner?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>[];
        }): IssuanceLimits {
            const message = new IssuanceLimits({});
            if (data.inner != null) {
                message.inner = data.inner.map(item => dependency_1.common.Amount.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                inner?: ReturnType<typeof dependency_1.common.Amount.prototype.toObject>[];
            } = {};
            if (this.inner != null) {
                data.inner = this.inner.map((item: dependency_1.common.Amount) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inner.length)
                writer.writeRepeatedMessage(2, this.inner, (item: dependency_1.common.Amount) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssuanceLimits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssuanceLimits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.inner, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.common.Amount.deserialize(reader), dependency_1.common.Amount));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssuanceLimits {
            return IssuanceLimits.deserialize(bytes);
        }
    }
    export class GetLimitsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limits?: Map<string, IssuanceLimits>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limits" in data && data.limits != undefined) {
                    this.limits = data.limits;
                }
            }
            if (!this.limits)
                this.limits = new Map();
        }
        get limits() {
            return pb_1.Message.getField(this, 1) as any as Map<string, IssuanceLimits>;
        }
        set limits(value: Map<string, IssuanceLimits>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            limits?: {
                [key: string]: ReturnType<typeof IssuanceLimits.prototype.toObject>;
            };
        }): GetLimitsResponse {
            const message = new GetLimitsResponse({});
            if (typeof data.limits == "object") {
                message.limits = new Map(Object.entries(data.limits).map(([key, value]) => [key, IssuanceLimits.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                limits?: {
                    [key: string]: ReturnType<typeof IssuanceLimits.prototype.toObject>;
                };
            } = {};
            if (this.limits != null) {
                data.limits = (Object.fromEntries)((Array.from)(this.limits).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.limits) {
                writer.writeMessage(1, this.limits, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLimitsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLimitsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.limits as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = IssuanceLimits.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLimitsResponse {
            return GetLimitsResponse.deserialize(bytes);
        }
    }
    export class SetRoleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: dependency_1.common.Role;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get role() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.Role, 1) as dependency_1.common.Role;
        }
        set role(value: dependency_1.common.Role) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            role?: ReturnType<typeof dependency_1.common.Role.prototype.toObject>;
        }): SetRoleRequest {
            const message = new SetRoleRequest({});
            if (data.role != null) {
                message.role = dependency_1.common.Role.fromObject(data.role);
            }
            return message;
        }
        toObject() {
            const data: {
                role?: ReturnType<typeof dependency_1.common.Role.prototype.toObject>;
            } = {};
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_role)
                writer.writeMessage(1, this.role, () => this.role.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRoleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRoleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.role, () => message.role = dependency_1.common.Role.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRoleRequest {
            return SetRoleRequest.deserialize(bytes);
        }
    }
    export class SetRoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetRoleResponse {
            const message = new SetRoleResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRoleResponse {
            return SetRoleResponse.deserialize(bytes);
        }
    }
    export class SetAssetAuthoritiesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authorities?: Map<string, dependency_1.common.AssetAuthority>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authorities" in data && data.authorities != undefined) {
                    this.authorities = data.authorities;
                }
            }
            if (!this.authorities)
                this.authorities = new Map();
        }
        get authorities() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_1.common.AssetAuthority>;
        }
        set authorities(value: Map<string, dependency_1.common.AssetAuthority>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            authorities?: {
                [key: string]: ReturnType<typeof dependency_1.common.AssetAuthority.prototype.toObject>;
            };
        }): SetAssetAuthoritiesRequest {
            const message = new SetAssetAuthoritiesRequest({});
            if (typeof data.authorities == "object") {
                message.authorities = new Map(Object.entries(data.authorities).map(([key, value]) => [key, dependency_1.common.AssetAuthority.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                authorities?: {
                    [key: string]: ReturnType<typeof dependency_1.common.AssetAuthority.prototype.toObject>;
                };
            } = {};
            if (this.authorities != null) {
                data.authorities = (Object.fromEntries)((Array.from)(this.authorities).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.authorities) {
                writer.writeMessage(1, this.authorities, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetAssetAuthoritiesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetAssetAuthoritiesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.authorities as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.common.AssetAuthority.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetAssetAuthoritiesRequest {
            return SetAssetAuthoritiesRequest.deserialize(bytes);
        }
    }
    export class SetAssetAuthoritiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetAssetAuthoritiesResponse {
            const message = new SetAssetAuthoritiesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetAssetAuthoritiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetAssetAuthoritiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetAssetAuthoritiesResponse {
            return SetAssetAuthoritiesResponse.deserialize(bytes);
        }
    }
    export class AddAssetAuthorityRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            currency_code?: string;
            authority?: dependency_1.common.AssetAuthority;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("currency_code" in data && data.currency_code != undefined) {
                    this.currency_code = data.currency_code;
                }
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
            }
        }
        get currency_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set currency_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authority() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AssetAuthority, 2) as dependency_1.common.AssetAuthority;
        }
        set authority(value: dependency_1.common.AssetAuthority) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authority() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            currency_code?: string;
            authority?: ReturnType<typeof dependency_1.common.AssetAuthority.prototype.toObject>;
        }): AddAssetAuthorityRequest {
            const message = new AddAssetAuthorityRequest({});
            if (data.currency_code != null) {
                message.currency_code = data.currency_code;
            }
            if (data.authority != null) {
                message.authority = dependency_1.common.AssetAuthority.fromObject(data.authority);
            }
            return message;
        }
        toObject() {
            const data: {
                currency_code?: string;
                authority?: ReturnType<typeof dependency_1.common.AssetAuthority.prototype.toObject>;
            } = {};
            if (this.currency_code != null) {
                data.currency_code = this.currency_code;
            }
            if (this.authority != null) {
                data.authority = this.authority.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.currency_code.length)
                writer.writeString(1, this.currency_code);
            if (this.has_authority)
                writer.writeMessage(2, this.authority, () => this.authority.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAssetAuthorityRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAssetAuthorityRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.currency_code = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authority, () => message.authority = dependency_1.common.AssetAuthority.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddAssetAuthorityRequest {
            return AddAssetAuthorityRequest.deserialize(bytes);
        }
    }
    export class AddAssetAuthorityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddAssetAuthorityResponse {
            const message = new AddAssetAuthorityResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAssetAuthorityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAssetAuthorityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddAssetAuthorityResponse {
            return AddAssetAuthorityResponse.deserialize(bytes);
        }
    }
    export class GetAssetAuthoritiesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetAssetAuthoritiesRequest {
            const message = new GetAssetAuthoritiesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssetAuthoritiesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssetAuthoritiesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssetAuthoritiesRequest {
            return GetAssetAuthoritiesRequest.deserialize(bytes);
        }
    }
    export class GetAssetAuthoritiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authorities?: Map<string, dependency_1.common.AssetAuthority>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authorities" in data && data.authorities != undefined) {
                    this.authorities = data.authorities;
                }
            }
            if (!this.authorities)
                this.authorities = new Map();
        }
        get authorities() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_1.common.AssetAuthority>;
        }
        set authorities(value: Map<string, dependency_1.common.AssetAuthority>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            authorities?: {
                [key: string]: ReturnType<typeof dependency_1.common.AssetAuthority.prototype.toObject>;
            };
        }): GetAssetAuthoritiesResponse {
            const message = new GetAssetAuthoritiesResponse({});
            if (typeof data.authorities == "object") {
                message.authorities = new Map(Object.entries(data.authorities).map(([key, value]) => [key, dependency_1.common.AssetAuthority.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                authorities?: {
                    [key: string]: ReturnType<typeof dependency_1.common.AssetAuthority.prototype.toObject>;
                };
            } = {};
            if (this.authorities != null) {
                data.authorities = (Object.fromEntries)((Array.from)(this.authorities).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.authorities) {
                writer.writeMessage(1, this.authorities, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssetAuthoritiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssetAuthoritiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.authorities as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.common.AssetAuthority.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssetAuthoritiesResponse {
            return GetAssetAuthoritiesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedIssuerServiceService {
        static definition = {
            Authenticate: {
                path: "/issuer_api.v1.IssuerService/Authenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthenticateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthenticateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            Issue: {
                path: "/issuer_api.v1.IssuerService/Issue",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IssueRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IssueRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IssueResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IssueResponse.deserialize(new Uint8Array(bytes))
            },
            GetLimits: {
                path: "/issuer_api.v1.IssuerService/GetLimits",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLimitsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLimitsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetLimitsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetLimitsResponse.deserialize(new Uint8Array(bytes))
            },
            SetRole: {
                path: "/issuer_api.v1.IssuerService/SetRole",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetRoleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetRoleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetRoleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetRoleResponse.deserialize(new Uint8Array(bytes))
            },
            SetAssetAuthorities: {
                path: "/issuer_api.v1.IssuerService/SetAssetAuthorities",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetAssetAuthoritiesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetAssetAuthoritiesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetAssetAuthoritiesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetAssetAuthoritiesResponse.deserialize(new Uint8Array(bytes))
            },
            AddAssetAuthority: {
                path: "/issuer_api.v1.IssuerService/AddAssetAuthority",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddAssetAuthorityRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddAssetAuthorityRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddAssetAuthorityResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddAssetAuthorityResponse.deserialize(new Uint8Array(bytes))
            },
            GetAssetAuthorities: {
                path: "/issuer_api.v1.IssuerService/GetAssetAuthorities",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAssetAuthoritiesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAssetAuthoritiesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAssetAuthoritiesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAssetAuthoritiesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Authenticate(call: grpc_1.ServerUnaryCall<AuthenticateRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
        abstract Issue(call: grpc_1.ServerUnaryCall<IssueRequest, IssueResponse>, callback: grpc_1.sendUnaryData<IssueResponse>): void;
        abstract GetLimits(call: grpc_1.ServerUnaryCall<GetLimitsRequest, GetLimitsResponse>, callback: grpc_1.sendUnaryData<GetLimitsResponse>): void;
        abstract SetRole(call: grpc_1.ServerUnaryCall<SetRoleRequest, SetRoleResponse>, callback: grpc_1.sendUnaryData<SetRoleResponse>): void;
        abstract SetAssetAuthorities(call: grpc_1.ServerUnaryCall<SetAssetAuthoritiesRequest, SetAssetAuthoritiesResponse>, callback: grpc_1.sendUnaryData<SetAssetAuthoritiesResponse>): void;
        abstract AddAssetAuthority(call: grpc_1.ServerUnaryCall<AddAssetAuthorityRequest, AddAssetAuthorityResponse>, callback: grpc_1.sendUnaryData<AddAssetAuthorityResponse>): void;
        abstract GetAssetAuthorities(call: grpc_1.ServerUnaryCall<GetAssetAuthoritiesRequest, GetAssetAuthoritiesResponse>, callback: grpc_1.sendUnaryData<GetAssetAuthoritiesResponse>): void;
    }
    export class IssuerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedIssuerServiceService.definition, "IssuerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Authenticate: GrpcUnaryServiceInterface<AuthenticateRequest, AuthenticateResponse> = (message: AuthenticateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Authenticate(message, metadata, options, callback);
        };
        Issue: GrpcUnaryServiceInterface<IssueRequest, IssueResponse> = (message: IssueRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IssueResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IssueResponse>, callback?: grpc_1.requestCallback<IssueResponse>): grpc_1.ClientUnaryCall => {
            return super.Issue(message, metadata, options, callback);
        };
        GetLimits: GrpcUnaryServiceInterface<GetLimitsRequest, GetLimitsResponse> = (message: GetLimitsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetLimitsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetLimitsResponse>, callback?: grpc_1.requestCallback<GetLimitsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLimits(message, metadata, options, callback);
        };
        SetRole: GrpcUnaryServiceInterface<SetRoleRequest, SetRoleResponse> = (message: SetRoleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetRoleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetRoleResponse>, callback?: grpc_1.requestCallback<SetRoleResponse>): grpc_1.ClientUnaryCall => {
            return super.SetRole(message, metadata, options, callback);
        };
        SetAssetAuthorities: GrpcUnaryServiceInterface<SetAssetAuthoritiesRequest, SetAssetAuthoritiesResponse> = (message: SetAssetAuthoritiesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetAssetAuthoritiesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetAssetAuthoritiesResponse>, callback?: grpc_1.requestCallback<SetAssetAuthoritiesResponse>): grpc_1.ClientUnaryCall => {
            return super.SetAssetAuthorities(message, metadata, options, callback);
        };
        AddAssetAuthority: GrpcUnaryServiceInterface<AddAssetAuthorityRequest, AddAssetAuthorityResponse> = (message: AddAssetAuthorityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddAssetAuthorityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddAssetAuthorityResponse>, callback?: grpc_1.requestCallback<AddAssetAuthorityResponse>): grpc_1.ClientUnaryCall => {
            return super.AddAssetAuthority(message, metadata, options, callback);
        };
        GetAssetAuthorities: GrpcUnaryServiceInterface<GetAssetAuthoritiesRequest, GetAssetAuthoritiesResponse> = (message: GetAssetAuthoritiesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAssetAuthoritiesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAssetAuthoritiesResponse>, callback?: grpc_1.requestCallback<GetAssetAuthoritiesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAssetAuthorities(message, metadata, options, callback);
        };
    }
}
