// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vc_api/v1/vc.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_vc_5fapi_2fv1_2fvc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_vc_5fapi_2fv1_2fvc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_vc_5fapi_2fv1_2fvc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_vc_5fapi_2fv1_2fvc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_vc_5fapi_2fv1_2fvc_2eproto;
namespace vc_api {
namespace v1 {
class CreateIssuanceChallengeRequest;
struct CreateIssuanceChallengeRequestDefaultTypeInternal;
extern CreateIssuanceChallengeRequestDefaultTypeInternal _CreateIssuanceChallengeRequest_default_instance_;
class CreateIssuanceChallengeResponse;
struct CreateIssuanceChallengeResponseDefaultTypeInternal;
extern CreateIssuanceChallengeResponseDefaultTypeInternal _CreateIssuanceChallengeResponse_default_instance_;
class CreatePresentationChallengeRequest;
struct CreatePresentationChallengeRequestDefaultTypeInternal;
extern CreatePresentationChallengeRequestDefaultTypeInternal _CreatePresentationChallengeRequest_default_instance_;
class CreatePresentationChallengeResponse;
struct CreatePresentationChallengeResponseDefaultTypeInternal;
extern CreatePresentationChallengeResponseDefaultTypeInternal _CreatePresentationChallengeResponse_default_instance_;
class CredentialProof;
struct CredentialProofDefaultTypeInternal;
extern CredentialProofDefaultTypeInternal _CredentialProof_default_instance_;
class IssueVerifiableCredentialRequest;
struct IssueVerifiableCredentialRequestDefaultTypeInternal;
extern IssueVerifiableCredentialRequestDefaultTypeInternal _IssueVerifiableCredentialRequest_default_instance_;
class IssueVerifiableCredentialResponse;
struct IssueVerifiableCredentialResponseDefaultTypeInternal;
extern IssueVerifiableCredentialResponseDefaultTypeInternal _IssueVerifiableCredentialResponse_default_instance_;
class PresentVerifiableCredentialRequest;
struct PresentVerifiableCredentialRequestDefaultTypeInternal;
extern PresentVerifiableCredentialRequestDefaultTypeInternal _PresentVerifiableCredentialRequest_default_instance_;
class PresentVerifiableCredentialResponse;
struct PresentVerifiableCredentialResponseDefaultTypeInternal;
extern PresentVerifiableCredentialResponseDefaultTypeInternal _PresentVerifiableCredentialResponse_default_instance_;
class UpdateVerifiableCredentialStatusRequest;
struct UpdateVerifiableCredentialStatusRequestDefaultTypeInternal;
extern UpdateVerifiableCredentialStatusRequestDefaultTypeInternal _UpdateVerifiableCredentialStatusRequest_default_instance_;
class UpdateVerifiableCredentialStatusResponse;
struct UpdateVerifiableCredentialStatusResponseDefaultTypeInternal;
extern UpdateVerifiableCredentialStatusResponseDefaultTypeInternal _UpdateVerifiableCredentialStatusResponse_default_instance_;
class WaitForCompletionRequest;
struct WaitForCompletionRequestDefaultTypeInternal;
extern WaitForCompletionRequestDefaultTypeInternal _WaitForCompletionRequest_default_instance_;
class WaitForCompletionResponse;
struct WaitForCompletionResponseDefaultTypeInternal;
extern WaitForCompletionResponseDefaultTypeInternal _WaitForCompletionResponse_default_instance_;
}  // namespace v1
}  // namespace vc_api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace vc_api {
namespace v1 {
enum CredentialType : int {
  CREDENTIAL_TYPE_UNSPECIFIED = 0,
  CREDENTIAL_TYPE_PERMANENT_RESIDENT_CARD = 1,
  CREDENTIAL_TYPE_BANK_CARD = 2,
  CREDENTIAL_TYPE_BANK_ACCOUNT = 3,
  CredentialType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CredentialType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CredentialType_IsValid(int value);
extern const uint32_t CredentialType_internal_data_[];
constexpr CredentialType CredentialType_MIN = static_cast<CredentialType>(0);
constexpr CredentialType CredentialType_MAX = static_cast<CredentialType>(3);
constexpr int CredentialType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CredentialType_descriptor();
template <typename T>
const std::string& CredentialType_Name(T value) {
  static_assert(std::is_same<T, CredentialType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CredentialType_Name().");
  return CredentialType_Name(static_cast<CredentialType>(value));
}
template <>
inline const std::string& CredentialType_Name(CredentialType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CredentialType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CredentialType_Parse(absl::string_view name, CredentialType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CredentialType>(
      CredentialType_descriptor(), name, value);
}
enum UpdateVerifiableCredentialStatusType : int {
  UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_UNSPECIFIED = 0,
  UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_REVOCATION = 1,
  UPDATE_VERIFIABLE_CREDENTIAL_STATUS_TYPE_SUSPENSION = 2,
  UpdateVerifiableCredentialStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UpdateVerifiableCredentialStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UpdateVerifiableCredentialStatusType_IsValid(int value);
extern const uint32_t UpdateVerifiableCredentialStatusType_internal_data_[];
constexpr UpdateVerifiableCredentialStatusType UpdateVerifiableCredentialStatusType_MIN = static_cast<UpdateVerifiableCredentialStatusType>(0);
constexpr UpdateVerifiableCredentialStatusType UpdateVerifiableCredentialStatusType_MAX = static_cast<UpdateVerifiableCredentialStatusType>(2);
constexpr int UpdateVerifiableCredentialStatusType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
UpdateVerifiableCredentialStatusType_descriptor();
template <typename T>
const std::string& UpdateVerifiableCredentialStatusType_Name(T value) {
  static_assert(std::is_same<T, UpdateVerifiableCredentialStatusType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateVerifiableCredentialStatusType_Name().");
  return UpdateVerifiableCredentialStatusType_Name(static_cast<UpdateVerifiableCredentialStatusType>(value));
}
template <>
inline const std::string& UpdateVerifiableCredentialStatusType_Name(UpdateVerifiableCredentialStatusType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UpdateVerifiableCredentialStatusType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool UpdateVerifiableCredentialStatusType_Parse(absl::string_view name, UpdateVerifiableCredentialStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateVerifiableCredentialStatusType>(
      UpdateVerifiableCredentialStatusType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WaitForCompletionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.WaitForCompletionResponse) */ {
 public:
  inline WaitForCompletionResponse() : WaitForCompletionResponse(nullptr) {}
  ~WaitForCompletionResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WaitForCompletionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WaitForCompletionResponse(const WaitForCompletionResponse& from) : WaitForCompletionResponse(nullptr, from) {}
  inline WaitForCompletionResponse(WaitForCompletionResponse&& from) noexcept
      : WaitForCompletionResponse(nullptr, std::move(from)) {}
  inline WaitForCompletionResponse& operator=(const WaitForCompletionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForCompletionResponse& operator=(WaitForCompletionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForCompletionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForCompletionResponse* internal_default_instance() {
    return reinterpret_cast<const WaitForCompletionResponse*>(
        &_WaitForCompletionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(WaitForCompletionResponse& a, WaitForCompletionResponse& b) { a.Swap(&b); }
  inline void Swap(WaitForCompletionResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForCompletionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitForCompletionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<WaitForCompletionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitForCompletionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WaitForCompletionResponse& from) { WaitForCompletionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WaitForCompletionResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.WaitForCompletionResponse"; }

 protected:
  explicit WaitForCompletionResponse(::google::protobuf::Arena* arena);
  WaitForCompletionResponse(::google::protobuf::Arena* arena, const WaitForCompletionResponse& from);
  WaitForCompletionResponse(::google::protobuf::Arena* arena, WaitForCompletionResponse&& from) noexcept
      : WaitForCompletionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDidFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string did = 1;
  void clear_did() ;
  const std::string& did() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_did(Arg_&& arg, Args_... args);
  std::string* mutable_did();
  PROTOBUF_NODISCARD std::string* release_did();
  void set_allocated_did(std::string* value);

  private:
  const std::string& _internal_did() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_did(
      const std::string& value);
  std::string* _internal_mutable_did();

  public:
  // string data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.WaitForCompletionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_WaitForCompletionResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WaitForCompletionResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr did_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class WaitForCompletionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.WaitForCompletionRequest) */ {
 public:
  inline WaitForCompletionRequest() : WaitForCompletionRequest(nullptr) {}
  ~WaitForCompletionRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WaitForCompletionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WaitForCompletionRequest(const WaitForCompletionRequest& from) : WaitForCompletionRequest(nullptr, from) {}
  inline WaitForCompletionRequest(WaitForCompletionRequest&& from) noexcept
      : WaitForCompletionRequest(nullptr, std::move(from)) {}
  inline WaitForCompletionRequest& operator=(const WaitForCompletionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForCompletionRequest& operator=(WaitForCompletionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForCompletionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForCompletionRequest* internal_default_instance() {
    return reinterpret_cast<const WaitForCompletionRequest*>(
        &_WaitForCompletionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(WaitForCompletionRequest& a, WaitForCompletionRequest& b) { a.Swap(&b); }
  inline void Swap(WaitForCompletionRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForCompletionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitForCompletionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<WaitForCompletionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitForCompletionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WaitForCompletionRequest& from) { WaitForCompletionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WaitForCompletionRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.WaitForCompletionRequest"; }

 protected:
  explicit WaitForCompletionRequest(::google::protobuf::Arena* arena);
  WaitForCompletionRequest(::google::protobuf::Arena* arena, const WaitForCompletionRequest& from);
  WaitForCompletionRequest(::google::protobuf::Arena* arena, WaitForCompletionRequest&& from) noexcept
      : WaitForCompletionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNonceFieldNumber = 1,
  };
  // string nonce = 1;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* value);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.WaitForCompletionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_WaitForCompletionRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WaitForCompletionRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class UpdateVerifiableCredentialStatusResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:vc_api.v1.UpdateVerifiableCredentialStatusResponse) */ {
 public:
  inline UpdateVerifiableCredentialStatusResponse() : UpdateVerifiableCredentialStatusResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateVerifiableCredentialStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateVerifiableCredentialStatusResponse(const UpdateVerifiableCredentialStatusResponse& from) : UpdateVerifiableCredentialStatusResponse(nullptr, from) {}
  inline UpdateVerifiableCredentialStatusResponse(UpdateVerifiableCredentialStatusResponse&& from) noexcept
      : UpdateVerifiableCredentialStatusResponse(nullptr, std::move(from)) {}
  inline UpdateVerifiableCredentialStatusResponse& operator=(const UpdateVerifiableCredentialStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVerifiableCredentialStatusResponse& operator=(UpdateVerifiableCredentialStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVerifiableCredentialStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVerifiableCredentialStatusResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateVerifiableCredentialStatusResponse*>(
        &_UpdateVerifiableCredentialStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(UpdateVerifiableCredentialStatusResponse& a, UpdateVerifiableCredentialStatusResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateVerifiableCredentialStatusResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVerifiableCredentialStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVerifiableCredentialStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<UpdateVerifiableCredentialStatusResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateVerifiableCredentialStatusResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateVerifiableCredentialStatusResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.UpdateVerifiableCredentialStatusResponse"; }

 protected:
  explicit UpdateVerifiableCredentialStatusResponse(::google::protobuf::Arena* arena);
  UpdateVerifiableCredentialStatusResponse(::google::protobuf::Arena* arena, const UpdateVerifiableCredentialStatusResponse& from);
  UpdateVerifiableCredentialStatusResponse(::google::protobuf::Arena* arena, UpdateVerifiableCredentialStatusResponse&& from) noexcept
      : UpdateVerifiableCredentialStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:vc_api.v1.UpdateVerifiableCredentialStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UpdateVerifiableCredentialStatusResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateVerifiableCredentialStatusResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class UpdateVerifiableCredentialStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.UpdateVerifiableCredentialStatusRequest) */ {
 public:
  inline UpdateVerifiableCredentialStatusRequest() : UpdateVerifiableCredentialStatusRequest(nullptr) {}
  ~UpdateVerifiableCredentialStatusRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateVerifiableCredentialStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateVerifiableCredentialStatusRequest(const UpdateVerifiableCredentialStatusRequest& from) : UpdateVerifiableCredentialStatusRequest(nullptr, from) {}
  inline UpdateVerifiableCredentialStatusRequest(UpdateVerifiableCredentialStatusRequest&& from) noexcept
      : UpdateVerifiableCredentialStatusRequest(nullptr, std::move(from)) {}
  inline UpdateVerifiableCredentialStatusRequest& operator=(const UpdateVerifiableCredentialStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVerifiableCredentialStatusRequest& operator=(UpdateVerifiableCredentialStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVerifiableCredentialStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVerifiableCredentialStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVerifiableCredentialStatusRequest*>(
        &_UpdateVerifiableCredentialStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(UpdateVerifiableCredentialStatusRequest& a, UpdateVerifiableCredentialStatusRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateVerifiableCredentialStatusRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVerifiableCredentialStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVerifiableCredentialStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateVerifiableCredentialStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateVerifiableCredentialStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateVerifiableCredentialStatusRequest& from) { UpdateVerifiableCredentialStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateVerifiableCredentialStatusRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.UpdateVerifiableCredentialStatusRequest"; }

 protected:
  explicit UpdateVerifiableCredentialStatusRequest(::google::protobuf::Arena* arena);
  UpdateVerifiableCredentialStatusRequest(::google::protobuf::Arena* arena, const UpdateVerifiableCredentialStatusRequest& from);
  UpdateVerifiableCredentialStatusRequest(::google::protobuf::Arena* arena, UpdateVerifiableCredentialStatusRequest&& from) noexcept
      : UpdateVerifiableCredentialStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDidFieldNumber = 2,
    kCredentialTypeFieldNumber = 1,
    kUpdateTypeFieldNumber = 3,
  };
  // string did = 2;
  void clear_did() ;
  const std::string& did() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_did(Arg_&& arg, Args_... args);
  std::string* mutable_did();
  PROTOBUF_NODISCARD std::string* release_did();
  void set_allocated_did(std::string* value);

  private:
  const std::string& _internal_did() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_did(
      const std::string& value);
  std::string* _internal_mutable_did();

  public:
  // .vc_api.v1.CredentialType credential_type = 1;
  void clear_credential_type() ;
  ::vc_api::v1::CredentialType credential_type() const;
  void set_credential_type(::vc_api::v1::CredentialType value);

  private:
  ::vc_api::v1::CredentialType _internal_credential_type() const;
  void _internal_set_credential_type(::vc_api::v1::CredentialType value);

  public:
  // .vc_api.v1.UpdateVerifiableCredentialStatusType update_type = 3;
  void clear_update_type() ;
  ::vc_api::v1::UpdateVerifiableCredentialStatusType update_type() const;
  void set_update_type(::vc_api::v1::UpdateVerifiableCredentialStatusType value);

  private:
  ::vc_api::v1::UpdateVerifiableCredentialStatusType _internal_update_type() const;
  void _internal_set_update_type(::vc_api::v1::UpdateVerifiableCredentialStatusType value);

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.UpdateVerifiableCredentialStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UpdateVerifiableCredentialStatusRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateVerifiableCredentialStatusRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr did_;
    int credential_type_;
    int update_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class PresentVerifiableCredentialResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:vc_api.v1.PresentVerifiableCredentialResponse) */ {
 public:
  inline PresentVerifiableCredentialResponse() : PresentVerifiableCredentialResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresentVerifiableCredentialResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PresentVerifiableCredentialResponse(const PresentVerifiableCredentialResponse& from) : PresentVerifiableCredentialResponse(nullptr, from) {}
  inline PresentVerifiableCredentialResponse(PresentVerifiableCredentialResponse&& from) noexcept
      : PresentVerifiableCredentialResponse(nullptr, std::move(from)) {}
  inline PresentVerifiableCredentialResponse& operator=(const PresentVerifiableCredentialResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresentVerifiableCredentialResponse& operator=(PresentVerifiableCredentialResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresentVerifiableCredentialResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresentVerifiableCredentialResponse* internal_default_instance() {
    return reinterpret_cast<const PresentVerifiableCredentialResponse*>(
        &_PresentVerifiableCredentialResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(PresentVerifiableCredentialResponse& a, PresentVerifiableCredentialResponse& b) { a.Swap(&b); }
  inline void Swap(PresentVerifiableCredentialResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresentVerifiableCredentialResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PresentVerifiableCredentialResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PresentVerifiableCredentialResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PresentVerifiableCredentialResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PresentVerifiableCredentialResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.PresentVerifiableCredentialResponse"; }

 protected:
  explicit PresentVerifiableCredentialResponse(::google::protobuf::Arena* arena);
  PresentVerifiableCredentialResponse(::google::protobuf::Arena* arena, const PresentVerifiableCredentialResponse& from);
  PresentVerifiableCredentialResponse(::google::protobuf::Arena* arena, PresentVerifiableCredentialResponse&& from) noexcept
      : PresentVerifiableCredentialResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:vc_api.v1.PresentVerifiableCredentialResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PresentVerifiableCredentialResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PresentVerifiableCredentialResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class PresentVerifiableCredentialRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.PresentVerifiableCredentialRequest) */ {
 public:
  inline PresentVerifiableCredentialRequest() : PresentVerifiableCredentialRequest(nullptr) {}
  ~PresentVerifiableCredentialRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresentVerifiableCredentialRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PresentVerifiableCredentialRequest(const PresentVerifiableCredentialRequest& from) : PresentVerifiableCredentialRequest(nullptr, from) {}
  inline PresentVerifiableCredentialRequest(PresentVerifiableCredentialRequest&& from) noexcept
      : PresentVerifiableCredentialRequest(nullptr, std::move(from)) {}
  inline PresentVerifiableCredentialRequest& operator=(const PresentVerifiableCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresentVerifiableCredentialRequest& operator=(PresentVerifiableCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresentVerifiableCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresentVerifiableCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const PresentVerifiableCredentialRequest*>(
        &_PresentVerifiableCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PresentVerifiableCredentialRequest& a, PresentVerifiableCredentialRequest& b) { a.Swap(&b); }
  inline void Swap(PresentVerifiableCredentialRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresentVerifiableCredentialRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PresentVerifiableCredentialRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PresentVerifiableCredentialRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PresentVerifiableCredentialRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PresentVerifiableCredentialRequest& from) { PresentVerifiableCredentialRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PresentVerifiableCredentialRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.PresentVerifiableCredentialRequest"; }

 protected:
  explicit PresentVerifiableCredentialRequest(::google::protobuf::Arena* arena);
  PresentVerifiableCredentialRequest(::google::protobuf::Arena* arena, const PresentVerifiableCredentialRequest& from);
  PresentVerifiableCredentialRequest(::google::protobuf::Arena* arena, PresentVerifiableCredentialRequest&& from) noexcept
      : PresentVerifiableCredentialRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCredentialTypeFieldNumber = 5,
    kPresentationFieldNumber = 1,
    kNonceFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kDidFieldNumber = 4,
  };
  // repeated .vc_api.v1.CredentialType credential_type = 5;
  int credential_type_size() const;
  private:
  int _internal_credential_type_size() const;

  public:
  void clear_credential_type() ;
  public:
  ::vc_api::v1::CredentialType credential_type(int index) const;
  void set_credential_type(int index, ::vc_api::v1::CredentialType value);
  void add_credential_type(::vc_api::v1::CredentialType value);
  const ::google::protobuf::RepeatedField<int>& credential_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_credential_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_credential_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_credential_type();

  public:
  // string presentation = 1;
  void clear_presentation() ;
  const std::string& presentation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_presentation(Arg_&& arg, Args_... args);
  std::string* mutable_presentation();
  PROTOBUF_NODISCARD std::string* release_presentation();
  void set_allocated_presentation(std::string* value);

  private:
  const std::string& _internal_presentation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_presentation(
      const std::string& value);
  std::string* _internal_mutable_presentation();

  public:
  // string nonce = 2;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* value);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // bytes signature = 3;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string did = 4;
  void clear_did() ;
  const std::string& did() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_did(Arg_&& arg, Args_... args);
  std::string* mutable_did();
  PROTOBUF_NODISCARD std::string* release_did();
  void set_allocated_did(std::string* value);

  private:
  const std::string& _internal_did() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_did(
      const std::string& value);
  std::string* _internal_mutable_did();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.PresentVerifiableCredentialRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      73, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PresentVerifiableCredentialRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PresentVerifiableCredentialRequest& from_msg);
    ::google::protobuf::RepeatedField<int> credential_type_;
    mutable ::google::protobuf::internal::CachedSize _credential_type_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr presentation_;
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr did_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class IssueVerifiableCredentialResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.IssueVerifiableCredentialResponse) */ {
 public:
  inline IssueVerifiableCredentialResponse() : IssueVerifiableCredentialResponse(nullptr) {}
  ~IssueVerifiableCredentialResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IssueVerifiableCredentialResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline IssueVerifiableCredentialResponse(const IssueVerifiableCredentialResponse& from) : IssueVerifiableCredentialResponse(nullptr, from) {}
  inline IssueVerifiableCredentialResponse(IssueVerifiableCredentialResponse&& from) noexcept
      : IssueVerifiableCredentialResponse(nullptr, std::move(from)) {}
  inline IssueVerifiableCredentialResponse& operator=(const IssueVerifiableCredentialResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssueVerifiableCredentialResponse& operator=(IssueVerifiableCredentialResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IssueVerifiableCredentialResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IssueVerifiableCredentialResponse* internal_default_instance() {
    return reinterpret_cast<const IssueVerifiableCredentialResponse*>(
        &_IssueVerifiableCredentialResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(IssueVerifiableCredentialResponse& a, IssueVerifiableCredentialResponse& b) { a.Swap(&b); }
  inline void Swap(IssueVerifiableCredentialResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IssueVerifiableCredentialResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IssueVerifiableCredentialResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IssueVerifiableCredentialResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IssueVerifiableCredentialResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IssueVerifiableCredentialResponse& from) { IssueVerifiableCredentialResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IssueVerifiableCredentialResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.IssueVerifiableCredentialResponse"; }

 protected:
  explicit IssueVerifiableCredentialResponse(::google::protobuf::Arena* arena);
  IssueVerifiableCredentialResponse(::google::protobuf::Arena* arena, const IssueVerifiableCredentialResponse& from);
  IssueVerifiableCredentialResponse(::google::protobuf::Arena* arena, IssueVerifiableCredentialResponse&& from) noexcept
      : IssueVerifiableCredentialResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCredentialFieldNumber = 1,
  };
  // string credential = 1;
  void clear_credential() ;
  const std::string& credential() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_credential(Arg_&& arg, Args_... args);
  std::string* mutable_credential();
  PROTOBUF_NODISCARD std::string* release_credential();
  void set_allocated_credential(std::string* value);

  private:
  const std::string& _internal_credential() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credential(
      const std::string& value);
  std::string* _internal_mutable_credential();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.IssueVerifiableCredentialResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      62, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IssueVerifiableCredentialResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IssueVerifiableCredentialResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr credential_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class IssueVerifiableCredentialRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.IssueVerifiableCredentialRequest) */ {
 public:
  inline IssueVerifiableCredentialRequest() : IssueVerifiableCredentialRequest(nullptr) {}
  ~IssueVerifiableCredentialRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IssueVerifiableCredentialRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline IssueVerifiableCredentialRequest(const IssueVerifiableCredentialRequest& from) : IssueVerifiableCredentialRequest(nullptr, from) {}
  inline IssueVerifiableCredentialRequest(IssueVerifiableCredentialRequest&& from) noexcept
      : IssueVerifiableCredentialRequest(nullptr, std::move(from)) {}
  inline IssueVerifiableCredentialRequest& operator=(const IssueVerifiableCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssueVerifiableCredentialRequest& operator=(IssueVerifiableCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IssueVerifiableCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IssueVerifiableCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const IssueVerifiableCredentialRequest*>(
        &_IssueVerifiableCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(IssueVerifiableCredentialRequest& a, IssueVerifiableCredentialRequest& b) { a.Swap(&b); }
  inline void Swap(IssueVerifiableCredentialRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IssueVerifiableCredentialRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IssueVerifiableCredentialRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IssueVerifiableCredentialRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IssueVerifiableCredentialRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IssueVerifiableCredentialRequest& from) { IssueVerifiableCredentialRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IssueVerifiableCredentialRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.IssueVerifiableCredentialRequest"; }

 protected:
  explicit IssueVerifiableCredentialRequest(::google::protobuf::Arena* arena);
  IssueVerifiableCredentialRequest(::google::protobuf::Arena* arena, const IssueVerifiableCredentialRequest& from);
  IssueVerifiableCredentialRequest(::google::protobuf::Arena* arena, IssueVerifiableCredentialRequest&& from) noexcept
      : IssueVerifiableCredentialRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNonceFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kDidFieldNumber = 4,
    kCredentialTypeFieldNumber = 1,
  };
  // string nonce = 2;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* value);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // bytes signature = 3;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string did = 4;
  void clear_did() ;
  const std::string& did() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_did(Arg_&& arg, Args_... args);
  std::string* mutable_did();
  PROTOBUF_NODISCARD std::string* release_did();
  void set_allocated_did(std::string* value);

  private:
  const std::string& _internal_did() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_did(
      const std::string& value);
  std::string* _internal_mutable_did();

  public:
  // .vc_api.v1.CredentialType credential_type = 1;
  void clear_credential_type() ;
  ::vc_api::v1::CredentialType credential_type() const;
  void set_credential_type(::vc_api::v1::CredentialType value);

  private:
  ::vc_api::v1::CredentialType _internal_credential_type() const;
  void _internal_set_credential_type(::vc_api::v1::CredentialType value);

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.IssueVerifiableCredentialRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      59, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IssueVerifiableCredentialRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IssueVerifiableCredentialRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr did_;
    int credential_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class CredentialProof final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.CredentialProof) */ {
 public:
  inline CredentialProof() : CredentialProof(nullptr) {}
  ~CredentialProof() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CredentialProof(
      ::google::protobuf::internal::ConstantInitialized);

  inline CredentialProof(const CredentialProof& from) : CredentialProof(nullptr, from) {}
  inline CredentialProof(CredentialProof&& from) noexcept
      : CredentialProof(nullptr, std::move(from)) {}
  inline CredentialProof& operator=(const CredentialProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline CredentialProof& operator=(CredentialProof&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CredentialProof& default_instance() {
    return *internal_default_instance();
  }
  static inline const CredentialProof* internal_default_instance() {
    return reinterpret_cast<const CredentialProof*>(
        &_CredentialProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CredentialProof& a, CredentialProof& b) { a.Swap(&b); }
  inline void Swap(CredentialProof* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CredentialProof* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CredentialProof* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CredentialProof>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CredentialProof& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CredentialProof& from) { CredentialProof::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CredentialProof* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.CredentialProof"; }

 protected:
  explicit CredentialProof(::google::protobuf::Arena* arena);
  CredentialProof(::google::protobuf::Arena* arena, const CredentialProof& from);
  CredentialProof(::google::protobuf::Arena* arena, CredentialProof&& from) noexcept
      : CredentialProof(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
    kCreatedFieldNumber = 2,
    kVerificationMethodFieldNumber = 3,
    kProofPurposeFieldNumber = 4,
    kProofValueFieldNumber = 5,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string created = 2;
  void clear_created() ;
  const std::string& created() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created(Arg_&& arg, Args_... args);
  std::string* mutable_created();
  PROTOBUF_NODISCARD std::string* release_created();
  void set_allocated_created(std::string* value);

  private:
  const std::string& _internal_created() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created(
      const std::string& value);
  std::string* _internal_mutable_created();

  public:
  // string verification_method = 3;
  void clear_verification_method() ;
  const std::string& verification_method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_verification_method(Arg_&& arg, Args_... args);
  std::string* mutable_verification_method();
  PROTOBUF_NODISCARD std::string* release_verification_method();
  void set_allocated_verification_method(std::string* value);

  private:
  const std::string& _internal_verification_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_method(
      const std::string& value);
  std::string* _internal_mutable_verification_method();

  public:
  // string proof_purpose = 4;
  void clear_proof_purpose() ;
  const std::string& proof_purpose() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_purpose(Arg_&& arg, Args_... args);
  std::string* mutable_proof_purpose();
  PROTOBUF_NODISCARD std::string* release_proof_purpose();
  void set_allocated_proof_purpose(std::string* value);

  private:
  const std::string& _internal_proof_purpose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_purpose(
      const std::string& value);
  std::string* _internal_mutable_proof_purpose();

  public:
  // string proof_value = 5;
  void clear_proof_value() ;
  const std::string& proof_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_value(Arg_&& arg, Args_... args);
  std::string* mutable_proof_value();
  PROTOBUF_NODISCARD std::string* release_proof_value();
  void set_allocated_proof_value(std::string* value);

  private:
  const std::string& _internal_proof_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_value(
      const std::string& value);
  std::string* _internal_mutable_proof_value();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.CredentialProof)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      88, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CredentialProof_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CredentialProof& from_msg);
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr created_;
    ::google::protobuf::internal::ArenaStringPtr verification_method_;
    ::google::protobuf::internal::ArenaStringPtr proof_purpose_;
    ::google::protobuf::internal::ArenaStringPtr proof_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class CreatePresentationChallengeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.CreatePresentationChallengeResponse) */ {
 public:
  inline CreatePresentationChallengeResponse() : CreatePresentationChallengeResponse(nullptr) {}
  ~CreatePresentationChallengeResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreatePresentationChallengeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreatePresentationChallengeResponse(const CreatePresentationChallengeResponse& from) : CreatePresentationChallengeResponse(nullptr, from) {}
  inline CreatePresentationChallengeResponse(CreatePresentationChallengeResponse&& from) noexcept
      : CreatePresentationChallengeResponse(nullptr, std::move(from)) {}
  inline CreatePresentationChallengeResponse& operator=(const CreatePresentationChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePresentationChallengeResponse& operator=(CreatePresentationChallengeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePresentationChallengeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePresentationChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePresentationChallengeResponse*>(
        &_CreatePresentationChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CreatePresentationChallengeResponse& a, CreatePresentationChallengeResponse& b) { a.Swap(&b); }
  inline void Swap(CreatePresentationChallengeResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePresentationChallengeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePresentationChallengeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreatePresentationChallengeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreatePresentationChallengeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreatePresentationChallengeResponse& from) { CreatePresentationChallengeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreatePresentationChallengeResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.CreatePresentationChallengeResponse"; }

 protected:
  explicit CreatePresentationChallengeResponse(::google::protobuf::Arena* arena);
  CreatePresentationChallengeResponse(::google::protobuf::Arena* arena, const CreatePresentationChallengeResponse& from);
  CreatePresentationChallengeResponse(::google::protobuf::Arena* arena, CreatePresentationChallengeResponse&& from) noexcept
      : CreatePresentationChallengeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCredentialTypesFieldNumber = 3,
    kNonceFieldNumber = 1,
    kEndpointFieldNumber = 2,
  };
  // repeated .vc_api.v1.CredentialType credential_types = 3;
  int credential_types_size() const;
  private:
  int _internal_credential_types_size() const;

  public:
  void clear_credential_types() ;
  public:
  ::vc_api::v1::CredentialType credential_types(int index) const;
  void set_credential_types(int index, ::vc_api::v1::CredentialType value);
  void add_credential_types(::vc_api::v1::CredentialType value);
  const ::google::protobuf::RepeatedField<int>& credential_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_credential_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_credential_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_credential_types();

  public:
  // string nonce = 1;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* value);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // string endpoint = 2;
  void clear_endpoint() ;
  const std::string& endpoint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* value);

  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(
      const std::string& value);
  std::string* _internal_mutable_endpoint();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.CreatePresentationChallengeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreatePresentationChallengeResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreatePresentationChallengeResponse& from_msg);
    ::google::protobuf::RepeatedField<int> credential_types_;
    mutable ::google::protobuf::internal::CachedSize _credential_types_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::google::protobuf::internal::ArenaStringPtr endpoint_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class CreatePresentationChallengeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.CreatePresentationChallengeRequest) */ {
 public:
  inline CreatePresentationChallengeRequest() : CreatePresentationChallengeRequest(nullptr) {}
  ~CreatePresentationChallengeRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreatePresentationChallengeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreatePresentationChallengeRequest(const CreatePresentationChallengeRequest& from) : CreatePresentationChallengeRequest(nullptr, from) {}
  inline CreatePresentationChallengeRequest(CreatePresentationChallengeRequest&& from) noexcept
      : CreatePresentationChallengeRequest(nullptr, std::move(from)) {}
  inline CreatePresentationChallengeRequest& operator=(const CreatePresentationChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePresentationChallengeRequest& operator=(CreatePresentationChallengeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePresentationChallengeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePresentationChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePresentationChallengeRequest*>(
        &_CreatePresentationChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CreatePresentationChallengeRequest& a, CreatePresentationChallengeRequest& b) { a.Swap(&b); }
  inline void Swap(CreatePresentationChallengeRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePresentationChallengeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePresentationChallengeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreatePresentationChallengeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreatePresentationChallengeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreatePresentationChallengeRequest& from) { CreatePresentationChallengeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreatePresentationChallengeRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.CreatePresentationChallengeRequest"; }

 protected:
  explicit CreatePresentationChallengeRequest(::google::protobuf::Arena* arena);
  CreatePresentationChallengeRequest(::google::protobuf::Arena* arena, const CreatePresentationChallengeRequest& from);
  CreatePresentationChallengeRequest(::google::protobuf::Arena* arena, CreatePresentationChallengeRequest&& from) noexcept
      : CreatePresentationChallengeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCredentialTypesFieldNumber = 1,
  };
  // repeated .vc_api.v1.CredentialType credential_types = 1;
  int credential_types_size() const;
  private:
  int _internal_credential_types_size() const;

  public:
  void clear_credential_types() ;
  public:
  ::vc_api::v1::CredentialType credential_types(int index) const;
  void set_credential_types(int index, ::vc_api::v1::CredentialType value);
  void add_credential_types(::vc_api::v1::CredentialType value);
  const ::google::protobuf::RepeatedField<int>& credential_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_credential_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_credential_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_credential_types();

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.CreatePresentationChallengeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreatePresentationChallengeRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreatePresentationChallengeRequest& from_msg);
    ::google::protobuf::RepeatedField<int> credential_types_;
    mutable ::google::protobuf::internal::CachedSize _credential_types_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class CreateIssuanceChallengeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.CreateIssuanceChallengeResponse) */ {
 public:
  inline CreateIssuanceChallengeResponse() : CreateIssuanceChallengeResponse(nullptr) {}
  ~CreateIssuanceChallengeResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateIssuanceChallengeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateIssuanceChallengeResponse(const CreateIssuanceChallengeResponse& from) : CreateIssuanceChallengeResponse(nullptr, from) {}
  inline CreateIssuanceChallengeResponse(CreateIssuanceChallengeResponse&& from) noexcept
      : CreateIssuanceChallengeResponse(nullptr, std::move(from)) {}
  inline CreateIssuanceChallengeResponse& operator=(const CreateIssuanceChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIssuanceChallengeResponse& operator=(CreateIssuanceChallengeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIssuanceChallengeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIssuanceChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateIssuanceChallengeResponse*>(
        &_CreateIssuanceChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CreateIssuanceChallengeResponse& a, CreateIssuanceChallengeResponse& b) { a.Swap(&b); }
  inline void Swap(CreateIssuanceChallengeResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIssuanceChallengeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIssuanceChallengeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateIssuanceChallengeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateIssuanceChallengeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateIssuanceChallengeResponse& from) { CreateIssuanceChallengeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateIssuanceChallengeResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.CreateIssuanceChallengeResponse"; }

 protected:
  explicit CreateIssuanceChallengeResponse(::google::protobuf::Arena* arena);
  CreateIssuanceChallengeResponse(::google::protobuf::Arena* arena, const CreateIssuanceChallengeResponse& from);
  CreateIssuanceChallengeResponse(::google::protobuf::Arena* arena, CreateIssuanceChallengeResponse&& from) noexcept
      : CreateIssuanceChallengeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNonceFieldNumber = 1,
    kEndpointFieldNumber = 2,
    kCredentialTypeFieldNumber = 3,
  };
  // string nonce = 1;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* value);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // string endpoint = 2;
  void clear_endpoint() ;
  const std::string& endpoint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* value);

  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(
      const std::string& value);
  std::string* _internal_mutable_endpoint();

  public:
  // .vc_api.v1.CredentialType credential_type = 3;
  void clear_credential_type() ;
  ::vc_api::v1::CredentialType credential_type() const;
  void set_credential_type(::vc_api::v1::CredentialType value);

  private:
  ::vc_api::v1::CredentialType _internal_credential_type() const;
  void _internal_set_credential_type(::vc_api::v1::CredentialType value);

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.CreateIssuanceChallengeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreateIssuanceChallengeResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateIssuanceChallengeResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::google::protobuf::internal::ArenaStringPtr endpoint_;
    int credential_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};
// -------------------------------------------------------------------

class CreateIssuanceChallengeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vc_api.v1.CreateIssuanceChallengeRequest) */ {
 public:
  inline CreateIssuanceChallengeRequest() : CreateIssuanceChallengeRequest(nullptr) {}
  ~CreateIssuanceChallengeRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateIssuanceChallengeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateIssuanceChallengeRequest(const CreateIssuanceChallengeRequest& from) : CreateIssuanceChallengeRequest(nullptr, from) {}
  inline CreateIssuanceChallengeRequest(CreateIssuanceChallengeRequest&& from) noexcept
      : CreateIssuanceChallengeRequest(nullptr, std::move(from)) {}
  inline CreateIssuanceChallengeRequest& operator=(const CreateIssuanceChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIssuanceChallengeRequest& operator=(CreateIssuanceChallengeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIssuanceChallengeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIssuanceChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIssuanceChallengeRequest*>(
        &_CreateIssuanceChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CreateIssuanceChallengeRequest& a, CreateIssuanceChallengeRequest& b) { a.Swap(&b); }
  inline void Swap(CreateIssuanceChallengeRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIssuanceChallengeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIssuanceChallengeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateIssuanceChallengeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateIssuanceChallengeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateIssuanceChallengeRequest& from) { CreateIssuanceChallengeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateIssuanceChallengeRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vc_api.v1.CreateIssuanceChallengeRequest"; }

 protected:
  explicit CreateIssuanceChallengeRequest(::google::protobuf::Arena* arena);
  CreateIssuanceChallengeRequest(::google::protobuf::Arena* arena, const CreateIssuanceChallengeRequest& from);
  CreateIssuanceChallengeRequest(::google::protobuf::Arena* arena, CreateIssuanceChallengeRequest&& from) noexcept
      : CreateIssuanceChallengeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDidFieldNumber = 2,
    kCredentialTypeFieldNumber = 1,
  };
  // string did = 2;
  void clear_did() ;
  const std::string& did() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_did(Arg_&& arg, Args_... args);
  std::string* mutable_did();
  PROTOBUF_NODISCARD std::string* release_did();
  void set_allocated_did(std::string* value);

  private:
  const std::string& _internal_did() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_did(
      const std::string& value);
  std::string* _internal_mutable_did();

  public:
  // .vc_api.v1.CredentialType credential_type = 1;
  void clear_credential_type() ;
  ::vc_api::v1::CredentialType credential_type() const;
  void set_credential_type(::vc_api::v1::CredentialType value);

  private:
  ::vc_api::v1::CredentialType _internal_credential_type() const;
  void _internal_set_credential_type(::vc_api::v1::CredentialType value);

  public:
  // @@protoc_insertion_point(class_scope:vc_api.v1.CreateIssuanceChallengeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreateIssuanceChallengeRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateIssuanceChallengeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr did_;
    int credential_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vc_5fapi_2fv1_2fvc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CredentialProof

// string type = 1;
inline void CredentialProof::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& CredentialProof::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CredentialProof.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CredentialProof::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CredentialProof.type)
}
inline std::string* CredentialProof::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CredentialProof.type)
  return _s;
}
inline const std::string& CredentialProof::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void CredentialProof::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* CredentialProof::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* CredentialProof::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CredentialProof.type)
  return _impl_.type_.Release();
}
inline void CredentialProof::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CredentialProof.type)
}

// string created = 2;
inline void CredentialProof::clear_created() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_.ClearToEmpty();
}
inline const std::string& CredentialProof::created() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CredentialProof.created)
  return _internal_created();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CredentialProof::set_created(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CredentialProof.created)
}
inline std::string* CredentialProof::mutable_created() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CredentialProof.created)
  return _s;
}
inline const std::string& CredentialProof::_internal_created() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_.Get();
}
inline void CredentialProof::_internal_set_created(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_.Set(value, GetArena());
}
inline std::string* CredentialProof::_internal_mutable_created() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_.Mutable( GetArena());
}
inline std::string* CredentialProof::release_created() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CredentialProof.created)
  return _impl_.created_.Release();
}
inline void CredentialProof::set_allocated_created(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.created_.IsDefault()) {
          _impl_.created_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CredentialProof.created)
}

// string verification_method = 3;
inline void CredentialProof::clear_verification_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_method_.ClearToEmpty();
}
inline const std::string& CredentialProof::verification_method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CredentialProof.verification_method)
  return _internal_verification_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CredentialProof::set_verification_method(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CredentialProof.verification_method)
}
inline std::string* CredentialProof::mutable_verification_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_verification_method();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CredentialProof.verification_method)
  return _s;
}
inline const std::string& CredentialProof::_internal_verification_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.verification_method_.Get();
}
inline void CredentialProof::_internal_set_verification_method(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_method_.Set(value, GetArena());
}
inline std::string* CredentialProof::_internal_mutable_verification_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.verification_method_.Mutable( GetArena());
}
inline std::string* CredentialProof::release_verification_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CredentialProof.verification_method)
  return _impl_.verification_method_.Release();
}
inline void CredentialProof::set_allocated_verification_method(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.verification_method_.IsDefault()) {
          _impl_.verification_method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CredentialProof.verification_method)
}

// string proof_purpose = 4;
inline void CredentialProof::clear_proof_purpose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_purpose_.ClearToEmpty();
}
inline const std::string& CredentialProof::proof_purpose() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CredentialProof.proof_purpose)
  return _internal_proof_purpose();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CredentialProof::set_proof_purpose(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_purpose_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CredentialProof.proof_purpose)
}
inline std::string* CredentialProof::mutable_proof_purpose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proof_purpose();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CredentialProof.proof_purpose)
  return _s;
}
inline const std::string& CredentialProof::_internal_proof_purpose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proof_purpose_.Get();
}
inline void CredentialProof::_internal_set_proof_purpose(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_purpose_.Set(value, GetArena());
}
inline std::string* CredentialProof::_internal_mutable_proof_purpose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proof_purpose_.Mutable( GetArena());
}
inline std::string* CredentialProof::release_proof_purpose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CredentialProof.proof_purpose)
  return _impl_.proof_purpose_.Release();
}
inline void CredentialProof::set_allocated_proof_purpose(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_purpose_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_purpose_.IsDefault()) {
          _impl_.proof_purpose_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CredentialProof.proof_purpose)
}

// string proof_value = 5;
inline void CredentialProof::clear_proof_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_value_.ClearToEmpty();
}
inline const std::string& CredentialProof::proof_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CredentialProof.proof_value)
  return _internal_proof_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CredentialProof::set_proof_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CredentialProof.proof_value)
}
inline std::string* CredentialProof::mutable_proof_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proof_value();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CredentialProof.proof_value)
  return _s;
}
inline const std::string& CredentialProof::_internal_proof_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proof_value_.Get();
}
inline void CredentialProof::_internal_set_proof_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_value_.Set(value, GetArena());
}
inline std::string* CredentialProof::_internal_mutable_proof_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proof_value_.Mutable( GetArena());
}
inline std::string* CredentialProof::release_proof_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CredentialProof.proof_value)
  return _impl_.proof_value_.Release();
}
inline void CredentialProof::set_allocated_proof_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_value_.IsDefault()) {
          _impl_.proof_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CredentialProof.proof_value)
}

// -------------------------------------------------------------------

// CreateIssuanceChallengeRequest

// .vc_api.v1.CredentialType credential_type = 1;
inline void CreateIssuanceChallengeRequest::clear_credential_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = 0;
}
inline ::vc_api::v1::CredentialType CreateIssuanceChallengeRequest::credential_type() const {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreateIssuanceChallengeRequest.credential_type)
  return _internal_credential_type();
}
inline void CreateIssuanceChallengeRequest::set_credential_type(::vc_api::v1::CredentialType value) {
  _internal_set_credential_type(value);
  // @@protoc_insertion_point(field_set:vc_api.v1.CreateIssuanceChallengeRequest.credential_type)
}
inline ::vc_api::v1::CredentialType CreateIssuanceChallengeRequest::_internal_credential_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::vc_api::v1::CredentialType>(_impl_.credential_type_);
}
inline void CreateIssuanceChallengeRequest::_internal_set_credential_type(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = value;
}

// string did = 2;
inline void CreateIssuanceChallengeRequest::clear_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.ClearToEmpty();
}
inline const std::string& CreateIssuanceChallengeRequest::did() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreateIssuanceChallengeRequest.did)
  return _internal_did();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateIssuanceChallengeRequest::set_did(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CreateIssuanceChallengeRequest.did)
}
inline std::string* CreateIssuanceChallengeRequest::mutable_did() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_did();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CreateIssuanceChallengeRequest.did)
  return _s;
}
inline const std::string& CreateIssuanceChallengeRequest::_internal_did() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.did_.Get();
}
inline void CreateIssuanceChallengeRequest::_internal_set_did(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(value, GetArena());
}
inline std::string* CreateIssuanceChallengeRequest::_internal_mutable_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.did_.Mutable( GetArena());
}
inline std::string* CreateIssuanceChallengeRequest::release_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CreateIssuanceChallengeRequest.did)
  return _impl_.did_.Release();
}
inline void CreateIssuanceChallengeRequest::set_allocated_did(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.did_.IsDefault()) {
          _impl_.did_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CreateIssuanceChallengeRequest.did)
}

// -------------------------------------------------------------------

// CreateIssuanceChallengeResponse

// string nonce = 1;
inline void CreateIssuanceChallengeResponse::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& CreateIssuanceChallengeResponse::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreateIssuanceChallengeResponse.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateIssuanceChallengeResponse::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CreateIssuanceChallengeResponse.nonce)
}
inline std::string* CreateIssuanceChallengeResponse::mutable_nonce() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CreateIssuanceChallengeResponse.nonce)
  return _s;
}
inline const std::string& CreateIssuanceChallengeResponse::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void CreateIssuanceChallengeResponse::_internal_set_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(value, GetArena());
}
inline std::string* CreateIssuanceChallengeResponse::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nonce_.Mutable( GetArena());
}
inline std::string* CreateIssuanceChallengeResponse::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CreateIssuanceChallengeResponse.nonce)
  return _impl_.nonce_.Release();
}
inline void CreateIssuanceChallengeResponse::set_allocated_nonce(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CreateIssuanceChallengeResponse.nonce)
}

// string endpoint = 2;
inline void CreateIssuanceChallengeResponse::clear_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.ClearToEmpty();
}
inline const std::string& CreateIssuanceChallengeResponse::endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreateIssuanceChallengeResponse.endpoint)
  return _internal_endpoint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateIssuanceChallengeResponse::set_endpoint(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CreateIssuanceChallengeResponse.endpoint)
}
inline std::string* CreateIssuanceChallengeResponse::mutable_endpoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CreateIssuanceChallengeResponse.endpoint)
  return _s;
}
inline const std::string& CreateIssuanceChallengeResponse::_internal_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.endpoint_.Get();
}
inline void CreateIssuanceChallengeResponse::_internal_set_endpoint(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.Set(value, GetArena());
}
inline std::string* CreateIssuanceChallengeResponse::_internal_mutable_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.endpoint_.Mutable( GetArena());
}
inline std::string* CreateIssuanceChallengeResponse::release_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CreateIssuanceChallengeResponse.endpoint)
  return _impl_.endpoint_.Release();
}
inline void CreateIssuanceChallengeResponse::set_allocated_endpoint(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endpoint_.IsDefault()) {
          _impl_.endpoint_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CreateIssuanceChallengeResponse.endpoint)
}

// .vc_api.v1.CredentialType credential_type = 3;
inline void CreateIssuanceChallengeResponse::clear_credential_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = 0;
}
inline ::vc_api::v1::CredentialType CreateIssuanceChallengeResponse::credential_type() const {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreateIssuanceChallengeResponse.credential_type)
  return _internal_credential_type();
}
inline void CreateIssuanceChallengeResponse::set_credential_type(::vc_api::v1::CredentialType value) {
  _internal_set_credential_type(value);
  // @@protoc_insertion_point(field_set:vc_api.v1.CreateIssuanceChallengeResponse.credential_type)
}
inline ::vc_api::v1::CredentialType CreateIssuanceChallengeResponse::_internal_credential_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::vc_api::v1::CredentialType>(_impl_.credential_type_);
}
inline void CreateIssuanceChallengeResponse::_internal_set_credential_type(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = value;
}

// -------------------------------------------------------------------

// IssueVerifiableCredentialRequest

// .vc_api.v1.CredentialType credential_type = 1;
inline void IssueVerifiableCredentialRequest::clear_credential_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = 0;
}
inline ::vc_api::v1::CredentialType IssueVerifiableCredentialRequest::credential_type() const {
  // @@protoc_insertion_point(field_get:vc_api.v1.IssueVerifiableCredentialRequest.credential_type)
  return _internal_credential_type();
}
inline void IssueVerifiableCredentialRequest::set_credential_type(::vc_api::v1::CredentialType value) {
  _internal_set_credential_type(value);
  // @@protoc_insertion_point(field_set:vc_api.v1.IssueVerifiableCredentialRequest.credential_type)
}
inline ::vc_api::v1::CredentialType IssueVerifiableCredentialRequest::_internal_credential_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::vc_api::v1::CredentialType>(_impl_.credential_type_);
}
inline void IssueVerifiableCredentialRequest::_internal_set_credential_type(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = value;
}

// string nonce = 2;
inline void IssueVerifiableCredentialRequest::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& IssueVerifiableCredentialRequest::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.IssueVerifiableCredentialRequest.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssueVerifiableCredentialRequest::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.IssueVerifiableCredentialRequest.nonce)
}
inline std::string* IssueVerifiableCredentialRequest::mutable_nonce() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.IssueVerifiableCredentialRequest.nonce)
  return _s;
}
inline const std::string& IssueVerifiableCredentialRequest::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void IssueVerifiableCredentialRequest::_internal_set_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(value, GetArena());
}
inline std::string* IssueVerifiableCredentialRequest::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nonce_.Mutable( GetArena());
}
inline std::string* IssueVerifiableCredentialRequest::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.IssueVerifiableCredentialRequest.nonce)
  return _impl_.nonce_.Release();
}
inline void IssueVerifiableCredentialRequest::set_allocated_nonce(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.IssueVerifiableCredentialRequest.nonce)
}

// bytes signature = 3;
inline void IssueVerifiableCredentialRequest::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& IssueVerifiableCredentialRequest::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.IssueVerifiableCredentialRequest.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssueVerifiableCredentialRequest::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.IssueVerifiableCredentialRequest.signature)
}
inline std::string* IssueVerifiableCredentialRequest::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.IssueVerifiableCredentialRequest.signature)
  return _s;
}
inline const std::string& IssueVerifiableCredentialRequest::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void IssueVerifiableCredentialRequest::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* IssueVerifiableCredentialRequest::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* IssueVerifiableCredentialRequest::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.IssueVerifiableCredentialRequest.signature)
  return _impl_.signature_.Release();
}
inline void IssueVerifiableCredentialRequest::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.IssueVerifiableCredentialRequest.signature)
}

// string did = 4;
inline void IssueVerifiableCredentialRequest::clear_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.ClearToEmpty();
}
inline const std::string& IssueVerifiableCredentialRequest::did() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.IssueVerifiableCredentialRequest.did)
  return _internal_did();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssueVerifiableCredentialRequest::set_did(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.IssueVerifiableCredentialRequest.did)
}
inline std::string* IssueVerifiableCredentialRequest::mutable_did() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_did();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.IssueVerifiableCredentialRequest.did)
  return _s;
}
inline const std::string& IssueVerifiableCredentialRequest::_internal_did() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.did_.Get();
}
inline void IssueVerifiableCredentialRequest::_internal_set_did(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(value, GetArena());
}
inline std::string* IssueVerifiableCredentialRequest::_internal_mutable_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.did_.Mutable( GetArena());
}
inline std::string* IssueVerifiableCredentialRequest::release_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.IssueVerifiableCredentialRequest.did)
  return _impl_.did_.Release();
}
inline void IssueVerifiableCredentialRequest::set_allocated_did(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.did_.IsDefault()) {
          _impl_.did_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.IssueVerifiableCredentialRequest.did)
}

// -------------------------------------------------------------------

// IssueVerifiableCredentialResponse

// string credential = 1;
inline void IssueVerifiableCredentialResponse::clear_credential() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_.ClearToEmpty();
}
inline const std::string& IssueVerifiableCredentialResponse::credential() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.IssueVerifiableCredentialResponse.credential)
  return _internal_credential();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssueVerifiableCredentialResponse::set_credential(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.IssueVerifiableCredentialResponse.credential)
}
inline std::string* IssueVerifiableCredentialResponse::mutable_credential() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_credential();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.IssueVerifiableCredentialResponse.credential)
  return _s;
}
inline const std::string& IssueVerifiableCredentialResponse::_internal_credential() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.credential_.Get();
}
inline void IssueVerifiableCredentialResponse::_internal_set_credential(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_.Set(value, GetArena());
}
inline std::string* IssueVerifiableCredentialResponse::_internal_mutable_credential() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.credential_.Mutable( GetArena());
}
inline std::string* IssueVerifiableCredentialResponse::release_credential() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.IssueVerifiableCredentialResponse.credential)
  return _impl_.credential_.Release();
}
inline void IssueVerifiableCredentialResponse::set_allocated_credential(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.credential_.IsDefault()) {
          _impl_.credential_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.IssueVerifiableCredentialResponse.credential)
}

// -------------------------------------------------------------------

// CreatePresentationChallengeRequest

// repeated .vc_api.v1.CredentialType credential_types = 1;
inline int CreatePresentationChallengeRequest::_internal_credential_types_size() const {
  return _internal_credential_types().size();
}
inline int CreatePresentationChallengeRequest::credential_types_size() const {
  return _internal_credential_types_size();
}
inline void CreatePresentationChallengeRequest::clear_credential_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_types_.Clear();
}
inline ::vc_api::v1::CredentialType CreatePresentationChallengeRequest::credential_types(int index) const {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreatePresentationChallengeRequest.credential_types)
  return static_cast<::vc_api::v1::CredentialType>(_internal_credential_types().Get(index));
}
inline void CreatePresentationChallengeRequest::set_credential_types(int index, ::vc_api::v1::CredentialType value) {
  _internal_mutable_credential_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:vc_api.v1.CreatePresentationChallengeRequest.credential_types)
}
inline void CreatePresentationChallengeRequest::add_credential_types(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_credential_types()->Add(value);
  // @@protoc_insertion_point(field_add:vc_api.v1.CreatePresentationChallengeRequest.credential_types)
}
inline const ::google::protobuf::RepeatedField<int>& CreatePresentationChallengeRequest::credential_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vc_api.v1.CreatePresentationChallengeRequest.credential_types)
  return _internal_credential_types();
}
inline ::google::protobuf::RepeatedField<int>* CreatePresentationChallengeRequest::mutable_credential_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vc_api.v1.CreatePresentationChallengeRequest.credential_types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_credential_types();
}
inline const ::google::protobuf::RepeatedField<int>& CreatePresentationChallengeRequest::_internal_credential_types()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.credential_types_;
}
inline ::google::protobuf::RepeatedField<int>* CreatePresentationChallengeRequest::_internal_mutable_credential_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.credential_types_;
}

// -------------------------------------------------------------------

// CreatePresentationChallengeResponse

// string nonce = 1;
inline void CreatePresentationChallengeResponse::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& CreatePresentationChallengeResponse::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreatePresentationChallengeResponse.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreatePresentationChallengeResponse::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CreatePresentationChallengeResponse.nonce)
}
inline std::string* CreatePresentationChallengeResponse::mutable_nonce() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CreatePresentationChallengeResponse.nonce)
  return _s;
}
inline const std::string& CreatePresentationChallengeResponse::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void CreatePresentationChallengeResponse::_internal_set_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(value, GetArena());
}
inline std::string* CreatePresentationChallengeResponse::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nonce_.Mutable( GetArena());
}
inline std::string* CreatePresentationChallengeResponse::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CreatePresentationChallengeResponse.nonce)
  return _impl_.nonce_.Release();
}
inline void CreatePresentationChallengeResponse::set_allocated_nonce(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CreatePresentationChallengeResponse.nonce)
}

// string endpoint = 2;
inline void CreatePresentationChallengeResponse::clear_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.ClearToEmpty();
}
inline const std::string& CreatePresentationChallengeResponse::endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreatePresentationChallengeResponse.endpoint)
  return _internal_endpoint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreatePresentationChallengeResponse::set_endpoint(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.CreatePresentationChallengeResponse.endpoint)
}
inline std::string* CreatePresentationChallengeResponse::mutable_endpoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.CreatePresentationChallengeResponse.endpoint)
  return _s;
}
inline const std::string& CreatePresentationChallengeResponse::_internal_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.endpoint_.Get();
}
inline void CreatePresentationChallengeResponse::_internal_set_endpoint(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.Set(value, GetArena());
}
inline std::string* CreatePresentationChallengeResponse::_internal_mutable_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.endpoint_.Mutable( GetArena());
}
inline std::string* CreatePresentationChallengeResponse::release_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.CreatePresentationChallengeResponse.endpoint)
  return _impl_.endpoint_.Release();
}
inline void CreatePresentationChallengeResponse::set_allocated_endpoint(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endpoint_.IsDefault()) {
          _impl_.endpoint_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.CreatePresentationChallengeResponse.endpoint)
}

// repeated .vc_api.v1.CredentialType credential_types = 3;
inline int CreatePresentationChallengeResponse::_internal_credential_types_size() const {
  return _internal_credential_types().size();
}
inline int CreatePresentationChallengeResponse::credential_types_size() const {
  return _internal_credential_types_size();
}
inline void CreatePresentationChallengeResponse::clear_credential_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_types_.Clear();
}
inline ::vc_api::v1::CredentialType CreatePresentationChallengeResponse::credential_types(int index) const {
  // @@protoc_insertion_point(field_get:vc_api.v1.CreatePresentationChallengeResponse.credential_types)
  return static_cast<::vc_api::v1::CredentialType>(_internal_credential_types().Get(index));
}
inline void CreatePresentationChallengeResponse::set_credential_types(int index, ::vc_api::v1::CredentialType value) {
  _internal_mutable_credential_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:vc_api.v1.CreatePresentationChallengeResponse.credential_types)
}
inline void CreatePresentationChallengeResponse::add_credential_types(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_credential_types()->Add(value);
  // @@protoc_insertion_point(field_add:vc_api.v1.CreatePresentationChallengeResponse.credential_types)
}
inline const ::google::protobuf::RepeatedField<int>& CreatePresentationChallengeResponse::credential_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vc_api.v1.CreatePresentationChallengeResponse.credential_types)
  return _internal_credential_types();
}
inline ::google::protobuf::RepeatedField<int>* CreatePresentationChallengeResponse::mutable_credential_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vc_api.v1.CreatePresentationChallengeResponse.credential_types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_credential_types();
}
inline const ::google::protobuf::RepeatedField<int>& CreatePresentationChallengeResponse::_internal_credential_types()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.credential_types_;
}
inline ::google::protobuf::RepeatedField<int>* CreatePresentationChallengeResponse::_internal_mutable_credential_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.credential_types_;
}

// -------------------------------------------------------------------

// PresentVerifiableCredentialRequest

// string presentation = 1;
inline void PresentVerifiableCredentialRequest::clear_presentation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.presentation_.ClearToEmpty();
}
inline const std::string& PresentVerifiableCredentialRequest::presentation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.PresentVerifiableCredentialRequest.presentation)
  return _internal_presentation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PresentVerifiableCredentialRequest::set_presentation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.presentation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.PresentVerifiableCredentialRequest.presentation)
}
inline std::string* PresentVerifiableCredentialRequest::mutable_presentation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_presentation();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.PresentVerifiableCredentialRequest.presentation)
  return _s;
}
inline const std::string& PresentVerifiableCredentialRequest::_internal_presentation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.presentation_.Get();
}
inline void PresentVerifiableCredentialRequest::_internal_set_presentation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.presentation_.Set(value, GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::_internal_mutable_presentation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.presentation_.Mutable( GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::release_presentation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.PresentVerifiableCredentialRequest.presentation)
  return _impl_.presentation_.Release();
}
inline void PresentVerifiableCredentialRequest::set_allocated_presentation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.presentation_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.presentation_.IsDefault()) {
          _impl_.presentation_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.PresentVerifiableCredentialRequest.presentation)
}

// string nonce = 2;
inline void PresentVerifiableCredentialRequest::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& PresentVerifiableCredentialRequest::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.PresentVerifiableCredentialRequest.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PresentVerifiableCredentialRequest::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.PresentVerifiableCredentialRequest.nonce)
}
inline std::string* PresentVerifiableCredentialRequest::mutable_nonce() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.PresentVerifiableCredentialRequest.nonce)
  return _s;
}
inline const std::string& PresentVerifiableCredentialRequest::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void PresentVerifiableCredentialRequest::_internal_set_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(value, GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nonce_.Mutable( GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.PresentVerifiableCredentialRequest.nonce)
  return _impl_.nonce_.Release();
}
inline void PresentVerifiableCredentialRequest::set_allocated_nonce(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.PresentVerifiableCredentialRequest.nonce)
}

// bytes signature = 3;
inline void PresentVerifiableCredentialRequest::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& PresentVerifiableCredentialRequest::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.PresentVerifiableCredentialRequest.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PresentVerifiableCredentialRequest::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.PresentVerifiableCredentialRequest.signature)
}
inline std::string* PresentVerifiableCredentialRequest::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.PresentVerifiableCredentialRequest.signature)
  return _s;
}
inline const std::string& PresentVerifiableCredentialRequest::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void PresentVerifiableCredentialRequest::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.PresentVerifiableCredentialRequest.signature)
  return _impl_.signature_.Release();
}
inline void PresentVerifiableCredentialRequest::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.PresentVerifiableCredentialRequest.signature)
}

// string did = 4;
inline void PresentVerifiableCredentialRequest::clear_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.ClearToEmpty();
}
inline const std::string& PresentVerifiableCredentialRequest::did() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.PresentVerifiableCredentialRequest.did)
  return _internal_did();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PresentVerifiableCredentialRequest::set_did(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.PresentVerifiableCredentialRequest.did)
}
inline std::string* PresentVerifiableCredentialRequest::mutable_did() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_did();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.PresentVerifiableCredentialRequest.did)
  return _s;
}
inline const std::string& PresentVerifiableCredentialRequest::_internal_did() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.did_.Get();
}
inline void PresentVerifiableCredentialRequest::_internal_set_did(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(value, GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::_internal_mutable_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.did_.Mutable( GetArena());
}
inline std::string* PresentVerifiableCredentialRequest::release_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.PresentVerifiableCredentialRequest.did)
  return _impl_.did_.Release();
}
inline void PresentVerifiableCredentialRequest::set_allocated_did(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.did_.IsDefault()) {
          _impl_.did_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.PresentVerifiableCredentialRequest.did)
}

// repeated .vc_api.v1.CredentialType credential_type = 5;
inline int PresentVerifiableCredentialRequest::_internal_credential_type_size() const {
  return _internal_credential_type().size();
}
inline int PresentVerifiableCredentialRequest::credential_type_size() const {
  return _internal_credential_type_size();
}
inline void PresentVerifiableCredentialRequest::clear_credential_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_.Clear();
}
inline ::vc_api::v1::CredentialType PresentVerifiableCredentialRequest::credential_type(int index) const {
  // @@protoc_insertion_point(field_get:vc_api.v1.PresentVerifiableCredentialRequest.credential_type)
  return static_cast<::vc_api::v1::CredentialType>(_internal_credential_type().Get(index));
}
inline void PresentVerifiableCredentialRequest::set_credential_type(int index, ::vc_api::v1::CredentialType value) {
  _internal_mutable_credential_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:vc_api.v1.PresentVerifiableCredentialRequest.credential_type)
}
inline void PresentVerifiableCredentialRequest::add_credential_type(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_credential_type()->Add(value);
  // @@protoc_insertion_point(field_add:vc_api.v1.PresentVerifiableCredentialRequest.credential_type)
}
inline const ::google::protobuf::RepeatedField<int>& PresentVerifiableCredentialRequest::credential_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vc_api.v1.PresentVerifiableCredentialRequest.credential_type)
  return _internal_credential_type();
}
inline ::google::protobuf::RepeatedField<int>* PresentVerifiableCredentialRequest::mutable_credential_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vc_api.v1.PresentVerifiableCredentialRequest.credential_type)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_credential_type();
}
inline const ::google::protobuf::RepeatedField<int>& PresentVerifiableCredentialRequest::_internal_credential_type()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.credential_type_;
}
inline ::google::protobuf::RepeatedField<int>* PresentVerifiableCredentialRequest::_internal_mutable_credential_type() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.credential_type_;
}

// -------------------------------------------------------------------

// PresentVerifiableCredentialResponse

// -------------------------------------------------------------------

// WaitForCompletionRequest

// string nonce = 1;
inline void WaitForCompletionRequest::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& WaitForCompletionRequest::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.WaitForCompletionRequest.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WaitForCompletionRequest::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.WaitForCompletionRequest.nonce)
}
inline std::string* WaitForCompletionRequest::mutable_nonce() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.WaitForCompletionRequest.nonce)
  return _s;
}
inline const std::string& WaitForCompletionRequest::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void WaitForCompletionRequest::_internal_set_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.Set(value, GetArena());
}
inline std::string* WaitForCompletionRequest::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nonce_.Mutable( GetArena());
}
inline std::string* WaitForCompletionRequest::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.WaitForCompletionRequest.nonce)
  return _impl_.nonce_.Release();
}
inline void WaitForCompletionRequest::set_allocated_nonce(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.WaitForCompletionRequest.nonce)
}

// -------------------------------------------------------------------

// WaitForCompletionResponse

// string did = 1;
inline void WaitForCompletionResponse::clear_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.ClearToEmpty();
}
inline const std::string& WaitForCompletionResponse::did() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.WaitForCompletionResponse.did)
  return _internal_did();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WaitForCompletionResponse::set_did(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.WaitForCompletionResponse.did)
}
inline std::string* WaitForCompletionResponse::mutable_did() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_did();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.WaitForCompletionResponse.did)
  return _s;
}
inline const std::string& WaitForCompletionResponse::_internal_did() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.did_.Get();
}
inline void WaitForCompletionResponse::_internal_set_did(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(value, GetArena());
}
inline std::string* WaitForCompletionResponse::_internal_mutable_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.did_.Mutable( GetArena());
}
inline std::string* WaitForCompletionResponse::release_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.WaitForCompletionResponse.did)
  return _impl_.did_.Release();
}
inline void WaitForCompletionResponse::set_allocated_did(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.did_.IsDefault()) {
          _impl_.did_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.WaitForCompletionResponse.did)
}

// string data = 2;
inline void WaitForCompletionResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& WaitForCompletionResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.WaitForCompletionResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WaitForCompletionResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.WaitForCompletionResponse.data)
}
inline std::string* WaitForCompletionResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.WaitForCompletionResponse.data)
  return _s;
}
inline const std::string& WaitForCompletionResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void WaitForCompletionResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* WaitForCompletionResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* WaitForCompletionResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.WaitForCompletionResponse.data)
  return _impl_.data_.Release();
}
inline void WaitForCompletionResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.WaitForCompletionResponse.data)
}

// -------------------------------------------------------------------

// UpdateVerifiableCredentialStatusRequest

// .vc_api.v1.CredentialType credential_type = 1;
inline void UpdateVerifiableCredentialStatusRequest::clear_credential_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = 0;
}
inline ::vc_api::v1::CredentialType UpdateVerifiableCredentialStatusRequest::credential_type() const {
  // @@protoc_insertion_point(field_get:vc_api.v1.UpdateVerifiableCredentialStatusRequest.credential_type)
  return _internal_credential_type();
}
inline void UpdateVerifiableCredentialStatusRequest::set_credential_type(::vc_api::v1::CredentialType value) {
  _internal_set_credential_type(value);
  // @@protoc_insertion_point(field_set:vc_api.v1.UpdateVerifiableCredentialStatusRequest.credential_type)
}
inline ::vc_api::v1::CredentialType UpdateVerifiableCredentialStatusRequest::_internal_credential_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::vc_api::v1::CredentialType>(_impl_.credential_type_);
}
inline void UpdateVerifiableCredentialStatusRequest::_internal_set_credential_type(::vc_api::v1::CredentialType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.credential_type_ = value;
}

// string did = 2;
inline void UpdateVerifiableCredentialStatusRequest::clear_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.ClearToEmpty();
}
inline const std::string& UpdateVerifiableCredentialStatusRequest::did() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vc_api.v1.UpdateVerifiableCredentialStatusRequest.did)
  return _internal_did();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateVerifiableCredentialStatusRequest::set_did(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vc_api.v1.UpdateVerifiableCredentialStatusRequest.did)
}
inline std::string* UpdateVerifiableCredentialStatusRequest::mutable_did() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_did();
  // @@protoc_insertion_point(field_mutable:vc_api.v1.UpdateVerifiableCredentialStatusRequest.did)
  return _s;
}
inline const std::string& UpdateVerifiableCredentialStatusRequest::_internal_did() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.did_.Get();
}
inline void UpdateVerifiableCredentialStatusRequest::_internal_set_did(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.Set(value, GetArena());
}
inline std::string* UpdateVerifiableCredentialStatusRequest::_internal_mutable_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.did_.Mutable( GetArena());
}
inline std::string* UpdateVerifiableCredentialStatusRequest::release_did() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vc_api.v1.UpdateVerifiableCredentialStatusRequest.did)
  return _impl_.did_.Release();
}
inline void UpdateVerifiableCredentialStatusRequest::set_allocated_did(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.did_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.did_.IsDefault()) {
          _impl_.did_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vc_api.v1.UpdateVerifiableCredentialStatusRequest.did)
}

// .vc_api.v1.UpdateVerifiableCredentialStatusType update_type = 3;
inline void UpdateVerifiableCredentialStatusRequest::clear_update_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_type_ = 0;
}
inline ::vc_api::v1::UpdateVerifiableCredentialStatusType UpdateVerifiableCredentialStatusRequest::update_type() const {
  // @@protoc_insertion_point(field_get:vc_api.v1.UpdateVerifiableCredentialStatusRequest.update_type)
  return _internal_update_type();
}
inline void UpdateVerifiableCredentialStatusRequest::set_update_type(::vc_api::v1::UpdateVerifiableCredentialStatusType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:vc_api.v1.UpdateVerifiableCredentialStatusRequest.update_type)
}
inline ::vc_api::v1::UpdateVerifiableCredentialStatusType UpdateVerifiableCredentialStatusRequest::_internal_update_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::vc_api::v1::UpdateVerifiableCredentialStatusType>(_impl_.update_type_);
}
inline void UpdateVerifiableCredentialStatusRequest::_internal_set_update_type(::vc_api::v1::UpdateVerifiableCredentialStatusType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_type_ = value;
}

// -------------------------------------------------------------------

// UpdateVerifiableCredentialStatusResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace vc_api


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::vc_api::v1::CredentialType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::vc_api::v1::CredentialType>() {
  return ::vc_api::v1::CredentialType_descriptor();
}
template <>
struct is_proto_enum<::vc_api::v1::UpdateVerifiableCredentialStatusType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::vc_api::v1::UpdateVerifiableCredentialStatusType>() {
  return ::vc_api::v1::UpdateVerifiableCredentialStatusType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_vc_5fapi_2fv1_2fvc_2eproto_2epb_2eh
