// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/amqp.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2famqp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2famqp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/v1/packet.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2fv1_2famqp_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fv1_2famqp_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2fv1_2famqp_2eproto;
namespace common {
class AckProposalData;
struct AckProposalDataDefaultTypeInternal;
extern AckProposalDataDefaultTypeInternal _AckProposalData_default_instance_;
class NewTransactionData;
struct NewTransactionDataDefaultTypeInternal;
extern NewTransactionDataDefaultTypeInternal _NewTransactionData_default_instance_;
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class ProposalAckNackData;
struct ProposalAckNackDataDefaultTypeInternal;
extern ProposalAckNackDataDefaultTypeInternal _ProposalAckNackData_default_instance_;
class ReceiveSecretData;
struct ReceiveSecretDataDefaultTypeInternal;
extern ReceiveSecretDataDefaultTypeInternal _ReceiveSecretData_default_instance_;
class ReceiveTerminationData;
struct ReceiveTerminationDataDefaultTypeInternal;
extern ReceiveTerminationDataDefaultTypeInternal _ReceiveTerminationData_default_instance_;
class RevealSecretData;
struct RevealSecretDataDefaultTypeInternal;
extern RevealSecretDataDefaultTypeInternal _RevealSecretData_default_instance_;
class SecretRevealedData;
struct SecretRevealedDataDefaultTypeInternal;
extern SecretRevealedDataDefaultTypeInternal _SecretRevealedData_default_instance_;
}  // namespace common
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace common {
enum PayloadType : int {
  NewTransaction = 0,
  AckProposal = 1,
  ProposalAcked = 2,
  ProposalNacked = 3,
  RevealSecret = 4,
  SecretRevealed = 5,
  ReceiveSecret = 6,
  ReceiveTermination = 7,
  PayloadType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayloadType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayloadType_IsValid(int value);
extern const uint32_t PayloadType_internal_data_[];
constexpr PayloadType PayloadType_MIN = static_cast<PayloadType>(0);
constexpr PayloadType PayloadType_MAX = static_cast<PayloadType>(7);
constexpr int PayloadType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
PayloadType_descriptor();
template <typename T>
const std::string& PayloadType_Name(T value) {
  static_assert(std::is_same<T, PayloadType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PayloadType_Name().");
  return PayloadType_Name(static_cast<PayloadType>(value));
}
template <>
inline const std::string& PayloadType_Name(PayloadType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayloadType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool PayloadType_Parse(absl::string_view name, PayloadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayloadType>(
      PayloadType_descriptor(), name, value);
}
enum TerminationResult : int {
  ContractFailed = 0,
  TxnFailed = 1,
  TxnCompleted = 2,
  TerminationResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TerminationResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TerminationResult_IsValid(int value);
extern const uint32_t TerminationResult_internal_data_[];
constexpr TerminationResult TerminationResult_MIN = static_cast<TerminationResult>(0);
constexpr TerminationResult TerminationResult_MAX = static_cast<TerminationResult>(2);
constexpr int TerminationResult_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TerminationResult_descriptor();
template <typename T>
const std::string& TerminationResult_Name(T value) {
  static_assert(std::is_same<T, TerminationResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TerminationResult_Name().");
  return TerminationResult_Name(static_cast<TerminationResult>(value));
}
template <>
inline const std::string& TerminationResult_Name(TerminationResult value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TerminationResult_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TerminationResult_Parse(absl::string_view name, TerminationResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TerminationResult>(
      TerminationResult_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SecretRevealedData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.SecretRevealedData) */ {
 public:
  inline SecretRevealedData() : SecretRevealedData(nullptr) {}
  ~SecretRevealedData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SecretRevealedData(
      ::google::protobuf::internal::ConstantInitialized);

  inline SecretRevealedData(const SecretRevealedData& from) : SecretRevealedData(nullptr, from) {}
  inline SecretRevealedData(SecretRevealedData&& from) noexcept
      : SecretRevealedData(nullptr, std::move(from)) {}
  inline SecretRevealedData& operator=(const SecretRevealedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecretRevealedData& operator=(SecretRevealedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecretRevealedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecretRevealedData* internal_default_instance() {
    return reinterpret_cast<const SecretRevealedData*>(
        &_SecretRevealedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SecretRevealedData& a, SecretRevealedData& b) { a.Swap(&b); }
  inline void Swap(SecretRevealedData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecretRevealedData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecretRevealedData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SecretRevealedData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecretRevealedData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SecretRevealedData& from) { SecretRevealedData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecretRevealedData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.SecretRevealedData"; }

 protected:
  explicit SecretRevealedData(::google::protobuf::Arena* arena);
  SecretRevealedData(::google::protobuf::Arena* arena, const SecretRevealedData& from);
  SecretRevealedData(::google::protobuf::Arena* arena, SecretRevealedData&& from) noexcept
      : SecretRevealedData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kSecretFieldNumber = 3,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* value);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string secret = 3;
  void clear_secret() ;
  const std::string& secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* value);

  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(
      const std::string& value);
  std::string* _internal_mutable_secret();

  public:
  // @@protoc_insertion_point(class_scope:common.SecretRevealedData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      62, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SecretRevealedData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SecretRevealedData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::google::protobuf::internal::ArenaStringPtr contract_id_;
    ::google::protobuf::internal::ArenaStringPtr secret_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class RevealSecretData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.RevealSecretData) */ {
 public:
  inline RevealSecretData() : RevealSecretData(nullptr) {}
  ~RevealSecretData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RevealSecretData(
      ::google::protobuf::internal::ConstantInitialized);

  inline RevealSecretData(const RevealSecretData& from) : RevealSecretData(nullptr, from) {}
  inline RevealSecretData(RevealSecretData&& from) noexcept
      : RevealSecretData(nullptr, std::move(from)) {}
  inline RevealSecretData& operator=(const RevealSecretData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevealSecretData& operator=(RevealSecretData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevealSecretData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevealSecretData* internal_default_instance() {
    return reinterpret_cast<const RevealSecretData*>(
        &_RevealSecretData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RevealSecretData& a, RevealSecretData& b) { a.Swap(&b); }
  inline void Swap(RevealSecretData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevealSecretData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevealSecretData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RevealSecretData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RevealSecretData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RevealSecretData& from) { RevealSecretData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RevealSecretData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.RevealSecretData"; }

 protected:
  explicit RevealSecretData(::google::protobuf::Arena* arena);
  RevealSecretData(::google::protobuf::Arena* arena, const RevealSecretData& from);
  RevealSecretData(::google::protobuf::Arena* arena, RevealSecretData&& from) noexcept
      : RevealSecretData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kContractIdFieldNumber = 2,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* value);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // @@protoc_insertion_point(class_scope:common.RevealSecretData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RevealSecretData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RevealSecretData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::google::protobuf::internal::ArenaStringPtr contract_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class ReceiveTerminationData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.ReceiveTerminationData) */ {
 public:
  inline ReceiveTerminationData() : ReceiveTerminationData(nullptr) {}
  ~ReceiveTerminationData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReceiveTerminationData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReceiveTerminationData(const ReceiveTerminationData& from) : ReceiveTerminationData(nullptr, from) {}
  inline ReceiveTerminationData(ReceiveTerminationData&& from) noexcept
      : ReceiveTerminationData(nullptr, std::move(from)) {}
  inline ReceiveTerminationData& operator=(const ReceiveTerminationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveTerminationData& operator=(ReceiveTerminationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveTerminationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveTerminationData* internal_default_instance() {
    return reinterpret_cast<const ReceiveTerminationData*>(
        &_ReceiveTerminationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ReceiveTerminationData& a, ReceiveTerminationData& b) { a.Swap(&b); }
  inline void Swap(ReceiveTerminationData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveTerminationData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveTerminationData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReceiveTerminationData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReceiveTerminationData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReceiveTerminationData& from) { ReceiveTerminationData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReceiveTerminationData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.ReceiveTerminationData"; }

 protected:
  explicit ReceiveTerminationData(::google::protobuf::Arena* arena);
  ReceiveTerminationData(::google::protobuf::Arena* arena, const ReceiveTerminationData& from);
  ReceiveTerminationData(::google::protobuf::Arena* arena, ReceiveTerminationData&& from) noexcept
      : ReceiveTerminationData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* value);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // .common.TerminationResult result = 3;
  void clear_result() ;
  ::common::TerminationResult result() const;
  void set_result(::common::TerminationResult value);

  private:
  ::common::TerminationResult _internal_result() const;
  void _internal_set_result(::common::TerminationResult value);

  public:
  // @@protoc_insertion_point(class_scope:common.ReceiveTerminationData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ReceiveTerminationData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReceiveTerminationData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::google::protobuf::internal::ArenaStringPtr contract_id_;
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class ReceiveSecretData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.ReceiveSecretData) */ {
 public:
  inline ReceiveSecretData() : ReceiveSecretData(nullptr) {}
  ~ReceiveSecretData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReceiveSecretData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReceiveSecretData(const ReceiveSecretData& from) : ReceiveSecretData(nullptr, from) {}
  inline ReceiveSecretData(ReceiveSecretData&& from) noexcept
      : ReceiveSecretData(nullptr, std::move(from)) {}
  inline ReceiveSecretData& operator=(const ReceiveSecretData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveSecretData& operator=(ReceiveSecretData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveSecretData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveSecretData* internal_default_instance() {
    return reinterpret_cast<const ReceiveSecretData*>(
        &_ReceiveSecretData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ReceiveSecretData& a, ReceiveSecretData& b) { a.Swap(&b); }
  inline void Swap(ReceiveSecretData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveSecretData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveSecretData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReceiveSecretData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReceiveSecretData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReceiveSecretData& from) { ReceiveSecretData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReceiveSecretData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.ReceiveSecretData"; }

 protected:
  explicit ReceiveSecretData(::google::protobuf::Arena* arena);
  ReceiveSecretData(::google::protobuf::Arena* arena, const ReceiveSecretData& from);
  ReceiveSecretData(::google::protobuf::Arena* arena, ReceiveSecretData&& from) noexcept
      : ReceiveSecretData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kSecretFieldNumber = 3,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* value);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string secret = 3;
  void clear_secret() ;
  const std::string& secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* value);

  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(
      const std::string& value);
  std::string* _internal_mutable_secret();

  public:
  // @@protoc_insertion_point(class_scope:common.ReceiveSecretData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ReceiveSecretData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReceiveSecretData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::google::protobuf::internal::ArenaStringPtr contract_id_;
    ::google::protobuf::internal::ArenaStringPtr secret_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class Payload final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Payload(
      ::google::protobuf::internal::ConstantInitialized);

  inline Payload(const Payload& from) : Payload(nullptr, from) {}
  inline Payload(Payload&& from) noexcept
      : Payload(nullptr, std::move(from)) {}
  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
        &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Payload& a, Payload& b) { a.Swap(&b); }
  inline void Swap(Payload* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Payload* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Payload>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Payload& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Payload& from) { Payload::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Payload* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.Payload"; }

 protected:
  explicit Payload(::google::protobuf::Arena* arena);
  Payload(::google::protobuf::Arena* arena, const Payload& from);
  Payload(::google::protobuf::Arena* arena, Payload&& from) noexcept
      : Payload(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 2,
    kPayloadTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .common.PayloadType payload_type = 1;
  void clear_payload_type() ;
  ::common::PayloadType payload_type() const;
  void set_payload_type(::common::PayloadType value);

  private:
  ::common::PayloadType _internal_payload_type() const;
  void _internal_set_payload_type(::common::PayloadType value);

  public:
  // @@protoc_insertion_point(class_scope:common.Payload)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Payload_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Payload& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    int payload_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class ProposalAckNackData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.ProposalAckNackData) */ {
 public:
  inline ProposalAckNackData() : ProposalAckNackData(nullptr) {}
  ~ProposalAckNackData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProposalAckNackData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProposalAckNackData(const ProposalAckNackData& from) : ProposalAckNackData(nullptr, from) {}
  inline ProposalAckNackData(ProposalAckNackData&& from) noexcept
      : ProposalAckNackData(nullptr, std::move(from)) {}
  inline ProposalAckNackData& operator=(const ProposalAckNackData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalAckNackData& operator=(ProposalAckNackData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalAckNackData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalAckNackData* internal_default_instance() {
    return reinterpret_cast<const ProposalAckNackData*>(
        &_ProposalAckNackData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ProposalAckNackData& a, ProposalAckNackData& b) { a.Swap(&b); }
  inline void Swap(ProposalAckNackData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalAckNackData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalAckNackData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProposalAckNackData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProposalAckNackData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProposalAckNackData& from) { ProposalAckNackData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProposalAckNackData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.ProposalAckNackData"; }

 protected:
  explicit ProposalAckNackData(::google::protobuf::Arena* arena);
  ProposalAckNackData(::google::protobuf::Arena* arena, const ProposalAckNackData& from);
  ProposalAckNackData(::google::protobuf::Arena* arena, ProposalAckNackData&& from) noexcept
      : ProposalAckNackData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kOriginatorFieldNumber = 3,
    kContractFieldNumber = 2,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // string originator = 3;
  void clear_originator() ;
  const std::string& originator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originator(Arg_&& arg, Args_... args);
  std::string* mutable_originator();
  PROTOBUF_NODISCARD std::string* release_originator();
  void set_allocated_originator(std::string* value);

  private:
  const std::string& _internal_originator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originator(
      const std::string& value);
  std::string* _internal_mutable_originator();

  public:
  // .common.Contract contract = 2;
  bool has_contract() const;
  void clear_contract() ;
  const ::common::Contract& contract() const;
  PROTOBUF_NODISCARD ::common::Contract* release_contract();
  ::common::Contract* mutable_contract();
  void set_allocated_contract(::common::Contract* value);
  void unsafe_arena_set_allocated_contract(::common::Contract* value);
  ::common::Contract* unsafe_arena_release_contract();

  private:
  const ::common::Contract& _internal_contract() const;
  ::common::Contract* _internal_mutable_contract();

  public:
  // @@protoc_insertion_point(class_scope:common.ProposalAckNackData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ProposalAckNackData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProposalAckNackData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::google::protobuf::internal::ArenaStringPtr originator_;
    ::common::Contract* contract_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class NewTransactionData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.NewTransactionData) */ {
 public:
  inline NewTransactionData() : NewTransactionData(nullptr) {}
  ~NewTransactionData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewTransactionData(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewTransactionData(const NewTransactionData& from) : NewTransactionData(nullptr, from) {}
  inline NewTransactionData(NewTransactionData&& from) noexcept
      : NewTransactionData(nullptr, std::move(from)) {}
  inline NewTransactionData& operator=(const NewTransactionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTransactionData& operator=(NewTransactionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewTransactionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewTransactionData* internal_default_instance() {
    return reinterpret_cast<const NewTransactionData*>(
        &_NewTransactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NewTransactionData& a, NewTransactionData& b) { a.Swap(&b); }
  inline void Swap(NewTransactionData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewTransactionData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewTransactionData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewTransactionData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewTransactionData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewTransactionData& from) { NewTransactionData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewTransactionData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.NewTransactionData"; }

 protected:
  explicit NewTransactionData(::google::protobuf::Arena* arena);
  NewTransactionData(::google::protobuf::Arena* arena, const NewTransactionData& from);
  NewTransactionData(::google::protobuf::Arena* arena, NewTransactionData&& from) noexcept
      : NewTransactionData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kContractFieldNumber = 2,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // .common.Contract contract = 2;
  bool has_contract() const;
  void clear_contract() ;
  const ::common::Contract& contract() const;
  PROTOBUF_NODISCARD ::common::Contract* release_contract();
  ::common::Contract* mutable_contract();
  void set_allocated_contract(::common::Contract* value);
  void unsafe_arena_set_allocated_contract(::common::Contract* value);
  ::common::Contract* unsafe_arena_release_contract();

  private:
  const ::common::Contract& _internal_contract() const;
  ::common::Contract* _internal_mutable_contract();

  public:
  // @@protoc_insertion_point(class_scope:common.NewTransactionData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewTransactionData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewTransactionData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::common::Contract* contract_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};
// -------------------------------------------------------------------

class AckProposalData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.AckProposalData) */ {
 public:
  inline AckProposalData() : AckProposalData(nullptr) {}
  ~AckProposalData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AckProposalData(
      ::google::protobuf::internal::ConstantInitialized);

  inline AckProposalData(const AckProposalData& from) : AckProposalData(nullptr, from) {}
  inline AckProposalData(AckProposalData&& from) noexcept
      : AckProposalData(nullptr, std::move(from)) {}
  inline AckProposalData& operator=(const AckProposalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckProposalData& operator=(AckProposalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckProposalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckProposalData* internal_default_instance() {
    return reinterpret_cast<const AckProposalData*>(
        &_AckProposalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AckProposalData& a, AckProposalData& b) { a.Swap(&b); }
  inline void Swap(AckProposalData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckProposalData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckProposalData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AckProposalData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AckProposalData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AckProposalData& from) { AckProposalData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AckProposalData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "common.AckProposalData"; }

 protected:
  explicit AckProposalData(::google::protobuf::Arena* arena);
  AckProposalData(::google::protobuf::Arena* arena, const AckProposalData& from);
  AckProposalData(::google::protobuf::Arena* arena, AckProposalData&& from) noexcept
      : AckProposalData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParticipantFieldNumber = 1,
    kOriginatorFieldNumber = 3,
    kContractFieldNumber = 2,
  };
  // string participant = 1;
  void clear_participant() ;
  const std::string& participant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant(Arg_&& arg, Args_... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* value);

  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(
      const std::string& value);
  std::string* _internal_mutable_participant();

  public:
  // string originator = 3;
  void clear_originator() ;
  const std::string& originator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originator(Arg_&& arg, Args_... args);
  std::string* mutable_originator();
  PROTOBUF_NODISCARD std::string* release_originator();
  void set_allocated_originator(std::string* value);

  private:
  const std::string& _internal_originator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originator(
      const std::string& value);
  std::string* _internal_mutable_originator();

  public:
  // .common.Contract contract = 2;
  bool has_contract() const;
  void clear_contract() ;
  const ::common::Contract& contract() const;
  PROTOBUF_NODISCARD ::common::Contract* release_contract();
  ::common::Contract* mutable_contract();
  void set_allocated_contract(::common::Contract* value);
  void unsafe_arena_set_allocated_contract(::common::Contract* value);
  ::common::Contract* unsafe_arena_release_contract();

  private:
  const ::common::Contract& _internal_contract() const;
  ::common::Contract* _internal_mutable_contract();

  public:
  // @@protoc_insertion_point(class_scope:common.AckProposalData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AckProposalData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AckProposalData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr participant_;
    ::google::protobuf::internal::ArenaStringPtr originator_;
    ::common::Contract* contract_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2famqp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Payload

// .common.PayloadType payload_type = 1;
inline void Payload::clear_payload_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = 0;
}
inline ::common::PayloadType Payload::payload_type() const {
  // @@protoc_insertion_point(field_get:common.Payload.payload_type)
  return _internal_payload_type();
}
inline void Payload::set_payload_type(::common::PayloadType value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:common.Payload.payload_type)
}
inline ::common::PayloadType Payload::_internal_payload_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::common::PayloadType>(_impl_.payload_type_);
}
inline void Payload::_internal_set_payload_type(::common::PayloadType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = value;
}

// bytes data = 2;
inline void Payload::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Payload::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.Payload.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Payload::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.Payload.data)
}
inline std::string* Payload::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.Payload.data)
  return _s;
}
inline const std::string& Payload::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Payload::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Payload::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Payload::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.Payload.data)
  return _impl_.data_.Release();
}
inline void Payload::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.Payload.data)
}

// -------------------------------------------------------------------

// NewTransactionData

// string participant = 1;
inline void NewTransactionData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& NewTransactionData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.NewTransactionData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewTransactionData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.NewTransactionData.participant)
}
inline std::string* NewTransactionData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.NewTransactionData.participant)
  return _s;
}
inline const std::string& NewTransactionData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void NewTransactionData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* NewTransactionData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* NewTransactionData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.NewTransactionData.participant)
  return _impl_.participant_.Release();
}
inline void NewTransactionData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.NewTransactionData.participant)
}

// .common.Contract contract = 2;
inline bool NewTransactionData::has_contract() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_ != nullptr);
  return value;
}
inline const ::common::Contract& NewTransactionData::_internal_contract() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::Contract* p = _impl_.contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Contract&>(::common::_Contract_default_instance_);
}
inline const ::common::Contract& NewTransactionData::contract() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.NewTransactionData.contract)
  return _internal_contract();
}
inline void NewTransactionData::unsafe_arena_set_allocated_contract(::common::Contract* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_);
  }
  _impl_.contract_ = reinterpret_cast<::common::Contract*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.NewTransactionData.contract)
}
inline ::common::Contract* NewTransactionData::release_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::Contract* released = _impl_.contract_;
  _impl_.contract_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::common::Contract* NewTransactionData::unsafe_arena_release_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.NewTransactionData.contract)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::Contract* temp = _impl_.contract_;
  _impl_.contract_ = nullptr;
  return temp;
}
inline ::common::Contract* NewTransactionData::_internal_mutable_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contract_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::Contract>(GetArena());
    _impl_.contract_ = reinterpret_cast<::common::Contract*>(p);
  }
  return _impl_.contract_;
}
inline ::common::Contract* NewTransactionData::mutable_contract() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::common::Contract* _msg = _internal_mutable_contract();
  // @@protoc_insertion_point(field_mutable:common.NewTransactionData.contract)
  return _msg;
}
inline void NewTransactionData::set_allocated_contract(::common::Contract* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.contract_ = reinterpret_cast<::common::Contract*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.NewTransactionData.contract)
}

// -------------------------------------------------------------------

// AckProposalData

// string participant = 1;
inline void AckProposalData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& AckProposalData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.AckProposalData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AckProposalData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.AckProposalData.participant)
}
inline std::string* AckProposalData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.AckProposalData.participant)
  return _s;
}
inline const std::string& AckProposalData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void AckProposalData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* AckProposalData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* AckProposalData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.AckProposalData.participant)
  return _impl_.participant_.Release();
}
inline void AckProposalData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.AckProposalData.participant)
}

// .common.Contract contract = 2;
inline bool AckProposalData::has_contract() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_ != nullptr);
  return value;
}
inline const ::common::Contract& AckProposalData::_internal_contract() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::Contract* p = _impl_.contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Contract&>(::common::_Contract_default_instance_);
}
inline const ::common::Contract& AckProposalData::contract() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.AckProposalData.contract)
  return _internal_contract();
}
inline void AckProposalData::unsafe_arena_set_allocated_contract(::common::Contract* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_);
  }
  _impl_.contract_ = reinterpret_cast<::common::Contract*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.AckProposalData.contract)
}
inline ::common::Contract* AckProposalData::release_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::Contract* released = _impl_.contract_;
  _impl_.contract_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::common::Contract* AckProposalData::unsafe_arena_release_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.AckProposalData.contract)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::Contract* temp = _impl_.contract_;
  _impl_.contract_ = nullptr;
  return temp;
}
inline ::common::Contract* AckProposalData::_internal_mutable_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contract_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::Contract>(GetArena());
    _impl_.contract_ = reinterpret_cast<::common::Contract*>(p);
  }
  return _impl_.contract_;
}
inline ::common::Contract* AckProposalData::mutable_contract() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::common::Contract* _msg = _internal_mutable_contract();
  // @@protoc_insertion_point(field_mutable:common.AckProposalData.contract)
  return _msg;
}
inline void AckProposalData::set_allocated_contract(::common::Contract* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.contract_ = reinterpret_cast<::common::Contract*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.AckProposalData.contract)
}

// string originator = 3;
inline void AckProposalData::clear_originator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.ClearToEmpty();
}
inline const std::string& AckProposalData::originator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.AckProposalData.originator)
  return _internal_originator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AckProposalData::set_originator(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.AckProposalData.originator)
}
inline std::string* AckProposalData::mutable_originator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originator();
  // @@protoc_insertion_point(field_mutable:common.AckProposalData.originator)
  return _s;
}
inline const std::string& AckProposalData::_internal_originator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.originator_.Get();
}
inline void AckProposalData::_internal_set_originator(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.Set(value, GetArena());
}
inline std::string* AckProposalData::_internal_mutable_originator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.originator_.Mutable( GetArena());
}
inline std::string* AckProposalData::release_originator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.AckProposalData.originator)
  return _impl_.originator_.Release();
}
inline void AckProposalData::set_allocated_originator(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.originator_.IsDefault()) {
          _impl_.originator_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.AckProposalData.originator)
}

// -------------------------------------------------------------------

// ProposalAckNackData

// string participant = 1;
inline void ProposalAckNackData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& ProposalAckNackData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ProposalAckNackData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProposalAckNackData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ProposalAckNackData.participant)
}
inline std::string* ProposalAckNackData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.ProposalAckNackData.participant)
  return _s;
}
inline const std::string& ProposalAckNackData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void ProposalAckNackData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* ProposalAckNackData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* ProposalAckNackData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ProposalAckNackData.participant)
  return _impl_.participant_.Release();
}
inline void ProposalAckNackData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ProposalAckNackData.participant)
}

// .common.Contract contract = 2;
inline bool ProposalAckNackData::has_contract() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_ != nullptr);
  return value;
}
inline const ::common::Contract& ProposalAckNackData::_internal_contract() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::Contract* p = _impl_.contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Contract&>(::common::_Contract_default_instance_);
}
inline const ::common::Contract& ProposalAckNackData::contract() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ProposalAckNackData.contract)
  return _internal_contract();
}
inline void ProposalAckNackData::unsafe_arena_set_allocated_contract(::common::Contract* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_);
  }
  _impl_.contract_ = reinterpret_cast<::common::Contract*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ProposalAckNackData.contract)
}
inline ::common::Contract* ProposalAckNackData::release_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::Contract* released = _impl_.contract_;
  _impl_.contract_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::common::Contract* ProposalAckNackData::unsafe_arena_release_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ProposalAckNackData.contract)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::Contract* temp = _impl_.contract_;
  _impl_.contract_ = nullptr;
  return temp;
}
inline ::common::Contract* ProposalAckNackData::_internal_mutable_contract() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contract_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::Contract>(GetArena());
    _impl_.contract_ = reinterpret_cast<::common::Contract*>(p);
  }
  return _impl_.contract_;
}
inline ::common::Contract* ProposalAckNackData::mutable_contract() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::common::Contract* _msg = _internal_mutable_contract();
  // @@protoc_insertion_point(field_mutable:common.ProposalAckNackData.contract)
  return _msg;
}
inline void ProposalAckNackData::set_allocated_contract(::common::Contract* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.contract_ = reinterpret_cast<::common::Contract*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.ProposalAckNackData.contract)
}

// string originator = 3;
inline void ProposalAckNackData::clear_originator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.ClearToEmpty();
}
inline const std::string& ProposalAckNackData::originator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ProposalAckNackData.originator)
  return _internal_originator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProposalAckNackData::set_originator(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ProposalAckNackData.originator)
}
inline std::string* ProposalAckNackData::mutable_originator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originator();
  // @@protoc_insertion_point(field_mutable:common.ProposalAckNackData.originator)
  return _s;
}
inline const std::string& ProposalAckNackData::_internal_originator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.originator_.Get();
}
inline void ProposalAckNackData::_internal_set_originator(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.Set(value, GetArena());
}
inline std::string* ProposalAckNackData::_internal_mutable_originator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.originator_.Mutable( GetArena());
}
inline std::string* ProposalAckNackData::release_originator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ProposalAckNackData.originator)
  return _impl_.originator_.Release();
}
inline void ProposalAckNackData::set_allocated_originator(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originator_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.originator_.IsDefault()) {
          _impl_.originator_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ProposalAckNackData.originator)
}

// -------------------------------------------------------------------

// RevealSecretData

// string participant = 1;
inline void RevealSecretData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& RevealSecretData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.RevealSecretData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevealSecretData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.RevealSecretData.participant)
}
inline std::string* RevealSecretData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.RevealSecretData.participant)
  return _s;
}
inline const std::string& RevealSecretData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void RevealSecretData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* RevealSecretData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* RevealSecretData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.RevealSecretData.participant)
  return _impl_.participant_.Release();
}
inline void RevealSecretData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RevealSecretData.participant)
}

// string contract_id = 2;
inline void RevealSecretData::clear_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& RevealSecretData::contract_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.RevealSecretData.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevealSecretData::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.RevealSecretData.contract_id)
}
inline std::string* RevealSecretData::mutable_contract_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:common.RevealSecretData.contract_id)
  return _s;
}
inline const std::string& RevealSecretData::_internal_contract_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_id_.Get();
}
inline void RevealSecretData::_internal_set_contract_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(value, GetArena());
}
inline std::string* RevealSecretData::_internal_mutable_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contract_id_.Mutable( GetArena());
}
inline std::string* RevealSecretData::release_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.RevealSecretData.contract_id)
  return _impl_.contract_id_.Release();
}
inline void RevealSecretData::set_allocated_contract_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RevealSecretData.contract_id)
}

// -------------------------------------------------------------------

// SecretRevealedData

// string participant = 1;
inline void SecretRevealedData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& SecretRevealedData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.SecretRevealedData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecretRevealedData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.SecretRevealedData.participant)
}
inline std::string* SecretRevealedData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.SecretRevealedData.participant)
  return _s;
}
inline const std::string& SecretRevealedData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void SecretRevealedData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* SecretRevealedData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* SecretRevealedData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.SecretRevealedData.participant)
  return _impl_.participant_.Release();
}
inline void SecretRevealedData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.SecretRevealedData.participant)
}

// string contract_id = 2;
inline void SecretRevealedData::clear_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& SecretRevealedData::contract_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.SecretRevealedData.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecretRevealedData::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.SecretRevealedData.contract_id)
}
inline std::string* SecretRevealedData::mutable_contract_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:common.SecretRevealedData.contract_id)
  return _s;
}
inline const std::string& SecretRevealedData::_internal_contract_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_id_.Get();
}
inline void SecretRevealedData::_internal_set_contract_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(value, GetArena());
}
inline std::string* SecretRevealedData::_internal_mutable_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contract_id_.Mutable( GetArena());
}
inline std::string* SecretRevealedData::release_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.SecretRevealedData.contract_id)
  return _impl_.contract_id_.Release();
}
inline void SecretRevealedData::set_allocated_contract_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.SecretRevealedData.contract_id)
}

// string secret = 3;
inline void SecretRevealedData::clear_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& SecretRevealedData::secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.SecretRevealedData.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecretRevealedData::set_secret(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.SecretRevealedData.secret)
}
inline std::string* SecretRevealedData::mutable_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:common.SecretRevealedData.secret)
  return _s;
}
inline const std::string& SecretRevealedData::_internal_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secret_.Get();
}
inline void SecretRevealedData::_internal_set_secret(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(value, GetArena());
}
inline std::string* SecretRevealedData::_internal_mutable_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secret_.Mutable( GetArena());
}
inline std::string* SecretRevealedData::release_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.SecretRevealedData.secret)
  return _impl_.secret_.Release();
}
inline void SecretRevealedData::set_allocated_secret(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_.IsDefault()) {
          _impl_.secret_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.SecretRevealedData.secret)
}

// -------------------------------------------------------------------

// ReceiveSecretData

// string participant = 1;
inline void ReceiveSecretData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& ReceiveSecretData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ReceiveSecretData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReceiveSecretData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ReceiveSecretData.participant)
}
inline std::string* ReceiveSecretData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.ReceiveSecretData.participant)
  return _s;
}
inline const std::string& ReceiveSecretData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void ReceiveSecretData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* ReceiveSecretData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* ReceiveSecretData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ReceiveSecretData.participant)
  return _impl_.participant_.Release();
}
inline void ReceiveSecretData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ReceiveSecretData.participant)
}

// string contract_id = 2;
inline void ReceiveSecretData::clear_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& ReceiveSecretData::contract_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ReceiveSecretData.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReceiveSecretData::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ReceiveSecretData.contract_id)
}
inline std::string* ReceiveSecretData::mutable_contract_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:common.ReceiveSecretData.contract_id)
  return _s;
}
inline const std::string& ReceiveSecretData::_internal_contract_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_id_.Get();
}
inline void ReceiveSecretData::_internal_set_contract_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(value, GetArena());
}
inline std::string* ReceiveSecretData::_internal_mutable_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contract_id_.Mutable( GetArena());
}
inline std::string* ReceiveSecretData::release_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ReceiveSecretData.contract_id)
  return _impl_.contract_id_.Release();
}
inline void ReceiveSecretData::set_allocated_contract_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ReceiveSecretData.contract_id)
}

// string secret = 3;
inline void ReceiveSecretData::clear_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& ReceiveSecretData::secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ReceiveSecretData.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReceiveSecretData::set_secret(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ReceiveSecretData.secret)
}
inline std::string* ReceiveSecretData::mutable_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:common.ReceiveSecretData.secret)
  return _s;
}
inline const std::string& ReceiveSecretData::_internal_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secret_.Get();
}
inline void ReceiveSecretData::_internal_set_secret(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(value, GetArena());
}
inline std::string* ReceiveSecretData::_internal_mutable_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secret_.Mutable( GetArena());
}
inline std::string* ReceiveSecretData::release_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ReceiveSecretData.secret)
  return _impl_.secret_.Release();
}
inline void ReceiveSecretData::set_allocated_secret(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_.IsDefault()) {
          _impl_.secret_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ReceiveSecretData.secret)
}

// -------------------------------------------------------------------

// ReceiveTerminationData

// string participant = 1;
inline void ReceiveTerminationData::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& ReceiveTerminationData::participant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ReceiveTerminationData.participant)
  return _internal_participant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReceiveTerminationData::set_participant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ReceiveTerminationData.participant)
}
inline std::string* ReceiveTerminationData::mutable_participant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:common.ReceiveTerminationData.participant)
  return _s;
}
inline const std::string& ReceiveTerminationData::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_.Get();
}
inline void ReceiveTerminationData::_internal_set_participant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.Set(value, GetArena());
}
inline std::string* ReceiveTerminationData::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.participant_.Mutable( GetArena());
}
inline std::string* ReceiveTerminationData::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ReceiveTerminationData.participant)
  return _impl_.participant_.Release();
}
inline void ReceiveTerminationData::set_allocated_participant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_.IsDefault()) {
          _impl_.participant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ReceiveTerminationData.participant)
}

// string contract_id = 2;
inline void ReceiveTerminationData::clear_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& ReceiveTerminationData::contract_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.ReceiveTerminationData.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReceiveTerminationData::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.ReceiveTerminationData.contract_id)
}
inline std::string* ReceiveTerminationData::mutable_contract_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:common.ReceiveTerminationData.contract_id)
  return _s;
}
inline const std::string& ReceiveTerminationData::_internal_contract_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_id_.Get();
}
inline void ReceiveTerminationData::_internal_set_contract_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.Set(value, GetArena());
}
inline std::string* ReceiveTerminationData::_internal_mutable_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contract_id_.Mutable( GetArena());
}
inline std::string* ReceiveTerminationData::release_contract_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.ReceiveTerminationData.contract_id)
  return _impl_.contract_id_.Release();
}
inline void ReceiveTerminationData::set_allocated_contract_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ReceiveTerminationData.contract_id)
}

// .common.TerminationResult result = 3;
inline void ReceiveTerminationData::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::common::TerminationResult ReceiveTerminationData::result() const {
  // @@protoc_insertion_point(field_get:common.ReceiveTerminationData.result)
  return _internal_result();
}
inline void ReceiveTerminationData::set_result(::common::TerminationResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:common.ReceiveTerminationData.result)
}
inline ::common::TerminationResult ReceiveTerminationData::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::common::TerminationResult>(_impl_.result_);
}
inline void ReceiveTerminationData::_internal_set_result(::common::TerminationResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::common::PayloadType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::common::PayloadType>() {
  return ::common::PayloadType_descriptor();
}
template <>
struct is_proto_enum<::common::TerminationResult> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::common::TerminationResult>() {
  return ::common::TerminationResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2famqp_2eproto_2epb_2eh
