// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: business_api/v1/business.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Business_List_FullMethodName               = "/business_api.v1.Business/List"
	Business_Clear_FullMethodName              = "/business_api.v1.Business/Clear"
	Business_SendPayload_FullMethodName        = "/business_api.v1.Business/SendPayload"
	Business_SendNewTransaction_FullMethodName = "/business_api.v1.Business/SendNewTransaction"
	Business_SendProposalAcked_FullMethodName  = "/business_api.v1.Business/SendProposalAcked"
	Business_SendProposalNacked_FullMethodName = "/business_api.v1.Business/SendProposalNacked"
	Business_SendSecretRevealed_FullMethodName = "/business_api.v1.Business/SendSecretRevealed"
)

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Business Service.
type BusinessClient interface {
	// List.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Clear Request.
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	// Send Payload.
	SendPayload(ctx context.Context, in *SendPayloadRequest, opts ...grpc.CallOption) (*SendPayloadResponse, error)
	// Send New Transaction.
	SendNewTransaction(ctx context.Context, in *SendNewTransactionRequest, opts ...grpc.CallOption) (*SendNewTransactionResponse, error)
	// Send Proposal Acked.
	SendProposalAcked(ctx context.Context, in *SendProposalAckedRequest, opts ...grpc.CallOption) (*SendProposalAckedResponse, error)
	// Send Proposal Nacked.
	SendProposalNacked(ctx context.Context, in *SendProposalNackedRequest, opts ...grpc.CallOption) (*SendProposalNackedResponse, error)
	// Send Secret Revealed.
	SendSecretRevealed(ctx context.Context, in *SendSecretRevealedRequest, opts ...grpc.CallOption) (*SendSecretRevealedResponse, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Business_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, Business_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) SendPayload(ctx context.Context, in *SendPayloadRequest, opts ...grpc.CallOption) (*SendPayloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPayloadResponse)
	err := c.cc.Invoke(ctx, Business_SendPayload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) SendNewTransaction(ctx context.Context, in *SendNewTransactionRequest, opts ...grpc.CallOption) (*SendNewTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNewTransactionResponse)
	err := c.cc.Invoke(ctx, Business_SendNewTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) SendProposalAcked(ctx context.Context, in *SendProposalAckedRequest, opts ...grpc.CallOption) (*SendProposalAckedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendProposalAckedResponse)
	err := c.cc.Invoke(ctx, Business_SendProposalAcked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) SendProposalNacked(ctx context.Context, in *SendProposalNackedRequest, opts ...grpc.CallOption) (*SendProposalNackedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendProposalNackedResponse)
	err := c.cc.Invoke(ctx, Business_SendProposalNacked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) SendSecretRevealed(ctx context.Context, in *SendSecretRevealedRequest, opts ...grpc.CallOption) (*SendSecretRevealedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSecretRevealedResponse)
	err := c.cc.Invoke(ctx, Business_SendSecretRevealed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
//
// Business Service.
type BusinessServer interface {
	// List.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Clear Request.
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	// Send Payload.
	SendPayload(context.Context, *SendPayloadRequest) (*SendPayloadResponse, error)
	// Send New Transaction.
	SendNewTransaction(context.Context, *SendNewTransactionRequest) (*SendNewTransactionResponse, error)
	// Send Proposal Acked.
	SendProposalAcked(context.Context, *SendProposalAckedRequest) (*SendProposalAckedResponse, error)
	// Send Proposal Nacked.
	SendProposalNacked(context.Context, *SendProposalNackedRequest) (*SendProposalNackedResponse, error)
	// Send Secret Revealed.
	SendSecretRevealed(context.Context, *SendSecretRevealedRequest) (*SendSecretRevealedResponse, error)
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBusinessServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedBusinessServer) SendPayload(context.Context, *SendPayloadRequest) (*SendPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayload not implemented")
}
func (UnimplementedBusinessServer) SendNewTransaction(context.Context, *SendNewTransactionRequest) (*SendNewTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewTransaction not implemented")
}
func (UnimplementedBusinessServer) SendProposalAcked(context.Context, *SendProposalAckedRequest) (*SendProposalAckedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposalAcked not implemented")
}
func (UnimplementedBusinessServer) SendProposalNacked(context.Context, *SendProposalNackedRequest) (*SendProposalNackedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposalNacked not implemented")
}
func (UnimplementedBusinessServer) SendSecretRevealed(context.Context, *SendSecretRevealedRequest) (*SendSecretRevealedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSecretRevealed not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_SendPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).SendPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_SendPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).SendPayload(ctx, req.(*SendPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_SendNewTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNewTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).SendNewTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_SendNewTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).SendNewTransaction(ctx, req.(*SendNewTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_SendProposalAcked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProposalAckedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).SendProposalAcked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_SendProposalAcked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).SendProposalAcked(ctx, req.(*SendProposalAckedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_SendProposalNacked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProposalNackedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).SendProposalNacked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_SendProposalNacked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).SendProposalNacked(ctx, req.(*SendProposalNackedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_SendSecretRevealed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSecretRevealedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).SendSecretRevealed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_SendSecretRevealed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).SendSecretRevealed(ctx, req.(*SendSecretRevealedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business_api.v1.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Business_List_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Business_Clear_Handler,
		},
		{
			MethodName: "SendPayload",
			Handler:    _Business_SendPayload_Handler,
		},
		{
			MethodName: "SendNewTransaction",
			Handler:    _Business_SendNewTransaction_Handler,
		},
		{
			MethodName: "SendProposalAcked",
			Handler:    _Business_SendProposalAcked_Handler,
		},
		{
			MethodName: "SendProposalNacked",
			Handler:    _Business_SendProposalNacked_Handler,
		},
		{
			MethodName: "SendSecretRevealed",
			Handler:    _Business_SendSecretRevealed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business_api/v1/business.proto",
}
