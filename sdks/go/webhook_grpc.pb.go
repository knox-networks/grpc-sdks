// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: webhook_api/v1/webhook.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WebhookManagerService_CreateWebhook_FullMethodName           = "/webhook_api.v1.WebhookManagerService/CreateWebhook"
	WebhookManagerService_ListWebhooks_FullMethodName            = "/webhook_api.v1.WebhookManagerService/ListWebhooks"
	WebhookManagerService_DeleteWebhook_FullMethodName           = "/webhook_api.v1.WebhookManagerService/DeleteWebhook"
	WebhookManagerService_ListEvents_FullMethodName              = "/webhook_api.v1.WebhookManagerService/ListEvents"
	WebhookManagerService_RetryEvent_FullMethodName              = "/webhook_api.v1.WebhookManagerService/RetryEvent"
	WebhookManagerService_Ping_FullMethodName                    = "/webhook_api.v1.WebhookManagerService/Ping"
	WebhookManagerService_ListDeliveryHistory_FullMethodName     = "/webhook_api.v1.WebhookManagerService/ListDeliveryHistory"
	WebhookManagerService_CreateScheduledReaction_FullMethodName = "/webhook_api.v1.WebhookManagerService/CreateScheduledReaction"
	WebhookManagerService_ListScheduledReactions_FullMethodName  = "/webhook_api.v1.WebhookManagerService/ListScheduledReactions"
	WebhookManagerService_DeleteScheduledReaction_FullMethodName = "/webhook_api.v1.WebhookManagerService/DeleteScheduledReaction"
	WebhookManagerService_CreatePrevalidation_FullMethodName     = "/webhook_api.v1.WebhookManagerService/CreatePrevalidation"
	WebhookManagerService_ListPrevalidations_FullMethodName      = "/webhook_api.v1.WebhookManagerService/ListPrevalidations"
	WebhookManagerService_DeletePrevalidation_FullMethodName     = "/webhook_api.v1.WebhookManagerService/DeletePrevalidation"
)

// WebhookManagerServiceClient is the client API for WebhookManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Service Manages the Lifecycle of Webhooks.
type WebhookManagerServiceClient interface {
	// Creates a Webhook.
	CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*CreateWebhookResponse, error)
	// Lists Webhooks.
	ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error)
	// Deletes a Webhook.
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error)
	// Lists Webhook Events.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// Retries a Webhook Event.
	RetryEvent(ctx context.Context, in *RetryEventRequest, opts ...grpc.CallOption) (*RetryEventResponse, error)
	// Ping a Webhook.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Lists Delivery History.
	ListDeliveryHistory(ctx context.Context, in *ListDeliveryHistoryRequest, opts ...grpc.CallOption) (*ListDeliveryHistoryResponse, error)
	// Creates a Scheduled Reaction.
	CreateScheduledReaction(ctx context.Context, in *CreateScheduledReactionRequest, opts ...grpc.CallOption) (*CreateScheduledReactionResponse, error)
	// Lists Scheduled Reactions.
	ListScheduledReactions(ctx context.Context, in *ListScheduledReactionsRequest, opts ...grpc.CallOption) (*ListScheduledReactionsResponse, error)
	// Deletes a Scheduled Reaction.
	DeleteScheduledReaction(ctx context.Context, in *DeleteScheduledReactionRequest, opts ...grpc.CallOption) (*DeleteScheduledReactionResponse, error)
	// Create Prevalidation
	CreatePrevalidation(ctx context.Context, in *CreatePrevalidationRequest, opts ...grpc.CallOption) (*CreatePrevalidationResponse, error)
	// List Prevalidations
	ListPrevalidations(ctx context.Context, in *ListPrevalidationsRequest, opts ...grpc.CallOption) (*ListPrevalidationsResponse, error)
	// Delete Prevalidation
	DeletePrevalidation(ctx context.Context, in *DeletePrevalidationRequest, opts ...grpc.CallOption) (*DeletePrevalidationResponse, error)
}

type webhookManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookManagerServiceClient(cc grpc.ClientConnInterface) WebhookManagerServiceClient {
	return &webhookManagerServiceClient{cc}
}

func (c *webhookManagerServiceClient) CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*CreateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWebhookResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_CreateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_ListWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWebhookResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_DeleteWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) RetryEvent(ctx context.Context, in *RetryEventRequest, opts ...grpc.CallOption) (*RetryEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryEventResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_RetryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) ListDeliveryHistory(ctx context.Context, in *ListDeliveryHistoryRequest, opts ...grpc.CallOption) (*ListDeliveryHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeliveryHistoryResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_ListDeliveryHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) CreateScheduledReaction(ctx context.Context, in *CreateScheduledReactionRequest, opts ...grpc.CallOption) (*CreateScheduledReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScheduledReactionResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_CreateScheduledReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) ListScheduledReactions(ctx context.Context, in *ListScheduledReactionsRequest, opts ...grpc.CallOption) (*ListScheduledReactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScheduledReactionsResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_ListScheduledReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) DeleteScheduledReaction(ctx context.Context, in *DeleteScheduledReactionRequest, opts ...grpc.CallOption) (*DeleteScheduledReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScheduledReactionResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_DeleteScheduledReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) CreatePrevalidation(ctx context.Context, in *CreatePrevalidationRequest, opts ...grpc.CallOption) (*CreatePrevalidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrevalidationResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_CreatePrevalidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) ListPrevalidations(ctx context.Context, in *ListPrevalidationsRequest, opts ...grpc.CallOption) (*ListPrevalidationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrevalidationsResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_ListPrevalidations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookManagerServiceClient) DeletePrevalidation(ctx context.Context, in *DeletePrevalidationRequest, opts ...grpc.CallOption) (*DeletePrevalidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrevalidationResponse)
	err := c.cc.Invoke(ctx, WebhookManagerService_DeletePrevalidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookManagerServiceServer is the server API for WebhookManagerService service.
// All implementations must embed UnimplementedWebhookManagerServiceServer
// for forward compatibility
//
// The Service Manages the Lifecycle of Webhooks.
type WebhookManagerServiceServer interface {
	// Creates a Webhook.
	CreateWebhook(context.Context, *CreateWebhookRequest) (*CreateWebhookResponse, error)
	// Lists Webhooks.
	ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error)
	// Deletes a Webhook.
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error)
	// Lists Webhook Events.
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// Retries a Webhook Event.
	RetryEvent(context.Context, *RetryEventRequest) (*RetryEventResponse, error)
	// Ping a Webhook.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Lists Delivery History.
	ListDeliveryHistory(context.Context, *ListDeliveryHistoryRequest) (*ListDeliveryHistoryResponse, error)
	// Creates a Scheduled Reaction.
	CreateScheduledReaction(context.Context, *CreateScheduledReactionRequest) (*CreateScheduledReactionResponse, error)
	// Lists Scheduled Reactions.
	ListScheduledReactions(context.Context, *ListScheduledReactionsRequest) (*ListScheduledReactionsResponse, error)
	// Deletes a Scheduled Reaction.
	DeleteScheduledReaction(context.Context, *DeleteScheduledReactionRequest) (*DeleteScheduledReactionResponse, error)
	// Create Prevalidation
	CreatePrevalidation(context.Context, *CreatePrevalidationRequest) (*CreatePrevalidationResponse, error)
	// List Prevalidations
	ListPrevalidations(context.Context, *ListPrevalidationsRequest) (*ListPrevalidationsResponse, error)
	// Delete Prevalidation
	DeletePrevalidation(context.Context, *DeletePrevalidationRequest) (*DeletePrevalidationResponse, error)
	mustEmbedUnimplementedWebhookManagerServiceServer()
}

// UnimplementedWebhookManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookManagerServiceServer struct {
}

func (UnimplementedWebhookManagerServiceServer) CreateWebhook(context.Context, *CreateWebhookRequest) (*CreateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (UnimplementedWebhookManagerServiceServer) ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedWebhookManagerServiceServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedWebhookManagerServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedWebhookManagerServiceServer) RetryEvent(context.Context, *RetryEventRequest) (*RetryEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryEvent not implemented")
}
func (UnimplementedWebhookManagerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWebhookManagerServiceServer) ListDeliveryHistory(context.Context, *ListDeliveryHistoryRequest) (*ListDeliveryHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliveryHistory not implemented")
}
func (UnimplementedWebhookManagerServiceServer) CreateScheduledReaction(context.Context, *CreateScheduledReactionRequest) (*CreateScheduledReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledReaction not implemented")
}
func (UnimplementedWebhookManagerServiceServer) ListScheduledReactions(context.Context, *ListScheduledReactionsRequest) (*ListScheduledReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledReactions not implemented")
}
func (UnimplementedWebhookManagerServiceServer) DeleteScheduledReaction(context.Context, *DeleteScheduledReactionRequest) (*DeleteScheduledReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledReaction not implemented")
}
func (UnimplementedWebhookManagerServiceServer) CreatePrevalidation(context.Context, *CreatePrevalidationRequest) (*CreatePrevalidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrevalidation not implemented")
}
func (UnimplementedWebhookManagerServiceServer) ListPrevalidations(context.Context, *ListPrevalidationsRequest) (*ListPrevalidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrevalidations not implemented")
}
func (UnimplementedWebhookManagerServiceServer) DeletePrevalidation(context.Context, *DeletePrevalidationRequest) (*DeletePrevalidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrevalidation not implemented")
}
func (UnimplementedWebhookManagerServiceServer) mustEmbedUnimplementedWebhookManagerServiceServer() {}

// UnsafeWebhookManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookManagerServiceServer will
// result in compilation errors.
type UnsafeWebhookManagerServiceServer interface {
	mustEmbedUnimplementedWebhookManagerServiceServer()
}

func RegisterWebhookManagerServiceServer(s grpc.ServiceRegistrar, srv WebhookManagerServiceServer) {
	s.RegisterService(&WebhookManagerService_ServiceDesc, srv)
}

func _WebhookManagerService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_CreateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).CreateWebhook(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_ListWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).ListWebhooks(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_DeleteWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_RetryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).RetryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_RetryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).RetryEvent(ctx, req.(*RetryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_ListDeliveryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).ListDeliveryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_ListDeliveryHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).ListDeliveryHistory(ctx, req.(*ListDeliveryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_CreateScheduledReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).CreateScheduledReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_CreateScheduledReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).CreateScheduledReaction(ctx, req.(*CreateScheduledReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_ListScheduledReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).ListScheduledReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_ListScheduledReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).ListScheduledReactions(ctx, req.(*ListScheduledReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_DeleteScheduledReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduledReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).DeleteScheduledReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_DeleteScheduledReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).DeleteScheduledReaction(ctx, req.(*DeleteScheduledReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_CreatePrevalidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrevalidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).CreatePrevalidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_CreatePrevalidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).CreatePrevalidation(ctx, req.(*CreatePrevalidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_ListPrevalidations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrevalidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).ListPrevalidations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_ListPrevalidations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).ListPrevalidations(ctx, req.(*ListPrevalidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookManagerService_DeletePrevalidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrevalidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookManagerServiceServer).DeletePrevalidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookManagerService_DeletePrevalidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookManagerServiceServer).DeletePrevalidation(ctx, req.(*DeletePrevalidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookManagerService_ServiceDesc is the grpc.ServiceDesc for WebhookManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhook_api.v1.WebhookManagerService",
	HandlerType: (*WebhookManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebhook",
			Handler:    _WebhookManagerService_CreateWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _WebhookManagerService_ListWebhooks_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _WebhookManagerService_DeleteWebhook_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _WebhookManagerService_ListEvents_Handler,
		},
		{
			MethodName: "RetryEvent",
			Handler:    _WebhookManagerService_RetryEvent_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _WebhookManagerService_Ping_Handler,
		},
		{
			MethodName: "ListDeliveryHistory",
			Handler:    _WebhookManagerService_ListDeliveryHistory_Handler,
		},
		{
			MethodName: "CreateScheduledReaction",
			Handler:    _WebhookManagerService_CreateScheduledReaction_Handler,
		},
		{
			MethodName: "ListScheduledReactions",
			Handler:    _WebhookManagerService_ListScheduledReactions_Handler,
		},
		{
			MethodName: "DeleteScheduledReaction",
			Handler:    _WebhookManagerService_DeleteScheduledReaction_Handler,
		},
		{
			MethodName: "CreatePrevalidation",
			Handler:    _WebhookManagerService_CreatePrevalidation_Handler,
		},
		{
			MethodName: "ListPrevalidations",
			Handler:    _WebhookManagerService_ListPrevalidations_Handler,
		},
		{
			MethodName: "DeletePrevalidation",
			Handler:    _WebhookManagerService_DeletePrevalidation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook_api/v1/webhook.proto",
}

const (
	EventConsumerService_Event_FullMethodName = "/webhook_api.v1.EventConsumerService/Event"
)

// EventConsumerServiceClient is the client API for EventConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service is implemented by the consumer service receiving the webhook event
type EventConsumerServiceClient interface {
	// Webhook Event.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventConsumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventConsumerServiceClient(cc grpc.ClientConnInterface) EventConsumerServiceClient {
	return &eventConsumerServiceClient{cc}
}

func (c *eventConsumerServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, EventConsumerService_Event_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventConsumerServiceServer is the server API for EventConsumerService service.
// All implementations must embed UnimplementedEventConsumerServiceServer
// for forward compatibility
//
// This service is implemented by the consumer service receiving the webhook event
type EventConsumerServiceServer interface {
	// Webhook Event.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedEventConsumerServiceServer()
}

// UnimplementedEventConsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventConsumerServiceServer struct {
}

func (UnimplementedEventConsumerServiceServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedEventConsumerServiceServer) mustEmbedUnimplementedEventConsumerServiceServer() {}

// UnsafeEventConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventConsumerServiceServer will
// result in compilation errors.
type UnsafeEventConsumerServiceServer interface {
	mustEmbedUnimplementedEventConsumerServiceServer()
}

func RegisterEventConsumerServiceServer(s grpc.ServiceRegistrar, srv EventConsumerServiceServer) {
	s.RegisterService(&EventConsumerService_ServiceDesc, srv)
}

func _EventConsumerService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventConsumerServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventConsumerService_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventConsumerServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventConsumerService_ServiceDesc is the grpc.ServiceDesc for EventConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhook_api.v1.EventConsumerService",
	HandlerType: (*EventConsumerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventConsumerService_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook_api/v1/webhook.proto",
}
