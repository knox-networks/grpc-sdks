// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: authority_api/v1/authority.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Authority_SetIssuerLimit_FullMethodName     = "/authority_api.v1.Authority/SetIssuerLimit"
	Authority_GetIssuerLimits_FullMethodName    = "/authority_api.v1.Authority/GetIssuerLimits"
	Authority_GetNetworkInfo_FullMethodName     = "/authority_api.v1.Authority/GetNetworkInfo"
	Authority_GetNotary_FullMethodName          = "/authority_api.v1.Authority/GetNotary"
	Authority_ListGovernedAssets_FullMethodName = "/authority_api.v1.Authority/ListGovernedAssets"
	Authority_SetGovernedAssets_FullMethodName  = "/authority_api.v1.Authority/SetGovernedAssets"
	Authority_AddAsset_FullMethodName           = "/authority_api.v1.Authority/AddAsset"
	Authority_RemoveAsset_FullMethodName        = "/authority_api.v1.Authority/RemoveAsset"
)

// AuthorityClient is the client API for Authority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Entity that is the approving monetary authority- Ex Central bank or commercial bank. It can create Issuers with
// limits, approve additional issuance limits, authorize issuing of digital banknotes, and replace digital banknotes in
// circulation.
type AuthorityClient interface {
	// Sets the issuance limit for an Issuer to a specified value and returns the new limit.
	SetIssuerLimit(ctx context.Context, in *SetIssuerLimitRequest, opts ...grpc.CallOption) (*SetIssuerLimitResponse, error)
	// Gets the the issuance limits for all the currencies for which the Issuer is allowed to issue digital banknotes.
	GetIssuerLimits(ctx context.Context, in *GetIssuerLimitsRequest, opts ...grpc.CallOption) (*GetIssuerLimitsResponse, error)
	// Gets the verifier of the Emissary for this Authority.
	GetNetworkInfo(ctx context.Context, in *GetNetworkInfoRequest, opts ...grpc.CallOption) (*GetNetworkInfoResponse, error)
	// Gets the signature of the Notary for this Authority/Notary.
	GetNotary(ctx context.Context, in *GetNotaryRequest, opts ...grpc.CallOption) (*GetNotaryResponse, error)
	// List the Governed Assets for this Authority.
	ListGovernedAssets(ctx context.Context, in *ListGovernedAssetsRequest, opts ...grpc.CallOption) (*ListGovernedAssetsResponse, error)
	// Set the Governed Assets for this Authority. This method is destructive
	SetGovernedAssets(ctx context.Context, in *SetGovernedAssetsRequest, opts ...grpc.CallOption) (*SetGovernedAssetsResponse, error)
	// Insert a new asset type to Authority
	AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*AddAssetResponse, error)
	// Remove an asset type from Authority
	RemoveAsset(ctx context.Context, in *RemoveAssetRequest, opts ...grpc.CallOption) (*RemoveAssetResponse, error)
}

type authorityClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityClient(cc grpc.ClientConnInterface) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) SetIssuerLimit(ctx context.Context, in *SetIssuerLimitRequest, opts ...grpc.CallOption) (*SetIssuerLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIssuerLimitResponse)
	err := c.cc.Invoke(ctx, Authority_SetIssuerLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) GetIssuerLimits(ctx context.Context, in *GetIssuerLimitsRequest, opts ...grpc.CallOption) (*GetIssuerLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIssuerLimitsResponse)
	err := c.cc.Invoke(ctx, Authority_GetIssuerLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) GetNetworkInfo(ctx context.Context, in *GetNetworkInfoRequest, opts ...grpc.CallOption) (*GetNetworkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkInfoResponse)
	err := c.cc.Invoke(ctx, Authority_GetNetworkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) GetNotary(ctx context.Context, in *GetNotaryRequest, opts ...grpc.CallOption) (*GetNotaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotaryResponse)
	err := c.cc.Invoke(ctx, Authority_GetNotary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) ListGovernedAssets(ctx context.Context, in *ListGovernedAssetsRequest, opts ...grpc.CallOption) (*ListGovernedAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGovernedAssetsResponse)
	err := c.cc.Invoke(ctx, Authority_ListGovernedAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) SetGovernedAssets(ctx context.Context, in *SetGovernedAssetsRequest, opts ...grpc.CallOption) (*SetGovernedAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGovernedAssetsResponse)
	err := c.cc.Invoke(ctx, Authority_SetGovernedAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*AddAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAssetResponse)
	err := c.cc.Invoke(ctx, Authority_AddAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) RemoveAsset(ctx context.Context, in *RemoveAssetRequest, opts ...grpc.CallOption) (*RemoveAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAssetResponse)
	err := c.cc.Invoke(ctx, Authority_RemoveAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServer is the server API for Authority service.
// All implementations must embed UnimplementedAuthorityServer
// for forward compatibility
//
// Entity that is the approving monetary authority- Ex Central bank or commercial bank. It can create Issuers with
// limits, approve additional issuance limits, authorize issuing of digital banknotes, and replace digital banknotes in
// circulation.
type AuthorityServer interface {
	// Sets the issuance limit for an Issuer to a specified value and returns the new limit.
	SetIssuerLimit(context.Context, *SetIssuerLimitRequest) (*SetIssuerLimitResponse, error)
	// Gets the the issuance limits for all the currencies for which the Issuer is allowed to issue digital banknotes.
	GetIssuerLimits(context.Context, *GetIssuerLimitsRequest) (*GetIssuerLimitsResponse, error)
	// Gets the verifier of the Emissary for this Authority.
	GetNetworkInfo(context.Context, *GetNetworkInfoRequest) (*GetNetworkInfoResponse, error)
	// Gets the signature of the Notary for this Authority/Notary.
	GetNotary(context.Context, *GetNotaryRequest) (*GetNotaryResponse, error)
	// List the Governed Assets for this Authority.
	ListGovernedAssets(context.Context, *ListGovernedAssetsRequest) (*ListGovernedAssetsResponse, error)
	// Set the Governed Assets for this Authority. This method is destructive
	SetGovernedAssets(context.Context, *SetGovernedAssetsRequest) (*SetGovernedAssetsResponse, error)
	// Insert a new asset type to Authority
	AddAsset(context.Context, *AddAssetRequest) (*AddAssetResponse, error)
	// Remove an asset type from Authority
	RemoveAsset(context.Context, *RemoveAssetRequest) (*RemoveAssetResponse, error)
	mustEmbedUnimplementedAuthorityServer()
}

// UnimplementedAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServer struct {
}

func (UnimplementedAuthorityServer) SetIssuerLimit(context.Context, *SetIssuerLimitRequest) (*SetIssuerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIssuerLimit not implemented")
}
func (UnimplementedAuthorityServer) GetIssuerLimits(context.Context, *GetIssuerLimitsRequest) (*GetIssuerLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuerLimits not implemented")
}
func (UnimplementedAuthorityServer) GetNetworkInfo(context.Context, *GetNetworkInfoRequest) (*GetNetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInfo not implemented")
}
func (UnimplementedAuthorityServer) GetNotary(context.Context, *GetNotaryRequest) (*GetNotaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotary not implemented")
}
func (UnimplementedAuthorityServer) ListGovernedAssets(context.Context, *ListGovernedAssetsRequest) (*ListGovernedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGovernedAssets not implemented")
}
func (UnimplementedAuthorityServer) SetGovernedAssets(context.Context, *SetGovernedAssetsRequest) (*SetGovernedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGovernedAssets not implemented")
}
func (UnimplementedAuthorityServer) AddAsset(context.Context, *AddAssetRequest) (*AddAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedAuthorityServer) RemoveAsset(context.Context, *RemoveAssetRequest) (*RemoveAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAsset not implemented")
}
func (UnimplementedAuthorityServer) mustEmbedUnimplementedAuthorityServer() {}

// UnsafeAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServer will
// result in compilation errors.
type UnsafeAuthorityServer interface {
	mustEmbedUnimplementedAuthorityServer()
}

func RegisterAuthorityServer(s grpc.ServiceRegistrar, srv AuthorityServer) {
	s.RegisterService(&Authority_ServiceDesc, srv)
}

func _Authority_SetIssuerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIssuerLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).SetIssuerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_SetIssuerLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).SetIssuerLimit(ctx, req.(*SetIssuerLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_GetIssuerLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).GetIssuerLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_GetIssuerLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).GetIssuerLimits(ctx, req.(*GetIssuerLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_GetNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).GetNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_GetNetworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).GetNetworkInfo(ctx, req.(*GetNetworkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_GetNotary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).GetNotary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_GetNotary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).GetNotary(ctx, req.(*GetNotaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_ListGovernedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGovernedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).ListGovernedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_ListGovernedAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).ListGovernedAssets(ctx, req.(*ListGovernedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_SetGovernedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGovernedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).SetGovernedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_SetGovernedAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).SetGovernedAssets(ctx, req.(*SetGovernedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_AddAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).AddAsset(ctx, req.(*AddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_RemoveAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).RemoveAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_RemoveAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).RemoveAsset(ctx, req.(*RemoveAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authority_ServiceDesc is the grpc.ServiceDesc for Authority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authority_api.v1.Authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIssuerLimit",
			Handler:    _Authority_SetIssuerLimit_Handler,
		},
		{
			MethodName: "GetIssuerLimits",
			Handler:    _Authority_GetIssuerLimits_Handler,
		},
		{
			MethodName: "GetNetworkInfo",
			Handler:    _Authority_GetNetworkInfo_Handler,
		},
		{
			MethodName: "GetNotary",
			Handler:    _Authority_GetNotary_Handler,
		},
		{
			MethodName: "ListGovernedAssets",
			Handler:    _Authority_ListGovernedAssets_Handler,
		},
		{
			MethodName: "SetGovernedAssets",
			Handler:    _Authority_SetGovernedAssets_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _Authority_AddAsset_Handler,
		},
		{
			MethodName: "RemoveAsset",
			Handler:    _Authority_RemoveAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authority_api/v1/authority.proto",
}
