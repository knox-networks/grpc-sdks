// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: vc_api/v1/vc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CredentialAdapterService_CreateIssuanceChallenge_FullMethodName          = "/vc_api.v1.CredentialAdapterService/CreateIssuanceChallenge"
	CredentialAdapterService_IssueVerifiableCredential_FullMethodName        = "/vc_api.v1.CredentialAdapterService/IssueVerifiableCredential"
	CredentialAdapterService_CreatePresentationChallenge_FullMethodName      = "/vc_api.v1.CredentialAdapterService/CreatePresentationChallenge"
	CredentialAdapterService_PresentVerifiableCredential_FullMethodName      = "/vc_api.v1.CredentialAdapterService/PresentVerifiableCredential"
	CredentialAdapterService_WaitForCompletion_FullMethodName                = "/vc_api.v1.CredentialAdapterService/WaitForCompletion"
	CredentialAdapterService_UpdateVerifiableCredentialStatus_FullMethodName = "/vc_api.v1.CredentialAdapterService/UpdateVerifiableCredentialStatus"
)

// CredentialAdapterServiceClient is the client API for CredentialAdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Enables existing systems to support W3C Verifiable Credential (VC) interactions between holders, VC issuers and verifiers as per https://www.w3.org/TR/vc-data-model/.  It is either used by credential providers (VC Issuer) or verifiers as required.  It provides predefined interfaces to expose (Example Bank customer info APIs) but allows for custom integrations as required.
type CredentialAdapterServiceClient interface {
	// Service run by the VC Issuer. Called by the holder to initiate the challenge needed for credential issuance.
	CreateIssuanceChallenge(ctx context.Context, in *CreateIssuanceChallengeRequest, opts ...grpc.CallOption) (*CreateIssuanceChallengeResponse, error)
	// Service run by the VC Issuer. Called by the holder to answer the challenge and receive the credential.
	IssueVerifiableCredential(ctx context.Context, in *IssueVerifiableCredentialRequest, opts ...grpc.CallOption) (*IssueVerifiableCredentialResponse, error)
	// Service run by the VC Verifier. Called by the holder to initiate the challenge needed to have the presentation verified.
	CreatePresentationChallenge(ctx context.Context, in *CreatePresentationChallengeRequest, opts ...grpc.CallOption) (*CreatePresentationChallengeResponse, error)
	// Service run by the VC Verifier. Called by the holder to have the presentation verified.
	PresentVerifiableCredential(ctx context.Context, in *PresentVerifiableCredentialRequest, opts ...grpc.CallOption) (*PresentVerifiableCredentialResponse, error)
	// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
	WaitForCompletion(ctx context.Context, in *WaitForCompletionRequest, opts ...grpc.CallOption) (CredentialAdapterService_WaitForCompletionClient, error)
	// Called by the VC issuer to revoke / suspend a credential.
	UpdateVerifiableCredentialStatus(ctx context.Context, in *UpdateVerifiableCredentialStatusRequest, opts ...grpc.CallOption) (*UpdateVerifiableCredentialStatusResponse, error)
}

type credentialAdapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialAdapterServiceClient(cc grpc.ClientConnInterface) CredentialAdapterServiceClient {
	return &credentialAdapterServiceClient{cc}
}

func (c *credentialAdapterServiceClient) CreateIssuanceChallenge(ctx context.Context, in *CreateIssuanceChallengeRequest, opts ...grpc.CallOption) (*CreateIssuanceChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIssuanceChallengeResponse)
	err := c.cc.Invoke(ctx, CredentialAdapterService_CreateIssuanceChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterServiceClient) IssueVerifiableCredential(ctx context.Context, in *IssueVerifiableCredentialRequest, opts ...grpc.CallOption) (*IssueVerifiableCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialAdapterService_IssueVerifiableCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterServiceClient) CreatePresentationChallenge(ctx context.Context, in *CreatePresentationChallengeRequest, opts ...grpc.CallOption) (*CreatePresentationChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePresentationChallengeResponse)
	err := c.cc.Invoke(ctx, CredentialAdapterService_CreatePresentationChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterServiceClient) PresentVerifiableCredential(ctx context.Context, in *PresentVerifiableCredentialRequest, opts ...grpc.CallOption) (*PresentVerifiableCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresentVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialAdapterService_PresentVerifiableCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialAdapterServiceClient) WaitForCompletion(ctx context.Context, in *WaitForCompletionRequest, opts ...grpc.CallOption) (CredentialAdapterService_WaitForCompletionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CredentialAdapterService_ServiceDesc.Streams[0], CredentialAdapterService_WaitForCompletion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &credentialAdapterServiceWaitForCompletionClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialAdapterService_WaitForCompletionClient interface {
	Recv() (*WaitForCompletionResponse, error)
	grpc.ClientStream
}

type credentialAdapterServiceWaitForCompletionClient struct {
	grpc.ClientStream
}

func (x *credentialAdapterServiceWaitForCompletionClient) Recv() (*WaitForCompletionResponse, error) {
	m := new(WaitForCompletionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *credentialAdapterServiceClient) UpdateVerifiableCredentialStatus(ctx context.Context, in *UpdateVerifiableCredentialStatusRequest, opts ...grpc.CallOption) (*UpdateVerifiableCredentialStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVerifiableCredentialStatusResponse)
	err := c.cc.Invoke(ctx, CredentialAdapterService_UpdateVerifiableCredentialStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialAdapterServiceServer is the server API for CredentialAdapterService service.
// All implementations must embed UnimplementedCredentialAdapterServiceServer
// for forward compatibility
//
// Enables existing systems to support W3C Verifiable Credential (VC) interactions between holders, VC issuers and verifiers as per https://www.w3.org/TR/vc-data-model/.  It is either used by credential providers (VC Issuer) or verifiers as required.  It provides predefined interfaces to expose (Example Bank customer info APIs) but allows for custom integrations as required.
type CredentialAdapterServiceServer interface {
	// Service run by the VC Issuer. Called by the holder to initiate the challenge needed for credential issuance.
	CreateIssuanceChallenge(context.Context, *CreateIssuanceChallengeRequest) (*CreateIssuanceChallengeResponse, error)
	// Service run by the VC Issuer. Called by the holder to answer the challenge and receive the credential.
	IssueVerifiableCredential(context.Context, *IssueVerifiableCredentialRequest) (*IssueVerifiableCredentialResponse, error)
	// Service run by the VC Verifier. Called by the holder to initiate the challenge needed to have the presentation verified.
	CreatePresentationChallenge(context.Context, *CreatePresentationChallengeRequest) (*CreatePresentationChallengeResponse, error)
	// Service run by the VC Verifier. Called by the holder to have the presentation verified.
	PresentVerifiableCredential(context.Context, *PresentVerifiableCredentialRequest) (*PresentVerifiableCredentialResponse, error)
	// Called by the browser to initialize a stream with the server to listen for events such as challenge completion.
	WaitForCompletion(*WaitForCompletionRequest, CredentialAdapterService_WaitForCompletionServer) error
	// Called by the VC issuer to revoke / suspend a credential.
	UpdateVerifiableCredentialStatus(context.Context, *UpdateVerifiableCredentialStatusRequest) (*UpdateVerifiableCredentialStatusResponse, error)
	mustEmbedUnimplementedCredentialAdapterServiceServer()
}

// UnimplementedCredentialAdapterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialAdapterServiceServer struct {
}

func (UnimplementedCredentialAdapterServiceServer) CreateIssuanceChallenge(context.Context, *CreateIssuanceChallengeRequest) (*CreateIssuanceChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuanceChallenge not implemented")
}
func (UnimplementedCredentialAdapterServiceServer) IssueVerifiableCredential(context.Context, *IssueVerifiableCredentialRequest) (*IssueVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueVerifiableCredential not implemented")
}
func (UnimplementedCredentialAdapterServiceServer) CreatePresentationChallenge(context.Context, *CreatePresentationChallengeRequest) (*CreatePresentationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePresentationChallenge not implemented")
}
func (UnimplementedCredentialAdapterServiceServer) PresentVerifiableCredential(context.Context, *PresentVerifiableCredentialRequest) (*PresentVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentVerifiableCredential not implemented")
}
func (UnimplementedCredentialAdapterServiceServer) WaitForCompletion(*WaitForCompletionRequest, CredentialAdapterService_WaitForCompletionServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForCompletion not implemented")
}
func (UnimplementedCredentialAdapterServiceServer) UpdateVerifiableCredentialStatus(context.Context, *UpdateVerifiableCredentialStatusRequest) (*UpdateVerifiableCredentialStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifiableCredentialStatus not implemented")
}
func (UnimplementedCredentialAdapterServiceServer) mustEmbedUnimplementedCredentialAdapterServiceServer() {
}

// UnsafeCredentialAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialAdapterServiceServer will
// result in compilation errors.
type UnsafeCredentialAdapterServiceServer interface {
	mustEmbedUnimplementedCredentialAdapterServiceServer()
}

func RegisterCredentialAdapterServiceServer(s grpc.ServiceRegistrar, srv CredentialAdapterServiceServer) {
	s.RegisterService(&CredentialAdapterService_ServiceDesc, srv)
}

func _CredentialAdapterService_CreateIssuanceChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuanceChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServiceServer).CreateIssuanceChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialAdapterService_CreateIssuanceChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServiceServer).CreateIssuanceChallenge(ctx, req.(*CreateIssuanceChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapterService_IssueVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServiceServer).IssueVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialAdapterService_IssueVerifiableCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServiceServer).IssueVerifiableCredential(ctx, req.(*IssueVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapterService_CreatePresentationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePresentationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServiceServer).CreatePresentationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialAdapterService_CreatePresentationChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServiceServer).CreatePresentationChallenge(ctx, req.(*CreatePresentationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapterService_PresentVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServiceServer).PresentVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialAdapterService_PresentVerifiableCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServiceServer).PresentVerifiableCredential(ctx, req.(*PresentVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialAdapterService_WaitForCompletion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitForCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialAdapterServiceServer).WaitForCompletion(m, &credentialAdapterServiceWaitForCompletionServer{ServerStream: stream})
}

type CredentialAdapterService_WaitForCompletionServer interface {
	Send(*WaitForCompletionResponse) error
	grpc.ServerStream
}

type credentialAdapterServiceWaitForCompletionServer struct {
	grpc.ServerStream
}

func (x *credentialAdapterServiceWaitForCompletionServer) Send(m *WaitForCompletionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CredentialAdapterService_UpdateVerifiableCredentialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerifiableCredentialStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialAdapterServiceServer).UpdateVerifiableCredentialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialAdapterService_UpdateVerifiableCredentialStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialAdapterServiceServer).UpdateVerifiableCredentialStatus(ctx, req.(*UpdateVerifiableCredentialStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialAdapterService_ServiceDesc is the grpc.ServiceDesc for CredentialAdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialAdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vc_api.v1.CredentialAdapterService",
	HandlerType: (*CredentialAdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssuanceChallenge",
			Handler:    _CredentialAdapterService_CreateIssuanceChallenge_Handler,
		},
		{
			MethodName: "IssueVerifiableCredential",
			Handler:    _CredentialAdapterService_IssueVerifiableCredential_Handler,
		},
		{
			MethodName: "CreatePresentationChallenge",
			Handler:    _CredentialAdapterService_CreatePresentationChallenge_Handler,
		},
		{
			MethodName: "PresentVerifiableCredential",
			Handler:    _CredentialAdapterService_PresentVerifiableCredential_Handler,
		},
		{
			MethodName: "UpdateVerifiableCredentialStatus",
			Handler:    _CredentialAdapterService_UpdateVerifiableCredentialStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForCompletion",
			Handler:       _CredentialAdapterService_WaitForCompletion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vc_api/v1/vc.proto",
}
