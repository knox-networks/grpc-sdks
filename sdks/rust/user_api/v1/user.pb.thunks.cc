#include "user_api/v1/user.proto.h"
#include "google/protobuf/rust/cpp_kernel/cpp_api.h"
// user_api.v1.User
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_User_new() { return new ::user_api::v1::User(); }
void __rust_proto_thunk__user_api_v1_User_delete(void* ptr) { delete static_cast<::user_api::v1::User*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_User_serialize(::user_api::v1::User* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_User_parse(::user_api::v1::User* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_User_copy_from(::user_api::v1::User* dst, const ::user_api::v1::User* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_User_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::User>* field) {
  return field->size();
}
const ::user_api::v1::User& __rust_proto_thunk__user_api_v1_User_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::User>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::User* __rust_proto_thunk__user_api_v1_User_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::User>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::User* __rust_proto_thunk__user_api_v1_User_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::User>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_User_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::User>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_User_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::User>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::User>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_uuid(::user_api::v1::User* msg) {
  absl::string_view val = msg->uuid();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_uuid(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uuid(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_first_name(::user_api::v1::User* msg) {
  absl::string_view val = msg->first_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_first_name(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_first_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_last_name(::user_api::v1::User* msg) {
  absl::string_view val = msg->last_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_last_name(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_last_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_email(::user_api::v1::User* msg) {
  absl::string_view val = msg->email();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_email(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_email(absl::string_view(s.ptr, s.len));
}

::user_api::v1::Role __rust_proto_thunk__user_api_v1_User_get_role(::user_api::v1::User* msg) { return msg->role(); }
void __rust_proto_thunk__user_api_v1_User_set_role(::user_api::v1::User* msg, ::user_api::v1::Role val) {
  msg->set_role(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_avatar(::user_api::v1::User* msg) {
  absl::string_view val = msg->avatar();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_avatar(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_avatar(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_phone(::user_api::v1::User* msg) {
  absl::string_view val = msg->phone();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_phone(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_phone(absl::string_view(s.ptr, s.len));
}

void __rust_proto_thunk__user_api_v1_User_clear_dids(::user_api::v1::User* msg) {
  msg->clear_dids();
}
google::protobuf::RepeatedPtrField<std::string>* __rust_proto_thunk__user_api_v1_User_get_mut_dids(::user_api::v1::User* msg) {
  return msg->mutable_dids();
}
const google::protobuf::RepeatedPtrField<std::string>* __rust_proto_thunk__user_api_v1_User_get_dids(
    const ::user_api::v1::User* msg) {
  return &msg->dids();
}

const void* __rust_proto_thunk__user_api_v1_User_get_external_ids(const ::user_api::v1::User* msg) {
  return &msg->external_ids();
}
void* __rust_proto_thunk__user_api_v1_User_get_mut_external_ids(::user_api::v1::User* msg) { return msg->mutable_external_ids(); }

const void* __rust_proto_thunk__user_api_v1_User_get_metadata(::user_api::v1::User* msg) {
  return static_cast<const void*>(&msg->metadata());
}
void* __rust_proto_thunk__user_api_v1_User_get_mut_metadata(::user_api::v1::User* msg) {
  return static_cast<void*>(msg->mutable_metadata());
}
void __rust_proto_thunk__user_api_v1_User_clear_metadata(::user_api::v1::User* msg) { msg->clear_metadata(); }
bool __rust_proto_thunk__user_api_v1_User_has_metadata(::user_api::v1::User* msg) { return msg->has_metadata(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_User_get_account(::user_api::v1::User* msg) {
  absl::string_view val = msg->account();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_User_set_account(::user_api::v1::User* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_account(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::User>* __rust_proto_thunk__Map_i32_user_api_v1_User_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::User>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_User_free(const google::protobuf::Map<int32_t, ::user_api::v1::User>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_User_clear(google::protobuf::Map<int32_t, ::user_api::v1::User> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_User_size(const google::protobuf::Map<int32_t, ::user_api::v1::User>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_User_insert(google::protobuf::Map<int32_t, ::user_api::v1::User> * m,
                          int32_t key, ::user_api::v1::User value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_User_get(const google::protobuf::Map<int32_t, ::user_api::v1::User>* m,
                       int32_t key, const ::user_api::v1::User** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::User* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_User_remove(google::protobuf::Map<int32_t, ::user_api::v1::User> * m,
                          int32_t key, ::user_api::v1::User * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_User_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::User>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_User_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::User** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::User>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::User>* __rust_proto_thunk__Map_u32_user_api_v1_User_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::User>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_User_free(const google::protobuf::Map<uint32_t, ::user_api::v1::User>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_User_clear(google::protobuf::Map<uint32_t, ::user_api::v1::User> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_User_size(const google::protobuf::Map<uint32_t, ::user_api::v1::User>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_User_insert(google::protobuf::Map<uint32_t, ::user_api::v1::User> * m,
                          uint32_t key, ::user_api::v1::User value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_User_get(const google::protobuf::Map<uint32_t, ::user_api::v1::User>* m,
                       uint32_t key, const ::user_api::v1::User** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::User* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_User_remove(google::protobuf::Map<uint32_t, ::user_api::v1::User> * m,
                          uint32_t key, ::user_api::v1::User * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_User_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::User>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_User_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::User** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::User>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::User>* __rust_proto_thunk__Map_i64_user_api_v1_User_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::User>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_User_free(const google::protobuf::Map<int64_t, ::user_api::v1::User>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_User_clear(google::protobuf::Map<int64_t, ::user_api::v1::User> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_User_size(const google::protobuf::Map<int64_t, ::user_api::v1::User>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_User_insert(google::protobuf::Map<int64_t, ::user_api::v1::User> * m,
                          int64_t key, ::user_api::v1::User value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_User_get(const google::protobuf::Map<int64_t, ::user_api::v1::User>* m,
                       int64_t key, const ::user_api::v1::User** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::User* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_User_remove(google::protobuf::Map<int64_t, ::user_api::v1::User> * m,
                          int64_t key, ::user_api::v1::User * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_User_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::User>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_User_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::User** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::User>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::User>* __rust_proto_thunk__Map_u64_user_api_v1_User_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::User>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_User_free(const google::protobuf::Map<uint64_t, ::user_api::v1::User>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_User_clear(google::protobuf::Map<uint64_t, ::user_api::v1::User> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_User_size(const google::protobuf::Map<uint64_t, ::user_api::v1::User>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_User_insert(google::protobuf::Map<uint64_t, ::user_api::v1::User> * m,
                          uint64_t key, ::user_api::v1::User value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_User_get(const google::protobuf::Map<uint64_t, ::user_api::v1::User>* m,
                       uint64_t key, const ::user_api::v1::User** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::User* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_User_remove(google::protobuf::Map<uint64_t, ::user_api::v1::User> * m,
                          uint64_t key, ::user_api::v1::User * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_User_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::User>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_User_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::User** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::User>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::User>* __rust_proto_thunk__Map_bool_user_api_v1_User_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::User>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_User_free(const google::protobuf::Map<bool, ::user_api::v1::User>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_User_clear(google::protobuf::Map<bool, ::user_api::v1::User> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_User_size(const google::protobuf::Map<bool, ::user_api::v1::User>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_User_insert(google::protobuf::Map<bool, ::user_api::v1::User> * m,
                          bool key, ::user_api::v1::User value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_User_get(const google::protobuf::Map<bool, ::user_api::v1::User>* m,
                       bool key, const ::user_api::v1::User** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::User* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_User_remove(google::protobuf::Map<bool, ::user_api::v1::User> * m,
                          bool key, ::user_api::v1::User * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_User_iter(
      const google::protobuf::Map<bool, ::user_api::v1::User>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_User_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::User** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::User>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::User>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::User>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_free(const google::protobuf::Map<std::string, ::user_api::v1::User>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_clear(google::protobuf::Map<std::string, ::user_api::v1::User> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_size(const google::protobuf::Map<std::string, ::user_api::v1::User>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_insert(google::protobuf::Map<std::string, ::user_api::v1::User> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::User value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_get(const google::protobuf::Map<std::string, ::user_api::v1::User>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::User** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::User* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_remove(google::protobuf::Map<std::string, ::user_api::v1::User> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::User * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::User>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_User_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::User** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::User>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.RegisterUserRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_RegisterUserRequest_new() { return new ::user_api::v1::RegisterUserRequest(); }
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_delete(void* ptr) { delete static_cast<::user_api::v1::RegisterUserRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_RegisterUserRequest_serialize(::user_api::v1::RegisterUserRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_RegisterUserRequest_parse(::user_api::v1::RegisterUserRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_RegisterUserRequest_copy_from(::user_api::v1::RegisterUserRequest* dst, const ::user_api::v1::RegisterUserRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_RegisterUserRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>* field) {
  return field->size();
}
const ::user_api::v1::RegisterUserRequest& __rust_proto_thunk__user_api_v1_RegisterUserRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::RegisterUserRequest* __rust_proto_thunk__user_api_v1_RegisterUserRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::RegisterUserRequest* __rust_proto_thunk__user_api_v1_RegisterUserRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_email(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->email();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_email(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_email(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_first_name(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->first_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_first_name(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_first_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_last_name(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->last_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_last_name(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_last_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_password(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->password();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_password(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_password(absl::string_view(s.ptr, s.len));
}

::user_api::v1::Role __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_role(::user_api::v1::RegisterUserRequest* msg) { return msg->role(); }
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_role(::user_api::v1::RegisterUserRequest* msg, ::user_api::v1::Role val) {
  msg->set_role(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_avatar(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->avatar();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_avatar(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_avatar(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_phone(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->phone();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_phone(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_phone(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterUserRequest_get_account(::user_api::v1::RegisterUserRequest* msg) {
  absl::string_view val = msg->account();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterUserRequest_set_account(::user_api::v1::RegisterUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_account(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>* __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest> * m,
                          int32_t key, ::user_api::v1::RegisterUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>* m,
                       int32_t key, const ::user_api::v1::RegisterUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest> * m,
                          int32_t key, ::user_api::v1::RegisterUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::RegisterUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>* __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest> * m,
                          uint32_t key, ::user_api::v1::RegisterUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>* m,
                       uint32_t key, const ::user_api::v1::RegisterUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest> * m,
                          uint32_t key, ::user_api::v1::RegisterUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::RegisterUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>* __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest> * m,
                          int64_t key, ::user_api::v1::RegisterUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>* m,
                       int64_t key, const ::user_api::v1::RegisterUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest> * m,
                          int64_t key, ::user_api::v1::RegisterUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::RegisterUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>* __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest> * m,
                          uint64_t key, ::user_api::v1::RegisterUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>* m,
                       uint64_t key, const ::user_api::v1::RegisterUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest> * m,
                          uint64_t key, ::user_api::v1::RegisterUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::RegisterUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>* __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_free(const google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_clear(google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_size(const google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_insert(google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest> * m,
                          bool key, ::user_api::v1::RegisterUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_get(const google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>* m,
                       bool key, const ::user_api::v1::RegisterUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_remove(google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest> * m,
                          bool key, ::user_api::v1::RegisterUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::RegisterUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::RegisterUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterUserRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::RegisterUserRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterUserRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::RegisterUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::RegisterUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthToken
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthToken_new() { return new ::user_api::v1::AuthToken(); }
void __rust_proto_thunk__user_api_v1_AuthToken_delete(void* ptr) { delete static_cast<::user_api::v1::AuthToken*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthToken_serialize(::user_api::v1::AuthToken* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthToken_parse(::user_api::v1::AuthToken* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthToken_copy_from(::user_api::v1::AuthToken* dst, const ::user_api::v1::AuthToken* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthToken_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>* field) {
  return field->size();
}
const ::user_api::v1::AuthToken& __rust_proto_thunk__user_api_v1_AuthToken_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthToken* __rust_proto_thunk__user_api_v1_AuthToken_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthToken* __rust_proto_thunk__user_api_v1_AuthToken_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthToken_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthToken_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthToken>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthToken_get_token(::user_api::v1::AuthToken* msg) {
  absl::string_view val = msg->token();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthToken_set_token(::user_api::v1::AuthToken* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_token(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthToken_get_token_type(::user_api::v1::AuthToken* msg) {
  absl::string_view val = msg->token_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthToken_set_token_type(::user_api::v1::AuthToken* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_token_type(absl::string_view(s.ptr, s.len));
}

::int32_t __rust_proto_thunk__user_api_v1_AuthToken_get_expires_in(::user_api::v1::AuthToken* msg) { return msg->expires_in(); }
void __rust_proto_thunk__user_api_v1_AuthToken_set_expires_in(::user_api::v1::AuthToken* msg, ::int32_t val) {
  msg->set_expires_in(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthToken_get_refresh_token(::user_api::v1::AuthToken* msg) {
  absl::string_view val = msg->refresh_token();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthToken_set_refresh_token(::user_api::v1::AuthToken* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_refresh_token(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>* __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthToken> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthToken> * m,
                          int32_t key, ::user_api::v1::AuthToken value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>* m,
                       int32_t key, const ::user_api::v1::AuthToken** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthToken* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthToken> * m,
                          int32_t key, ::user_api::v1::AuthToken * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthToken_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthToken** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthToken>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>* __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken> * m,
                          uint32_t key, ::user_api::v1::AuthToken value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>* m,
                       uint32_t key, const ::user_api::v1::AuthToken** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthToken* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken> * m,
                          uint32_t key, ::user_api::v1::AuthToken * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthToken_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthToken** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthToken>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>* __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthToken> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthToken> * m,
                          int64_t key, ::user_api::v1::AuthToken value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>* m,
                       int64_t key, const ::user_api::v1::AuthToken** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthToken* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthToken> * m,
                          int64_t key, ::user_api::v1::AuthToken * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthToken_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthToken** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthToken>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>* __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken> * m,
                          uint64_t key, ::user_api::v1::AuthToken value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>* m,
                       uint64_t key, const ::user_api::v1::AuthToken** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthToken* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken> * m,
                          uint64_t key, ::user_api::v1::AuthToken * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthToken_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthToken** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthToken>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthToken>* __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthToken>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_free(const google::protobuf::Map<bool, ::user_api::v1::AuthToken>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_clear(google::protobuf::Map<bool, ::user_api::v1::AuthToken> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_size(const google::protobuf::Map<bool, ::user_api::v1::AuthToken>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_insert(google::protobuf::Map<bool, ::user_api::v1::AuthToken> * m,
                          bool key, ::user_api::v1::AuthToken value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_get(const google::protobuf::Map<bool, ::user_api::v1::AuthToken>* m,
                       bool key, const ::user_api::v1::AuthToken** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthToken* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_remove(google::protobuf::Map<bool, ::user_api::v1::AuthToken> * m,
                          bool key, ::user_api::v1::AuthToken * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthToken>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthToken_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthToken** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthToken>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthToken>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthToken>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthToken>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthToken> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthToken>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthToken> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthToken value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthToken>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthToken** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthToken* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthToken> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthToken * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthToken>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthToken_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthToken** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthToken>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.RegisterUserResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_RegisterUserResponse_new() { return new ::user_api::v1::RegisterUserResponse(); }
void __rust_proto_thunk__user_api_v1_RegisterUserResponse_delete(void* ptr) { delete static_cast<::user_api::v1::RegisterUserResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_RegisterUserResponse_serialize(::user_api::v1::RegisterUserResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_RegisterUserResponse_parse(::user_api::v1::RegisterUserResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_RegisterUserResponse_copy_from(::user_api::v1::RegisterUserResponse* dst, const ::user_api::v1::RegisterUserResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_RegisterUserResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>* field) {
  return field->size();
}
const ::user_api::v1::RegisterUserResponse& __rust_proto_thunk__user_api_v1_RegisterUserResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::RegisterUserResponse* __rust_proto_thunk__user_api_v1_RegisterUserResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::RegisterUserResponse* __rust_proto_thunk__user_api_v1_RegisterUserResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_RegisterUserResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_RegisterUserResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::RegisterUserResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_RegisterUserResponse_get_user(::user_api::v1::RegisterUserResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_RegisterUserResponse_get_mut_user(::user_api::v1::RegisterUserResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_RegisterUserResponse_clear_user(::user_api::v1::RegisterUserResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_RegisterUserResponse_has_user(::user_api::v1::RegisterUserResponse* msg) { return msg->has_user(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>* __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse> * m,
                          int32_t key, ::user_api::v1::RegisterUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>* m,
                       int32_t key, const ::user_api::v1::RegisterUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse> * m,
                          int32_t key, ::user_api::v1::RegisterUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::RegisterUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::RegisterUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>* __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse> * m,
                          uint32_t key, ::user_api::v1::RegisterUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>* m,
                       uint32_t key, const ::user_api::v1::RegisterUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse> * m,
                          uint32_t key, ::user_api::v1::RegisterUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::RegisterUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::RegisterUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>* __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse> * m,
                          int64_t key, ::user_api::v1::RegisterUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>* m,
                       int64_t key, const ::user_api::v1::RegisterUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse> * m,
                          int64_t key, ::user_api::v1::RegisterUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::RegisterUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::RegisterUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>* __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse> * m,
                          uint64_t key, ::user_api::v1::RegisterUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>* m,
                       uint64_t key, const ::user_api::v1::RegisterUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse> * m,
                          uint64_t key, ::user_api::v1::RegisterUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::RegisterUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::RegisterUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>* __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_free(const google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_clear(google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_size(const google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_insert(google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse> * m,
                          bool key, ::user_api::v1::RegisterUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_get(const google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>* m,
                       bool key, const ::user_api::v1::RegisterUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_remove(google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse> * m,
                          bool key, ::user_api::v1::RegisterUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::RegisterUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::RegisterUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterUserResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::RegisterUserResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterUserResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::RegisterUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::RegisterUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.ConfirmUserRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_ConfirmUserRequest_new() { return new ::user_api::v1::ConfirmUserRequest(); }
void __rust_proto_thunk__user_api_v1_ConfirmUserRequest_delete(void* ptr) { delete static_cast<::user_api::v1::ConfirmUserRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_ConfirmUserRequest_serialize(::user_api::v1::ConfirmUserRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_ConfirmUserRequest_parse(::user_api::v1::ConfirmUserRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_ConfirmUserRequest_copy_from(::user_api::v1::ConfirmUserRequest* dst, const ::user_api::v1::ConfirmUserRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_ConfirmUserRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>* field) {
  return field->size();
}
const ::user_api::v1::ConfirmUserRequest& __rust_proto_thunk__user_api_v1_ConfirmUserRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::ConfirmUserRequest* __rust_proto_thunk__user_api_v1_ConfirmUserRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::ConfirmUserRequest* __rust_proto_thunk__user_api_v1_ConfirmUserRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_ConfirmUserRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_ConfirmUserRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_ConfirmUserRequest_get_email_or_phone(::user_api::v1::ConfirmUserRequest* msg) {
  absl::string_view val = msg->email_or_phone();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_ConfirmUserRequest_set_email_or_phone(::user_api::v1::ConfirmUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_email_or_phone(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_ConfirmUserRequest_get_token(::user_api::v1::ConfirmUserRequest* msg) {
  absl::string_view val = msg->token();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_ConfirmUserRequest_set_token(::user_api::v1::ConfirmUserRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_token(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>* __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest> * m,
                          int32_t key, ::user_api::v1::ConfirmUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>* m,
                       int32_t key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest> * m,
                          int32_t key, ::user_api::v1::ConfirmUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>* __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest> * m,
                          uint32_t key, ::user_api::v1::ConfirmUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>* m,
                       uint32_t key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest> * m,
                          uint32_t key, ::user_api::v1::ConfirmUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>* __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest> * m,
                          int64_t key, ::user_api::v1::ConfirmUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>* m,
                       int64_t key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest> * m,
                          int64_t key, ::user_api::v1::ConfirmUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>* __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest> * m,
                          uint64_t key, ::user_api::v1::ConfirmUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>* m,
                       uint64_t key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest> * m,
                          uint64_t key, ::user_api::v1::ConfirmUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>* __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_free(const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_clear(google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_size(const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_insert(google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest> * m,
                          bool key, ::user_api::v1::ConfirmUserRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_get(const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>* m,
                       bool key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_remove(google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest> * m,
                          bool key, ::user_api::v1::ConfirmUserRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::ConfirmUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ConfirmUserRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ConfirmUserRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::ConfirmUserRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.ConfirmUserResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_ConfirmUserResponse_new() { return new ::user_api::v1::ConfirmUserResponse(); }
void __rust_proto_thunk__user_api_v1_ConfirmUserResponse_delete(void* ptr) { delete static_cast<::user_api::v1::ConfirmUserResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_ConfirmUserResponse_serialize(::user_api::v1::ConfirmUserResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_ConfirmUserResponse_parse(::user_api::v1::ConfirmUserResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_ConfirmUserResponse_copy_from(::user_api::v1::ConfirmUserResponse* dst, const ::user_api::v1::ConfirmUserResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_ConfirmUserResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>* field) {
  return field->size();
}
const ::user_api::v1::ConfirmUserResponse& __rust_proto_thunk__user_api_v1_ConfirmUserResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::ConfirmUserResponse* __rust_proto_thunk__user_api_v1_ConfirmUserResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::ConfirmUserResponse* __rust_proto_thunk__user_api_v1_ConfirmUserResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_ConfirmUserResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_ConfirmUserResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::ConfirmUserResponse>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>* __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse> * m,
                          int32_t key, ::user_api::v1::ConfirmUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>* m,
                       int32_t key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse> * m,
                          int32_t key, ::user_api::v1::ConfirmUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ConfirmUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::ConfirmUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>* __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse> * m,
                          uint32_t key, ::user_api::v1::ConfirmUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>* m,
                       uint32_t key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse> * m,
                          uint32_t key, ::user_api::v1::ConfirmUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ConfirmUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::ConfirmUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>* __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse> * m,
                          int64_t key, ::user_api::v1::ConfirmUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>* m,
                       int64_t key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse> * m,
                          int64_t key, ::user_api::v1::ConfirmUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ConfirmUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::ConfirmUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>* __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse> * m,
                          uint64_t key, ::user_api::v1::ConfirmUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>* m,
                       uint64_t key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse> * m,
                          uint64_t key, ::user_api::v1::ConfirmUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ConfirmUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::ConfirmUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>* __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_free(const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_clear(google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_size(const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_insert(google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse> * m,
                          bool key, ::user_api::v1::ConfirmUserResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_get(const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>* m,
                       bool key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_remove(google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse> * m,
                          bool key, ::user_api::v1::ConfirmUserResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ConfirmUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::ConfirmUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ConfirmUserResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ConfirmUserResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ConfirmUserResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ConfirmUserResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::ConfirmUserResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::ConfirmUserResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnWithProviderRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_new() { return new ::user_api::v1::AuthnWithProviderRequest(); }
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnWithProviderRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_serialize(::user_api::v1::AuthnWithProviderRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_parse(::user_api::v1::AuthnWithProviderRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_copy_from(::user_api::v1::AuthnWithProviderRequest* dst, const ::user_api::v1::AuthnWithProviderRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>* field) {
  return field->size();
}
const ::user_api::v1::AuthnWithProviderRequest& __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnWithProviderRequest* __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnWithProviderRequest* __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderRequest>& src) {
  dst = src;
}

::user_api::v1::Provider __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_get_provider(::user_api::v1::AuthnWithProviderRequest* msg) { return msg->provider(); }
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_set_provider(::user_api::v1::AuthnWithProviderRequest* msg, ::user_api::v1::Provider val) {
  msg->set_provider(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_get_instance_name(::user_api::v1::AuthnWithProviderRequest* msg) {
  absl::string_view val = msg->instance_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_set_instance_name(::user_api::v1::AuthnWithProviderRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_instance_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_get_request_origin(::user_api::v1::AuthnWithProviderRequest* msg) {
  absl::string_view val = msg->request_origin();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_set_request_origin(::user_api::v1::AuthnWithProviderRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_request_origin(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_get_client_state(::user_api::v1::AuthnWithProviderRequest* msg) {
  return static_cast<const void*>(&msg->client_state());
}
void* __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_get_mut_client_state(::user_api::v1::AuthnWithProviderRequest* msg) {
  return static_cast<void*>(msg->mutable_client_state());
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_clear_client_state(::user_api::v1::AuthnWithProviderRequest* msg) { msg->clear_client_state(); }
bool __rust_proto_thunk__user_api_v1_AuthnWithProviderRequest_has_client_state(::user_api::v1::AuthnWithProviderRequest* msg) { return msg->has_client_state(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          int32_t key, ::user_api::v1::AuthnWithProviderRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>* m,
                       int32_t key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          int32_t key, ::user_api::v1::AuthnWithProviderRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnWithProviderRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>* m,
                       uint32_t key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnWithProviderRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          int64_t key, ::user_api::v1::AuthnWithProviderRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>* m,
                       int64_t key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          int64_t key, ::user_api::v1::AuthnWithProviderRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnWithProviderRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>* m,
                       uint64_t key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnWithProviderRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest> * m,
                          bool key, ::user_api::v1::AuthnWithProviderRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>* m,
                       bool key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest> * m,
                          bool key, ::user_api::v1::AuthnWithProviderRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithProviderRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithProviderRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnWithProviderRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnWithProviderResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_new() { return new ::user_api::v1::AuthnWithProviderResponse(); }
void __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnWithProviderResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_serialize(::user_api::v1::AuthnWithProviderResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_parse(::user_api::v1::AuthnWithProviderResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_copy_from(::user_api::v1::AuthnWithProviderResponse* dst, const ::user_api::v1::AuthnWithProviderResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>* field) {
  return field->size();
}
const ::user_api::v1::AuthnWithProviderResponse& __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnWithProviderResponse* __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnWithProviderResponse* __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithProviderResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_get_provider_url(::user_api::v1::AuthnWithProviderResponse* msg) {
  absl::string_view val = msg->provider_url();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWithProviderResponse_set_provider_url(::user_api::v1::AuthnWithProviderResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_provider_url(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          int32_t key, ::user_api::v1::AuthnWithProviderResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>* m,
                       int32_t key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          int32_t key, ::user_api::v1::AuthnWithProviderResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithProviderResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithProviderResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnWithProviderResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>* m,
                       uint32_t key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnWithProviderResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithProviderResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithProviderResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          int64_t key, ::user_api::v1::AuthnWithProviderResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>* m,
                       int64_t key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          int64_t key, ::user_api::v1::AuthnWithProviderResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithProviderResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithProviderResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnWithProviderResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>* m,
                       uint64_t key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnWithProviderResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithProviderResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithProviderResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse> * m,
                          bool key, ::user_api::v1::AuthnWithProviderResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>* m,
                       bool key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse> * m,
                          bool key, ::user_api::v1::AuthnWithProviderResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithProviderResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnWithProviderResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithProviderResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithProviderResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithProviderResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithProviderResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnWithProviderResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnWithProviderResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.HandleOIDCCallbackRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_new() { return new ::user_api::v1::HandleOIDCCallbackRequest(); }
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_delete(void* ptr) { delete static_cast<::user_api::v1::HandleOIDCCallbackRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_serialize(::user_api::v1::HandleOIDCCallbackRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_parse(::user_api::v1::HandleOIDCCallbackRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_copy_from(::user_api::v1::HandleOIDCCallbackRequest* dst, const ::user_api::v1::HandleOIDCCallbackRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>* field) {
  return field->size();
}
const ::user_api::v1::HandleOIDCCallbackRequest& __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::HandleOIDCCallbackRequest* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::HandleOIDCCallbackRequest* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_get_code(::user_api::v1::HandleOIDCCallbackRequest* msg) {
  absl::string_view val = msg->code();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_set_code(::user_api::v1::HandleOIDCCallbackRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_code(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_get_state(::user_api::v1::HandleOIDCCallbackRequest* msg) {
  absl::string_view val = msg->state();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackRequest_set_state(::user_api::v1::HandleOIDCCallbackRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_state(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>* __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          int32_t key, ::user_api::v1::HandleOIDCCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m,
                       int32_t key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          int32_t key, ::user_api::v1::HandleOIDCCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>* __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          uint32_t key, ::user_api::v1::HandleOIDCCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m,
                       uint32_t key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          uint32_t key, ::user_api::v1::HandleOIDCCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>* __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          int64_t key, ::user_api::v1::HandleOIDCCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m,
                       int64_t key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          int64_t key, ::user_api::v1::HandleOIDCCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>* __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          uint64_t key, ::user_api::v1::HandleOIDCCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m,
                       uint64_t key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          uint64_t key, ::user_api::v1::HandleOIDCCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>* __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_free(const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_clear(google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_size(const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_insert(google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          bool key, ::user_api::v1::HandleOIDCCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_get(const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>* m,
                       bool key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_remove(google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          bool key, ::user_api::v1::HandleOIDCCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleOIDCCallbackRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleOIDCCallbackRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::HandleOIDCCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.HandleOIDCCallbackResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_new() { return new ::user_api::v1::HandleOIDCCallbackResponse(); }
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_delete(void* ptr) { delete static_cast<::user_api::v1::HandleOIDCCallbackResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_serialize(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_parse(::user_api::v1::HandleOIDCCallbackResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_copy_from(::user_api::v1::HandleOIDCCallbackResponse* dst, const ::user_api::v1::HandleOIDCCallbackResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>* field) {
  return field->size();
}
const ::user_api::v1::HandleOIDCCallbackResponse& __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::HandleOIDCCallbackResponse* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::HandleOIDCCallbackResponse* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::HandleOIDCCallbackResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_user(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_mut_user(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_clear_user(::user_api::v1::HandleOIDCCallbackResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_has_user(::user_api::v1::HandleOIDCCallbackResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_auth_token(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_mut_auth_token(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_clear_auth_token(::user_api::v1::HandleOIDCCallbackResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_has_auth_token(::user_api::v1::HandleOIDCCallbackResponse* msg) { return msg->has_auth_token(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_instance_name(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  absl::string_view val = msg->instance_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_set_instance_name(::user_api::v1::HandleOIDCCallbackResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_instance_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_request_origin(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  absl::string_view val = msg->request_origin();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_set_request_origin(::user_api::v1::HandleOIDCCallbackResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_request_origin(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_client_state(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return static_cast<const void*>(&msg->client_state());
}
void* __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_get_mut_client_state(::user_api::v1::HandleOIDCCallbackResponse* msg) {
  return static_cast<void*>(msg->mutable_client_state());
}
void __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_clear_client_state(::user_api::v1::HandleOIDCCallbackResponse* msg) { msg->clear_client_state(); }
bool __rust_proto_thunk__user_api_v1_HandleOIDCCallbackResponse_has_client_state(::user_api::v1::HandleOIDCCallbackResponse* msg) { return msg->has_client_state(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>* __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          int32_t key, ::user_api::v1::HandleOIDCCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m,
                       int32_t key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          int32_t key, ::user_api::v1::HandleOIDCCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleOIDCCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::HandleOIDCCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>* __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          uint32_t key, ::user_api::v1::HandleOIDCCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m,
                       uint32_t key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          uint32_t key, ::user_api::v1::HandleOIDCCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleOIDCCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::HandleOIDCCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>* __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          int64_t key, ::user_api::v1::HandleOIDCCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m,
                       int64_t key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          int64_t key, ::user_api::v1::HandleOIDCCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleOIDCCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::HandleOIDCCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>* __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          uint64_t key, ::user_api::v1::HandleOIDCCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m,
                       uint64_t key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          uint64_t key, ::user_api::v1::HandleOIDCCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleOIDCCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::HandleOIDCCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>* __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_free(const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_clear(google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_size(const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_insert(google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          bool key, ::user_api::v1::HandleOIDCCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_get(const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>* m,
                       bool key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_remove(google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          bool key, ::user_api::v1::HandleOIDCCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleOIDCCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::HandleOIDCCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleOIDCCallbackResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleOIDCCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleOIDCCallbackResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleOIDCCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::HandleOIDCCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::HandleOIDCCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.FindByEmailRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_FindByEmailRequest_new() { return new ::user_api::v1::FindByEmailRequest(); }
void __rust_proto_thunk__user_api_v1_FindByEmailRequest_delete(void* ptr) { delete static_cast<::user_api::v1::FindByEmailRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_FindByEmailRequest_serialize(::user_api::v1::FindByEmailRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_FindByEmailRequest_parse(::user_api::v1::FindByEmailRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_FindByEmailRequest_copy_from(::user_api::v1::FindByEmailRequest* dst, const ::user_api::v1::FindByEmailRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_FindByEmailRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>* field) {
  return field->size();
}
const ::user_api::v1::FindByEmailRequest& __rust_proto_thunk__user_api_v1_FindByEmailRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::FindByEmailRequest* __rust_proto_thunk__user_api_v1_FindByEmailRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::FindByEmailRequest* __rust_proto_thunk__user_api_v1_FindByEmailRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_FindByEmailRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_FindByEmailRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_FindByEmailRequest_get_email(::user_api::v1::FindByEmailRequest* msg) {
  absl::string_view val = msg->email();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_FindByEmailRequest_set_email(::user_api::v1::FindByEmailRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_email(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>* __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest> * m,
                          int32_t key, ::user_api::v1::FindByEmailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>* m,
                       int32_t key, const ::user_api::v1::FindByEmailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest> * m,
                          int32_t key, ::user_api::v1::FindByEmailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::FindByEmailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>* __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest> * m,
                          uint32_t key, ::user_api::v1::FindByEmailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>* m,
                       uint32_t key, const ::user_api::v1::FindByEmailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest> * m,
                          uint32_t key, ::user_api::v1::FindByEmailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::FindByEmailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>* __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest> * m,
                          int64_t key, ::user_api::v1::FindByEmailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>* m,
                       int64_t key, const ::user_api::v1::FindByEmailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest> * m,
                          int64_t key, ::user_api::v1::FindByEmailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::FindByEmailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>* __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest> * m,
                          uint64_t key, ::user_api::v1::FindByEmailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>* m,
                       uint64_t key, const ::user_api::v1::FindByEmailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest> * m,
                          uint64_t key, ::user_api::v1::FindByEmailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::FindByEmailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>* __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_free(const google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_clear(google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_size(const google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_insert(google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest> * m,
                          bool key, ::user_api::v1::FindByEmailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_get(const google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>* m,
                       bool key, const ::user_api::v1::FindByEmailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_remove(google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest> * m,
                          bool key, ::user_api::v1::FindByEmailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::FindByEmailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::FindByEmailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByEmailRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::FindByEmailRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByEmailRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::FindByEmailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::FindByEmailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.FindByEmailResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_FindByEmailResponse_new() { return new ::user_api::v1::FindByEmailResponse(); }
void __rust_proto_thunk__user_api_v1_FindByEmailResponse_delete(void* ptr) { delete static_cast<::user_api::v1::FindByEmailResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_FindByEmailResponse_serialize(::user_api::v1::FindByEmailResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_FindByEmailResponse_parse(::user_api::v1::FindByEmailResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_FindByEmailResponse_copy_from(::user_api::v1::FindByEmailResponse* dst, const ::user_api::v1::FindByEmailResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_FindByEmailResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>* field) {
  return field->size();
}
const ::user_api::v1::FindByEmailResponse& __rust_proto_thunk__user_api_v1_FindByEmailResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::FindByEmailResponse* __rust_proto_thunk__user_api_v1_FindByEmailResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::FindByEmailResponse* __rust_proto_thunk__user_api_v1_FindByEmailResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_FindByEmailResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_FindByEmailResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::FindByEmailResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_FindByEmailResponse_get_user(::user_api::v1::FindByEmailResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_FindByEmailResponse_get_mut_user(::user_api::v1::FindByEmailResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_FindByEmailResponse_clear_user(::user_api::v1::FindByEmailResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_FindByEmailResponse_has_user(::user_api::v1::FindByEmailResponse* msg) { return msg->has_user(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>* __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse> * m,
                          int32_t key, ::user_api::v1::FindByEmailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>* m,
                       int32_t key, const ::user_api::v1::FindByEmailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse> * m,
                          int32_t key, ::user_api::v1::FindByEmailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByEmailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::FindByEmailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::FindByEmailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>* __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse> * m,
                          uint32_t key, ::user_api::v1::FindByEmailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>* m,
                       uint32_t key, const ::user_api::v1::FindByEmailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse> * m,
                          uint32_t key, ::user_api::v1::FindByEmailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByEmailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::FindByEmailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::FindByEmailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>* __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse> * m,
                          int64_t key, ::user_api::v1::FindByEmailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>* m,
                       int64_t key, const ::user_api::v1::FindByEmailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse> * m,
                          int64_t key, ::user_api::v1::FindByEmailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByEmailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::FindByEmailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::FindByEmailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>* __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse> * m,
                          uint64_t key, ::user_api::v1::FindByEmailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>* m,
                       uint64_t key, const ::user_api::v1::FindByEmailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse> * m,
                          uint64_t key, ::user_api::v1::FindByEmailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByEmailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::FindByEmailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::FindByEmailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>* __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_free(const google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_clear(google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_size(const google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_insert(google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse> * m,
                          bool key, ::user_api::v1::FindByEmailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_get(const google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>* m,
                       bool key, const ::user_api::v1::FindByEmailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_remove(google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse> * m,
                          bool key, ::user_api::v1::FindByEmailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByEmailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::FindByEmailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::FindByEmailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByEmailResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::FindByEmailResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByEmailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByEmailResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByEmailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::FindByEmailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::FindByEmailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.FindByIDRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_FindByIDRequest_new() { return new ::user_api::v1::FindByIDRequest(); }
void __rust_proto_thunk__user_api_v1_FindByIDRequest_delete(void* ptr) { delete static_cast<::user_api::v1::FindByIDRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_FindByIDRequest_serialize(::user_api::v1::FindByIDRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_FindByIDRequest_parse(::user_api::v1::FindByIDRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_FindByIDRequest_copy_from(::user_api::v1::FindByIDRequest* dst, const ::user_api::v1::FindByIDRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_FindByIDRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>* field) {
  return field->size();
}
const ::user_api::v1::FindByIDRequest& __rust_proto_thunk__user_api_v1_FindByIDRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::FindByIDRequest* __rust_proto_thunk__user_api_v1_FindByIDRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::FindByIDRequest* __rust_proto_thunk__user_api_v1_FindByIDRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_FindByIDRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_FindByIDRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_FindByIDRequest_get_uuid(::user_api::v1::FindByIDRequest* msg) {
  absl::string_view val = msg->uuid();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_FindByIDRequest_set_uuid(::user_api::v1::FindByIDRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uuid(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>* __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest> * m,
                          int32_t key, ::user_api::v1::FindByIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>* m,
                       int32_t key, const ::user_api::v1::FindByIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest> * m,
                          int32_t key, ::user_api::v1::FindByIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::FindByIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::FindByIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>* __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest> * m,
                          uint32_t key, ::user_api::v1::FindByIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>* m,
                       uint32_t key, const ::user_api::v1::FindByIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest> * m,
                          uint32_t key, ::user_api::v1::FindByIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::FindByIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>* __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest> * m,
                          int64_t key, ::user_api::v1::FindByIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>* m,
                       int64_t key, const ::user_api::v1::FindByIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest> * m,
                          int64_t key, ::user_api::v1::FindByIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::FindByIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::FindByIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>* __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest> * m,
                          uint64_t key, ::user_api::v1::FindByIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>* m,
                       uint64_t key, const ::user_api::v1::FindByIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest> * m,
                          uint64_t key, ::user_api::v1::FindByIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::FindByIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>* __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_free(const google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_clear(google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_size(const google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_insert(google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest> * m,
                          bool key, ::user_api::v1::FindByIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_get(const google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>* m,
                       bool key, const ::user_api::v1::FindByIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_remove(google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest> * m,
                          bool key, ::user_api::v1::FindByIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::FindByIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::FindByIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByIDRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::FindByIDRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByIDRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::FindByIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::FindByIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.FindByIDResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_FindByIDResponse_new() { return new ::user_api::v1::FindByIDResponse(); }
void __rust_proto_thunk__user_api_v1_FindByIDResponse_delete(void* ptr) { delete static_cast<::user_api::v1::FindByIDResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_FindByIDResponse_serialize(::user_api::v1::FindByIDResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_FindByIDResponse_parse(::user_api::v1::FindByIDResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_FindByIDResponse_copy_from(::user_api::v1::FindByIDResponse* dst, const ::user_api::v1::FindByIDResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_FindByIDResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>* field) {
  return field->size();
}
const ::user_api::v1::FindByIDResponse& __rust_proto_thunk__user_api_v1_FindByIDResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::FindByIDResponse* __rust_proto_thunk__user_api_v1_FindByIDResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::FindByIDResponse* __rust_proto_thunk__user_api_v1_FindByIDResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_FindByIDResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_FindByIDResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::FindByIDResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_FindByIDResponse_get_user(::user_api::v1::FindByIDResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_FindByIDResponse_get_mut_user(::user_api::v1::FindByIDResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_FindByIDResponse_clear_user(::user_api::v1::FindByIDResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_FindByIDResponse_has_user(::user_api::v1::FindByIDResponse* msg) { return msg->has_user(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>* __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse> * m,
                          int32_t key, ::user_api::v1::FindByIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>* m,
                       int32_t key, const ::user_api::v1::FindByIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse> * m,
                          int32_t key, ::user_api::v1::FindByIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_FindByIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::FindByIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::FindByIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>* __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse> * m,
                          uint32_t key, ::user_api::v1::FindByIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>* m,
                       uint32_t key, const ::user_api::v1::FindByIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse> * m,
                          uint32_t key, ::user_api::v1::FindByIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_FindByIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::FindByIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::FindByIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>* __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse> * m,
                          int64_t key, ::user_api::v1::FindByIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>* m,
                       int64_t key, const ::user_api::v1::FindByIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse> * m,
                          int64_t key, ::user_api::v1::FindByIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_FindByIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::FindByIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::FindByIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>* __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse> * m,
                          uint64_t key, ::user_api::v1::FindByIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>* m,
                       uint64_t key, const ::user_api::v1::FindByIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse> * m,
                          uint64_t key, ::user_api::v1::FindByIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_FindByIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::FindByIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::FindByIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>* __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_free(const google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_clear(google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_size(const google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_insert(google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse> * m,
                          bool key, ::user_api::v1::FindByIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_get(const google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>* m,
                       bool key, const ::user_api::v1::FindByIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_remove(google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse> * m,
                          bool key, ::user_api::v1::FindByIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_FindByIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::FindByIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::FindByIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByIDResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::FindByIDResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::FindByIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::FindByIDResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_FindByIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::FindByIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::FindByIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnWithPasswordRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_new() { return new ::user_api::v1::AuthnWithPasswordRequest(); }
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnWithPasswordRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_serialize(::user_api::v1::AuthnWithPasswordRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_parse(::user_api::v1::AuthnWithPasswordRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_copy_from(::user_api::v1::AuthnWithPasswordRequest* dst, const ::user_api::v1::AuthnWithPasswordRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>* field) {
  return field->size();
}
const ::user_api::v1::AuthnWithPasswordRequest& __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnWithPasswordRequest* __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnWithPasswordRequest* __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_get_email(::user_api::v1::AuthnWithPasswordRequest* msg) {
  absl::string_view val = msg->email();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_set_email(::user_api::v1::AuthnWithPasswordRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_email(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_get_password(::user_api::v1::AuthnWithPasswordRequest* msg) {
  absl::string_view val = msg->password();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordRequest_set_password(::user_api::v1::AuthnWithPasswordRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_password(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          int32_t key, ::user_api::v1::AuthnWithPasswordRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>* m,
                       int32_t key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          int32_t key, ::user_api::v1::AuthnWithPasswordRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnWithPasswordRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>* m,
                       uint32_t key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnWithPasswordRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          int64_t key, ::user_api::v1::AuthnWithPasswordRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>* m,
                       int64_t key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          int64_t key, ::user_api::v1::AuthnWithPasswordRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnWithPasswordRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>* m,
                       uint64_t key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnWithPasswordRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          bool key, ::user_api::v1::AuthnWithPasswordRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>* m,
                       bool key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          bool key, ::user_api::v1::AuthnWithPasswordRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithPasswordRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithPasswordRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnWithPasswordRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnWithPasswordResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_new() { return new ::user_api::v1::AuthnWithPasswordResponse(); }
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnWithPasswordResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_serialize(::user_api::v1::AuthnWithPasswordResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_parse(::user_api::v1::AuthnWithPasswordResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_copy_from(::user_api::v1::AuthnWithPasswordResponse* dst, const ::user_api::v1::AuthnWithPasswordResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>* field) {
  return field->size();
}
const ::user_api::v1::AuthnWithPasswordResponse& __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnWithPasswordResponse* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnWithPasswordResponse* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWithPasswordResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_get_user(::user_api::v1::AuthnWithPasswordResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_get_mut_user(::user_api::v1::AuthnWithPasswordResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_clear_user(::user_api::v1::AuthnWithPasswordResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_has_user(::user_api::v1::AuthnWithPasswordResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_get_auth_token(::user_api::v1::AuthnWithPasswordResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_get_mut_auth_token(::user_api::v1::AuthnWithPasswordResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_clear_auth_token(::user_api::v1::AuthnWithPasswordResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_AuthnWithPasswordResponse_has_auth_token(::user_api::v1::AuthnWithPasswordResponse* msg) { return msg->has_auth_token(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          int32_t key, ::user_api::v1::AuthnWithPasswordResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>* m,
                       int32_t key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          int32_t key, ::user_api::v1::AuthnWithPasswordResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWithPasswordResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnWithPasswordResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnWithPasswordResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>* m,
                       uint32_t key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnWithPasswordResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWithPasswordResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWithPasswordResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          int64_t key, ::user_api::v1::AuthnWithPasswordResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>* m,
                       int64_t key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          int64_t key, ::user_api::v1::AuthnWithPasswordResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWithPasswordResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnWithPasswordResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnWithPasswordResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>* m,
                       uint64_t key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnWithPasswordResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWithPasswordResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWithPasswordResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          bool key, ::user_api::v1::AuthnWithPasswordResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>* m,
                       bool key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          bool key, ::user_api::v1::AuthnWithPasswordResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWithPasswordResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnWithPasswordResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithPasswordResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWithPasswordResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWithPasswordResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWithPasswordResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnWithPasswordResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnWithPasswordResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.RefreshAccessTokenRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_new() { return new ::user_api::v1::RefreshAccessTokenRequest(); }
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_delete(void* ptr) { delete static_cast<::user_api::v1::RefreshAccessTokenRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_serialize(::user_api::v1::RefreshAccessTokenRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_parse(::user_api::v1::RefreshAccessTokenRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_copy_from(::user_api::v1::RefreshAccessTokenRequest* dst, const ::user_api::v1::RefreshAccessTokenRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>* field) {
  return field->size();
}
const ::user_api::v1::RefreshAccessTokenRequest& __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::RefreshAccessTokenRequest* __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::RefreshAccessTokenRequest* __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_get_refresh_token(::user_api::v1::RefreshAccessTokenRequest* msg) {
  absl::string_view val = msg->refresh_token();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenRequest_set_refresh_token(::user_api::v1::RefreshAccessTokenRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_refresh_token(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>* __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          int32_t key, ::user_api::v1::RefreshAccessTokenRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>* m,
                       int32_t key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          int32_t key, ::user_api::v1::RefreshAccessTokenRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>* __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          uint32_t key, ::user_api::v1::RefreshAccessTokenRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>* m,
                       uint32_t key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          uint32_t key, ::user_api::v1::RefreshAccessTokenRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>* __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          int64_t key, ::user_api::v1::RefreshAccessTokenRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>* m,
                       int64_t key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          int64_t key, ::user_api::v1::RefreshAccessTokenRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>* __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          uint64_t key, ::user_api::v1::RefreshAccessTokenRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>* m,
                       uint64_t key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          uint64_t key, ::user_api::v1::RefreshAccessTokenRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>* __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_free(const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_clear(google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_size(const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_insert(google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          bool key, ::user_api::v1::RefreshAccessTokenRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_get(const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>* m,
                       bool key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_remove(google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          bool key, ::user_api::v1::RefreshAccessTokenRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RefreshAccessTokenRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RefreshAccessTokenRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::RefreshAccessTokenRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.RefreshAccessTokenResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_new() { return new ::user_api::v1::RefreshAccessTokenResponse(); }
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_delete(void* ptr) { delete static_cast<::user_api::v1::RefreshAccessTokenResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_serialize(::user_api::v1::RefreshAccessTokenResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_parse(::user_api::v1::RefreshAccessTokenResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_copy_from(::user_api::v1::RefreshAccessTokenResponse* dst, const ::user_api::v1::RefreshAccessTokenResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>* field) {
  return field->size();
}
const ::user_api::v1::RefreshAccessTokenResponse& __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::RefreshAccessTokenResponse* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::RefreshAccessTokenResponse* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::RefreshAccessTokenResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_get_user(::user_api::v1::RefreshAccessTokenResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_get_mut_user(::user_api::v1::RefreshAccessTokenResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_clear_user(::user_api::v1::RefreshAccessTokenResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_has_user(::user_api::v1::RefreshAccessTokenResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_get_auth_token(::user_api::v1::RefreshAccessTokenResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_get_mut_auth_token(::user_api::v1::RefreshAccessTokenResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_clear_auth_token(::user_api::v1::RefreshAccessTokenResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_RefreshAccessTokenResponse_has_auth_token(::user_api::v1::RefreshAccessTokenResponse* msg) { return msg->has_auth_token(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>* __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          int32_t key, ::user_api::v1::RefreshAccessTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>* m,
                       int32_t key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          int32_t key, ::user_api::v1::RefreshAccessTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RefreshAccessTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::RefreshAccessTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>* __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          uint32_t key, ::user_api::v1::RefreshAccessTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>* m,
                       uint32_t key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          uint32_t key, ::user_api::v1::RefreshAccessTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RefreshAccessTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::RefreshAccessTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>* __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          int64_t key, ::user_api::v1::RefreshAccessTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>* m,
                       int64_t key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          int64_t key, ::user_api::v1::RefreshAccessTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RefreshAccessTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::RefreshAccessTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>* __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          uint64_t key, ::user_api::v1::RefreshAccessTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>* m,
                       uint64_t key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          uint64_t key, ::user_api::v1::RefreshAccessTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RefreshAccessTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::RefreshAccessTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>* __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_free(const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_clear(google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_size(const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_insert(google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          bool key, ::user_api::v1::RefreshAccessTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_get(const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>* m,
                       bool key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_remove(google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          bool key, ::user_api::v1::RefreshAccessTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RefreshAccessTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::RefreshAccessTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RefreshAccessTokenResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RefreshAccessTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RefreshAccessTokenResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RefreshAccessTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::RefreshAccessTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::RefreshAccessTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetMeRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetMeRequest_new() { return new ::user_api::v1::GetMeRequest(); }
void __rust_proto_thunk__user_api_v1_GetMeRequest_delete(void* ptr) { delete static_cast<::user_api::v1::GetMeRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetMeRequest_serialize(::user_api::v1::GetMeRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetMeRequest_parse(::user_api::v1::GetMeRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetMeRequest_copy_from(::user_api::v1::GetMeRequest* dst, const ::user_api::v1::GetMeRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetMeRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>* field) {
  return field->size();
}
const ::user_api::v1::GetMeRequest& __rust_proto_thunk__user_api_v1_GetMeRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetMeRequest* __rust_proto_thunk__user_api_v1_GetMeRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetMeRequest* __rust_proto_thunk__user_api_v1_GetMeRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetMeRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetMeRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetMeRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>* __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest> * m,
                          int32_t key, ::user_api::v1::GetMeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>* m,
                       int32_t key, const ::user_api::v1::GetMeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest> * m,
                          int32_t key, ::user_api::v1::GetMeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetMeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetMeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetMeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>* __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest> * m,
                          uint32_t key, ::user_api::v1::GetMeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>* m,
                       uint32_t key, const ::user_api::v1::GetMeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest> * m,
                          uint32_t key, ::user_api::v1::GetMeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetMeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetMeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetMeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>* __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest> * m,
                          int64_t key, ::user_api::v1::GetMeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>* m,
                       int64_t key, const ::user_api::v1::GetMeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest> * m,
                          int64_t key, ::user_api::v1::GetMeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetMeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetMeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetMeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>* __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest> * m,
                          uint64_t key, ::user_api::v1::GetMeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>* m,
                       uint64_t key, const ::user_api::v1::GetMeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest> * m,
                          uint64_t key, ::user_api::v1::GetMeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetMeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetMeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetMeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>* __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_free(const google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_clear(google::protobuf::Map<bool, ::user_api::v1::GetMeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_size(const google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_insert(google::protobuf::Map<bool, ::user_api::v1::GetMeRequest> * m,
                          bool key, ::user_api::v1::GetMeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_get(const google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>* m,
                       bool key, const ::user_api::v1::GetMeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_remove(google::protobuf::Map<bool, ::user_api::v1::GetMeRequest> * m,
                          bool key, ::user_api::v1::GetMeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetMeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetMeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetMeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetMeRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetMeRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetMeRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetMeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetMeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetMeResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetMeResponse_new() { return new ::user_api::v1::GetMeResponse(); }
void __rust_proto_thunk__user_api_v1_GetMeResponse_delete(void* ptr) { delete static_cast<::user_api::v1::GetMeResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetMeResponse_serialize(::user_api::v1::GetMeResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetMeResponse_parse(::user_api::v1::GetMeResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetMeResponse_copy_from(::user_api::v1::GetMeResponse* dst, const ::user_api::v1::GetMeResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetMeResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>* field) {
  return field->size();
}
const ::user_api::v1::GetMeResponse& __rust_proto_thunk__user_api_v1_GetMeResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetMeResponse* __rust_proto_thunk__user_api_v1_GetMeResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetMeResponse* __rust_proto_thunk__user_api_v1_GetMeResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetMeResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetMeResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetMeResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_GetMeResponse_get_user(::user_api::v1::GetMeResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_GetMeResponse_get_mut_user(::user_api::v1::GetMeResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_GetMeResponse_clear_user(::user_api::v1::GetMeResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_GetMeResponse_has_user(::user_api::v1::GetMeResponse* msg) { return msg->has_user(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>* __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse> * m,
                          int32_t key, ::user_api::v1::GetMeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>* m,
                       int32_t key, const ::user_api::v1::GetMeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse> * m,
                          int32_t key, ::user_api::v1::GetMeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetMeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetMeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetMeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>* __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse> * m,
                          uint32_t key, ::user_api::v1::GetMeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>* m,
                       uint32_t key, const ::user_api::v1::GetMeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse> * m,
                          uint32_t key, ::user_api::v1::GetMeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetMeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetMeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetMeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>* __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse> * m,
                          int64_t key, ::user_api::v1::GetMeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>* m,
                       int64_t key, const ::user_api::v1::GetMeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse> * m,
                          int64_t key, ::user_api::v1::GetMeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetMeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetMeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetMeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>* __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse> * m,
                          uint64_t key, ::user_api::v1::GetMeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>* m,
                       uint64_t key, const ::user_api::v1::GetMeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse> * m,
                          uint64_t key, ::user_api::v1::GetMeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetMeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetMeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetMeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>* __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_free(const google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_clear(google::protobuf::Map<bool, ::user_api::v1::GetMeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_size(const google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_insert(google::protobuf::Map<bool, ::user_api::v1::GetMeResponse> * m,
                          bool key, ::user_api::v1::GetMeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_get(const google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>* m,
                       bool key, const ::user_api::v1::GetMeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_remove(google::protobuf::Map<bool, ::user_api::v1::GetMeResponse> * m,
                          bool key, ::user_api::v1::GetMeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetMeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetMeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetMeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetMeResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetMeResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetMeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetMeResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetMeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetMeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetMeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthTokenResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthTokenResponse_new() { return new ::user_api::v1::AuthTokenResponse(); }
void __rust_proto_thunk__user_api_v1_AuthTokenResponse_delete(void* ptr) { delete static_cast<::user_api::v1::AuthTokenResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthTokenResponse_serialize(::user_api::v1::AuthTokenResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthTokenResponse_parse(::user_api::v1::AuthTokenResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthTokenResponse_copy_from(::user_api::v1::AuthTokenResponse* dst, const ::user_api::v1::AuthTokenResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthTokenResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>* field) {
  return field->size();
}
const ::user_api::v1::AuthTokenResponse& __rust_proto_thunk__user_api_v1_AuthTokenResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthTokenResponse* __rust_proto_thunk__user_api_v1_AuthTokenResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthTokenResponse* __rust_proto_thunk__user_api_v1_AuthTokenResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthTokenResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthTokenResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthTokenResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_AuthTokenResponse_get_user(::user_api::v1::AuthTokenResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_AuthTokenResponse_get_mut_user(::user_api::v1::AuthTokenResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_AuthTokenResponse_clear_user(::user_api::v1::AuthTokenResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_AuthTokenResponse_has_user(::user_api::v1::AuthTokenResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_AuthTokenResponse_get_auth_token(::user_api::v1::AuthTokenResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_AuthTokenResponse_get_mut_auth_token(::user_api::v1::AuthTokenResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_AuthTokenResponse_clear_auth_token(::user_api::v1::AuthTokenResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_AuthTokenResponse_has_auth_token(::user_api::v1::AuthTokenResponse* msg) { return msg->has_auth_token(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>* __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse> * m,
                          int32_t key, ::user_api::v1::AuthTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>* m,
                       int32_t key, const ::user_api::v1::AuthTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse> * m,
                          int32_t key, ::user_api::v1::AuthTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>* __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse> * m,
                          uint32_t key, ::user_api::v1::AuthTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>* m,
                       uint32_t key, const ::user_api::v1::AuthTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse> * m,
                          uint32_t key, ::user_api::v1::AuthTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>* __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse> * m,
                          int64_t key, ::user_api::v1::AuthTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>* m,
                       int64_t key, const ::user_api::v1::AuthTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse> * m,
                          int64_t key, ::user_api::v1::AuthTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>* __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse> * m,
                          uint64_t key, ::user_api::v1::AuthTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>* m,
                       uint64_t key, const ::user_api::v1::AuthTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse> * m,
                          uint64_t key, ::user_api::v1::AuthTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>* __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_free(const google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_clear(google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_size(const google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_insert(google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse> * m,
                          bool key, ::user_api::v1::AuthTokenResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_get(const google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>* m,
                       bool key, const ::user_api::v1::AuthTokenResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_remove(google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse> * m,
                          bool key, ::user_api::v1::AuthTokenResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthTokenResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthTokenResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthTokenResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthTokenResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthTokenResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthTokenResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthTokenResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateAuthnBrowserWithWalletChallengeRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() { return new ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest(); }
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_delete(void* ptr) { delete static_cast<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_serialize(::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_parse(::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_copy_from(::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* dst, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* field) {
  return field->size();
}
const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest& __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          int32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m,
                       int32_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          int32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m,
                       uint32_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          int64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m,
                       int64_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          int64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m,
                       uint64_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_free(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_clear(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_size(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_insert(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          bool key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_get(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m,
                       bool key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_remove(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          bool key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateAuthnBrowserWithWalletChallengeResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() { return new ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse(); }
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_delete(void* ptr) { delete static_cast<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_serialize(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_parse(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_copy_from(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* dst, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* field) {
  return field->size();
}
const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse& __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>& src) {
  dst = src;
}

bool __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_has_nonce(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) {
  return msg->has_nonce();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear_nonce(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) { msg->clear_nonce(); }
::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get_nonce(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) {
  absl::string_view val = msg->nonce();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_set_nonce(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_nonce(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get_auth_token(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get_mut_auth_token(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear_auth_token(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_has_auth_token(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) { return msg->has_auth_token(); }


::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse::DidStartCase __rust_proto_thunk__user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_case_did_start(::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* msg) {
  return msg->did_start_case();
}
}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          int32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m,
                       int32_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          int32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m,
                       uint32_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          int64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m,
                       int64_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          int64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m,
                       uint64_t key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_free(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_size(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_insert(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          bool key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m,
                       bool key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_remove(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          bool key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnBrowserWithWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnBrowserWithWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnBrowserWithWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_new() { return new ::user_api::v1::AuthnBrowserWithWalletRequest(); }
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnBrowserWithWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_serialize(::user_api::v1::AuthnBrowserWithWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_parse(::user_api::v1::AuthnBrowserWithWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_copy_from(::user_api::v1::AuthnBrowserWithWalletRequest* dst, const ::user_api::v1::AuthnBrowserWithWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>* field) {
  return field->size();
}
const ::user_api::v1::AuthnBrowserWithWalletRequest& __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnBrowserWithWalletRequest* __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnBrowserWithWalletRequest* __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_get_signature(::user_api::v1::AuthnBrowserWithWalletRequest* msg) {
  absl::string_view val = msg->signature();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_set_signature(::user_api::v1::AuthnBrowserWithWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_signature(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_get_nonce(::user_api::v1::AuthnBrowserWithWalletRequest* msg) {
  absl::string_view val = msg->nonce();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_set_nonce(::user_api::v1::AuthnBrowserWithWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_nonce(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_get_did(::user_api::v1::AuthnBrowserWithWalletRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletRequest_set_did(::user_api::v1::AuthnBrowserWithWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          int32_t key, ::user_api::v1::AuthnBrowserWithWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m,
                       int32_t key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          int32_t key, ::user_api::v1::AuthnBrowserWithWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnBrowserWithWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m,
                       uint32_t key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnBrowserWithWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          int64_t key, ::user_api::v1::AuthnBrowserWithWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m,
                       int64_t key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          int64_t key, ::user_api::v1::AuthnBrowserWithWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnBrowserWithWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m,
                       uint64_t key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnBrowserWithWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          bool key, ::user_api::v1::AuthnBrowserWithWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>* m,
                       bool key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          bool key, ::user_api::v1::AuthnBrowserWithWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnBrowserWithWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnBrowserWithWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnBrowserWithWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnBrowserWithWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_new() { return new ::user_api::v1::AuthnBrowserWithWalletResponse(); }
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnBrowserWithWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_serialize(::user_api::v1::AuthnBrowserWithWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_parse(::user_api::v1::AuthnBrowserWithWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_copy_from(::user_api::v1::AuthnBrowserWithWalletResponse* dst, const ::user_api::v1::AuthnBrowserWithWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>* field) {
  return field->size();
}
const ::user_api::v1::AuthnBrowserWithWalletResponse& __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnBrowserWithWalletResponse* __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnBrowserWithWalletResponse* __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnBrowserWithWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnBrowserWithWalletResponse>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          int32_t key, ::user_api::v1::AuthnBrowserWithWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m,
                       int32_t key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          int32_t key, ::user_api::v1::AuthnBrowserWithWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnBrowserWithWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnBrowserWithWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m,
                       uint32_t key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnBrowserWithWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnBrowserWithWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnBrowserWithWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          int64_t key, ::user_api::v1::AuthnBrowserWithWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m,
                       int64_t key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          int64_t key, ::user_api::v1::AuthnBrowserWithWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnBrowserWithWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnBrowserWithWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m,
                       uint64_t key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnBrowserWithWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnBrowserWithWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnBrowserWithWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          bool key, ::user_api::v1::AuthnBrowserWithWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>* m,
                       bool key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          bool key, ::user_api::v1::AuthnBrowserWithWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnBrowserWithWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnBrowserWithWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnBrowserWithWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnBrowserWithWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnBrowserWithWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnBrowserWithWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnBrowserWithWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnBrowserWithWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateRegisterWalletChallengeRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_new() { return new ::user_api::v1::CreateRegisterWalletChallengeRequest(); }
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_delete(void* ptr) { delete static_cast<::user_api::v1::CreateRegisterWalletChallengeRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_serialize(::user_api::v1::CreateRegisterWalletChallengeRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_parse(::user_api::v1::CreateRegisterWalletChallengeRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_copy_from(::user_api::v1::CreateRegisterWalletChallengeRequest* dst, const ::user_api::v1::CreateRegisterWalletChallengeRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>* field) {
  return field->size();
}
const ::user_api::v1::CreateRegisterWalletChallengeRequest& __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateRegisterWalletChallengeRequest* __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateRegisterWalletChallengeRequest* __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          int32_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m,
                       int32_t key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          int32_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          uint32_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m,
                       uint32_t key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          uint32_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          int64_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m,
                       int64_t key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          int64_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          uint64_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m,
                       uint64_t key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          uint64_t key, ::user_api::v1::CreateRegisterWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>* __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_free(const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_clear(google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_size(const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_insert(google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          bool key, ::user_api::v1::CreateRegisterWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_get(const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m,
                       bool key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_remove(google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          bool key, ::user_api::v1::CreateRegisterWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateRegisterWalletChallengeRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateRegisterWalletChallengeRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateRegisterWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateRegisterWalletChallengeResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_new() { return new ::user_api::v1::CreateRegisterWalletChallengeResponse(); }
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_delete(void* ptr) { delete static_cast<::user_api::v1::CreateRegisterWalletChallengeResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_serialize(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_parse(::user_api::v1::CreateRegisterWalletChallengeResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_copy_from(::user_api::v1::CreateRegisterWalletChallengeResponse* dst, const ::user_api::v1::CreateRegisterWalletChallengeResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>* field) {
  return field->size();
}
const ::user_api::v1::CreateRegisterWalletChallengeResponse& __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateRegisterWalletChallengeResponse* __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateRegisterWalletChallengeResponse* __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateRegisterWalletChallengeResponse>& src) {
  dst = src;
}

bool __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_has_nonce(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) {
  return msg->has_nonce();
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_clear_nonce(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) { msg->clear_nonce(); }
::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_get_nonce(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) {
  absl::string_view val = msg->nonce();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_set_nonce(::user_api::v1::CreateRegisterWalletChallengeResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_nonce(absl::string_view(s.ptr, s.len));
}

bool __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_has_ok(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) {
  return msg->has_ok();
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_clear_ok(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) { msg->clear_ok(); }
::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_get_ok(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) {
  absl::string_view val = msg->ok();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_set_ok(::user_api::v1::CreateRegisterWalletChallengeResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_ok(absl::string_view(s.ptr, s.len));
}


::user_api::v1::CreateRegisterWalletChallengeResponse::RegistrationStartCase __rust_proto_thunk__user_api_v1_CreateRegisterWalletChallengeResponse_case_registration_start(::user_api::v1::CreateRegisterWalletChallengeResponse* msg) {
  return msg->registration_start_case();
}
}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          int32_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m,
                       int32_t key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          int32_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateRegisterWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          uint32_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m,
                       uint32_t key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          uint32_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateRegisterWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          int64_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m,
                       int64_t key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          int64_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateRegisterWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          uint64_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m,
                       uint64_t key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          uint64_t key, ::user_api::v1::CreateRegisterWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateRegisterWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateRegisterWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>* __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_free(const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_clear(google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_size(const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_insert(google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          bool key, ::user_api::v1::CreateRegisterWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_get(const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m,
                       bool key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_remove(google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          bool key, ::user_api::v1::CreateRegisterWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateRegisterWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateRegisterWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateRegisterWalletChallengeResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateRegisterWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateRegisterWalletChallengeResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateRegisterWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateRegisterWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateRegisterWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.RegisterWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_RegisterWalletRequest_new() { return new ::user_api::v1::RegisterWalletRequest(); }
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_delete(void* ptr) { delete static_cast<::user_api::v1::RegisterWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_RegisterWalletRequest_serialize(::user_api::v1::RegisterWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_RegisterWalletRequest_parse(::user_api::v1::RegisterWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_copy_from(::user_api::v1::RegisterWalletRequest* dst, const ::user_api::v1::RegisterWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_RegisterWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>* field) {
  return field->size();
}
const ::user_api::v1::RegisterWalletRequest& __rust_proto_thunk__user_api_v1_RegisterWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::RegisterWalletRequest* __rust_proto_thunk__user_api_v1_RegisterWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::RegisterWalletRequest* __rust_proto_thunk__user_api_v1_RegisterWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_signature(::user_api::v1::RegisterWalletRequest* msg) {
  absl::string_view val = msg->signature();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_set_signature(::user_api::v1::RegisterWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_signature(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_nonce(::user_api::v1::RegisterWalletRequest* msg) {
  absl::string_view val = msg->nonce();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_set_nonce(::user_api::v1::RegisterWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_nonce(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_did(::user_api::v1::RegisterWalletRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_set_did(::user_api::v1::RegisterWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_did_type(::user_api::v1::RegisterWalletRequest* msg) {
  absl::string_view val = msg->did_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_set_did_type(::user_api::v1::RegisterWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did_type(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_purpose(::user_api::v1::RegisterWalletRequest* msg) {
  absl::string_view val = msg->purpose();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_set_purpose(::user_api::v1::RegisterWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_purpose(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_metadata(::user_api::v1::RegisterWalletRequest* msg) {
  return static_cast<const void*>(&msg->metadata());
}
void* __rust_proto_thunk__user_api_v1_RegisterWalletRequest_get_mut_metadata(::user_api::v1::RegisterWalletRequest* msg) {
  return static_cast<void*>(msg->mutable_metadata());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletRequest_clear_metadata(::user_api::v1::RegisterWalletRequest* msg) { msg->clear_metadata(); }
bool __rust_proto_thunk__user_api_v1_RegisterWalletRequest_has_metadata(::user_api::v1::RegisterWalletRequest* msg) { return msg->has_metadata(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>* __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest> * m,
                          int32_t key, ::user_api::v1::RegisterWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>* m,
                       int32_t key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest> * m,
                          int32_t key, ::user_api::v1::RegisterWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>* __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest> * m,
                          uint32_t key, ::user_api::v1::RegisterWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>* m,
                       uint32_t key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest> * m,
                          uint32_t key, ::user_api::v1::RegisterWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>* __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest> * m,
                          int64_t key, ::user_api::v1::RegisterWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>* m,
                       int64_t key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest> * m,
                          int64_t key, ::user_api::v1::RegisterWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>* __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest> * m,
                          uint64_t key, ::user_api::v1::RegisterWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>* m,
                       uint64_t key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest> * m,
                          uint64_t key, ::user_api::v1::RegisterWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>* __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_free(const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_clear(google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_size(const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_insert(google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest> * m,
                          bool key, ::user_api::v1::RegisterWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_get(const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>* m,
                       bool key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_remove(google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest> * m,
                          bool key, ::user_api::v1::RegisterWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::RegisterWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::RegisterWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.RegisterWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_new() { return new ::user_api::v1::RegisterWalletResponse(); }
void __rust_proto_thunk__user_api_v1_RegisterWalletResponse_delete(void* ptr) { delete static_cast<::user_api::v1::RegisterWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_RegisterWalletResponse_serialize(::user_api::v1::RegisterWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_RegisterWalletResponse_parse(::user_api::v1::RegisterWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_RegisterWalletResponse_copy_from(::user_api::v1::RegisterWalletResponse* dst, const ::user_api::v1::RegisterWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_RegisterWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>* field) {
  return field->size();
}
const ::user_api::v1::RegisterWalletResponse& __rust_proto_thunk__user_api_v1_RegisterWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::RegisterWalletResponse* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::RegisterWalletResponse* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_RegisterWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_RegisterWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::RegisterWalletResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_get_user(::user_api::v1::RegisterWalletResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_get_mut_user(::user_api::v1::RegisterWalletResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletResponse_clear_user(::user_api::v1::RegisterWalletResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_RegisterWalletResponse_has_user(::user_api::v1::RegisterWalletResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_get_auth_token(::user_api::v1::RegisterWalletResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_RegisterWalletResponse_get_mut_auth_token(::user_api::v1::RegisterWalletResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_RegisterWalletResponse_clear_auth_token(::user_api::v1::RegisterWalletResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_RegisterWalletResponse_has_auth_token(::user_api::v1::RegisterWalletResponse* msg) { return msg->has_auth_token(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>* __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse> * m,
                          int32_t key, ::user_api::v1::RegisterWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>* m,
                       int32_t key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse> * m,
                          int32_t key, ::user_api::v1::RegisterWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_RegisterWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::RegisterWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>* __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse> * m,
                          uint32_t key, ::user_api::v1::RegisterWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>* m,
                       uint32_t key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse> * m,
                          uint32_t key, ::user_api::v1::RegisterWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_RegisterWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::RegisterWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>* __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse> * m,
                          int64_t key, ::user_api::v1::RegisterWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>* m,
                       int64_t key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse> * m,
                          int64_t key, ::user_api::v1::RegisterWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_RegisterWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::RegisterWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>* __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse> * m,
                          uint64_t key, ::user_api::v1::RegisterWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>* m,
                       uint64_t key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse> * m,
                          uint64_t key, ::user_api::v1::RegisterWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_RegisterWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::RegisterWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>* __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_free(const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_clear(google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_size(const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_insert(google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse> * m,
                          bool key, ::user_api::v1::RegisterWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_get(const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>* m,
                       bool key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_remove(google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse> * m,
                          bool key, ::user_api::v1::RegisterWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_RegisterWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::RegisterWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::RegisterWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::RegisterWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_RegisterWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::RegisterWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::RegisterWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateAuthnWalletChallengeRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_new() { return new ::user_api::v1::CreateAuthnWalletChallengeRequest(); }
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_delete(void* ptr) { delete static_cast<::user_api::v1::CreateAuthnWalletChallengeRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_serialize(::user_api::v1::CreateAuthnWalletChallengeRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_parse(::user_api::v1::CreateAuthnWalletChallengeRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_copy_from(::user_api::v1::CreateAuthnWalletChallengeRequest* dst, const ::user_api::v1::CreateAuthnWalletChallengeRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>* field) {
  return field->size();
}
const ::user_api::v1::CreateAuthnWalletChallengeRequest& __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateAuthnWalletChallengeRequest* __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateAuthnWalletChallengeRequest* __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_get_did(::user_api::v1::CreateAuthnWalletChallengeRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeRequest_set_did(::user_api::v1::CreateAuthnWalletChallengeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          int32_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m,
                       int32_t key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          int32_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m,
                       uint32_t key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          int64_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m,
                       int64_t key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          int64_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m,
                       uint64_t key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>* __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_free(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_clear(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_size(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_insert(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          bool key, ::user_api::v1::CreateAuthnWalletChallengeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_get(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m,
                       bool key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_remove(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          bool key, ::user_api::v1::CreateAuthnWalletChallengeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnWalletChallengeRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnWalletChallengeRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateAuthnWalletChallengeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateAuthnWalletChallengeResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_new() { return new ::user_api::v1::CreateAuthnWalletChallengeResponse(); }
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_delete(void* ptr) { delete static_cast<::user_api::v1::CreateAuthnWalletChallengeResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_serialize(::user_api::v1::CreateAuthnWalletChallengeResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_parse(::user_api::v1::CreateAuthnWalletChallengeResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_copy_from(::user_api::v1::CreateAuthnWalletChallengeResponse* dst, const ::user_api::v1::CreateAuthnWalletChallengeResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>* field) {
  return field->size();
}
const ::user_api::v1::CreateAuthnWalletChallengeResponse& __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateAuthnWalletChallengeResponse* __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateAuthnWalletChallengeResponse* __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateAuthnWalletChallengeResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_get_nonce(::user_api::v1::CreateAuthnWalletChallengeResponse* msg) {
  absl::string_view val = msg->nonce();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_CreateAuthnWalletChallengeResponse_set_nonce(::user_api::v1::CreateAuthnWalletChallengeResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_nonce(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          int32_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m,
                       int32_t key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          int32_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateAuthnWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m,
                       uint32_t key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          uint32_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateAuthnWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          int64_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m,
                       int64_t key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          int64_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateAuthnWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m,
                       uint64_t key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          uint64_t key, ::user_api::v1::CreateAuthnWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateAuthnWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateAuthnWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>* __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_free(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_clear(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_size(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_insert(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          bool key, ::user_api::v1::CreateAuthnWalletChallengeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_get(const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m,
                       bool key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_remove(google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          bool key, ::user_api::v1::CreateAuthnWalletChallengeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateAuthnWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateAuthnWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnWalletChallengeResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateAuthnWalletChallengeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateAuthnWalletChallengeResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateAuthnWalletChallengeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateAuthnWalletChallengeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateAuthnWalletChallengeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnWalletRequest_new() { return new ::user_api::v1::AuthnWalletRequest(); }
void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnWalletRequest_serialize(::user_api::v1::AuthnWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnWalletRequest_parse(::user_api::v1::AuthnWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_copy_from(::user_api::v1::AuthnWalletRequest* dst, const ::user_api::v1::AuthnWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>* field) {
  return field->size();
}
const ::user_api::v1::AuthnWalletRequest& __rust_proto_thunk__user_api_v1_AuthnWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnWalletRequest* __rust_proto_thunk__user_api_v1_AuthnWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnWalletRequest* __rust_proto_thunk__user_api_v1_AuthnWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWalletRequest_get_signature(::user_api::v1::AuthnWalletRequest* msg) {
  absl::string_view val = msg->signature();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_set_signature(::user_api::v1::AuthnWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_signature(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWalletRequest_get_nonce(::user_api::v1::AuthnWalletRequest* msg) {
  absl::string_view val = msg->nonce();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_set_nonce(::user_api::v1::AuthnWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_nonce(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AuthnWalletRequest_get_did(::user_api::v1::AuthnWalletRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AuthnWalletRequest_set_did(::user_api::v1::AuthnWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest> * m,
                          int32_t key, ::user_api::v1::AuthnWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>* m,
                       int32_t key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest> * m,
                          int32_t key, ::user_api::v1::AuthnWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>* m,
                       uint32_t key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest> * m,
                          uint32_t key, ::user_api::v1::AuthnWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest> * m,
                          int64_t key, ::user_api::v1::AuthnWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>* m,
                       int64_t key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest> * m,
                          int64_t key, ::user_api::v1::AuthnWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>* m,
                       uint64_t key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest> * m,
                          uint64_t key, ::user_api::v1::AuthnWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest> * m,
                          bool key, ::user_api::v1::AuthnWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>* m,
                       bool key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest> * m,
                          bool key, ::user_api::v1::AuthnWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_new() { return new ::user_api::v1::AuthnWalletResponse(); }
void __rust_proto_thunk__user_api_v1_AuthnWalletResponse_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnWalletResponse_serialize(::user_api::v1::AuthnWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnWalletResponse_parse(::user_api::v1::AuthnWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnWalletResponse_copy_from(::user_api::v1::AuthnWalletResponse* dst, const ::user_api::v1::AuthnWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>* field) {
  return field->size();
}
const ::user_api::v1::AuthnWalletResponse& __rust_proto_thunk__user_api_v1_AuthnWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnWalletResponse* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnWalletResponse* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnWalletResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_get_user(::user_api::v1::AuthnWalletResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_get_mut_user(::user_api::v1::AuthnWalletResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_AuthnWalletResponse_clear_user(::user_api::v1::AuthnWalletResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_AuthnWalletResponse_has_user(::user_api::v1::AuthnWalletResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_get_auth_token(::user_api::v1::AuthnWalletResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_AuthnWalletResponse_get_mut_auth_token(::user_api::v1::AuthnWalletResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_AuthnWalletResponse_clear_auth_token(::user_api::v1::AuthnWalletResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_AuthnWalletResponse_has_auth_token(::user_api::v1::AuthnWalletResponse* msg) { return msg->has_auth_token(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse> * m,
                          int32_t key, ::user_api::v1::AuthnWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>* m,
                       int32_t key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse> * m,
                          int32_t key, ::user_api::v1::AuthnWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>* m,
                       uint32_t key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse> * m,
                          uint32_t key, ::user_api::v1::AuthnWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse> * m,
                          int64_t key, ::user_api::v1::AuthnWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>* m,
                       int64_t key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse> * m,
                          int64_t key, ::user_api::v1::AuthnWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>* m,
                       uint64_t key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse> * m,
                          uint64_t key, ::user_api::v1::AuthnWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse> * m,
                          bool key, ::user_api::v1::AuthnWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>* m,
                       bool key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse> * m,
                          bool key, ::user_api::v1::AuthnWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.HandleSAMLCallbackRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_new() { return new ::user_api::v1::HandleSAMLCallbackRequest(); }
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_delete(void* ptr) { delete static_cast<::user_api::v1::HandleSAMLCallbackRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_serialize(::user_api::v1::HandleSAMLCallbackRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_parse(::user_api::v1::HandleSAMLCallbackRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_copy_from(::user_api::v1::HandleSAMLCallbackRequest* dst, const ::user_api::v1::HandleSAMLCallbackRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>* field) {
  return field->size();
}
const ::user_api::v1::HandleSAMLCallbackRequest& __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::HandleSAMLCallbackRequest* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::HandleSAMLCallbackRequest* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_get_saml_response(::user_api::v1::HandleSAMLCallbackRequest* msg) {
  absl::string_view val = msg->saml_response();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_set_saml_response(::user_api::v1::HandleSAMLCallbackRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_saml_response(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_get_relay_state(::user_api::v1::HandleSAMLCallbackRequest* msg) {
  absl::string_view val = msg->relay_state();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackRequest_set_relay_state(::user_api::v1::HandleSAMLCallbackRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_relay_state(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>* __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          int32_t key, ::user_api::v1::HandleSAMLCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m,
                       int32_t key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          int32_t key, ::user_api::v1::HandleSAMLCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>* __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          uint32_t key, ::user_api::v1::HandleSAMLCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m,
                       uint32_t key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          uint32_t key, ::user_api::v1::HandleSAMLCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>* __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          int64_t key, ::user_api::v1::HandleSAMLCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m,
                       int64_t key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          int64_t key, ::user_api::v1::HandleSAMLCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>* __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          uint64_t key, ::user_api::v1::HandleSAMLCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m,
                       uint64_t key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          uint64_t key, ::user_api::v1::HandleSAMLCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>* __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_free(const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_clear(google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_size(const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_insert(google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          bool key, ::user_api::v1::HandleSAMLCallbackRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_get(const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>* m,
                       bool key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_remove(google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          bool key, ::user_api::v1::HandleSAMLCallbackRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleSAMLCallbackRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleSAMLCallbackRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::HandleSAMLCallbackRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.HandleSAMLCallbackResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_new() { return new ::user_api::v1::HandleSAMLCallbackResponse(); }
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_delete(void* ptr) { delete static_cast<::user_api::v1::HandleSAMLCallbackResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_serialize(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_parse(::user_api::v1::HandleSAMLCallbackResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_copy_from(::user_api::v1::HandleSAMLCallbackResponse* dst, const ::user_api::v1::HandleSAMLCallbackResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>* field) {
  return field->size();
}
const ::user_api::v1::HandleSAMLCallbackResponse& __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::HandleSAMLCallbackResponse* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::HandleSAMLCallbackResponse* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::HandleSAMLCallbackResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_get_user(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_get_mut_user(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_clear_user(::user_api::v1::HandleSAMLCallbackResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_has_user(::user_api::v1::HandleSAMLCallbackResponse* msg) { return msg->has_user(); }

const void* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_get_auth_token(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  return static_cast<const void*>(&msg->auth_token());
}
void* __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_get_mut_auth_token(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  return static_cast<void*>(msg->mutable_auth_token());
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_clear_auth_token(::user_api::v1::HandleSAMLCallbackResponse* msg) { msg->clear_auth_token(); }
bool __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_has_auth_token(::user_api::v1::HandleSAMLCallbackResponse* msg) { return msg->has_auth_token(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_get_instance_name(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  absl::string_view val = msg->instance_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_set_instance_name(::user_api::v1::HandleSAMLCallbackResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_instance_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_get_request_origin(::user_api::v1::HandleSAMLCallbackResponse* msg) {
  absl::string_view val = msg->request_origin();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_HandleSAMLCallbackResponse_set_request_origin(::user_api::v1::HandleSAMLCallbackResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_request_origin(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>* __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          int32_t key, ::user_api::v1::HandleSAMLCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m,
                       int32_t key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          int32_t key, ::user_api::v1::HandleSAMLCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_HandleSAMLCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::HandleSAMLCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>* __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          uint32_t key, ::user_api::v1::HandleSAMLCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m,
                       uint32_t key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          uint32_t key, ::user_api::v1::HandleSAMLCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_HandleSAMLCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::HandleSAMLCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>* __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          int64_t key, ::user_api::v1::HandleSAMLCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m,
                       int64_t key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          int64_t key, ::user_api::v1::HandleSAMLCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_HandleSAMLCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::HandleSAMLCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>* __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          uint64_t key, ::user_api::v1::HandleSAMLCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m,
                       uint64_t key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          uint64_t key, ::user_api::v1::HandleSAMLCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_HandleSAMLCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::HandleSAMLCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>* __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_free(const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_clear(google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_size(const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_insert(google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          bool key, ::user_api::v1::HandleSAMLCallbackResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_get(const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>* m,
                       bool key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_remove(google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          bool key, ::user_api::v1::HandleSAMLCallbackResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_HandleSAMLCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::HandleSAMLCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleSAMLCallbackResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::HandleSAMLCallbackResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::HandleSAMLCallbackResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_HandleSAMLCallbackResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::HandleSAMLCallbackResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::HandleSAMLCallbackResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.SAMLSPMetadataRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_new() { return new ::user_api::v1::SAMLSPMetadataRequest(); }
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_delete(void* ptr) { delete static_cast<::user_api::v1::SAMLSPMetadataRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_serialize(::user_api::v1::SAMLSPMetadataRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_parse(::user_api::v1::SAMLSPMetadataRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_copy_from(::user_api::v1::SAMLSPMetadataRequest* dst, const ::user_api::v1::SAMLSPMetadataRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>* field) {
  return field->size();
}
const ::user_api::v1::SAMLSPMetadataRequest& __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::SAMLSPMetadataRequest* __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::SAMLSPMetadataRequest* __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>* __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          int32_t key, ::user_api::v1::SAMLSPMetadataRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>* m,
                       int32_t key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          int32_t key, ::user_api::v1::SAMLSPMetadataRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>* __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          uint32_t key, ::user_api::v1::SAMLSPMetadataRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>* m,
                       uint32_t key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          uint32_t key, ::user_api::v1::SAMLSPMetadataRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>* __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          int64_t key, ::user_api::v1::SAMLSPMetadataRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>* m,
                       int64_t key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          int64_t key, ::user_api::v1::SAMLSPMetadataRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>* __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          uint64_t key, ::user_api::v1::SAMLSPMetadataRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>* m,
                       uint64_t key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          uint64_t key, ::user_api::v1::SAMLSPMetadataRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>* __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_free(const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_clear(google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_size(const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_insert(google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          bool key, ::user_api::v1::SAMLSPMetadataRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_get(const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>* m,
                       bool key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_remove(google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          bool key, ::user_api::v1::SAMLSPMetadataRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::SAMLSPMetadataRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::SAMLSPMetadataRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::SAMLSPMetadataRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.SAMLSPMetadataResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_new() { return new ::user_api::v1::SAMLSPMetadataResponse(); }
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_delete(void* ptr) { delete static_cast<::user_api::v1::SAMLSPMetadataResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_serialize(::user_api::v1::SAMLSPMetadataResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_parse(::user_api::v1::SAMLSPMetadataResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_copy_from(::user_api::v1::SAMLSPMetadataResponse* dst, const ::user_api::v1::SAMLSPMetadataResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>* field) {
  return field->size();
}
const ::user_api::v1::SAMLSPMetadataResponse& __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::SAMLSPMetadataResponse* __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::SAMLSPMetadataResponse* __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::SAMLSPMetadataResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_get_sp_metadata(::user_api::v1::SAMLSPMetadataResponse* msg) {
  absl::string_view val = msg->sp_metadata();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_SAMLSPMetadataResponse_set_sp_metadata(::user_api::v1::SAMLSPMetadataResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_sp_metadata(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>* __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          int32_t key, ::user_api::v1::SAMLSPMetadataResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>* m,
                       int32_t key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          int32_t key, ::user_api::v1::SAMLSPMetadataResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_SAMLSPMetadataResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::SAMLSPMetadataResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>* __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          uint32_t key, ::user_api::v1::SAMLSPMetadataResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>* m,
                       uint32_t key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          uint32_t key, ::user_api::v1::SAMLSPMetadataResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_SAMLSPMetadataResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::SAMLSPMetadataResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>* __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          int64_t key, ::user_api::v1::SAMLSPMetadataResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>* m,
                       int64_t key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          int64_t key, ::user_api::v1::SAMLSPMetadataResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_SAMLSPMetadataResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::SAMLSPMetadataResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>* __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          uint64_t key, ::user_api::v1::SAMLSPMetadataResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>* m,
                       uint64_t key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          uint64_t key, ::user_api::v1::SAMLSPMetadataResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_SAMLSPMetadataResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::SAMLSPMetadataResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>* __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_free(const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_clear(google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_size(const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_insert(google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          bool key, ::user_api::v1::SAMLSPMetadataResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_get(const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>* m,
                       bool key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_remove(google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          bool key, ::user_api::v1::SAMLSPMetadataResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_SAMLSPMetadataResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::SAMLSPMetadataResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::SAMLSPMetadataResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::SAMLSPMetadataResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::SAMLSPMetadataResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_SAMLSPMetadataResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::SAMLSPMetadataResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::SAMLSPMetadataResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetAppSettingsRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_new() { return new ::user_api::v1::GetAppSettingsRequest(); }
void __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_delete(void* ptr) { delete static_cast<::user_api::v1::GetAppSettingsRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_serialize(::user_api::v1::GetAppSettingsRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_parse(::user_api::v1::GetAppSettingsRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_copy_from(::user_api::v1::GetAppSettingsRequest* dst, const ::user_api::v1::GetAppSettingsRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>* field) {
  return field->size();
}
const ::user_api::v1::GetAppSettingsRequest& __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetAppSettingsRequest* __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetAppSettingsRequest* __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetAppSettingsRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>* __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          int32_t key, ::user_api::v1::GetAppSettingsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>* m,
                       int32_t key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          int32_t key, ::user_api::v1::GetAppSettingsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>* __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          uint32_t key, ::user_api::v1::GetAppSettingsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>* m,
                       uint32_t key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          uint32_t key, ::user_api::v1::GetAppSettingsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>* __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          int64_t key, ::user_api::v1::GetAppSettingsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>* m,
                       int64_t key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          int64_t key, ::user_api::v1::GetAppSettingsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>* __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          uint64_t key, ::user_api::v1::GetAppSettingsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>* m,
                       uint64_t key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest> * m,
                          uint64_t key, ::user_api::v1::GetAppSettingsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>* __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_free(const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_clear(google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_size(const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_insert(google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest> * m,
                          bool key, ::user_api::v1::GetAppSettingsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_get(const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>* m,
                       bool key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_remove(google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest> * m,
                          bool key, ::user_api::v1::GetAppSettingsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetAppSettingsRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetAppSettingsRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetAppSettingsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AppSettings
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AppSettings_new() { return new ::user_api::v1::AppSettings(); }
void __rust_proto_thunk__user_api_v1_AppSettings_delete(void* ptr) { delete static_cast<::user_api::v1::AppSettings*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AppSettings_serialize(::user_api::v1::AppSettings* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AppSettings_parse(::user_api::v1::AppSettings* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AppSettings_copy_from(::user_api::v1::AppSettings* dst, const ::user_api::v1::AppSettings* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AppSettings_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>* field) {
  return field->size();
}
const ::user_api::v1::AppSettings& __rust_proto_thunk__user_api_v1_AppSettings_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AppSettings* __rust_proto_thunk__user_api_v1_AppSettings_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AppSettings* __rust_proto_thunk__user_api_v1_AppSettings_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AppSettings_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AppSettings_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AppSettings>& src) {
  dst = src;
}

void __rust_proto_thunk__user_api_v1_AppSettings_clear_authn_providers(::user_api::v1::AppSettings* msg) {
  msg->clear_authn_providers();
}
google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* __rust_proto_thunk__user_api_v1_AppSettings_get_mut_authn_providers(::user_api::v1::AppSettings* msg) {
  return msg->mutable_authn_providers();
}
const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* __rust_proto_thunk__user_api_v1_AppSettings_get_authn_providers(
    const ::user_api::v1::AppSettings* msg) {
  return &msg->authn_providers();
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>* __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_free(const google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_clear(google::protobuf::Map<int32_t, ::user_api::v1::AppSettings> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_size(const google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_insert(google::protobuf::Map<int32_t, ::user_api::v1::AppSettings> * m,
                          int32_t key, ::user_api::v1::AppSettings value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_get(const google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>* m,
                       int32_t key, const ::user_api::v1::AppSettings** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AppSettings* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_remove(google::protobuf::Map<int32_t, ::user_api::v1::AppSettings> * m,
                          int32_t key, ::user_api::v1::AppSettings * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AppSettings_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AppSettings** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AppSettings>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>* __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings> * m,
                          uint32_t key, ::user_api::v1::AppSettings value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>* m,
                       uint32_t key, const ::user_api::v1::AppSettings** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AppSettings* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings> * m,
                          uint32_t key, ::user_api::v1::AppSettings * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AppSettings_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AppSettings** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AppSettings>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>* __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_free(const google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_clear(google::protobuf::Map<int64_t, ::user_api::v1::AppSettings> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_size(const google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_insert(google::protobuf::Map<int64_t, ::user_api::v1::AppSettings> * m,
                          int64_t key, ::user_api::v1::AppSettings value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_get(const google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>* m,
                       int64_t key, const ::user_api::v1::AppSettings** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AppSettings* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_remove(google::protobuf::Map<int64_t, ::user_api::v1::AppSettings> * m,
                          int64_t key, ::user_api::v1::AppSettings * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AppSettings_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AppSettings** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AppSettings>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>* __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings> * m,
                          uint64_t key, ::user_api::v1::AppSettings value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>* m,
                       uint64_t key, const ::user_api::v1::AppSettings** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AppSettings* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings> * m,
                          uint64_t key, ::user_api::v1::AppSettings * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AppSettings_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AppSettings** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AppSettings>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AppSettings>* __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AppSettings>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_free(const google::protobuf::Map<bool, ::user_api::v1::AppSettings>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_clear(google::protobuf::Map<bool, ::user_api::v1::AppSettings> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_size(const google::protobuf::Map<bool, ::user_api::v1::AppSettings>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_insert(google::protobuf::Map<bool, ::user_api::v1::AppSettings> * m,
                          bool key, ::user_api::v1::AppSettings value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_get(const google::protobuf::Map<bool, ::user_api::v1::AppSettings>* m,
                       bool key, const ::user_api::v1::AppSettings** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AppSettings* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_remove(google::protobuf::Map<bool, ::user_api::v1::AppSettings> * m,
                          bool key, ::user_api::v1::AppSettings * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AppSettings>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AppSettings_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AppSettings** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AppSettings>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AppSettings>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AppSettings>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_free(const google::protobuf::Map<std::string, ::user_api::v1::AppSettings>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_clear(google::protobuf::Map<std::string, ::user_api::v1::AppSettings> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_size(const google::protobuf::Map<std::string, ::user_api::v1::AppSettings>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_insert(google::protobuf::Map<std::string, ::user_api::v1::AppSettings> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AppSettings value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_get(const google::protobuf::Map<std::string, ::user_api::v1::AppSettings>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AppSettings** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AppSettings* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_remove(google::protobuf::Map<std::string, ::user_api::v1::AppSettings> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AppSettings * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AppSettings>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AppSettings_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AppSettings** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AppSettings>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AuthnProvider
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AuthnProvider_new() { return new ::user_api::v1::AuthnProvider(); }
void __rust_proto_thunk__user_api_v1_AuthnProvider_delete(void* ptr) { delete static_cast<::user_api::v1::AuthnProvider*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AuthnProvider_serialize(::user_api::v1::AuthnProvider* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AuthnProvider_parse(::user_api::v1::AuthnProvider* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AuthnProvider_copy_from(::user_api::v1::AuthnProvider* dst, const ::user_api::v1::AuthnProvider* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AuthnProvider_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* field) {
  return field->size();
}
const ::user_api::v1::AuthnProvider& __rust_proto_thunk__user_api_v1_AuthnProvider_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AuthnProvider* __rust_proto_thunk__user_api_v1_AuthnProvider_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AuthnProvider* __rust_proto_thunk__user_api_v1_AuthnProvider_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AuthnProvider_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AuthnProvider_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AuthnProvider>& src) {
  dst = src;
}

::user_api::v1::Provider __rust_proto_thunk__user_api_v1_AuthnProvider_get_provider(::user_api::v1::AuthnProvider* msg) { return msg->provider(); }
void __rust_proto_thunk__user_api_v1_AuthnProvider_set_provider(::user_api::v1::AuthnProvider* msg, ::user_api::v1::Provider val) {
  msg->set_provider(val);
}

bool __rust_proto_thunk__user_api_v1_AuthnProvider_get_enabled(::user_api::v1::AuthnProvider* msg) { return msg->enabled(); }
void __rust_proto_thunk__user_api_v1_AuthnProvider_set_enabled(::user_api::v1::AuthnProvider* msg, bool val) {
  msg->set_enabled(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>* __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_free(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_clear(google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_size(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_insert(google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider> * m,
                          int32_t key, ::user_api::v1::AuthnProvider value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_get(const google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>* m,
                       int32_t key, const ::user_api::v1::AuthnProvider** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnProvider* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_remove(google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider> * m,
                          int32_t key, ::user_api::v1::AuthnProvider * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AuthnProvider_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AuthnProvider** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AuthnProvider>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>* __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider> * m,
                          uint32_t key, ::user_api::v1::AuthnProvider value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>* m,
                       uint32_t key, const ::user_api::v1::AuthnProvider** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnProvider* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider> * m,
                          uint32_t key, ::user_api::v1::AuthnProvider * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AuthnProvider_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AuthnProvider** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AuthnProvider>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>* __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_free(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_clear(google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_size(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_insert(google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider> * m,
                          int64_t key, ::user_api::v1::AuthnProvider value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_get(const google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>* m,
                       int64_t key, const ::user_api::v1::AuthnProvider** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnProvider* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_remove(google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider> * m,
                          int64_t key, ::user_api::v1::AuthnProvider * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AuthnProvider_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AuthnProvider** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AuthnProvider>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>* __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider> * m,
                          uint64_t key, ::user_api::v1::AuthnProvider value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>* m,
                       uint64_t key, const ::user_api::v1::AuthnProvider** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnProvider* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider> * m,
                          uint64_t key, ::user_api::v1::AuthnProvider * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AuthnProvider_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AuthnProvider** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AuthnProvider>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>* __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_free(const google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_clear(google::protobuf::Map<bool, ::user_api::v1::AuthnProvider> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_size(const google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_insert(google::protobuf::Map<bool, ::user_api::v1::AuthnProvider> * m,
                          bool key, ::user_api::v1::AuthnProvider value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_get(const google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>* m,
                       bool key, const ::user_api::v1::AuthnProvider** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnProvider* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_remove(google::protobuf::Map<bool, ::user_api::v1::AuthnProvider> * m,
                          bool key, ::user_api::v1::AuthnProvider * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AuthnProvider_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AuthnProvider** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AuthnProvider>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_free(const google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_clear(google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_size(const google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_insert(google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnProvider value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_get(const google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AuthnProvider** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AuthnProvider* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_remove(google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AuthnProvider * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AuthnProvider_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AuthnProvider** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AuthnProvider>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetAppSettingsResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_new() { return new ::user_api::v1::GetAppSettingsResponse(); }
void __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_delete(void* ptr) { delete static_cast<::user_api::v1::GetAppSettingsResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_serialize(::user_api::v1::GetAppSettingsResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_parse(::user_api::v1::GetAppSettingsResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_copy_from(::user_api::v1::GetAppSettingsResponse* dst, const ::user_api::v1::GetAppSettingsResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>* field) {
  return field->size();
}
const ::user_api::v1::GetAppSettingsResponse& __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetAppSettingsResponse* __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetAppSettingsResponse* __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetAppSettingsResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_get_app_settings(::user_api::v1::GetAppSettingsResponse* msg) {
  return static_cast<const void*>(&msg->app_settings());
}
void* __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_get_mut_app_settings(::user_api::v1::GetAppSettingsResponse* msg) {
  return static_cast<void*>(msg->mutable_app_settings());
}
void __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_clear_app_settings(::user_api::v1::GetAppSettingsResponse* msg) { msg->clear_app_settings(); }
bool __rust_proto_thunk__user_api_v1_GetAppSettingsResponse_has_app_settings(::user_api::v1::GetAppSettingsResponse* msg) { return msg->has_app_settings(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>* __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          int32_t key, ::user_api::v1::GetAppSettingsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>* m,
                       int32_t key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          int32_t key, ::user_api::v1::GetAppSettingsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetAppSettingsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetAppSettingsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>* __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          uint32_t key, ::user_api::v1::GetAppSettingsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>* m,
                       uint32_t key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          uint32_t key, ::user_api::v1::GetAppSettingsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetAppSettingsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetAppSettingsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>* __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          int64_t key, ::user_api::v1::GetAppSettingsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>* m,
                       int64_t key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          int64_t key, ::user_api::v1::GetAppSettingsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetAppSettingsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetAppSettingsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>* __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          uint64_t key, ::user_api::v1::GetAppSettingsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>* m,
                       uint64_t key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse> * m,
                          uint64_t key, ::user_api::v1::GetAppSettingsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetAppSettingsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetAppSettingsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>* __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_free(const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_clear(google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_size(const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_insert(google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse> * m,
                          bool key, ::user_api::v1::GetAppSettingsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_get(const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>* m,
                       bool key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_remove(google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse> * m,
                          bool key, ::user_api::v1::GetAppSettingsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetAppSettingsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetAppSettingsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetAppSettingsResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetAppSettingsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetAppSettingsResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetAppSettingsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetAppSettingsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetAppSettingsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetUserByDIDRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_new() { return new ::user_api::v1::GetUserByDIDRequest(); }
void __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_delete(void* ptr) { delete static_cast<::user_api::v1::GetUserByDIDRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_serialize(::user_api::v1::GetUserByDIDRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_parse(::user_api::v1::GetUserByDIDRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_copy_from(::user_api::v1::GetUserByDIDRequest* dst, const ::user_api::v1::GetUserByDIDRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>* field) {
  return field->size();
}
const ::user_api::v1::GetUserByDIDRequest& __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetUserByDIDRequest* __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetUserByDIDRequest* __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_get_did(::user_api::v1::GetUserByDIDRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_GetUserByDIDRequest_set_did(::user_api::v1::GetUserByDIDRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>* __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          int32_t key, ::user_api::v1::GetUserByDIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>* m,
                       int32_t key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          int32_t key, ::user_api::v1::GetUserByDIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>* __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          uint32_t key, ::user_api::v1::GetUserByDIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>* m,
                       uint32_t key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          uint32_t key, ::user_api::v1::GetUserByDIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>* __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          int64_t key, ::user_api::v1::GetUserByDIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>* m,
                       int64_t key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          int64_t key, ::user_api::v1::GetUserByDIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>* __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          uint64_t key, ::user_api::v1::GetUserByDIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>* m,
                       uint64_t key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest> * m,
                          uint64_t key, ::user_api::v1::GetUserByDIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>* __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_free(const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_clear(google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_size(const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_insert(google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest> * m,
                          bool key, ::user_api::v1::GetUserByDIDRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_get(const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>* m,
                       bool key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_remove(google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest> * m,
                          bool key, ::user_api::v1::GetUserByDIDRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetUserByDIDRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetUserByDIDRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetUserByDIDRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetUserByDIDResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_new() { return new ::user_api::v1::GetUserByDIDResponse(); }
void __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_delete(void* ptr) { delete static_cast<::user_api::v1::GetUserByDIDResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_serialize(::user_api::v1::GetUserByDIDResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_parse(::user_api::v1::GetUserByDIDResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_copy_from(::user_api::v1::GetUserByDIDResponse* dst, const ::user_api::v1::GetUserByDIDResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>* field) {
  return field->size();
}
const ::user_api::v1::GetUserByDIDResponse& __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetUserByDIDResponse* __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetUserByDIDResponse* __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetUserByDIDResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_get_user(::user_api::v1::GetUserByDIDResponse* msg) {
  return static_cast<const void*>(&msg->user());
}
void* __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_get_mut_user(::user_api::v1::GetUserByDIDResponse* msg) {
  return static_cast<void*>(msg->mutable_user());
}
void __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_clear_user(::user_api::v1::GetUserByDIDResponse* msg) { msg->clear_user(); }
bool __rust_proto_thunk__user_api_v1_GetUserByDIDResponse_has_user(::user_api::v1::GetUserByDIDResponse* msg) { return msg->has_user(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>* __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          int32_t key, ::user_api::v1::GetUserByDIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>* m,
                       int32_t key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          int32_t key, ::user_api::v1::GetUserByDIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetUserByDIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetUserByDIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>* __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          uint32_t key, ::user_api::v1::GetUserByDIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>* m,
                       uint32_t key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          uint32_t key, ::user_api::v1::GetUserByDIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetUserByDIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetUserByDIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>* __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          int64_t key, ::user_api::v1::GetUserByDIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>* m,
                       int64_t key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          int64_t key, ::user_api::v1::GetUserByDIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetUserByDIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetUserByDIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>* __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          uint64_t key, ::user_api::v1::GetUserByDIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>* m,
                       uint64_t key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse> * m,
                          uint64_t key, ::user_api::v1::GetUserByDIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetUserByDIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetUserByDIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>* __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_free(const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_clear(google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_size(const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_insert(google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse> * m,
                          bool key, ::user_api::v1::GetUserByDIDResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_get(const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>* m,
                       bool key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_remove(google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse> * m,
                          bool key, ::user_api::v1::GetUserByDIDResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetUserByDIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetUserByDIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetUserByDIDResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetUserByDIDResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetUserByDIDResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetUserByDIDResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetUserByDIDResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetUserByDIDResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AssociateWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AssociateWalletRequest_new() { return new ::user_api::v1::AssociateWalletRequest(); }
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_delete(void* ptr) { delete static_cast<::user_api::v1::AssociateWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AssociateWalletRequest_serialize(::user_api::v1::AssociateWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AssociateWalletRequest_parse(::user_api::v1::AssociateWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_copy_from(::user_api::v1::AssociateWalletRequest* dst, const ::user_api::v1::AssociateWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AssociateWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>* field) {
  return field->size();
}
const ::user_api::v1::AssociateWalletRequest& __rust_proto_thunk__user_api_v1_AssociateWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AssociateWalletRequest* __rust_proto_thunk__user_api_v1_AssociateWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AssociateWalletRequest* __rust_proto_thunk__user_api_v1_AssociateWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AssociateWalletRequest_get_did(::user_api::v1::AssociateWalletRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_set_did(::user_api::v1::AssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AssociateWalletRequest_get_did_type(::user_api::v1::AssociateWalletRequest* msg) {
  absl::string_view val = msg->did_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_set_did_type(::user_api::v1::AssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did_type(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_AssociateWalletRequest_get_purpose(::user_api::v1::AssociateWalletRequest* msg) {
  absl::string_view val = msg->purpose();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_set_purpose(::user_api::v1::AssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_purpose(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__user_api_v1_AssociateWalletRequest_get_metadata(::user_api::v1::AssociateWalletRequest* msg) {
  return static_cast<const void*>(&msg->metadata());
}
void* __rust_proto_thunk__user_api_v1_AssociateWalletRequest_get_mut_metadata(::user_api::v1::AssociateWalletRequest* msg) {
  return static_cast<void*>(msg->mutable_metadata());
}
void __rust_proto_thunk__user_api_v1_AssociateWalletRequest_clear_metadata(::user_api::v1::AssociateWalletRequest* msg) { msg->clear_metadata(); }
bool __rust_proto_thunk__user_api_v1_AssociateWalletRequest_has_metadata(::user_api::v1::AssociateWalletRequest* msg) { return msg->has_metadata(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest> * m,
                          int32_t key, ::user_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>* m,
                       int32_t key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest> * m,
                          int32_t key, ::user_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest> * m,
                          uint32_t key, ::user_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>* m,
                       uint32_t key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest> * m,
                          uint32_t key, ::user_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest> * m,
                          int64_t key, ::user_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>* m,
                       int64_t key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest> * m,
                          int64_t key, ::user_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest> * m,
                          uint64_t key, ::user_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>* m,
                       uint64_t key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest> * m,
                          uint64_t key, ::user_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest> * m,
                          bool key, ::user_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>* m,
                       bool key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest> * m,
                          bool key, ::user_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AssociateWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.AssociateWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_AssociateWalletResponse_new() { return new ::user_api::v1::AssociateWalletResponse(); }
void __rust_proto_thunk__user_api_v1_AssociateWalletResponse_delete(void* ptr) { delete static_cast<::user_api::v1::AssociateWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_AssociateWalletResponse_serialize(::user_api::v1::AssociateWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_AssociateWalletResponse_parse(::user_api::v1::AssociateWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_AssociateWalletResponse_copy_from(::user_api::v1::AssociateWalletResponse* dst, const ::user_api::v1::AssociateWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_AssociateWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>* field) {
  return field->size();
}
const ::user_api::v1::AssociateWalletResponse& __rust_proto_thunk__user_api_v1_AssociateWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::AssociateWalletResponse* __rust_proto_thunk__user_api_v1_AssociateWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::AssociateWalletResponse* __rust_proto_thunk__user_api_v1_AssociateWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_AssociateWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_AssociateWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::AssociateWalletResponse>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse> * m,
                          int32_t key, ::user_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>* m,
                       int32_t key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse> * m,
                          int32_t key, ::user_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse> * m,
                          uint32_t key, ::user_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>* m,
                       uint32_t key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse> * m,
                          uint32_t key, ::user_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse> * m,
                          int64_t key, ::user_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>* m,
                       int64_t key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse> * m,
                          int64_t key, ::user_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse> * m,
                          uint64_t key, ::user_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>* m,
                       uint64_t key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse> * m,
                          uint64_t key, ::user_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse> * m,
                          bool key, ::user_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>* m,
                       bool key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse> * m,
                          bool key, ::user_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AssociateWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.DissociateWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_DissociateWalletRequest_new() { return new ::user_api::v1::DissociateWalletRequest(); }
void __rust_proto_thunk__user_api_v1_DissociateWalletRequest_delete(void* ptr) { delete static_cast<::user_api::v1::DissociateWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_DissociateWalletRequest_serialize(::user_api::v1::DissociateWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_DissociateWalletRequest_parse(::user_api::v1::DissociateWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_DissociateWalletRequest_copy_from(::user_api::v1::DissociateWalletRequest* dst, const ::user_api::v1::DissociateWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_DissociateWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>* field) {
  return field->size();
}
const ::user_api::v1::DissociateWalletRequest& __rust_proto_thunk__user_api_v1_DissociateWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::DissociateWalletRequest* __rust_proto_thunk__user_api_v1_DissociateWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::DissociateWalletRequest* __rust_proto_thunk__user_api_v1_DissociateWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_DissociateWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_DissociateWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_DissociateWalletRequest_get_did(::user_api::v1::DissociateWalletRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_DissociateWalletRequest_set_did(::user_api::v1::DissociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>* __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest> * m,
                          int32_t key, ::user_api::v1::DissociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>* m,
                       int32_t key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest> * m,
                          int32_t key, ::user_api::v1::DissociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>* __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest> * m,
                          uint32_t key, ::user_api::v1::DissociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>* m,
                       uint32_t key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest> * m,
                          uint32_t key, ::user_api::v1::DissociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>* __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest> * m,
                          int64_t key, ::user_api::v1::DissociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>* m,
                       int64_t key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest> * m,
                          int64_t key, ::user_api::v1::DissociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>* __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest> * m,
                          uint64_t key, ::user_api::v1::DissociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>* m,
                       uint64_t key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest> * m,
                          uint64_t key, ::user_api::v1::DissociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>* __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_free(const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_clear(google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_size(const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_insert(google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest> * m,
                          bool key, ::user_api::v1::DissociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_get(const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>* m,
                       bool key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_remove(google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest> * m,
                          bool key, ::user_api::v1::DissociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::DissociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::DissociateWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::DissociateWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::DissociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.DissociateWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_DissociateWalletResponse_new() { return new ::user_api::v1::DissociateWalletResponse(); }
void __rust_proto_thunk__user_api_v1_DissociateWalletResponse_delete(void* ptr) { delete static_cast<::user_api::v1::DissociateWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_DissociateWalletResponse_serialize(::user_api::v1::DissociateWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_DissociateWalletResponse_parse(::user_api::v1::DissociateWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_DissociateWalletResponse_copy_from(::user_api::v1::DissociateWalletResponse* dst, const ::user_api::v1::DissociateWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_DissociateWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>* field) {
  return field->size();
}
const ::user_api::v1::DissociateWalletResponse& __rust_proto_thunk__user_api_v1_DissociateWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::DissociateWalletResponse* __rust_proto_thunk__user_api_v1_DissociateWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::DissociateWalletResponse* __rust_proto_thunk__user_api_v1_DissociateWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_DissociateWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_DissociateWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::DissociateWalletResponse>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>* __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse> * m,
                          int32_t key, ::user_api::v1::DissociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>* m,
                       int32_t key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse> * m,
                          int32_t key, ::user_api::v1::DissociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_DissociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::DissociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>* __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse> * m,
                          uint32_t key, ::user_api::v1::DissociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>* m,
                       uint32_t key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse> * m,
                          uint32_t key, ::user_api::v1::DissociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_DissociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::DissociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>* __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse> * m,
                          int64_t key, ::user_api::v1::DissociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>* m,
                       int64_t key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse> * m,
                          int64_t key, ::user_api::v1::DissociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_DissociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::DissociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>* __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse> * m,
                          uint64_t key, ::user_api::v1::DissociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>* m,
                       uint64_t key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse> * m,
                          uint64_t key, ::user_api::v1::DissociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_DissociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::DissociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>* __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_free(const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_clear(google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_size(const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_insert(google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse> * m,
                          bool key, ::user_api::v1::DissociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_get(const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>* m,
                       bool key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_remove(google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse> * m,
                          bool key, ::user_api::v1::DissociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_DissociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::DissociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::DissociateWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::DissociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::DissociateWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_DissociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::DissociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::DissociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.ListUsersRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_ListUsersRequest_new() { return new ::user_api::v1::ListUsersRequest(); }
void __rust_proto_thunk__user_api_v1_ListUsersRequest_delete(void* ptr) { delete static_cast<::user_api::v1::ListUsersRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_ListUsersRequest_serialize(::user_api::v1::ListUsersRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_ListUsersRequest_parse(::user_api::v1::ListUsersRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_ListUsersRequest_copy_from(::user_api::v1::ListUsersRequest* dst, const ::user_api::v1::ListUsersRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_ListUsersRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>* field) {
  return field->size();
}
const ::user_api::v1::ListUsersRequest& __rust_proto_thunk__user_api_v1_ListUsersRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::ListUsersRequest* __rust_proto_thunk__user_api_v1_ListUsersRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::ListUsersRequest* __rust_proto_thunk__user_api_v1_ListUsersRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_ListUsersRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_ListUsersRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersRequest>& src) {
  dst = src;
}

::int32_t __rust_proto_thunk__user_api_v1_ListUsersRequest_get_page(::user_api::v1::ListUsersRequest* msg) { return msg->page(); }
void __rust_proto_thunk__user_api_v1_ListUsersRequest_set_page(::user_api::v1::ListUsersRequest* msg, ::int32_t val) {
  msg->set_page(val);
}

::int32_t __rust_proto_thunk__user_api_v1_ListUsersRequest_get_page_size(::user_api::v1::ListUsersRequest* msg) { return msg->page_size(); }
void __rust_proto_thunk__user_api_v1_ListUsersRequest_set_page_size(::user_api::v1::ListUsersRequest* msg, ::int32_t val) {
  msg->set_page_size(val);
}

const void* __rust_proto_thunk__user_api_v1_ListUsersRequest_get_sort_by(::user_api::v1::ListUsersRequest* msg) {
  return static_cast<const void*>(&msg->sort_by());
}
void* __rust_proto_thunk__user_api_v1_ListUsersRequest_get_mut_sort_by(::user_api::v1::ListUsersRequest* msg) {
  return static_cast<void*>(msg->mutable_sort_by());
}
void __rust_proto_thunk__user_api_v1_ListUsersRequest_clear_sort_by(::user_api::v1::ListUsersRequest* msg) { msg->clear_sort_by(); }
bool __rust_proto_thunk__user_api_v1_ListUsersRequest_has_sort_by(::user_api::v1::ListUsersRequest* msg) { return msg->has_sort_by(); }

const void* __rust_proto_thunk__user_api_v1_ListUsersRequest_get_filter(::user_api::v1::ListUsersRequest* msg) {
  return static_cast<const void*>(&msg->filter());
}
void* __rust_proto_thunk__user_api_v1_ListUsersRequest_get_mut_filter(::user_api::v1::ListUsersRequest* msg) {
  return static_cast<void*>(msg->mutable_filter());
}
void __rust_proto_thunk__user_api_v1_ListUsersRequest_clear_filter(::user_api::v1::ListUsersRequest* msg) { msg->clear_filter(); }
bool __rust_proto_thunk__user_api_v1_ListUsersRequest_has_filter(::user_api::v1::ListUsersRequest* msg) { return msg->has_filter(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>* __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest> * m,
                          int32_t key, ::user_api::v1::ListUsersRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>* m,
                       int32_t key, const ::user_api::v1::ListUsersRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest> * m,
                          int32_t key, ::user_api::v1::ListUsersRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ListUsersRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::ListUsersRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::ListUsersRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>* __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest> * m,
                          uint32_t key, ::user_api::v1::ListUsersRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>* m,
                       uint32_t key, const ::user_api::v1::ListUsersRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest> * m,
                          uint32_t key, ::user_api::v1::ListUsersRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ListUsersRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::ListUsersRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>* __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest> * m,
                          int64_t key, ::user_api::v1::ListUsersRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>* m,
                       int64_t key, const ::user_api::v1::ListUsersRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest> * m,
                          int64_t key, ::user_api::v1::ListUsersRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ListUsersRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::ListUsersRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::ListUsersRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>* __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest> * m,
                          uint64_t key, ::user_api::v1::ListUsersRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>* m,
                       uint64_t key, const ::user_api::v1::ListUsersRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest> * m,
                          uint64_t key, ::user_api::v1::ListUsersRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ListUsersRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::ListUsersRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>* __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_free(const google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_clear(google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_size(const google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_insert(google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest> * m,
                          bool key, ::user_api::v1::ListUsersRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_get(const google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>* m,
                       bool key, const ::user_api::v1::ListUsersRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_remove(google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest> * m,
                          bool key, ::user_api::v1::ListUsersRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ListUsersRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::ListUsersRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::ListUsersRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ListUsersRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::ListUsersRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ListUsersRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::ListUsersRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::ListUsersRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.ListUsersResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_ListUsersResponse_new() { return new ::user_api::v1::ListUsersResponse(); }
void __rust_proto_thunk__user_api_v1_ListUsersResponse_delete(void* ptr) { delete static_cast<::user_api::v1::ListUsersResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_ListUsersResponse_serialize(::user_api::v1::ListUsersResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_ListUsersResponse_parse(::user_api::v1::ListUsersResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_ListUsersResponse_copy_from(::user_api::v1::ListUsersResponse* dst, const ::user_api::v1::ListUsersResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_ListUsersResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>* field) {
  return field->size();
}
const ::user_api::v1::ListUsersResponse& __rust_proto_thunk__user_api_v1_ListUsersResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::ListUsersResponse* __rust_proto_thunk__user_api_v1_ListUsersResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::ListUsersResponse* __rust_proto_thunk__user_api_v1_ListUsersResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_ListUsersResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_ListUsersResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::ListUsersResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__user_api_v1_ListUsersResponse_clear_users(::user_api::v1::ListUsersResponse* msg) {
  msg->clear_users();
}
google::protobuf::RepeatedPtrField<::user_api::v1::User>* __rust_proto_thunk__user_api_v1_ListUsersResponse_get_mut_users(::user_api::v1::ListUsersResponse* msg) {
  return msg->mutable_users();
}
const google::protobuf::RepeatedPtrField<::user_api::v1::User>* __rust_proto_thunk__user_api_v1_ListUsersResponse_get_users(
    const ::user_api::v1::ListUsersResponse* msg) {
  return &msg->users();
}

::int32_t __rust_proto_thunk__user_api_v1_ListUsersResponse_get_total_matching_users(::user_api::v1::ListUsersResponse* msg) { return msg->total_matching_users(); }
void __rust_proto_thunk__user_api_v1_ListUsersResponse_set_total_matching_users(::user_api::v1::ListUsersResponse* msg, ::int32_t val) {
  msg->set_total_matching_users(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>* __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse> * m,
                          int32_t key, ::user_api::v1::ListUsersResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>* m,
                       int32_t key, const ::user_api::v1::ListUsersResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse> * m,
                          int32_t key, ::user_api::v1::ListUsersResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ListUsersResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::ListUsersResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::ListUsersResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>* __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse> * m,
                          uint32_t key, ::user_api::v1::ListUsersResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>* m,
                       uint32_t key, const ::user_api::v1::ListUsersResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse> * m,
                          uint32_t key, ::user_api::v1::ListUsersResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ListUsersResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::ListUsersResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::ListUsersResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>* __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse> * m,
                          int64_t key, ::user_api::v1::ListUsersResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>* m,
                       int64_t key, const ::user_api::v1::ListUsersResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse> * m,
                          int64_t key, ::user_api::v1::ListUsersResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ListUsersResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::ListUsersResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::ListUsersResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>* __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse> * m,
                          uint64_t key, ::user_api::v1::ListUsersResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>* m,
                       uint64_t key, const ::user_api::v1::ListUsersResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse> * m,
                          uint64_t key, ::user_api::v1::ListUsersResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ListUsersResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::ListUsersResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::ListUsersResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>* __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_free(const google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_clear(google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_size(const google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_insert(google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse> * m,
                          bool key, ::user_api::v1::ListUsersResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_get(const google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>* m,
                       bool key, const ::user_api::v1::ListUsersResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_remove(google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse> * m,
                          bool key, ::user_api::v1::ListUsersResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ListUsersResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::ListUsersResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::ListUsersResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ListUsersResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::ListUsersResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ListUsersResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ListUsersResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ListUsersResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::ListUsersResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::ListUsersResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.ApiKeyEntity
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_ApiKeyEntity_new() { return new ::user_api::v1::ApiKeyEntity(); }
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_delete(void* ptr) { delete static_cast<::user_api::v1::ApiKeyEntity*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_ApiKeyEntity_serialize(::user_api::v1::ApiKeyEntity* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_ApiKeyEntity_parse(::user_api::v1::ApiKeyEntity* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_ApiKeyEntity_copy_from(::user_api::v1::ApiKeyEntity* dst, const ::user_api::v1::ApiKeyEntity* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_ApiKeyEntity_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* field) {
  return field->size();
}
const ::user_api::v1::ApiKeyEntity& __rust_proto_thunk__user_api_v1_ApiKeyEntity_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::ApiKeyEntity* __rust_proto_thunk__user_api_v1_ApiKeyEntity_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::ApiKeyEntity* __rust_proto_thunk__user_api_v1_ApiKeyEntity_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_ApiKeyEntity_get_client_id(::user_api::v1::ApiKeyEntity* msg) {
  absl::string_view val = msg->client_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_set_client_id(::user_api::v1::ApiKeyEntity* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_client_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_ApiKeyEntity_get_client_name(::user_api::v1::ApiKeyEntity* msg) {
  absl::string_view val = msg->client_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_set_client_name(::user_api::v1::ApiKeyEntity* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_client_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_ApiKeyEntity_get_api_key(::user_api::v1::ApiKeyEntity* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_set_api_key(::user_api::v1::ApiKeyEntity* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::user_api::v1::ApiKeyStatus __rust_proto_thunk__user_api_v1_ApiKeyEntity_get_status(::user_api::v1::ApiKeyEntity* msg) { return msg->status(); }
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_set_status(::user_api::v1::ApiKeyEntity* msg, ::user_api::v1::ApiKeyStatus val) {
  msg->set_status(val);
}

const void* __rust_proto_thunk__user_api_v1_ApiKeyEntity_get_expiry_date(::user_api::v1::ApiKeyEntity* msg) {
  return static_cast<const void*>(&msg->expiry_date());
}
void* __rust_proto_thunk__user_api_v1_ApiKeyEntity_get_mut_expiry_date(::user_api::v1::ApiKeyEntity* msg) {
  return static_cast<void*>(msg->mutable_expiry_date());
}
void __rust_proto_thunk__user_api_v1_ApiKeyEntity_clear_expiry_date(::user_api::v1::ApiKeyEntity* msg) { msg->clear_expiry_date(); }
bool __rust_proto_thunk__user_api_v1_ApiKeyEntity_has_expiry_date(::user_api::v1::ApiKeyEntity* msg) { return msg->has_expiry_date(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_free(const google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_clear(google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_size(const google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_insert(google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity> * m,
                          int32_t key, ::user_api::v1::ApiKeyEntity value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_get(const google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>* m,
                       int32_t key, const ::user_api::v1::ApiKeyEntity** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ApiKeyEntity* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_remove(google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity> * m,
                          int32_t key, ::user_api::v1::ApiKeyEntity * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_ApiKeyEntity_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::ApiKeyEntity** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::ApiKeyEntity>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_free(const google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_clear(google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_size(const google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_insert(google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity> * m,
                          uint32_t key, ::user_api::v1::ApiKeyEntity value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_get(const google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>* m,
                       uint32_t key, const ::user_api::v1::ApiKeyEntity** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ApiKeyEntity* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_remove(google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity> * m,
                          uint32_t key, ::user_api::v1::ApiKeyEntity * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_ApiKeyEntity_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::ApiKeyEntity** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::ApiKeyEntity>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_free(const google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_clear(google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_size(const google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_insert(google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity> * m,
                          int64_t key, ::user_api::v1::ApiKeyEntity value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_get(const google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>* m,
                       int64_t key, const ::user_api::v1::ApiKeyEntity** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ApiKeyEntity* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_remove(google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity> * m,
                          int64_t key, ::user_api::v1::ApiKeyEntity * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_ApiKeyEntity_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::ApiKeyEntity** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::ApiKeyEntity>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_free(const google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_clear(google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_size(const google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_insert(google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity> * m,
                          uint64_t key, ::user_api::v1::ApiKeyEntity value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_get(const google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>* m,
                       uint64_t key, const ::user_api::v1::ApiKeyEntity** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ApiKeyEntity* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_remove(google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity> * m,
                          uint64_t key, ::user_api::v1::ApiKeyEntity * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_ApiKeyEntity_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::ApiKeyEntity** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::ApiKeyEntity>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_free(const google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_clear(google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_size(const google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_insert(google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity> * m,
                          bool key, ::user_api::v1::ApiKeyEntity value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_get(const google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>* m,
                       bool key, const ::user_api::v1::ApiKeyEntity** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ApiKeyEntity* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_remove(google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity> * m,
                          bool key, ::user_api::v1::ApiKeyEntity * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_iter(
      const google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_ApiKeyEntity_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::ApiKeyEntity** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::ApiKeyEntity>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_free(const google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_clear(google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_size(const google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_insert(google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ApiKeyEntity value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_get(const google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::ApiKeyEntity** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::ApiKeyEntity* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_remove(google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::ApiKeyEntity * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_ApiKeyEntity_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::ApiKeyEntity** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::ApiKeyEntity>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateApiKeyRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_new() { return new ::user_api::v1::CreateApiKeyRequest(); }
void __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_delete(void* ptr) { delete static_cast<::user_api::v1::CreateApiKeyRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_serialize(::user_api::v1::CreateApiKeyRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_parse(::user_api::v1::CreateApiKeyRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_copy_from(::user_api::v1::CreateApiKeyRequest* dst, const ::user_api::v1::CreateApiKeyRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>* field) {
  return field->size();
}
const ::user_api::v1::CreateApiKeyRequest& __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateApiKeyRequest* __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateApiKeyRequest* __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_get_client_name(::user_api::v1::CreateApiKeyRequest* msg) {
  absl::string_view val = msg->client_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_CreateApiKeyRequest_set_client_name(::user_api::v1::CreateApiKeyRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_client_name(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>* __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          int32_t key, ::user_api::v1::CreateApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>* m,
                       int32_t key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          int32_t key, ::user_api::v1::CreateApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>* __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          uint32_t key, ::user_api::v1::CreateApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>* m,
                       uint32_t key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          uint32_t key, ::user_api::v1::CreateApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>* __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          int64_t key, ::user_api::v1::CreateApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>* m,
                       int64_t key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          int64_t key, ::user_api::v1::CreateApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>* __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          uint64_t key, ::user_api::v1::CreateApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>* m,
                       uint64_t key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest> * m,
                          uint64_t key, ::user_api::v1::CreateApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>* __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_free(const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_clear(google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_size(const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_insert(google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest> * m,
                          bool key, ::user_api::v1::CreateApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_get(const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>* m,
                       bool key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_remove(google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest> * m,
                          bool key, ::user_api::v1::CreateApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateApiKeyRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateApiKeyRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CreateApiKeyResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_new() { return new ::user_api::v1::CreateApiKeyResponse(); }
void __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_delete(void* ptr) { delete static_cast<::user_api::v1::CreateApiKeyResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_serialize(::user_api::v1::CreateApiKeyResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_parse(::user_api::v1::CreateApiKeyResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_copy_from(::user_api::v1::CreateApiKeyResponse* dst, const ::user_api::v1::CreateApiKeyResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>* field) {
  return field->size();
}
const ::user_api::v1::CreateApiKeyResponse& __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CreateApiKeyResponse* __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CreateApiKeyResponse* __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CreateApiKeyResponse>& src) {
  dst = src;
}

const void* __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_get_api_key_entity(::user_api::v1::CreateApiKeyResponse* msg) {
  return static_cast<const void*>(&msg->api_key_entity());
}
void* __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_get_mut_api_key_entity(::user_api::v1::CreateApiKeyResponse* msg) {
  return static_cast<void*>(msg->mutable_api_key_entity());
}
void __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_clear_api_key_entity(::user_api::v1::CreateApiKeyResponse* msg) { msg->clear_api_key_entity(); }
bool __rust_proto_thunk__user_api_v1_CreateApiKeyResponse_has_api_key_entity(::user_api::v1::CreateApiKeyResponse* msg) { return msg->has_api_key_entity(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>* __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          int32_t key, ::user_api::v1::CreateApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>* m,
                       int32_t key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          int32_t key, ::user_api::v1::CreateApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CreateApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CreateApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>* __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          uint32_t key, ::user_api::v1::CreateApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>* m,
                       uint32_t key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          uint32_t key, ::user_api::v1::CreateApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CreateApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CreateApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>* __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          int64_t key, ::user_api::v1::CreateApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>* m,
                       int64_t key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          int64_t key, ::user_api::v1::CreateApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CreateApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CreateApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>* __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          uint64_t key, ::user_api::v1::CreateApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>* m,
                       uint64_t key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse> * m,
                          uint64_t key, ::user_api::v1::CreateApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CreateApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CreateApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>* __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_free(const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_clear(google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_size(const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_insert(google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse> * m,
                          bool key, ::user_api::v1::CreateApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_get(const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>* m,
                       bool key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_remove(google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse> * m,
                          bool key, ::user_api::v1::CreateApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CreateApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CreateApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateApiKeyResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CreateApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CreateApiKeyResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CreateApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CreateApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CreateApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.UpdateApiKeyStatusRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_new() { return new ::user_api::v1::UpdateApiKeyStatusRequest(); }
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_delete(void* ptr) { delete static_cast<::user_api::v1::UpdateApiKeyStatusRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_serialize(::user_api::v1::UpdateApiKeyStatusRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_parse(::user_api::v1::UpdateApiKeyStatusRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_copy_from(::user_api::v1::UpdateApiKeyStatusRequest* dst, const ::user_api::v1::UpdateApiKeyStatusRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>* field) {
  return field->size();
}
const ::user_api::v1::UpdateApiKeyStatusRequest& __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::UpdateApiKeyStatusRequest* __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::UpdateApiKeyStatusRequest* __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_get_client_id(::user_api::v1::UpdateApiKeyStatusRequest* msg) {
  absl::string_view val = msg->client_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_set_client_id(::user_api::v1::UpdateApiKeyStatusRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_client_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_get_api_key(::user_api::v1::UpdateApiKeyStatusRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_set_api_key(::user_api::v1::UpdateApiKeyStatusRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::user_api::v1::ApiKeyStatus __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_get_api_key_status(::user_api::v1::UpdateApiKeyStatusRequest* msg) { return msg->api_key_status(); }
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusRequest_set_api_key_status(::user_api::v1::UpdateApiKeyStatusRequest* msg, ::user_api::v1::ApiKeyStatus val) {
  msg->set_api_key_status(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          int32_t key, ::user_api::v1::UpdateApiKeyStatusRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m,
                       int32_t key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          int32_t key, ::user_api::v1::UpdateApiKeyStatusRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          uint32_t key, ::user_api::v1::UpdateApiKeyStatusRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m,
                       uint32_t key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          uint32_t key, ::user_api::v1::UpdateApiKeyStatusRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          int64_t key, ::user_api::v1::UpdateApiKeyStatusRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m,
                       int64_t key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          int64_t key, ::user_api::v1::UpdateApiKeyStatusRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          uint64_t key, ::user_api::v1::UpdateApiKeyStatusRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m,
                       uint64_t key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          uint64_t key, ::user_api::v1::UpdateApiKeyStatusRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>* __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_free(const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_clear(google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_size(const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_insert(google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          bool key, ::user_api::v1::UpdateApiKeyStatusRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_get(const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>* m,
                       bool key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_remove(google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          bool key, ::user_api::v1::UpdateApiKeyStatusRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::UpdateApiKeyStatusRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::UpdateApiKeyStatusRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::UpdateApiKeyStatusRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.UpdateApiKeyStatusResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_new() { return new ::user_api::v1::UpdateApiKeyStatusResponse(); }
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_delete(void* ptr) { delete static_cast<::user_api::v1::UpdateApiKeyStatusResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_serialize(::user_api::v1::UpdateApiKeyStatusResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_parse(::user_api::v1::UpdateApiKeyStatusResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_copy_from(::user_api::v1::UpdateApiKeyStatusResponse* dst, const ::user_api::v1::UpdateApiKeyStatusResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>* field) {
  return field->size();
}
const ::user_api::v1::UpdateApiKeyStatusResponse& __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::UpdateApiKeyStatusResponse* __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::UpdateApiKeyStatusResponse* __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_UpdateApiKeyStatusResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::UpdateApiKeyStatusResponse>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          int32_t key, ::user_api::v1::UpdateApiKeyStatusResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m,
                       int32_t key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          int32_t key, ::user_api::v1::UpdateApiKeyStatusResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_UpdateApiKeyStatusResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::UpdateApiKeyStatusResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          uint32_t key, ::user_api::v1::UpdateApiKeyStatusResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m,
                       uint32_t key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          uint32_t key, ::user_api::v1::UpdateApiKeyStatusResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_UpdateApiKeyStatusResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::UpdateApiKeyStatusResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          int64_t key, ::user_api::v1::UpdateApiKeyStatusResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m,
                       int64_t key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          int64_t key, ::user_api::v1::UpdateApiKeyStatusResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_UpdateApiKeyStatusResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::UpdateApiKeyStatusResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          uint64_t key, ::user_api::v1::UpdateApiKeyStatusResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m,
                       uint64_t key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          uint64_t key, ::user_api::v1::UpdateApiKeyStatusResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_UpdateApiKeyStatusResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::UpdateApiKeyStatusResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>* __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_free(const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_clear(google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_size(const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_insert(google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          bool key, ::user_api::v1::UpdateApiKeyStatusResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_get(const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>* m,
                       bool key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_remove(google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          bool key, ::user_api::v1::UpdateApiKeyStatusResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_UpdateApiKeyStatusResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::UpdateApiKeyStatusResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::UpdateApiKeyStatusResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::UpdateApiKeyStatusResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::UpdateApiKeyStatusResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_UpdateApiKeyStatusResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::UpdateApiKeyStatusResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::UpdateApiKeyStatusResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetApiKeysRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetApiKeysRequest_new() { return new ::user_api::v1::GetApiKeysRequest(); }
void __rust_proto_thunk__user_api_v1_GetApiKeysRequest_delete(void* ptr) { delete static_cast<::user_api::v1::GetApiKeysRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetApiKeysRequest_serialize(::user_api::v1::GetApiKeysRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetApiKeysRequest_parse(::user_api::v1::GetApiKeysRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetApiKeysRequest_copy_from(::user_api::v1::GetApiKeysRequest* dst, const ::user_api::v1::GetApiKeysRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetApiKeysRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>* field) {
  return field->size();
}
const ::user_api::v1::GetApiKeysRequest& __rust_proto_thunk__user_api_v1_GetApiKeysRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetApiKeysRequest* __rust_proto_thunk__user_api_v1_GetApiKeysRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetApiKeysRequest* __rust_proto_thunk__user_api_v1_GetApiKeysRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetApiKeysRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetApiKeysRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>* __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest> * m,
                          int32_t key, ::user_api::v1::GetApiKeysRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>* m,
                       int32_t key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest> * m,
                          int32_t key, ::user_api::v1::GetApiKeysRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>* __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest> * m,
                          uint32_t key, ::user_api::v1::GetApiKeysRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>* m,
                       uint32_t key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest> * m,
                          uint32_t key, ::user_api::v1::GetApiKeysRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>* __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest> * m,
                          int64_t key, ::user_api::v1::GetApiKeysRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>* m,
                       int64_t key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest> * m,
                          int64_t key, ::user_api::v1::GetApiKeysRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>* __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest> * m,
                          uint64_t key, ::user_api::v1::GetApiKeysRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>* m,
                       uint64_t key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest> * m,
                          uint64_t key, ::user_api::v1::GetApiKeysRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>* __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_free(const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_clear(google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_size(const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_insert(google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest> * m,
                          bool key, ::user_api::v1::GetApiKeysRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_get(const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>* m,
                       bool key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_remove(google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest> * m,
                          bool key, ::user_api::v1::GetApiKeysRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetApiKeysRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetApiKeysRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetApiKeysRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetApiKeysRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.GetApiKeysResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_GetApiKeysResponse_new() { return new ::user_api::v1::GetApiKeysResponse(); }
void __rust_proto_thunk__user_api_v1_GetApiKeysResponse_delete(void* ptr) { delete static_cast<::user_api::v1::GetApiKeysResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_GetApiKeysResponse_serialize(::user_api::v1::GetApiKeysResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_GetApiKeysResponse_parse(::user_api::v1::GetApiKeysResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_GetApiKeysResponse_copy_from(::user_api::v1::GetApiKeysResponse* dst, const ::user_api::v1::GetApiKeysResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_GetApiKeysResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>* field) {
  return field->size();
}
const ::user_api::v1::GetApiKeysResponse& __rust_proto_thunk__user_api_v1_GetApiKeysResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::GetApiKeysResponse* __rust_proto_thunk__user_api_v1_GetApiKeysResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::GetApiKeysResponse* __rust_proto_thunk__user_api_v1_GetApiKeysResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_GetApiKeysResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_GetApiKeysResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::GetApiKeysResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__user_api_v1_GetApiKeysResponse_clear_api_key_entities(::user_api::v1::GetApiKeysResponse* msg) {
  msg->clear_api_key_entities();
}
google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__user_api_v1_GetApiKeysResponse_get_mut_api_key_entities(::user_api::v1::GetApiKeysResponse* msg) {
  return msg->mutable_api_key_entities();
}
const google::protobuf::RepeatedPtrField<::user_api::v1::ApiKeyEntity>* __rust_proto_thunk__user_api_v1_GetApiKeysResponse_get_api_key_entities(
    const ::user_api::v1::GetApiKeysResponse* msg) {
  return &msg->api_key_entities();
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>* __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse> * m,
                          int32_t key, ::user_api::v1::GetApiKeysResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>* m,
                       int32_t key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse> * m,
                          int32_t key, ::user_api::v1::GetApiKeysResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_GetApiKeysResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::GetApiKeysResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>* __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse> * m,
                          uint32_t key, ::user_api::v1::GetApiKeysResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>* m,
                       uint32_t key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse> * m,
                          uint32_t key, ::user_api::v1::GetApiKeysResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_GetApiKeysResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::GetApiKeysResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>* __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse> * m,
                          int64_t key, ::user_api::v1::GetApiKeysResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>* m,
                       int64_t key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse> * m,
                          int64_t key, ::user_api::v1::GetApiKeysResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_GetApiKeysResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::GetApiKeysResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>* __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse> * m,
                          uint64_t key, ::user_api::v1::GetApiKeysResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>* m,
                       uint64_t key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse> * m,
                          uint64_t key, ::user_api::v1::GetApiKeysResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_GetApiKeysResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::GetApiKeysResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>* __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_free(const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_clear(google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_size(const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_insert(google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse> * m,
                          bool key, ::user_api::v1::GetApiKeysResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_get(const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>* m,
                       bool key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_remove(google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse> * m,
                          bool key, ::user_api::v1::GetApiKeysResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_GetApiKeysResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::GetApiKeysResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetApiKeysResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::GetApiKeysResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::GetApiKeysResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_GetApiKeysResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::GetApiKeysResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::GetApiKeysResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CheckApiKeyRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_new() { return new ::user_api::v1::CheckApiKeyRequest(); }
void __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_delete(void* ptr) { delete static_cast<::user_api::v1::CheckApiKeyRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_serialize(::user_api::v1::CheckApiKeyRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_parse(::user_api::v1::CheckApiKeyRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_copy_from(::user_api::v1::CheckApiKeyRequest* dst, const ::user_api::v1::CheckApiKeyRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>* field) {
  return field->size();
}
const ::user_api::v1::CheckApiKeyRequest& __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CheckApiKeyRequest* __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CheckApiKeyRequest* __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CheckApiKeyRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyRequest>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>* __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_free(const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_clear(google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_size(const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_insert(google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          int32_t key, ::user_api::v1::CheckApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_get(const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>* m,
                       int32_t key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_remove(google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          int32_t key, ::user_api::v1::CheckApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>* __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          uint32_t key, ::user_api::v1::CheckApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>* m,
                       uint32_t key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          uint32_t key, ::user_api::v1::CheckApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>* __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_free(const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_clear(google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_size(const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_insert(google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          int64_t key, ::user_api::v1::CheckApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_get(const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>* m,
                       int64_t key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_remove(google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          int64_t key, ::user_api::v1::CheckApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>* __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          uint64_t key, ::user_api::v1::CheckApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>* m,
                       uint64_t key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest> * m,
                          uint64_t key, ::user_api::v1::CheckApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>* __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_free(const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_clear(google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_size(const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_insert(google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest> * m,
                          bool key, ::user_api::v1::CheckApiKeyRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_get(const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>* m,
                       bool key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_remove(google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest> * m,
                          bool key, ::user_api::v1::CheckApiKeyRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_free(const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_clear(google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_size(const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_insert(google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CheckApiKeyRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_get(const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_remove(google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CheckApiKeyRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CheckApiKeyRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.CheckApiKeyResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_new() { return new ::user_api::v1::CheckApiKeyResponse(); }
void __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_delete(void* ptr) { delete static_cast<::user_api::v1::CheckApiKeyResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_serialize(::user_api::v1::CheckApiKeyResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_parse(::user_api::v1::CheckApiKeyResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_copy_from(::user_api::v1::CheckApiKeyResponse* dst, const ::user_api::v1::CheckApiKeyResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_repeated_len(google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>* field) {
  return field->size();
}
const ::user_api::v1::CheckApiKeyResponse& __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>* field,
  size_t index) {
  return field->Get(index);
}
::user_api::v1::CheckApiKeyResponse* __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::user_api::v1::CheckApiKeyResponse* __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_repeated_add(google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_repeated_clear(google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>& dst,
  const google::protobuf::RepeatedPtrField<::user_api::v1::CheckApiKeyResponse>& src) {
  dst = src;
}

bool __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_get_is_valid(::user_api::v1::CheckApiKeyResponse* msg) { return msg->is_valid(); }
void __rust_proto_thunk__user_api_v1_CheckApiKeyResponse_set_is_valid(::user_api::v1::CheckApiKeyResponse* msg, bool val) {
  msg->set_is_valid(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>* __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_new() {
    return new google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_free(const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_clear(google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_size(const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_insert(google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          int32_t key, ::user_api::v1::CheckApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_get(const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>* m,
                       int32_t key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_remove(google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          int32_t key, ::user_api::v1::CheckApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_iter(
      const google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_user_api_v1_CheckApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::user_api::v1::CheckApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>* __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_new() {
    return new google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_free(const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_clear(google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_size(const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_insert(google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          uint32_t key, ::user_api::v1::CheckApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_get(const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>* m,
                       uint32_t key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_remove(google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          uint32_t key, ::user_api::v1::CheckApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_iter(
      const google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_user_api_v1_CheckApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::user_api::v1::CheckApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>* __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_new() {
    return new google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_free(const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_clear(google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_size(const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_insert(google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          int64_t key, ::user_api::v1::CheckApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_get(const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>* m,
                       int64_t key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_remove(google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          int64_t key, ::user_api::v1::CheckApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_iter(
      const google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_user_api_v1_CheckApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::user_api::v1::CheckApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>* __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_new() {
    return new google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_free(const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_clear(google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_size(const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_insert(google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          uint64_t key, ::user_api::v1::CheckApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_get(const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>* m,
                       uint64_t key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_remove(google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse> * m,
                          uint64_t key, ::user_api::v1::CheckApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_iter(
      const google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_user_api_v1_CheckApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::user_api::v1::CheckApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>* __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_new() {
    return new google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_free(const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_clear(google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_size(const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_insert(google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse> * m,
                          bool key, ::user_api::v1::CheckApiKeyResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_get(const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>* m,
                       bool key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_remove(google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse> * m,
                          bool key, ::user_api::v1::CheckApiKeyResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_iter(
      const google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_user_api_v1_CheckApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::user_api::v1::CheckApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>* __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_new() {
    return new google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_free(const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_clear(google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_size(const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_insert(google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CheckApiKeyResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_get(const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::user_api::v1::CheckApiKeyResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_remove(google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::user_api::v1::CheckApiKeyResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_iter(
      const google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_user_api_v1_CheckApiKeyResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::user_api::v1::CheckApiKeyResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::user_api::v1::CheckApiKeyResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// user_api.v1.Provider
extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::user_api::v1::Provider, user_api_v1_Provider, ::user_api::v1::Provider, value, cpp_value)
}

// user_api.v1.Role
extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::user_api::v1::Role, user_api_v1_Role, ::user_api::v1::Role, value, cpp_value)
}

// user_api.v1.ApiKeyStatus
extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::user_api::v1::ApiKeyStatus, user_api_v1_ApiKeyStatus, ::user_api::v1::ApiKeyStatus, value, cpp_value)
}

