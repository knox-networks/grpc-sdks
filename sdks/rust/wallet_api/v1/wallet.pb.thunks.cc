#include "wallet_api/v1/wallet.proto.h"
#include "google/protobuf/rust/cpp_kernel/cpp_api.h"
// wallet_api.v1.CreateOwnerRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_new() { return new ::wallet_api::v1::CreateOwnerRequest(); }
void __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::CreateOwnerRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_serialize(::wallet_api::v1::CreateOwnerRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_parse(::wallet_api::v1::CreateOwnerRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_copy_from(::wallet_api::v1::CreateOwnerRequest* dst, const ::wallet_api::v1::CreateOwnerRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::CreateOwnerRequest& __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::CreateOwnerRequest* __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::CreateOwnerRequest* __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_get_owner_name(::wallet_api::v1::CreateOwnerRequest* msg) {
  absl::string_view val = msg->owner_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerRequest_set_owner_name(::wallet_api::v1::CreateOwnerRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_owner_name(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          int32_t key, ::wallet_api::v1::CreateOwnerRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>* m,
                       int32_t key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          int32_t key, ::wallet_api::v1::CreateOwnerRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          uint32_t key, ::wallet_api::v1::CreateOwnerRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>* m,
                       uint32_t key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          uint32_t key, ::wallet_api::v1::CreateOwnerRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          int64_t key, ::wallet_api::v1::CreateOwnerRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>* m,
                       int64_t key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          int64_t key, ::wallet_api::v1::CreateOwnerRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          uint64_t key, ::wallet_api::v1::CreateOwnerRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>* m,
                       uint64_t key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest> * m,
                          uint64_t key, ::wallet_api::v1::CreateOwnerRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest> * m,
                          bool key, ::wallet_api::v1::CreateOwnerRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>* m,
                       bool key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest> * m,
                          bool key, ::wallet_api::v1::CreateOwnerRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateOwnerRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateOwnerRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::CreateOwnerRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.CreateOwnerResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_new() { return new ::wallet_api::v1::CreateOwnerResponse(); }
void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::CreateOwnerResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_serialize(::wallet_api::v1::CreateOwnerResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_parse(::wallet_api::v1::CreateOwnerResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_copy_from(::wallet_api::v1::CreateOwnerResponse* dst, const ::wallet_api::v1::CreateOwnerResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::CreateOwnerResponse& __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::CreateOwnerResponse* __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::CreateOwnerResponse* __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateOwnerResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_get_owner_id(::wallet_api::v1::CreateOwnerResponse* msg) {
  absl::string_view val = msg->owner_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_set_owner_id(::wallet_api::v1::CreateOwnerResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_owner_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_get_api_key(::wallet_api::v1::CreateOwnerResponse* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_set_api_key(::wallet_api::v1::CreateOwnerResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_get_owner_name(::wallet_api::v1::CreateOwnerResponse* msg) {
  absl::string_view val = msg->owner_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateOwnerResponse_set_owner_name(::wallet_api::v1::CreateOwnerResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_owner_name(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          int32_t key, ::wallet_api::v1::CreateOwnerResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>* m,
                       int32_t key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          int32_t key, ::wallet_api::v1::CreateOwnerResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateOwnerResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::CreateOwnerResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          uint32_t key, ::wallet_api::v1::CreateOwnerResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>* m,
                       uint32_t key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          uint32_t key, ::wallet_api::v1::CreateOwnerResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateOwnerResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateOwnerResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          int64_t key, ::wallet_api::v1::CreateOwnerResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>* m,
                       int64_t key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          int64_t key, ::wallet_api::v1::CreateOwnerResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateOwnerResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::CreateOwnerResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          uint64_t key, ::wallet_api::v1::CreateOwnerResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>* m,
                       uint64_t key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse> * m,
                          uint64_t key, ::wallet_api::v1::CreateOwnerResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateOwnerResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateOwnerResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse> * m,
                          bool key, ::wallet_api::v1::CreateOwnerResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>* m,
                       bool key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse> * m,
                          bool key, ::wallet_api::v1::CreateOwnerResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateOwnerResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::CreateOwnerResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateOwnerResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateOwnerResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateOwnerResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateOwnerResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::CreateOwnerResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::CreateOwnerResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.CreateWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_new() { return new ::wallet_api::v1::CreateWalletRequest(); }
void __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::CreateWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_serialize(::wallet_api::v1::CreateWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_parse(::wallet_api::v1::CreateWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_copy_from(::wallet_api::v1::CreateWalletRequest* dst, const ::wallet_api::v1::CreateWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::CreateWalletRequest& __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::CreateWalletRequest* __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::CreateWalletRequest* __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_get_wallet_name(::wallet_api::v1::CreateWalletRequest* msg) {
  absl::string_view val = msg->wallet_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_set_wallet_name(::wallet_api::v1::CreateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_get_api_key(::wallet_api::v1::CreateWalletRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletRequest_set_api_key(::wallet_api::v1::CreateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          int32_t key, ::wallet_api::v1::CreateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>* m,
                       int32_t key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          int32_t key, ::wallet_api::v1::CreateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          uint32_t key, ::wallet_api::v1::CreateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>* m,
                       uint32_t key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          uint32_t key, ::wallet_api::v1::CreateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          int64_t key, ::wallet_api::v1::CreateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>* m,
                       int64_t key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          int64_t key, ::wallet_api::v1::CreateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          uint64_t key, ::wallet_api::v1::CreateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>* m,
                       uint64_t key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest> * m,
                          uint64_t key, ::wallet_api::v1::CreateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest> * m,
                          bool key, ::wallet_api::v1::CreateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>* m,
                       bool key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest> * m,
                          bool key, ::wallet_api::v1::CreateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::CreateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.CreateWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_new() { return new ::wallet_api::v1::CreateWalletResponse(); }
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::CreateWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_serialize(::wallet_api::v1::CreateWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_parse(::wallet_api::v1::CreateWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_copy_from(::wallet_api::v1::CreateWalletResponse* dst, const ::wallet_api::v1::CreateWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::CreateWalletResponse& __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::CreateWalletResponse* __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::CreateWalletResponse* __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateWalletResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_get_wallet_id(::wallet_api::v1::CreateWalletResponse* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_set_wallet_id(::wallet_api::v1::CreateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_get_wallet_name(::wallet_api::v1::CreateWalletResponse* msg) {
  absl::string_view val = msg->wallet_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_set_wallet_name(::wallet_api::v1::CreateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_get_public_key(::wallet_api::v1::CreateWalletResponse* msg) {
  absl::string_view val = msg->public_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_set_public_key(::wallet_api::v1::CreateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_public_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_get_did(::wallet_api::v1::CreateWalletResponse* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateWalletResponse_set_did(::wallet_api::v1::CreateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          int32_t key, ::wallet_api::v1::CreateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>* m,
                       int32_t key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          int32_t key, ::wallet_api::v1::CreateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::CreateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          uint32_t key, ::wallet_api::v1::CreateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>* m,
                       uint32_t key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          uint32_t key, ::wallet_api::v1::CreateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          int64_t key, ::wallet_api::v1::CreateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>* m,
                       int64_t key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          int64_t key, ::wallet_api::v1::CreateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::CreateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          uint64_t key, ::wallet_api::v1::CreateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>* m,
                       uint64_t key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse> * m,
                          uint64_t key, ::wallet_api::v1::CreateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse> * m,
                          bool key, ::wallet_api::v1::CreateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>* m,
                       bool key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse> * m,
                          bool key, ::wallet_api::v1::CreateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::CreateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::CreateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::CreateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListWalletsRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_new() { return new ::wallet_api::v1::ListWalletsRequest(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletsRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_serialize(::wallet_api::v1::ListWalletsRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_parse(::wallet_api::v1::ListWalletsRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_copy_from(::wallet_api::v1::ListWalletsRequest* dst, const ::wallet_api::v1::ListWalletsRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletsRequest& __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletsRequest* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletsRequest* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsRequest>& src) {
  dst = src;
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_page(::wallet_api::v1::ListWalletsRequest* msg) { return msg->page(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_set_page(::wallet_api::v1::ListWalletsRequest* msg, ::int32_t val) {
  msg->set_page(val);
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_page_size(::wallet_api::v1::ListWalletsRequest* msg) { return msg->page_size(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_set_page_size(::wallet_api::v1::ListWalletsRequest* msg, ::int32_t val) {
  msg->set_page_size(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_api_key(::wallet_api::v1::ListWalletsRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_set_api_key(::wallet_api::v1::ListWalletsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_filters(::wallet_api::v1::ListWalletsRequest* msg) {
  return static_cast<const void*>(&msg->filters());
}
void* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_mut_filters(::wallet_api::v1::ListWalletsRequest* msg) {
  return static_cast<void*>(msg->mutable_filters());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_clear_filters(::wallet_api::v1::ListWalletsRequest* msg) { msg->clear_filters(); }
bool __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_has_filters(::wallet_api::v1::ListWalletsRequest* msg) { return msg->has_filters(); }

const void* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_sort_by(::wallet_api::v1::ListWalletsRequest* msg) {
  return static_cast<const void*>(&msg->sort_by());
}
void* __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_get_mut_sort_by(::wallet_api::v1::ListWalletsRequest* msg) {
  return static_cast<void*>(msg->mutable_sort_by());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_clear_sort_by(::wallet_api::v1::ListWalletsRequest* msg) { msg->clear_sort_by(); }
bool __rust_proto_thunk__wallet_api_v1_ListWalletsRequest_has_sort_by(::wallet_api::v1::ListWalletsRequest* msg) { return msg->has_sort_by(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListWalletsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListWalletsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListWalletsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListWalletsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest> * m,
                          bool key, ::wallet_api::v1::ListWalletsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>* m,
                       bool key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest> * m,
                          bool key, ::wallet_api::v1::ListWalletsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletsRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletsRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListWalletsResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_new() { return new ::wallet_api::v1::ListWalletsResponse(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletsResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_serialize(::wallet_api::v1::ListWalletsResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_parse(::wallet_api::v1::ListWalletsResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_copy_from(::wallet_api::v1::ListWalletsResponse* dst, const ::wallet_api::v1::ListWalletsResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletsResponse& __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletsResponse* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletsResponse* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_clear_wallets(::wallet_api::v1::ListWalletsResponse* msg) {
  msg->clear_wallets();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_get_mut_wallets(::wallet_api::v1::ListWalletsResponse* msg) {
  return msg->mutable_wallets();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_get_wallets(
    const ::wallet_api::v1::ListWalletsResponse* msg) {
  return &msg->wallets();
}

::uint32_t __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_get_total_owned_wallets(::wallet_api::v1::ListWalletsResponse* msg) { return msg->total_owned_wallets(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_set_total_owned_wallets(::wallet_api::v1::ListWalletsResponse* msg, ::uint32_t val) {
  msg->set_total_owned_wallets(val);
}


}  // extern "C"
// clang-format on

        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_new() { return new ::wallet_api::v1::ListWalletsResponse_Wallet(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletsResponse_Wallet*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_serialize(::wallet_api::v1::ListWalletsResponse_Wallet* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_parse(::wallet_api::v1::ListWalletsResponse_Wallet* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_copy_from(::wallet_api::v1::ListWalletsResponse_Wallet* dst, const ::wallet_api::v1::ListWalletsResponse_Wallet* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletsResponse_Wallet& __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletsResponse_Wallet* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletsResponse_Wallet* __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletsResponse_Wallet>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_get_wallet_name(::wallet_api::v1::ListWalletsResponse_Wallet* msg) {
  absl::string_view val = msg->wallet_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_set_wallet_name(::wallet_api::v1::ListWalletsResponse_Wallet* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_get_wallet_id(::wallet_api::v1::ListWalletsResponse_Wallet* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_set_wallet_id(::wallet_api::v1::ListWalletsResponse_Wallet* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_get_public_key(::wallet_api::v1::ListWalletsResponse_Wallet* msg) {
  absl::string_view val = msg->public_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_set_public_key(::wallet_api::v1::ListWalletsResponse_Wallet* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_public_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_get_did(::wallet_api::v1::ListWalletsResponse_Wallet* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletsResponse_Wallet_set_did(::wallet_api::v1::ListWalletsResponse_Wallet* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          int32_t key, ::wallet_api::v1::ListWalletsResponse_Wallet value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse_Wallet* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          int32_t key, ::wallet_api::v1::ListWalletsResponse_Wallet * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_Wallet_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletsResponse_Wallet value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse_Wallet* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletsResponse_Wallet * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_Wallet_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse_Wallet>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          int64_t key, ::wallet_api::v1::ListWalletsResponse_Wallet value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse_Wallet* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          int64_t key, ::wallet_api::v1::ListWalletsResponse_Wallet * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_Wallet_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletsResponse_Wallet value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse_Wallet* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletsResponse_Wallet * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_Wallet_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse_Wallet>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          bool key, ::wallet_api::v1::ListWalletsResponse_Wallet value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>* m,
                       bool key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse_Wallet* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          bool key, ::wallet_api::v1::ListWalletsResponse_Wallet * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_Wallet_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse_Wallet>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletsResponse_Wallet value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse_Wallet* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletsResponse_Wallet * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_Wallet_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletsResponse_Wallet** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse_Wallet>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListWalletsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListWalletsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListWalletsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListWalletsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse> * m,
                          bool key, ::wallet_api::v1::ListWalletsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>* m,
                       bool key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse> * m,
                          bool key, ::wallet_api::v1::ListWalletsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletsResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletsResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListWalletBalancesRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_new() { return new ::wallet_api::v1::ListWalletBalancesRequest(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletBalancesRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_serialize(::wallet_api::v1::ListWalletBalancesRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_parse(::wallet_api::v1::ListWalletBalancesRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_copy_from(::wallet_api::v1::ListWalletBalancesRequest* dst, const ::wallet_api::v1::ListWalletBalancesRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletBalancesRequest& __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletBalancesRequest* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletBalancesRequest* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_get_wallet_id(::wallet_api::v1::ListWalletBalancesRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_set_wallet_id(::wallet_api::v1::ListWalletBalancesRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_get_api_key(::wallet_api::v1::ListWalletBalancesRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_set_api_key(::wallet_api::v1::ListWalletBalancesRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_get_sort_by(::wallet_api::v1::ListWalletBalancesRequest* msg) {
  return static_cast<const void*>(&msg->sort_by());
}
void* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_get_mut_sort_by(::wallet_api::v1::ListWalletBalancesRequest* msg) {
  return static_cast<void*>(msg->mutable_sort_by());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_clear_sort_by(::wallet_api::v1::ListWalletBalancesRequest* msg) { msg->clear_sort_by(); }
bool __rust_proto_thunk__wallet_api_v1_ListWalletBalancesRequest_has_sort_by(::wallet_api::v1::ListWalletBalancesRequest* msg) { return msg->has_sort_by(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalancesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalancesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalancesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalancesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalancesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalancesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalancesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalancesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          bool key, ::wallet_api::v1::ListWalletBalancesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>* m,
                       bool key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          bool key, ::wallet_api::v1::ListWalletBalancesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalancesRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalancesRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletBalancesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.WalletBalance
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_WalletBalance_new() { return new ::wallet_api::v1::WalletBalance(); }
void __rust_proto_thunk__wallet_api_v1_WalletBalance_delete(void* ptr) { delete static_cast<::wallet_api::v1::WalletBalance*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_WalletBalance_serialize(::wallet_api::v1::WalletBalance* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_WalletBalance_parse(::wallet_api::v1::WalletBalance* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_WalletBalance_copy_from(::wallet_api::v1::WalletBalance* dst, const ::wallet_api::v1::WalletBalance* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_WalletBalance_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* field) {
  return field->size();
}
const ::wallet_api::v1::WalletBalance& __rust_proto_thunk__wallet_api_v1_WalletBalance_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::WalletBalance* __rust_proto_thunk__wallet_api_v1_WalletBalance_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::WalletBalance* __rust_proto_thunk__wallet_api_v1_WalletBalance_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_WalletBalance_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_WalletBalance_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>& src) {
  dst = src;
}

const void* __rust_proto_thunk__wallet_api_v1_WalletBalance_get_amount(::wallet_api::v1::WalletBalance* msg) {
  return static_cast<const void*>(&msg->amount());
}
void* __rust_proto_thunk__wallet_api_v1_WalletBalance_get_mut_amount(::wallet_api::v1::WalletBalance* msg) {
  return static_cast<void*>(msg->mutable_amount());
}
void __rust_proto_thunk__wallet_api_v1_WalletBalance_clear_amount(::wallet_api::v1::WalletBalance* msg) { msg->clear_amount(); }
bool __rust_proto_thunk__wallet_api_v1_WalletBalance_has_amount(::wallet_api::v1::WalletBalance* msg) { return msg->has_amount(); }

::int64_t __rust_proto_thunk__wallet_api_v1_WalletBalance_get_file_count(::wallet_api::v1::WalletBalance* msg) { return msg->file_count(); }
void __rust_proto_thunk__wallet_api_v1_WalletBalance_set_file_count(::wallet_api::v1::WalletBalance* msg, ::int64_t val) {
  msg->set_file_count(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>* __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance> * m,
                          int32_t key, ::wallet_api::v1::WalletBalance value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>* m,
                       int32_t key, const ::wallet_api::v1::WalletBalance** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::WalletBalance* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance> * m,
                          int32_t key, ::wallet_api::v1::WalletBalance * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_WalletBalance_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::WalletBalance** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::WalletBalance>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>* __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance> * m,
                          uint32_t key, ::wallet_api::v1::WalletBalance value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>* m,
                       uint32_t key, const ::wallet_api::v1::WalletBalance** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::WalletBalance* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance> * m,
                          uint32_t key, ::wallet_api::v1::WalletBalance * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_WalletBalance_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::WalletBalance** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::WalletBalance>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>* __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance> * m,
                          int64_t key, ::wallet_api::v1::WalletBalance value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>* m,
                       int64_t key, const ::wallet_api::v1::WalletBalance** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::WalletBalance* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance> * m,
                          int64_t key, ::wallet_api::v1::WalletBalance * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_WalletBalance_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::WalletBalance** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::WalletBalance>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>* __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance> * m,
                          uint64_t key, ::wallet_api::v1::WalletBalance value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>* m,
                       uint64_t key, const ::wallet_api::v1::WalletBalance** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::WalletBalance* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance> * m,
                          uint64_t key, ::wallet_api::v1::WalletBalance * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_WalletBalance_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::WalletBalance** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::WalletBalance>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>* __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_free(const google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_clear(google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_size(const google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_insert(google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance> * m,
                          bool key, ::wallet_api::v1::WalletBalance value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_get(const google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>* m,
                       bool key, const ::wallet_api::v1::WalletBalance** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::WalletBalance* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_remove(google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance> * m,
                          bool key, ::wallet_api::v1::WalletBalance * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_WalletBalance_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::WalletBalance** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::WalletBalance>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_free(const google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_clear(google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_size(const google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_insert(google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::WalletBalance value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_get(const google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::WalletBalance** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::WalletBalance* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_remove(google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::WalletBalance * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_WalletBalance_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::WalletBalance** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::WalletBalance>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListWalletBalancesResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_new() { return new ::wallet_api::v1::ListWalletBalancesResponse(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletBalancesResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_serialize(::wallet_api::v1::ListWalletBalancesResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_parse(::wallet_api::v1::ListWalletBalancesResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_copy_from(::wallet_api::v1::ListWalletBalancesResponse* dst, const ::wallet_api::v1::ListWalletBalancesResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletBalancesResponse& __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletBalancesResponse* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletBalancesResponse* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalancesResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_clear_balances(::wallet_api::v1::ListWalletBalancesResponse* msg) {
  msg->clear_balances();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_get_mut_balances(::wallet_api::v1::ListWalletBalancesResponse* msg) {
  return msg->mutable_balances();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::WalletBalance>* __rust_proto_thunk__wallet_api_v1_ListWalletBalancesResponse_get_balances(
    const ::wallet_api::v1::ListWalletBalancesResponse* msg) {
  return &msg->balances();
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalancesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalancesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalancesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalancesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalancesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalancesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalancesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalancesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalancesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalancesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalancesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalancesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalancesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalancesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalancesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalancesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          bool key, ::wallet_api::v1::ListWalletBalancesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>* m,
                       bool key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          bool key, ::wallet_api::v1::ListWalletBalancesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalancesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalancesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalancesResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalancesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalancesResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalancesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletBalancesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalancesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListAssetFilesRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_new() { return new ::wallet_api::v1::ListAssetFilesRequest(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListAssetFilesRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_serialize(::wallet_api::v1::ListAssetFilesRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_parse(::wallet_api::v1::ListAssetFilesRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_copy_from(::wallet_api::v1::ListAssetFilesRequest* dst, const ::wallet_api::v1::ListAssetFilesRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ListAssetFilesRequest& __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListAssetFilesRequest* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListAssetFilesRequest* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesRequest>& src) {
  dst = src;
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_page(::wallet_api::v1::ListAssetFilesRequest* msg) { return msg->page(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_set_page(::wallet_api::v1::ListAssetFilesRequest* msg, ::int32_t val) {
  msg->set_page(val);
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_page_size(::wallet_api::v1::ListAssetFilesRequest* msg) { return msg->page_size(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_set_page_size(::wallet_api::v1::ListAssetFilesRequest* msg, ::int32_t val) {
  msg->set_page_size(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_wallet_id(::wallet_api::v1::ListAssetFilesRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_set_wallet_id(::wallet_api::v1::ListAssetFilesRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_api_key(::wallet_api::v1::ListAssetFilesRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_set_api_key(::wallet_api::v1::ListAssetFilesRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_filters(::wallet_api::v1::ListAssetFilesRequest* msg) {
  return static_cast<const void*>(&msg->filters());
}
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_mut_filters(::wallet_api::v1::ListAssetFilesRequest* msg) {
  return static_cast<void*>(msg->mutable_filters());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_clear_filters(::wallet_api::v1::ListAssetFilesRequest* msg) { msg->clear_filters(); }
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_has_filters(::wallet_api::v1::ListAssetFilesRequest* msg) { return msg->has_filters(); }

const void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_sort_by(::wallet_api::v1::ListAssetFilesRequest* msg) {
  return static_cast<const void*>(&msg->sort_by());
}
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_get_mut_sort_by(::wallet_api::v1::ListAssetFilesRequest* msg) {
  return static_cast<void*>(msg->mutable_sort_by());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_clear_sort_by(::wallet_api::v1::ListAssetFilesRequest* msg) { msg->clear_sort_by(); }
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesRequest_has_sort_by(::wallet_api::v1::ListAssetFilesRequest* msg) { return msg->has_sort_by(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>* m,
                       int32_t key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>* m,
                       int64_t key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>* m,
                       bool key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListAssetFilesRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListAssetFilesResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_new() { return new ::wallet_api::v1::ListAssetFilesResponse(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListAssetFilesResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_serialize(::wallet_api::v1::ListAssetFilesResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_parse(::wallet_api::v1::ListAssetFilesResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_copy_from(::wallet_api::v1::ListAssetFilesResponse* dst, const ::wallet_api::v1::ListAssetFilesResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ListAssetFilesResponse& __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListAssetFilesResponse* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListAssetFilesResponse* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_clear_funds(::wallet_api::v1::ListAssetFilesResponse* msg) {
  msg->clear_funds();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_get_mut_funds(::wallet_api::v1::ListAssetFilesResponse* msg) {
  return msg->mutable_funds();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_get_funds(
    const ::wallet_api::v1::ListAssetFilesResponse* msg) {
  return &msg->funds();
}

::uint32_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_get_total_owned_funds(::wallet_api::v1::ListAssetFilesResponse* msg) { return msg->total_owned_funds(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_set_total_owned_funds(::wallet_api::v1::ListAssetFilesResponse* msg, ::uint32_t val) {
  msg->set_total_owned_funds(val);
}


}  // extern "C"
// clang-format on

        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_new() { return new ::wallet_api::v1::ListAssetFilesResponse_Notary(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListAssetFilesResponse_Notary*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_serialize(::wallet_api::v1::ListAssetFilesResponse_Notary* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_parse(::wallet_api::v1::ListAssetFilesResponse_Notary* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_copy_from(::wallet_api::v1::ListAssetFilesResponse_Notary* dst, const ::wallet_api::v1::ListAssetFilesResponse_Notary* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* field) {
  return field->size();
}
const ::wallet_api::v1::ListAssetFilesResponse_Notary& __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListAssetFilesResponse_Notary* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListAssetFilesResponse_Notary* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_get_did(::wallet_api::v1::ListAssetFilesResponse_Notary* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_set_did(::wallet_api::v1::ListAssetFilesResponse_Notary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_get_signature(::wallet_api::v1::ListAssetFilesResponse_Notary* msg) {
  absl::string_view val = msg->signature();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Notary_set_signature(::wallet_api::v1::ListAssetFilesResponse_Notary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_signature(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m,
                       int32_t key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Notary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Notary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m,
                       uint32_t key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Notary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Notary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m,
                       int64_t key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Notary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Notary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m,
                       uint64_t key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Notary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse_Notary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Notary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Notary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse_Notary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m,
                       bool key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Notary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse_Notary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Notary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Notary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse_Notary value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Notary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse_Notary * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Notary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListAssetFilesResponse_Notary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Notary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_new() { return new ::wallet_api::v1::ListAssetFilesResponse_Promissory(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListAssetFilesResponse_Promissory*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_serialize(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_parse(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_copy_from(::wallet_api::v1::ListAssetFilesResponse_Promissory* dst, const ::wallet_api::v1::ListAssetFilesResponse_Promissory* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>* field) {
  return field->size();
}
const ::wallet_api::v1::ListAssetFilesResponse_Promissory& __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListAssetFilesResponse_Promissory* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListAssetFilesResponse_Promissory* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Promissory>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_version(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->version();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_version(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_version(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_id(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_id(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_currency(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->currency();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_currency(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_currency(absl::string_view(s.ptr, s.len));
}

::int64_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_amount(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) { return msg->amount(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_amount(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::int64_t val) {
  msg->set_amount(val);
}

::uint32_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_decimals(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) { return msg->decimals(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_decimals(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::uint32_t val) {
  msg->set_decimals(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_authority(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->authority();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_authority(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_authority(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_issuer(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->issuer();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_issuer(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_issuer(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_issuance_date(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->issuance_date();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_issuance_date(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_issuance_date(absl::string_view(s.ptr, s.len));
}

::uint32_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_block_depth(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) { return msg->block_depth(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_block_depth(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::uint32_t val) {
  msg->set_block_depth(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_authorization_signature(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->authorization_signature();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_authorization_signature(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_authorization_signature(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_transfer_signature(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  absl::string_view val = msg->transfer_signature();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_set_transfer_signature(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_transfer_signature(absl::string_view(s.ptr, s.len));
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_clear_notaries(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  msg->clear_notaries();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_mut_notaries(::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  return msg->mutable_notaries();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Notary>* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Promissory_get_notaries(
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* msg) {
  return &msg->notaries();
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m,
                       int32_t key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Promissory_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m,
                       uint32_t key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Promissory_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m,
                       int64_t key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Promissory_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m,
                       uint64_t key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse_Promissory * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Promissory_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Promissory>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse_Promissory value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m,
                       bool key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse_Promissory * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Promissory_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Promissory>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse_Promissory value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Promissory* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse_Promissory * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Promissory_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListAssetFilesResponse_Promissory** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Promissory>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_new() { return new ::wallet_api::v1::ListAssetFilesResponse_Fund(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListAssetFilesResponse_Fund*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_serialize(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_parse(::wallet_api::v1::ListAssetFilesResponse_Fund* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_copy_from(::wallet_api::v1::ListAssetFilesResponse_Fund* dst, const ::wallet_api::v1::ListAssetFilesResponse_Fund* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* field) {
  return field->size();
}
const ::wallet_api::v1::ListAssetFilesResponse_Fund& __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListAssetFilesResponse_Fund* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListAssetFilesResponse_Fund* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListAssetFilesResponse_Fund>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_get_wallet_id(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_set_wallet_id(::wallet_api::v1::ListAssetFilesResponse_Fund* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_get_promissory(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) {
  return static_cast<const void*>(&msg->promissory());
}
void* __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_get_mut_promissory(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) {
  return static_cast<void*>(msg->mutable_promissory());
}
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_clear_promissory(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) { msg->clear_promissory(); }
bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_has_promissory(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) { return msg->has_promissory(); }

bool __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_get_reserved(::wallet_api::v1::ListAssetFilesResponse_Fund* msg) { return msg->reserved(); }
void __rust_proto_thunk__wallet_api_v1_ListAssetFilesResponse_Fund_set_reserved(::wallet_api::v1::ListAssetFilesResponse_Fund* msg, bool val) {
  msg->set_reserved(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m,
                       int32_t key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Fund* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_Fund_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m,
                       uint32_t key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Fund* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_Fund_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m,
                       int64_t key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Fund* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_Fund_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m,
                       uint64_t key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Fund* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse_Fund * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_Fund_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse_Fund>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse_Fund value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m,
                       bool key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Fund* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse_Fund * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_Fund_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse_Fund>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse_Fund value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse_Fund* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse_Fund * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_Fund_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListAssetFilesResponse_Fund** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse_Fund>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>* m,
                       int32_t key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          int32_t key, ::wallet_api::v1::ListAssetFilesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListAssetFilesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListAssetFilesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListAssetFilesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListAssetFilesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListAssetFilesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>* m,
                       int64_t key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          int64_t key, ::wallet_api::v1::ListAssetFilesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListAssetFilesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListAssetFilesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListAssetFilesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListAssetFilesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListAssetFilesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>* m,
                       bool key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          bool key, ::wallet_api::v1::ListAssetFilesResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListAssetFilesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListAssetFilesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListAssetFilesResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListAssetFilesResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListAssetFilesResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListAssetFilesResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListAssetFilesResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListCredentialsRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_new() { return new ::wallet_api::v1::ListCredentialsRequest(); }
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListCredentialsRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_serialize(::wallet_api::v1::ListCredentialsRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_parse(::wallet_api::v1::ListCredentialsRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_copy_from(::wallet_api::v1::ListCredentialsRequest* dst, const ::wallet_api::v1::ListCredentialsRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ListCredentialsRequest& __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListCredentialsRequest* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListCredentialsRequest* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsRequest>& src) {
  dst = src;
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_page(::wallet_api::v1::ListCredentialsRequest* msg) { return msg->page(); }
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_set_page(::wallet_api::v1::ListCredentialsRequest* msg, ::int32_t val) {
  msg->set_page(val);
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_page_size(::wallet_api::v1::ListCredentialsRequest* msg) { return msg->page_size(); }
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_set_page_size(::wallet_api::v1::ListCredentialsRequest* msg, ::int32_t val) {
  msg->set_page_size(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_wallet_id(::wallet_api::v1::ListCredentialsRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_set_wallet_id(::wallet_api::v1::ListCredentialsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_api_key(::wallet_api::v1::ListCredentialsRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_set_api_key(::wallet_api::v1::ListCredentialsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_filters(::wallet_api::v1::ListCredentialsRequest* msg) {
  return static_cast<const void*>(&msg->filters());
}
void* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_mut_filters(::wallet_api::v1::ListCredentialsRequest* msg) {
  return static_cast<void*>(msg->mutable_filters());
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_clear_filters(::wallet_api::v1::ListCredentialsRequest* msg) { msg->clear_filters(); }
bool __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_has_filters(::wallet_api::v1::ListCredentialsRequest* msg) { return msg->has_filters(); }

const void* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_sort_by(::wallet_api::v1::ListCredentialsRequest* msg) {
  return static_cast<const void*>(&msg->sort_by());
}
void* __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_get_mut_sort_by(::wallet_api::v1::ListCredentialsRequest* msg) {
  return static_cast<void*>(msg->mutable_sort_by());
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_clear_sort_by(::wallet_api::v1::ListCredentialsRequest* msg) { msg->clear_sort_by(); }
bool __rust_proto_thunk__wallet_api_v1_ListCredentialsRequest_has_sort_by(::wallet_api::v1::ListCredentialsRequest* msg) { return msg->has_sort_by(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListCredentialsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>* m,
                       int32_t key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListCredentialsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListCredentialsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListCredentialsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListCredentialsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>* m,
                       int64_t key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListCredentialsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListCredentialsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListCredentialsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest> * m,
                          bool key, ::wallet_api::v1::ListCredentialsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>* m,
                       bool key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest> * m,
                          bool key, ::wallet_api::v1::ListCredentialsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListCredentialsRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListCredentialsRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListCredentialsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListCredentialsResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_new() { return new ::wallet_api::v1::ListCredentialsResponse(); }
void __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListCredentialsResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_serialize(::wallet_api::v1::ListCredentialsResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_parse(::wallet_api::v1::ListCredentialsResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_copy_from(::wallet_api::v1::ListCredentialsResponse* dst, const ::wallet_api::v1::ListCredentialsResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ListCredentialsResponse& __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListCredentialsResponse* __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListCredentialsResponse* __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListCredentialsResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_clear_credentials(::wallet_api::v1::ListCredentialsResponse* msg) {
  msg->clear_credentials();
}
google::protobuf::RepeatedPtrField<std::string>* __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_get_mut_credentials(::wallet_api::v1::ListCredentialsResponse* msg) {
  return msg->mutable_credentials();
}
const google::protobuf::RepeatedPtrField<std::string>* __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_get_credentials(
    const ::wallet_api::v1::ListCredentialsResponse* msg) {
  return &msg->credentials();
}

::uint32_t __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_get_total_owned_credentials(::wallet_api::v1::ListCredentialsResponse* msg) { return msg->total_owned_credentials(); }
void __rust_proto_thunk__wallet_api_v1_ListCredentialsResponse_set_total_owned_credentials(::wallet_api::v1::ListCredentialsResponse* msg, ::uint32_t val) {
  msg->set_total_owned_credentials(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListCredentialsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>* m,
                       int32_t key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListCredentialsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListCredentialsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListCredentialsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListCredentialsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListCredentialsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListCredentialsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListCredentialsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListCredentialsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>* m,
                       int64_t key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListCredentialsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListCredentialsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListCredentialsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListCredentialsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListCredentialsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListCredentialsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListCredentialsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse> * m,
                          bool key, ::wallet_api::v1::ListCredentialsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>* m,
                       bool key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse> * m,
                          bool key, ::wallet_api::v1::ListCredentialsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListCredentialsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListCredentialsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListCredentialsResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListCredentialsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListCredentialsResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListCredentialsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListCredentialsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListCredentialsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.AddCredentialRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_new() { return new ::wallet_api::v1::AddCredentialRequest(); }
void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::AddCredentialRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_serialize(::wallet_api::v1::AddCredentialRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_parse(::wallet_api::v1::AddCredentialRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_copy_from(::wallet_api::v1::AddCredentialRequest* dst, const ::wallet_api::v1::AddCredentialRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::AddCredentialRequest& __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::AddCredentialRequest* __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::AddCredentialRequest* __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_get_credential_type(::wallet_api::v1::AddCredentialRequest* msg) {
  absl::string_view val = msg->credential_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_set_credential_type(::wallet_api::v1::AddCredentialRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_credential_type(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_get_wallet_id(::wallet_api::v1::AddCredentialRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_set_wallet_id(::wallet_api::v1::AddCredentialRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_get_api_key(::wallet_api::v1::AddCredentialRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialRequest_set_api_key(::wallet_api::v1::AddCredentialRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          int32_t key, ::wallet_api::v1::AddCredentialRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>* m,
                       int32_t key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          int32_t key, ::wallet_api::v1::AddCredentialRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          uint32_t key, ::wallet_api::v1::AddCredentialRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>* m,
                       uint32_t key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          uint32_t key, ::wallet_api::v1::AddCredentialRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          int64_t key, ::wallet_api::v1::AddCredentialRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>* m,
                       int64_t key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          int64_t key, ::wallet_api::v1::AddCredentialRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          uint64_t key, ::wallet_api::v1::AddCredentialRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>* m,
                       uint64_t key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest> * m,
                          uint64_t key, ::wallet_api::v1::AddCredentialRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest> * m,
                          bool key, ::wallet_api::v1::AddCredentialRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>* m,
                       bool key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest> * m,
                          bool key, ::wallet_api::v1::AddCredentialRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AddCredentialRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AddCredentialRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::AddCredentialRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.AddCredentialResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_new() { return new ::wallet_api::v1::AddCredentialResponse(); }
void __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::AddCredentialResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_serialize(::wallet_api::v1::AddCredentialResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_parse(::wallet_api::v1::AddCredentialResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_copy_from(::wallet_api::v1::AddCredentialResponse* dst, const ::wallet_api::v1::AddCredentialResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::AddCredentialResponse& __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::AddCredentialResponse* __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::AddCredentialResponse* __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::AddCredentialResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_get_credential(::wallet_api::v1::AddCredentialResponse* msg) {
  absl::string_view val = msg->credential();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AddCredentialResponse_set_credential(::wallet_api::v1::AddCredentialResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_credential(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          int32_t key, ::wallet_api::v1::AddCredentialResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>* m,
                       int32_t key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          int32_t key, ::wallet_api::v1::AddCredentialResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AddCredentialResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::AddCredentialResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          uint32_t key, ::wallet_api::v1::AddCredentialResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>* m,
                       uint32_t key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          uint32_t key, ::wallet_api::v1::AddCredentialResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AddCredentialResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::AddCredentialResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          int64_t key, ::wallet_api::v1::AddCredentialResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>* m,
                       int64_t key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          int64_t key, ::wallet_api::v1::AddCredentialResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AddCredentialResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::AddCredentialResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          uint64_t key, ::wallet_api::v1::AddCredentialResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>* m,
                       uint64_t key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse> * m,
                          uint64_t key, ::wallet_api::v1::AddCredentialResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AddCredentialResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::AddCredentialResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse> * m,
                          bool key, ::wallet_api::v1::AddCredentialResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>* m,
                       bool key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse> * m,
                          bool key, ::wallet_api::v1::AddCredentialResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AddCredentialResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::AddCredentialResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AddCredentialResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AddCredentialResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AddCredentialResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AddCredentialResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::AddCredentialResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::AddCredentialResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.AssociateWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_new() { return new ::wallet_api::v1::AssociateWalletRequest(); }
void __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::AssociateWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_serialize(::wallet_api::v1::AssociateWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_parse(::wallet_api::v1::AssociateWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_copy_from(::wallet_api::v1::AssociateWalletRequest* dst, const ::wallet_api::v1::AssociateWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::AssociateWalletRequest& __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::AssociateWalletRequest* __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::AssociateWalletRequest* __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_get_wallet_id(::wallet_api::v1::AssociateWalletRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_set_wallet_id(::wallet_api::v1::AssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_get_api_key(::wallet_api::v1::AssociateWalletRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletRequest_set_api_key(::wallet_api::v1::AssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          int32_t key, ::wallet_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>* m,
                       int32_t key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          int32_t key, ::wallet_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          uint32_t key, ::wallet_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>* m,
                       uint32_t key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          uint32_t key, ::wallet_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          int64_t key, ::wallet_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>* m,
                       int64_t key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          int64_t key, ::wallet_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          uint64_t key, ::wallet_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>* m,
                       uint64_t key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest> * m,
                          uint64_t key, ::wallet_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest> * m,
                          bool key, ::wallet_api::v1::AssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>* m,
                       bool key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest> * m,
                          bool key, ::wallet_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AssociateWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AssociateWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::AssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.AssociateWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_new() { return new ::wallet_api::v1::AssociateWalletResponse(); }
void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::AssociateWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_serialize(::wallet_api::v1::AssociateWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_parse(::wallet_api::v1::AssociateWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_copy_from(::wallet_api::v1::AssociateWalletResponse* dst, const ::wallet_api::v1::AssociateWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::AssociateWalletResponse& __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::AssociateWalletResponse* __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::AssociateWalletResponse* __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::AssociateWalletResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_get_wallet_id(::wallet_api::v1::AssociateWalletResponse* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_set_wallet_id(::wallet_api::v1::AssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_get_did(::wallet_api::v1::AssociateWalletResponse* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_set_did(::wallet_api::v1::AssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_get_public_key(::wallet_api::v1::AssociateWalletResponse* msg) {
  absl::string_view val = msg->public_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_AssociateWalletResponse_set_public_key(::wallet_api::v1::AssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_public_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          int32_t key, ::wallet_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>* m,
                       int32_t key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          int32_t key, ::wallet_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          uint32_t key, ::wallet_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>* m,
                       uint32_t key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          uint32_t key, ::wallet_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          int64_t key, ::wallet_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>* m,
                       int64_t key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          int64_t key, ::wallet_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          uint64_t key, ::wallet_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>* m,
                       uint64_t key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse> * m,
                          uint64_t key, ::wallet_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse> * m,
                          bool key, ::wallet_api::v1::AssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>* m,
                       bool key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse> * m,
                          bool key, ::wallet_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AssociateWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::AssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::AssociateWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_AssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::AssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::AssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.CreateAndAssociateWalletRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_new() { return new ::wallet_api::v1::CreateAndAssociateWalletRequest(); }
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::CreateAndAssociateWalletRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_serialize(::wallet_api::v1::CreateAndAssociateWalletRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_parse(::wallet_api::v1::CreateAndAssociateWalletRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_copy_from(::wallet_api::v1::CreateAndAssociateWalletRequest* dst, const ::wallet_api::v1::CreateAndAssociateWalletRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::CreateAndAssociateWalletRequest& __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::CreateAndAssociateWalletRequest* __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::CreateAndAssociateWalletRequest* __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_get_wallet_name(::wallet_api::v1::CreateAndAssociateWalletRequest* msg) {
  absl::string_view val = msg->wallet_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_set_wallet_name(::wallet_api::v1::CreateAndAssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_get_api_key(::wallet_api::v1::CreateAndAssociateWalletRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_set_api_key(::wallet_api::v1::CreateAndAssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_get_token(::wallet_api::v1::CreateAndAssociateWalletRequest* msg) {
  absl::string_view val = msg->token();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletRequest_set_token(::wallet_api::v1::CreateAndAssociateWalletRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_token(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          int32_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m,
                       int32_t key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          int32_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          uint32_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m,
                       uint32_t key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          uint32_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          int64_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m,
                       int64_t key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          int64_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          uint64_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m,
                       uint64_t key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          uint64_t key, ::wallet_api::v1::CreateAndAssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          bool key, ::wallet_api::v1::CreateAndAssociateWalletRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m,
                       bool key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          bool key, ::wallet_api::v1::CreateAndAssociateWalletRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateAndAssociateWalletRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateAndAssociateWalletRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::CreateAndAssociateWalletRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.CreateAndAssociateWalletResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_new() { return new ::wallet_api::v1::CreateAndAssociateWalletResponse(); }
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::CreateAndAssociateWalletResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_serialize(::wallet_api::v1::CreateAndAssociateWalletResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_parse(::wallet_api::v1::CreateAndAssociateWalletResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_copy_from(::wallet_api::v1::CreateAndAssociateWalletResponse* dst, const ::wallet_api::v1::CreateAndAssociateWalletResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::CreateAndAssociateWalletResponse& __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::CreateAndAssociateWalletResponse* __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::CreateAndAssociateWalletResponse* __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::CreateAndAssociateWalletResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_get_wallet_id(::wallet_api::v1::CreateAndAssociateWalletResponse* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_set_wallet_id(::wallet_api::v1::CreateAndAssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_get_wallet_name(::wallet_api::v1::CreateAndAssociateWalletResponse* msg) {
  absl::string_view val = msg->wallet_name();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_set_wallet_name(::wallet_api::v1::CreateAndAssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_name(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_get_public_key(::wallet_api::v1::CreateAndAssociateWalletResponse* msg) {
  absl::string_view val = msg->public_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_set_public_key(::wallet_api::v1::CreateAndAssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_public_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_get_did(::wallet_api::v1::CreateAndAssociateWalletResponse* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_CreateAndAssociateWalletResponse_set_did(::wallet_api::v1::CreateAndAssociateWalletResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          int32_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m,
                       int32_t key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          int32_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_CreateAndAssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          uint32_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m,
                       uint32_t key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          uint32_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_CreateAndAssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          int64_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m,
                       int64_t key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          int64_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_CreateAndAssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          uint64_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m,
                       uint64_t key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          uint64_t key, ::wallet_api::v1::CreateAndAssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_CreateAndAssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::CreateAndAssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          bool key, ::wallet_api::v1::CreateAndAssociateWalletResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m,
                       bool key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          bool key, ::wallet_api::v1::CreateAndAssociateWalletResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_CreateAndAssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::CreateAndAssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateAndAssociateWalletResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::CreateAndAssociateWalletResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::CreateAndAssociateWalletResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_CreateAndAssociateWalletResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::CreateAndAssociateWalletResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::CreateAndAssociateWalletResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.RequestPresentationRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_new() { return new ::wallet_api::v1::RequestPresentationRequest(); }
void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::RequestPresentationRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_serialize(::wallet_api::v1::RequestPresentationRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_parse(::wallet_api::v1::RequestPresentationRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_copy_from(::wallet_api::v1::RequestPresentationRequest* dst, const ::wallet_api::v1::RequestPresentationRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::RequestPresentationRequest& __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::RequestPresentationRequest* __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::RequestPresentationRequest* __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_get_did(::wallet_api::v1::RequestPresentationRequest* msg) {
  absl::string_view val = msg->did();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_set_did(::wallet_api::v1::RequestPresentationRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_did(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_get_credential_type(::wallet_api::v1::RequestPresentationRequest* msg) {
  absl::string_view val = msg->credential_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_set_credential_type(::wallet_api::v1::RequestPresentationRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_credential_type(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_get_api_key(::wallet_api::v1::RequestPresentationRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationRequest_set_api_key(::wallet_api::v1::RequestPresentationRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          int32_t key, ::wallet_api::v1::RequestPresentationRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>* m,
                       int32_t key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          int32_t key, ::wallet_api::v1::RequestPresentationRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          uint32_t key, ::wallet_api::v1::RequestPresentationRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>* m,
                       uint32_t key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          uint32_t key, ::wallet_api::v1::RequestPresentationRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          int64_t key, ::wallet_api::v1::RequestPresentationRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>* m,
                       int64_t key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          int64_t key, ::wallet_api::v1::RequestPresentationRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          uint64_t key, ::wallet_api::v1::RequestPresentationRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>* m,
                       uint64_t key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest> * m,
                          uint64_t key, ::wallet_api::v1::RequestPresentationRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest> * m,
                          bool key, ::wallet_api::v1::RequestPresentationRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>* m,
                       bool key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest> * m,
                          bool key, ::wallet_api::v1::RequestPresentationRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::RequestPresentationRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::RequestPresentationRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::RequestPresentationRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.RequestPresentationResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_new() { return new ::wallet_api::v1::RequestPresentationResponse(); }
void __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::RequestPresentationResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_serialize(::wallet_api::v1::RequestPresentationResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_parse(::wallet_api::v1::RequestPresentationResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_copy_from(::wallet_api::v1::RequestPresentationResponse* dst, const ::wallet_api::v1::RequestPresentationResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::RequestPresentationResponse& __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::RequestPresentationResponse* __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::RequestPresentationResponse* __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::RequestPresentationResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_get_presentation(::wallet_api::v1::RequestPresentationResponse* msg) {
  absl::string_view val = msg->presentation();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_RequestPresentationResponse_set_presentation(::wallet_api::v1::RequestPresentationResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_presentation(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          int32_t key, ::wallet_api::v1::RequestPresentationResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>* m,
                       int32_t key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          int32_t key, ::wallet_api::v1::RequestPresentationResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_RequestPresentationResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::RequestPresentationResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          uint32_t key, ::wallet_api::v1::RequestPresentationResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>* m,
                       uint32_t key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          uint32_t key, ::wallet_api::v1::RequestPresentationResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_RequestPresentationResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::RequestPresentationResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          int64_t key, ::wallet_api::v1::RequestPresentationResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>* m,
                       int64_t key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          int64_t key, ::wallet_api::v1::RequestPresentationResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_RequestPresentationResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::RequestPresentationResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          uint64_t key, ::wallet_api::v1::RequestPresentationResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>* m,
                       uint64_t key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse> * m,
                          uint64_t key, ::wallet_api::v1::RequestPresentationResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_RequestPresentationResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::RequestPresentationResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse> * m,
                          bool key, ::wallet_api::v1::RequestPresentationResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>* m,
                       bool key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse> * m,
                          bool key, ::wallet_api::v1::RequestPresentationResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_RequestPresentationResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::RequestPresentationResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::RequestPresentationResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::RequestPresentationResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::RequestPresentationResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_RequestPresentationResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::RequestPresentationResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::RequestPresentationResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareFundsChangeRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_new() { return new ::wallet_api::v1::PrepareFundsChangeRequest(); }
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareFundsChangeRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_serialize(::wallet_api::v1::PrepareFundsChangeRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_parse(::wallet_api::v1::PrepareFundsChangeRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_copy_from(::wallet_api::v1::PrepareFundsChangeRequest* dst, const ::wallet_api::v1::PrepareFundsChangeRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareFundsChangeRequest& __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareFundsChangeRequest* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareFundsChangeRequest* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeRequest>& src) {
  dst = src;
}

const void* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_get_amount(::wallet_api::v1::PrepareFundsChangeRequest* msg) {
  return static_cast<const void*>(&msg->amount());
}
void* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_get_mut_amount(::wallet_api::v1::PrepareFundsChangeRequest* msg) {
  return static_cast<void*>(msg->mutable_amount());
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_clear_amount(::wallet_api::v1::PrepareFundsChangeRequest* msg) { msg->clear_amount(); }
bool __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_has_amount(::wallet_api::v1::PrepareFundsChangeRequest* msg) { return msg->has_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_get_user_reference(::wallet_api::v1::PrepareFundsChangeRequest* msg) {
  absl::string_view val = msg->user_reference();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_set_user_reference(::wallet_api::v1::PrepareFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_user_reference(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_get_wallet_id(::wallet_api::v1::PrepareFundsChangeRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_set_wallet_id(::wallet_api::v1::PrepareFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_get_api_key(::wallet_api::v1::PrepareFundsChangeRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeRequest_set_api_key(::wallet_api::v1::PrepareFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m,
                       int32_t key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m,
                       int64_t key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          bool key, ::wallet_api::v1::PrepareFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>* m,
                       bool key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          bool key, ::wallet_api::v1::PrepareFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareFundsChangeRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareFundsChangeRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareFundsChangeResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_new() { return new ::wallet_api::v1::PrepareFundsChangeResponse(); }
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareFundsChangeResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_serialize(::wallet_api::v1::PrepareFundsChangeResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_parse(::wallet_api::v1::PrepareFundsChangeResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_copy_from(::wallet_api::v1::PrepareFundsChangeResponse* dst, const ::wallet_api::v1::PrepareFundsChangeResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareFundsChangeResponse& __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareFundsChangeResponse* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareFundsChangeResponse* __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareFundsChangeResponse>& src) {
  dst = src;
}

::wallet_api::v1::PrepareFundsChangeResponse_Status __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_get_status(::wallet_api::v1::PrepareFundsChangeResponse* msg) { return msg->status(); }
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_set_status(::wallet_api::v1::PrepareFundsChangeResponse* msg, ::wallet_api::v1::PrepareFundsChangeResponse_Status val) {
  msg->set_status(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_get_uetr(::wallet_api::v1::PrepareFundsChangeResponse* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareFundsChangeResponse_set_uetr(::wallet_api::v1::PrepareFundsChangeResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::wallet_api::v1::PrepareFundsChangeResponse_Status, wallet_api_v1_PrepareFundsChangeResponse_Status, ::wallet_api::v1::PrepareFundsChangeResponse_Status, value, cpp_value)
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m,
                       int32_t key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m,
                       int64_t key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          bool key, ::wallet_api::v1::PrepareFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>* m,
                       bool key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          bool key, ::wallet_api::v1::PrepareFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareFundsChangeResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareFundsChangeResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareTransactionRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_new() { return new ::wallet_api::v1::PrepareTransactionRequest(); }
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareTransactionRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_serialize(::wallet_api::v1::PrepareTransactionRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_parse(::wallet_api::v1::PrepareTransactionRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_copy_from(::wallet_api::v1::PrepareTransactionRequest* dst, const ::wallet_api::v1::PrepareTransactionRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareTransactionRequest& __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareTransactionRequest* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareTransactionRequest* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_api_key(::wallet_api::v1::PrepareTransactionRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_set_api_key(::wallet_api::v1::PrepareTransactionRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_wallet_id(::wallet_api::v1::PrepareTransactionRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_set_wallet_id(::wallet_api::v1::PrepareTransactionRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_clear_commitments(::wallet_api::v1::PrepareTransactionRequest* msg) {
  msg->clear_commitments();
}
google::protobuf::RepeatedPtrField<::common::Commitment>* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_mut_commitments(::wallet_api::v1::PrepareTransactionRequest* msg) {
  return msg->mutable_commitments();
}
const google::protobuf::RepeatedPtrField<::common::Commitment>* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_commitments(
    const ::wallet_api::v1::PrepareTransactionRequest* msg) {
  return &msg->commitments();
}

void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_clear_conditions(::wallet_api::v1::PrepareTransactionRequest* msg) {
  msg->clear_conditions();
}
google::protobuf::RepeatedPtrField<::common::Condition>* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_mut_conditions(::wallet_api::v1::PrepareTransactionRequest* msg) {
  return msg->mutable_conditions();
}
const google::protobuf::RepeatedPtrField<::common::Condition>* __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_conditions(
    const ::wallet_api::v1::PrepareTransactionRequest* msg) {
  return &msg->conditions();
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_get_memo(::wallet_api::v1::PrepareTransactionRequest* msg) {
  absl::string_view val = msg->memo();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionRequest_set_memo(::wallet_api::v1::PrepareTransactionRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_memo(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>* m,
                       int32_t key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>* m,
                       int64_t key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          bool key, ::wallet_api::v1::PrepareTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>* m,
                       bool key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          bool key, ::wallet_api::v1::PrepareTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareTransactionRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareTransactionRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareTransactionResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_new() { return new ::wallet_api::v1::PrepareTransactionResponse(); }
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareTransactionResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_serialize(::wallet_api::v1::PrepareTransactionResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_parse(::wallet_api::v1::PrepareTransactionResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_copy_from(::wallet_api::v1::PrepareTransactionResponse* dst, const ::wallet_api::v1::PrepareTransactionResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareTransactionResponse& __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareTransactionResponse* __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareTransactionResponse* __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareTransactionResponse>& src) {
  dst = src;
}

::wallet_api::v1::PrepareTransactionResponse_Status __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_get_status(::wallet_api::v1::PrepareTransactionResponse* msg) { return msg->status(); }
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_set_status(::wallet_api::v1::PrepareTransactionResponse* msg, ::wallet_api::v1::PrepareTransactionResponse_Status val) {
  msg->set_status(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_get_uetr(::wallet_api::v1::PrepareTransactionResponse* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareTransactionResponse_set_uetr(::wallet_api::v1::PrepareTransactionResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::wallet_api::v1::PrepareTransactionResponse_Status, wallet_api_v1_PrepareTransactionResponse_Status, ::wallet_api::v1::PrepareTransactionResponse_Status, value, cpp_value)
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>* m,
                       int32_t key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>* m,
                       int64_t key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          bool key, ::wallet_api::v1::PrepareTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>* m,
                       bool key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          bool key, ::wallet_api::v1::PrepareTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareTransactionResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareTransactionResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListTransactionsRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_new() { return new ::wallet_api::v1::ListTransactionsRequest(); }
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListTransactionsRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_serialize(::wallet_api::v1::ListTransactionsRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_parse(::wallet_api::v1::ListTransactionsRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_copy_from(::wallet_api::v1::ListTransactionsRequest* dst, const ::wallet_api::v1::ListTransactionsRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ListTransactionsRequest& __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListTransactionsRequest* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListTransactionsRequest* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_wallet_id(::wallet_api::v1::ListTransactionsRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_set_wallet_id(::wallet_api::v1::ListTransactionsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_api_key(::wallet_api::v1::ListTransactionsRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_set_api_key(::wallet_api::v1::ListTransactionsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_filters(::wallet_api::v1::ListTransactionsRequest* msg) {
  return static_cast<const void*>(&msg->filters());
}
void* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_mut_filters(::wallet_api::v1::ListTransactionsRequest* msg) {
  return static_cast<void*>(msg->mutable_filters());
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_clear_filters(::wallet_api::v1::ListTransactionsRequest* msg) { msg->clear_filters(); }
bool __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_has_filters(::wallet_api::v1::ListTransactionsRequest* msg) { return msg->has_filters(); }

::int32_t __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_page(::wallet_api::v1::ListTransactionsRequest* msg) { return msg->page(); }
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_set_page(::wallet_api::v1::ListTransactionsRequest* msg, ::int32_t val) {
  msg->set_page(val);
}

::int32_t __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_page_size(::wallet_api::v1::ListTransactionsRequest* msg) { return msg->page_size(); }
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_set_page_size(::wallet_api::v1::ListTransactionsRequest* msg, ::int32_t val) {
  msg->set_page_size(val);
}

const void* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_sort_by(::wallet_api::v1::ListTransactionsRequest* msg) {
  return static_cast<const void*>(&msg->sort_by());
}
void* __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_get_mut_sort_by(::wallet_api::v1::ListTransactionsRequest* msg) {
  return static_cast<void*>(msg->mutable_sort_by());
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_clear_sort_by(::wallet_api::v1::ListTransactionsRequest* msg) { msg->clear_sort_by(); }
bool __rust_proto_thunk__wallet_api_v1_ListTransactionsRequest_has_sort_by(::wallet_api::v1::ListTransactionsRequest* msg) { return msg->has_sort_by(); }


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListTransactionsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>* m,
                       int32_t key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListTransactionsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListTransactionsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListTransactionsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListTransactionsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>* m,
                       int64_t key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListTransactionsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListTransactionsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListTransactionsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest> * m,
                          bool key, ::wallet_api::v1::ListTransactionsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>* m,
                       bool key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest> * m,
                          bool key, ::wallet_api::v1::ListTransactionsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListTransactionsRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListTransactionsRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListTransactionsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ContractSummary
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ContractSummary_new() { return new ::wallet_api::v1::ContractSummary(); }
void __rust_proto_thunk__wallet_api_v1_ContractSummary_delete(void* ptr) { delete static_cast<::wallet_api::v1::ContractSummary*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ContractSummary_serialize(::wallet_api::v1::ContractSummary* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ContractSummary_parse(::wallet_api::v1::ContractSummary* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ContractSummary_copy_from(::wallet_api::v1::ContractSummary* dst, const ::wallet_api::v1::ContractSummary* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ContractSummary_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* field) {
  return field->size();
}
const ::wallet_api::v1::ContractSummary& __rust_proto_thunk__wallet_api_v1_ContractSummary_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ContractSummary* __rust_proto_thunk__wallet_api_v1_ContractSummary_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ContractSummary* __rust_proto_thunk__wallet_api_v1_ContractSummary_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ContractSummary_get_contract_id(::wallet_api::v1::ContractSummary* msg) {
  absl::string_view val = msg->contract_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_set_contract_id(::wallet_api::v1::ContractSummary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_contract_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ContractSummary_get_contract_type(::wallet_api::v1::ContractSummary* msg) {
  absl::string_view val = msg->contract_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_set_contract_type(::wallet_api::v1::ContractSummary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_contract_type(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ContractSummary_get_created(::wallet_api::v1::ContractSummary* msg) {
  absl::string_view val = msg->created();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_set_created(::wallet_api::v1::ContractSummary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_created(absl::string_view(s.ptr, s.len));
}

void __rust_proto_thunk__wallet_api_v1_ContractSummary_clear_counterparties(::wallet_api::v1::ContractSummary* msg) {
  msg->clear_counterparties();
}
google::protobuf::RepeatedPtrField<std::string>* __rust_proto_thunk__wallet_api_v1_ContractSummary_get_mut_counterparties(::wallet_api::v1::ContractSummary* msg) {
  return msg->mutable_counterparties();
}
const google::protobuf::RepeatedPtrField<std::string>* __rust_proto_thunk__wallet_api_v1_ContractSummary_get_counterparties(
    const ::wallet_api::v1::ContractSummary* msg) {
  return &msg->counterparties();
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ContractSummary_get_status(::wallet_api::v1::ContractSummary* msg) {
  absl::string_view val = msg->status();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_set_status(::wallet_api::v1::ContractSummary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_status(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ContractSummary_get_memo(::wallet_api::v1::ContractSummary* msg) {
  absl::string_view val = msg->memo();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ContractSummary_set_memo(::wallet_api::v1::ContractSummary* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_memo(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>* __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary> * m,
                          int32_t key, ::wallet_api::v1::ContractSummary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>* m,
                       int32_t key, const ::wallet_api::v1::ContractSummary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ContractSummary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary> * m,
                          int32_t key, ::wallet_api::v1::ContractSummary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ContractSummary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ContractSummary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ContractSummary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>* __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary> * m,
                          uint32_t key, ::wallet_api::v1::ContractSummary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>* m,
                       uint32_t key, const ::wallet_api::v1::ContractSummary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ContractSummary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary> * m,
                          uint32_t key, ::wallet_api::v1::ContractSummary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ContractSummary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ContractSummary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ContractSummary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>* __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary> * m,
                          int64_t key, ::wallet_api::v1::ContractSummary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>* m,
                       int64_t key, const ::wallet_api::v1::ContractSummary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ContractSummary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary> * m,
                          int64_t key, ::wallet_api::v1::ContractSummary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ContractSummary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ContractSummary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ContractSummary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>* __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary> * m,
                          uint64_t key, ::wallet_api::v1::ContractSummary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>* m,
                       uint64_t key, const ::wallet_api::v1::ContractSummary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ContractSummary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary> * m,
                          uint64_t key, ::wallet_api::v1::ContractSummary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ContractSummary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ContractSummary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ContractSummary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>* __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_free(const google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_clear(google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_size(const google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_insert(google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary> * m,
                          bool key, ::wallet_api::v1::ContractSummary value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_get(const google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>* m,
                       bool key, const ::wallet_api::v1::ContractSummary** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ContractSummary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_remove(google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary> * m,
                          bool key, ::wallet_api::v1::ContractSummary * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ContractSummary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ContractSummary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ContractSummary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ContractSummary value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ContractSummary** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ContractSummary* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ContractSummary * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ContractSummary_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ContractSummary** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ContractSummary>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListTransactionsResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_new() { return new ::wallet_api::v1::ListTransactionsResponse(); }
void __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListTransactionsResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_serialize(::wallet_api::v1::ListTransactionsResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_parse(::wallet_api::v1::ListTransactionsResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_copy_from(::wallet_api::v1::ListTransactionsResponse* dst, const ::wallet_api::v1::ListTransactionsResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ListTransactionsResponse& __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListTransactionsResponse* __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListTransactionsResponse* __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListTransactionsResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_clear_contracts(::wallet_api::v1::ListTransactionsResponse* msg) {
  msg->clear_contracts();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_get_mut_contracts(::wallet_api::v1::ListTransactionsResponse* msg) {
  return msg->mutable_contracts();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::ContractSummary>* __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_get_contracts(
    const ::wallet_api::v1::ListTransactionsResponse* msg) {
  return &msg->contracts();
}

::uint32_t __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_get_totalContracts(::wallet_api::v1::ListTransactionsResponse* msg) { return msg->totalcontracts(); }
void __rust_proto_thunk__wallet_api_v1_ListTransactionsResponse_set_totalContracts(::wallet_api::v1::ListTransactionsResponse* msg, ::uint32_t val) {
  msg->set_totalcontracts(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListTransactionsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>* m,
                       int32_t key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListTransactionsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListTransactionsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListTransactionsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListTransactionsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListTransactionsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListTransactionsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListTransactionsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListTransactionsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>* m,
                       int64_t key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListTransactionsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListTransactionsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListTransactionsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListTransactionsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListTransactionsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListTransactionsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListTransactionsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse> * m,
                          bool key, ::wallet_api::v1::ListTransactionsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>* m,
                       bool key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse> * m,
                          bool key, ::wallet_api::v1::ListTransactionsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListTransactionsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListTransactionsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListTransactionsResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListTransactionsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListTransactionsResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListTransactionsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListTransactionsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListTransactionsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.BalanceDetail
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_BalanceDetail_new() { return new ::wallet_api::v1::BalanceDetail(); }
void __rust_proto_thunk__wallet_api_v1_BalanceDetail_delete(void* ptr) { delete static_cast<::wallet_api::v1::BalanceDetail*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_BalanceDetail_serialize(::wallet_api::v1::BalanceDetail* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_BalanceDetail_parse(::wallet_api::v1::BalanceDetail* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_BalanceDetail_copy_from(::wallet_api::v1::BalanceDetail* dst, const ::wallet_api::v1::BalanceDetail* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_BalanceDetail_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* field) {
  return field->size();
}
const ::wallet_api::v1::BalanceDetail& __rust_proto_thunk__wallet_api_v1_BalanceDetail_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::BalanceDetail* __rust_proto_thunk__wallet_api_v1_BalanceDetail_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::BalanceDetail* __rust_proto_thunk__wallet_api_v1_BalanceDetail_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_BalanceDetail_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_BalanceDetail_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>& src) {
  dst = src;
}

const void* __rust_proto_thunk__wallet_api_v1_BalanceDetail_get_balance(::wallet_api::v1::BalanceDetail* msg) {
  return static_cast<const void*>(&msg->balance());
}
void* __rust_proto_thunk__wallet_api_v1_BalanceDetail_get_mut_balance(::wallet_api::v1::BalanceDetail* msg) {
  return static_cast<void*>(msg->mutable_balance());
}
void __rust_proto_thunk__wallet_api_v1_BalanceDetail_clear_balance(::wallet_api::v1::BalanceDetail* msg) { msg->clear_balance(); }
bool __rust_proto_thunk__wallet_api_v1_BalanceDetail_has_balance(::wallet_api::v1::BalanceDetail* msg) { return msg->has_balance(); }

::wallet_api::v1::BalanceDetail_Kind __rust_proto_thunk__wallet_api_v1_BalanceDetail_get_kind(::wallet_api::v1::BalanceDetail* msg) { return msg->kind(); }
void __rust_proto_thunk__wallet_api_v1_BalanceDetail_set_kind(::wallet_api::v1::BalanceDetail* msg, ::wallet_api::v1::BalanceDetail_Kind val) {
  msg->set_kind(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::wallet_api::v1::BalanceDetail_Kind, wallet_api_v1_BalanceDetail_Kind, ::wallet_api::v1::BalanceDetail_Kind, value, cpp_value)
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail> * m,
                          int32_t key, ::wallet_api::v1::BalanceDetail value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>* m,
                       int32_t key, const ::wallet_api::v1::BalanceDetail** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::BalanceDetail* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail> * m,
                          int32_t key, ::wallet_api::v1::BalanceDetail * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_BalanceDetail_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::BalanceDetail** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::BalanceDetail>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail> * m,
                          uint32_t key, ::wallet_api::v1::BalanceDetail value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>* m,
                       uint32_t key, const ::wallet_api::v1::BalanceDetail** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::BalanceDetail* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail> * m,
                          uint32_t key, ::wallet_api::v1::BalanceDetail * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_BalanceDetail_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::BalanceDetail** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::BalanceDetail>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail> * m,
                          int64_t key, ::wallet_api::v1::BalanceDetail value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>* m,
                       int64_t key, const ::wallet_api::v1::BalanceDetail** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::BalanceDetail* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail> * m,
                          int64_t key, ::wallet_api::v1::BalanceDetail * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_BalanceDetail_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::BalanceDetail** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::BalanceDetail>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail> * m,
                          uint64_t key, ::wallet_api::v1::BalanceDetail value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>* m,
                       uint64_t key, const ::wallet_api::v1::BalanceDetail** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::BalanceDetail* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail> * m,
                          uint64_t key, ::wallet_api::v1::BalanceDetail * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_BalanceDetail_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::BalanceDetail** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::BalanceDetail>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_free(const google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_clear(google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_size(const google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_insert(google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail> * m,
                          bool key, ::wallet_api::v1::BalanceDetail value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_get(const google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>* m,
                       bool key, const ::wallet_api::v1::BalanceDetail** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::BalanceDetail* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_remove(google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail> * m,
                          bool key, ::wallet_api::v1::BalanceDetail * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_BalanceDetail_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::BalanceDetail** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::BalanceDetail>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_free(const google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_clear(google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_size(const google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_insert(google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::BalanceDetail value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_get(const google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::BalanceDetail** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::BalanceDetail* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_remove(google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::BalanceDetail * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_BalanceDetail_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::BalanceDetail** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::BalanceDetail>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListWalletBalanceDetailsRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_new() { return new ::wallet_api::v1::ListWalletBalanceDetailsRequest(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletBalanceDetailsRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_serialize(::wallet_api::v1::ListWalletBalanceDetailsRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_parse(::wallet_api::v1::ListWalletBalanceDetailsRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_copy_from(::wallet_api::v1::ListWalletBalanceDetailsRequest* dst, const ::wallet_api::v1::ListWalletBalanceDetailsRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletBalanceDetailsRequest& __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletBalanceDetailsRequest* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletBalanceDetailsRequest* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_get_wallet_id(::wallet_api::v1::ListWalletBalanceDetailsRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_set_wallet_id(::wallet_api::v1::ListWalletBalanceDetailsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_get_api_key(::wallet_api::v1::ListWalletBalanceDetailsRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsRequest_set_api_key(::wallet_api::v1::ListWalletBalanceDetailsRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalanceDetailsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          bool key, ::wallet_api::v1::ListWalletBalanceDetailsRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m,
                       bool key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          bool key, ::wallet_api::v1::ListWalletBalanceDetailsRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalanceDetailsRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalanceDetailsRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletBalanceDetailsRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ListWalletBalanceDetailsResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_new() { return new ::wallet_api::v1::ListWalletBalanceDetailsResponse(); }
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ListWalletBalanceDetailsResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_serialize(::wallet_api::v1::ListWalletBalanceDetailsResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_parse(::wallet_api::v1::ListWalletBalanceDetailsResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_copy_from(::wallet_api::v1::ListWalletBalanceDetailsResponse* dst, const ::wallet_api::v1::ListWalletBalanceDetailsResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ListWalletBalanceDetailsResponse& __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ListWalletBalanceDetailsResponse* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ListWalletBalanceDetailsResponse* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ListWalletBalanceDetailsResponse>& src) {
  dst = src;
}

void __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_clear_balances(::wallet_api::v1::ListWalletBalanceDetailsResponse* msg) {
  msg->clear_balances();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_get_mut_balances(::wallet_api::v1::ListWalletBalanceDetailsResponse* msg) {
  return msg->mutable_balances();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::BalanceDetail>* __rust_proto_thunk__wallet_api_v1_ListWalletBalanceDetailsResponse_get_balances(
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* msg) {
  return &msg->balances();
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m,
                       int32_t key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          int32_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ListWalletBalanceDetailsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          uint32_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ListWalletBalanceDetailsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m,
                       int64_t key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          int64_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ListWalletBalanceDetailsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          uint64_t key, ::wallet_api::v1::ListWalletBalanceDetailsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ListWalletBalanceDetailsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ListWalletBalanceDetailsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          bool key, ::wallet_api::v1::ListWalletBalanceDetailsResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m,
                       bool key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          bool key, ::wallet_api::v1::ListWalletBalanceDetailsResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ListWalletBalanceDetailsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ListWalletBalanceDetailsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalanceDetailsResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ListWalletBalanceDetailsResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ListWalletBalanceDetailsResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ListWalletBalanceDetailsResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ListWalletBalanceDetailsResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ListWalletBalanceDetailsResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.GetTransactionDetailRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_new() { return new ::wallet_api::v1::GetTransactionDetailRequest(); }
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::GetTransactionDetailRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_serialize(::wallet_api::v1::GetTransactionDetailRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_parse(::wallet_api::v1::GetTransactionDetailRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_copy_from(::wallet_api::v1::GetTransactionDetailRequest* dst, const ::wallet_api::v1::GetTransactionDetailRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::GetTransactionDetailRequest& __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::GetTransactionDetailRequest* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::GetTransactionDetailRequest* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_get_wallet_id(::wallet_api::v1::GetTransactionDetailRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_set_wallet_id(::wallet_api::v1::GetTransactionDetailRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_get_api_key(::wallet_api::v1::GetTransactionDetailRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_set_api_key(::wallet_api::v1::GetTransactionDetailRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_get_uetr(::wallet_api::v1::GetTransactionDetailRequest* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailRequest_set_uetr(::wallet_api::v1::GetTransactionDetailRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          int32_t key, ::wallet_api::v1::GetTransactionDetailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m,
                       int32_t key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          int32_t key, ::wallet_api::v1::GetTransactionDetailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          uint32_t key, ::wallet_api::v1::GetTransactionDetailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m,
                       uint32_t key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          uint32_t key, ::wallet_api::v1::GetTransactionDetailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          int64_t key, ::wallet_api::v1::GetTransactionDetailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m,
                       int64_t key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          int64_t key, ::wallet_api::v1::GetTransactionDetailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          uint64_t key, ::wallet_api::v1::GetTransactionDetailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m,
                       uint64_t key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          uint64_t key, ::wallet_api::v1::GetTransactionDetailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          bool key, ::wallet_api::v1::GetTransactionDetailRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>* m,
                       bool key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          bool key, ::wallet_api::v1::GetTransactionDetailRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::GetTransactionDetailRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::GetTransactionDetailRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::GetTransactionDetailRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.GetTransactionDetailResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_new() { return new ::wallet_api::v1::GetTransactionDetailResponse(); }
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::GetTransactionDetailResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_serialize(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_parse(::wallet_api::v1::GetTransactionDetailResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_copy_from(::wallet_api::v1::GetTransactionDetailResponse* dst, const ::wallet_api::v1::GetTransactionDetailResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::GetTransactionDetailResponse& __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::GetTransactionDetailResponse* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::GetTransactionDetailResponse* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_contract_type(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  absl::string_view val = msg->contract_type();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_set_contract_type(::wallet_api::v1::GetTransactionDetailResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_contract_type(absl::string_view(s.ptr, s.len));
}

void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_clear_commitments(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  msg->clear_commitments();
}
google::protobuf::RepeatedPtrField<::common::Commitment>* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_mut_commitments(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  return msg->mutable_commitments();
}
const google::protobuf::RepeatedPtrField<::common::Commitment>* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_commitments(
    const ::wallet_api::v1::GetTransactionDetailResponse* msg) {
  return &msg->commitments();
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_created(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  absl::string_view val = msg->created();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_set_created(::wallet_api::v1::GetTransactionDetailResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_created(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_hash_presenter(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  absl::string_view val = msg->hash_presenter();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_set_hash_presenter(::wallet_api::v1::GetTransactionDetailResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_hash_presenter(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_hash(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  absl::string_view val = msg->hash();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_set_hash(::wallet_api::v1::GetTransactionDetailResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_hash(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_expiration(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  absl::string_view val = msg->expiration();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_set_expiration(::wallet_api::v1::GetTransactionDetailResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_expiration(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_memo(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  absl::string_view val = msg->memo();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_set_memo(::wallet_api::v1::GetTransactionDetailResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_memo(absl::string_view(s.ptr, s.len));
}

void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_clear_log(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  msg->clear_log();
}
google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_mut_log(::wallet_api::v1::GetTransactionDetailResponse* msg) {
  return msg->mutable_log();
}
const google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_get_log(
    const ::wallet_api::v1::GetTransactionDetailResponse* msg) {
  return &msg->log();
}


}  // extern "C"
// clang-format on

        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() { return new ::wallet_api::v1::GetTransactionDetailResponse_LogEntry(); }
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_delete(void* ptr) { delete static_cast<::wallet_api::v1::GetTransactionDetailResponse_LogEntry*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_serialize(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_parse(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_copy_from(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* dst, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* field) {
  return field->size();
}
const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry& __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::GetTransactionDetailResponse_LogEntry* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::GetTransactionDetailResponse_LogEntry* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::GetTransactionDetailResponse_LogEntry>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_sender(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->sender();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_sender(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_sender(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_receiver(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->receiver();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_receiver(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_receiver(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_amount(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  return static_cast<const void*>(&msg->amount());
}
void* __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_mut_amount(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  return static_cast<void*>(msg->mutable_amount());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear_amount(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) { msg->clear_amount(); }
bool __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_has_amount(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) { return msg->has_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_timestamp(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->timestamp();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_timestamp(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_timestamp(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_kind(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->kind();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_kind(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_kind(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_state(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->state();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_state(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_state(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_event(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->event();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_event(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_event(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_get_promissory_id(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg) {
  absl::string_view val = msg->promissory_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_GetTransactionDetailResponse_LogEntry_set_promissory_id(::wallet_api::v1::GetTransactionDetailResponse_LogEntry* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_promissory_id(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          int32_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m,
                       int32_t key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          int32_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          uint32_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m,
                       uint32_t key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          uint32_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          int64_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m,
                       int64_t key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          int64_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          uint64_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m,
                       uint64_t key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          uint64_t key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_free(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_size(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_insert(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          bool key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_get(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m,
                       bool key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_remove(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          bool key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_free(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_clear(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_size(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_insert(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_get(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_remove(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_LogEntry_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::GetTransactionDetailResponse_LogEntry** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse_LogEntry>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          int32_t key, ::wallet_api::v1::GetTransactionDetailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m,
                       int32_t key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          int32_t key, ::wallet_api::v1::GetTransactionDetailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_GetTransactionDetailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::GetTransactionDetailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          uint32_t key, ::wallet_api::v1::GetTransactionDetailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m,
                       uint32_t key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          uint32_t key, ::wallet_api::v1::GetTransactionDetailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_GetTransactionDetailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::GetTransactionDetailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          int64_t key, ::wallet_api::v1::GetTransactionDetailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m,
                       int64_t key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          int64_t key, ::wallet_api::v1::GetTransactionDetailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_GetTransactionDetailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::GetTransactionDetailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          uint64_t key, ::wallet_api::v1::GetTransactionDetailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m,
                       uint64_t key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          uint64_t key, ::wallet_api::v1::GetTransactionDetailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_GetTransactionDetailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::GetTransactionDetailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          bool key, ::wallet_api::v1::GetTransactionDetailResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>* m,
                       bool key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          bool key, ::wallet_api::v1::GetTransactionDetailResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_GetTransactionDetailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::GetTransactionDetailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::GetTransactionDetailResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::GetTransactionDetailResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::GetTransactionDetailResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_GetTransactionDetailResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::GetTransactionDetailResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::GetTransactionDetailResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareAtomicAssetSwapRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_new() { return new ::wallet_api::v1::PrepareAtomicAssetSwapRequest(); }
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareAtomicAssetSwapRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_serialize(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_parse(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_copy_from(::wallet_api::v1::PrepareAtomicAssetSwapRequest* dst, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareAtomicAssetSwapRequest& __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareAtomicAssetSwapRequest* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareAtomicAssetSwapRequest* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_api_key(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_set_api_key(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_wallet_id(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_set_wallet_id(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  return static_cast<const void*>(&msg->amount());
}
void* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_mut_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  return static_cast<void*>(msg->mutable_amount());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_clear_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) { msg->clear_amount(); }
bool __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_has_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) { return msg->has_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_respondent(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  absl::string_view val = msg->respondent();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_set_respondent(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_respondent(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_respondent_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  return static_cast<const void*>(&msg->respondent_amount());
}
void* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_mut_respondent_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  return static_cast<void*>(msg->mutable_respondent_amount());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_clear_respondent_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) { msg->clear_respondent_amount(); }
bool __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_has_respondent_amount(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) { return msg->has_respondent_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_memo(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) {
  absl::string_view val = msg->memo();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_set_memo(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_memo(absl::string_view(s.ptr, s.len));
}

::uint32_t __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_get_timeout(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg) { return msg->timeout(); }
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapRequest_set_timeout(::wallet_api::v1::PrepareAtomicAssetSwapRequest* msg, ::uint32_t val) {
  msg->set_timeout(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m,
                       int32_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m,
                       int64_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          bool key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m,
                       bool key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          bool key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareAtomicAssetSwapRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareAtomicAssetSwapRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareAtomicAssetSwapResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_new() { return new ::wallet_api::v1::PrepareAtomicAssetSwapResponse(); }
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareAtomicAssetSwapResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_serialize(::wallet_api::v1::PrepareAtomicAssetSwapResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_parse(::wallet_api::v1::PrepareAtomicAssetSwapResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_copy_from(::wallet_api::v1::PrepareAtomicAssetSwapResponse* dst, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareAtomicAssetSwapResponse& __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareAtomicAssetSwapResponse* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareAtomicAssetSwapResponse* __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareAtomicAssetSwapResponse>& src) {
  dst = src;
}

::wallet_api::v1::PrepareAtomicAssetSwapResponse_Status __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_get_status(::wallet_api::v1::PrepareAtomicAssetSwapResponse* msg) { return msg->status(); }
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_set_status(::wallet_api::v1::PrepareAtomicAssetSwapResponse* msg, ::wallet_api::v1::PrepareAtomicAssetSwapResponse_Status val) {
  msg->set_status(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_get_uetr(::wallet_api::v1::PrepareAtomicAssetSwapResponse* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareAtomicAssetSwapResponse_set_uetr(::wallet_api::v1::PrepareAtomicAssetSwapResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::wallet_api::v1::PrepareAtomicAssetSwapResponse_Status, wallet_api_v1_PrepareAtomicAssetSwapResponse_Status, ::wallet_api::v1::PrepareAtomicAssetSwapResponse_Status, value, cpp_value)
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m,
                       int32_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m,
                       int64_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          bool key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m,
                       bool key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          bool key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareAtomicAssetSwapResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareAtomicAssetSwapResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareAtomicAssetSwapResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareAtomicAssetSwapResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareAtomicAssetSwapResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareCrossBorderPaymentRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_new() { return new ::wallet_api::v1::PrepareCrossBorderPaymentRequest(); }
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareCrossBorderPaymentRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_serialize(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_parse(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_copy_from(::wallet_api::v1::PrepareCrossBorderPaymentRequest* dst, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareCrossBorderPaymentRequest& __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareCrossBorderPaymentRequest* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareCrossBorderPaymentRequest* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_api_key(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_set_api_key(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_wallet_id(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_set_wallet_id(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_treasury(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  absl::string_view val = msg->treasury();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_set_treasury(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_treasury(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  return static_cast<const void*>(&msg->amount());
}
void* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_mut_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  return static_cast<void*>(msg->mutable_amount());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_clear_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) { msg->clear_amount(); }
bool __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_has_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) { return msg->has_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_respondent(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  absl::string_view val = msg->respondent();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_set_respondent(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_respondent(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_respondent_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  return static_cast<const void*>(&msg->respondent_amount());
}
void* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_mut_respondent_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  return static_cast<void*>(msg->mutable_respondent_amount());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_clear_respondent_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) { msg->clear_respondent_amount(); }
bool __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_has_respondent_amount(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) { return msg->has_respondent_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_memo(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) {
  absl::string_view val = msg->memo();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_set_memo(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_memo(absl::string_view(s.ptr, s.len));
}

::uint32_t __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_get_timeout(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg) { return msg->timeout(); }
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentRequest_set_timeout(::wallet_api::v1::PrepareCrossBorderPaymentRequest* msg, ::uint32_t val) {
  msg->set_timeout(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m,
                       int32_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          int32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          uint32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m,
                       int64_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          int64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          uint64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          bool key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m,
                       bool key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          bool key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareCrossBorderPaymentRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareCrossBorderPaymentRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PrepareCrossBorderPaymentResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_new() { return new ::wallet_api::v1::PrepareCrossBorderPaymentResponse(); }
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::PrepareCrossBorderPaymentResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_serialize(::wallet_api::v1::PrepareCrossBorderPaymentResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_parse(::wallet_api::v1::PrepareCrossBorderPaymentResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_copy_from(::wallet_api::v1::PrepareCrossBorderPaymentResponse* dst, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::PrepareCrossBorderPaymentResponse& __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PrepareCrossBorderPaymentResponse* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PrepareCrossBorderPaymentResponse* __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PrepareCrossBorderPaymentResponse>& src) {
  dst = src;
}

::wallet_api::v1::PrepareCrossBorderPaymentResponse_Status __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_get_status(::wallet_api::v1::PrepareCrossBorderPaymentResponse* msg) { return msg->status(); }
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_set_status(::wallet_api::v1::PrepareCrossBorderPaymentResponse* msg, ::wallet_api::v1::PrepareCrossBorderPaymentResponse_Status val) {
  msg->set_status(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_get_uetr(::wallet_api::v1::PrepareCrossBorderPaymentResponse* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PrepareCrossBorderPaymentResponse_set_uetr(::wallet_api::v1::PrepareCrossBorderPaymentResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::wallet_api::v1::PrepareCrossBorderPaymentResponse_Status, wallet_api_v1_PrepareCrossBorderPaymentResponse_Status, ::wallet_api::v1::PrepareCrossBorderPaymentResponse_Status, value, cpp_value)
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m,
                       int32_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          int32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m,
                       uint32_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          uint32_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m,
                       int64_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          int64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m,
                       uint64_t key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          uint64_t key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          bool key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m,
                       bool key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          bool key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PrepareCrossBorderPaymentResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PrepareCrossBorderPaymentResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PrepareCrossBorderPaymentResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PrepareCrossBorderPaymentResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PrepareCrossBorderPaymentResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PreparePaymentWithImplicitFundsChangeRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() { return new ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest(); }
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_serialize(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_parse(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_copy_from(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* dst, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest& __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get_recipient(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  absl::string_view val = msg->recipient();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_set_recipient(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_recipient(absl::string_view(s.ptr, s.len));
}

const void* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get_amount(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  return static_cast<const void*>(&msg->amount());
}
void* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get_mut_amount(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  return static_cast<void*>(msg->mutable_amount());
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear_amount(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) { msg->clear_amount(); }
bool __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_has_amount(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) { return msg->has_amount(); }

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get_user_reference(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  absl::string_view val = msg->user_reference();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_set_user_reference(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_user_reference(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get_wallet_id(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_set_wallet_id(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get_api_key(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_set_api_key(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          int32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m,
                       int32_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          int32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          uint32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m,
                       uint32_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          uint32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          int64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m,
                       int64_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          int64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          uint64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m,
                       uint64_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          uint64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          bool key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m,
                       bool key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          bool key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.PreparePaymentWithImplicitFundsChangeResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() { return new ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse(); }
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_serialize(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_parse(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_copy_from(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* dst, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse& __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>& src) {
  dst = src;
}

::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse_Status __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get_status(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* msg) { return msg->status(); }
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_set_status(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* msg, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse_Status val) {
  msg->set_status(val);
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get_uetr(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_set_uetr(::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}


}  // extern "C"
// clang-format on

extern "C" {
  __PB_RUST_EXPOSE_SCALAR_MAP_METHODS_FOR_VALUE_TYPE(
      ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse_Status, wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_Status, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse_Status, value, cpp_value)
}
extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          int32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m,
                       int32_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          int32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          uint32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m,
                       uint32_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          uint32_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          int64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m,
                       int64_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          int64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          uint64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m,
                       uint64_t key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          uint64_t key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          bool key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m,
                       bool key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          bool key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_PreparePaymentWithImplicitFundsChangeResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::PreparePaymentWithImplicitFundsChangeResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ResumePausedTransactionRequest
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_new() { return new ::wallet_api::v1::ResumePausedTransactionRequest(); }
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_delete(void* ptr) { delete static_cast<::wallet_api::v1::ResumePausedTransactionRequest*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_serialize(::wallet_api::v1::ResumePausedTransactionRequest* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_parse(::wallet_api::v1::ResumePausedTransactionRequest* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_copy_from(::wallet_api::v1::ResumePausedTransactionRequest* dst, const ::wallet_api::v1::ResumePausedTransactionRequest* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>* field) {
  return field->size();
}
const ::wallet_api::v1::ResumePausedTransactionRequest& __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ResumePausedTransactionRequest* __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ResumePausedTransactionRequest* __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionRequest>& src) {
  dst = src;
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_get_wallet_id(::wallet_api::v1::ResumePausedTransactionRequest* msg) {
  absl::string_view val = msg->wallet_id();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_set_wallet_id(::wallet_api::v1::ResumePausedTransactionRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_wallet_id(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_get_api_key(::wallet_api::v1::ResumePausedTransactionRequest* msg) {
  absl::string_view val = msg->api_key();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_set_api_key(::wallet_api::v1::ResumePausedTransactionRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_api_key(absl::string_view(s.ptr, s.len));
}

::google::protobuf::rust_internal::PtrAndLen __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_get_uetr(::wallet_api::v1::ResumePausedTransactionRequest* msg) {
  absl::string_view val = msg->uetr();
  return ::google::protobuf::rust_internal::PtrAndLen(val.data(), val.size());
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_set_uetr(::wallet_api::v1::ResumePausedTransactionRequest* msg, ::google::protobuf::rust_internal::PtrAndLen s) {
  msg->set_uetr(absl::string_view(s.ptr, s.len));
}

bool __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_get_accept(::wallet_api::v1::ResumePausedTransactionRequest* msg) { return msg->accept(); }
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionRequest_set_accept(::wallet_api::v1::ResumePausedTransactionRequest* msg, bool val) {
  msg->set_accept(val);
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          int32_t key, ::wallet_api::v1::ResumePausedTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m,
                       int32_t key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          int32_t key, ::wallet_api::v1::ResumePausedTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          uint32_t key, ::wallet_api::v1::ResumePausedTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m,
                       uint32_t key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          uint32_t key, ::wallet_api::v1::ResumePausedTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          int64_t key, ::wallet_api::v1::ResumePausedTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m,
                       int64_t key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          int64_t key, ::wallet_api::v1::ResumePausedTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          uint64_t key, ::wallet_api::v1::ResumePausedTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m,
                       uint64_t key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          uint64_t key, ::wallet_api::v1::ResumePausedTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>* __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_free(const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_clear(google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_size(const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_insert(google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          bool key, ::wallet_api::v1::ResumePausedTransactionRequest value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_get(const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>* m,
                       bool key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_remove(google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          bool key, ::wallet_api::v1::ResumePausedTransactionRequest * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ResumePausedTransactionRequest value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionRequest* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ResumePausedTransactionRequest * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionRequest_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ResumePausedTransactionRequest** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionRequest>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

// wallet_api.v1.ResumePausedTransactionResponse
        // clang-format off
extern "C" {
void* __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_new() { return new ::wallet_api::v1::ResumePausedTransactionResponse(); }
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_delete(void* ptr) { delete static_cast<::wallet_api::v1::ResumePausedTransactionResponse*>(ptr); }
google::protobuf::rust_internal::SerializedData __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_serialize(::wallet_api::v1::ResumePausedTransactionResponse* msg) {
  return google::protobuf::rust_internal::SerializeMsg(msg);
}
bool __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_parse(::wallet_api::v1::ResumePausedTransactionResponse* msg,
                         google::protobuf::rust_internal::SerializedData data) {
  return msg->ParseFromArray(data.data, data.len);
}

void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_copy_from(::wallet_api::v1::ResumePausedTransactionResponse* dst, const ::wallet_api::v1::ResumePausedTransactionResponse* src) {
  dst->CopyFrom(*src);
}

size_t __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_repeated_len(google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>* field) {
  return field->size();
}
const ::wallet_api::v1::ResumePausedTransactionResponse& __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_repeated_get(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>* field,
  size_t index) {
  return field->Get(index);
}
::wallet_api::v1::ResumePausedTransactionResponse* __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_repeated_get_mut(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>* field,
  size_t index) {
  return field->Mutable(index);
}
::wallet_api::v1::ResumePausedTransactionResponse* __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_repeated_add(google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>* field) {
  return field->Add();
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_repeated_clear(google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>* field) {
  field->Clear();
}
void __rust_proto_thunk__wallet_api_v1_ResumePausedTransactionResponse_repeated_copy_from(
  google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>& dst,
  const google::protobuf::RepeatedPtrField<::wallet_api::v1::ResumePausedTransactionResponse>& src) {
  dst = src;
}


}  // extern "C"
// clang-format on

extern "C" {
  const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_new() {
    return new google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>();
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_free(const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_clear(google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_size(const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_insert(google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          int32_t key, ::wallet_api::v1::ResumePausedTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_get(const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m,
                       int32_t key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_remove(google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          int32_t key, ::wallet_api::v1::ResumePausedTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_iter(
      const google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i32_wallet_api_v1_ResumePausedTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int32_t* key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int32_t, ::wallet_api::v1::ResumePausedTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_new() {
    return new google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>();
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_free(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_clear(google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_size(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_insert(google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          uint32_t key, ::wallet_api::v1::ResumePausedTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_get(const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m,
                       uint32_t key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_remove(google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          uint32_t key, ::wallet_api::v1::ResumePausedTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_iter(
      const google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u32_wallet_api_v1_ResumePausedTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint32_t* key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint32_t, ::wallet_api::v1::ResumePausedTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_new() {
    return new google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>();
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_free(const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_clear(google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_size(const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_insert(google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          int64_t key, ::wallet_api::v1::ResumePausedTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_get(const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m,
                       int64_t key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_remove(google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          int64_t key, ::wallet_api::v1::ResumePausedTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_iter(
      const google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_i64_wallet_api_v1_ResumePausedTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      int64_t* key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<int64_t, ::wallet_api::v1::ResumePausedTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_new() {
    return new google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>();
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_free(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_clear(google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_size(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_insert(google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          uint64_t key, ::wallet_api::v1::ResumePausedTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_get(const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m,
                       uint64_t key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_remove(google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          uint64_t key, ::wallet_api::v1::ResumePausedTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_iter(
      const google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_u64_wallet_api_v1_ResumePausedTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      uint64_t* key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<uint64_t, ::wallet_api::v1::ResumePausedTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>* __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_new() {
    return new google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>();
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_free(const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_clear(google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_size(const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_insert(google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          bool key, ::wallet_api::v1::ResumePausedTransactionResponse value) {
    auto k = key;
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_get(const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>* m,
                       bool key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto it = m->find(key);
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_remove(google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          bool key, ::wallet_api::v1::ResumePausedTransactionResponse * value) {
    auto num_removed = m->erase(key);
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_iter(
      const google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_bool_wallet_api_v1_ResumePausedTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      bool* key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<bool, ::wallet_api::v1::ResumePausedTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = cpp_key;
    *value = &cpp_value;
  }
}
extern "C" {
  const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>* __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_new() {
    return new google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>();
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_free(const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>* m) { delete m; }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_clear(google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse> * m) { m->clear(); }
  size_t __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_size(const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return m->size();
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_insert(google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ResumePausedTransactionResponse value) {
    auto k = std::string(key.ptr, key.len);
    auto it = m->find(k);
    if (it != m->end()) {
      return false;
    }
    (*m)[k] = value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_get(const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>* m,
                       google::protobuf::rust_internal::PtrAndLen key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto it = m->find(std::string(key.ptr, key.len));
    if (it == m->end()) {
      return false;
    }
    const ::wallet_api::v1::ResumePausedTransactionResponse* cpp_value = &it->second;
    *value = cpp_value;
    return true;
  }
  bool __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_remove(google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse> * m,
                          google::protobuf::rust_internal::PtrAndLen key, ::wallet_api::v1::ResumePausedTransactionResponse * value) {
    auto num_removed = m->erase(std::string(key.ptr, key.len));
    return num_removed > 0;
  }
  google::protobuf::internal::UntypedMapIterator __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_iter(
      const google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>* m) {
    return google::protobuf::internal::UntypedMapIterator::FromTyped(m->cbegin());
  }
  void __rust_proto_thunk__Map_ProtoStr_wallet_api_v1_ResumePausedTransactionResponse_iter_get(
      const google::protobuf::internal::UntypedMapIterator* iter,
      google::protobuf::rust_internal::PtrAndLen* key, const ::wallet_api::v1::ResumePausedTransactionResponse** value) {
    auto typed_iter = iter->ToTyped<
        google::protobuf::Map<std::string, ::wallet_api::v1::ResumePausedTransactionResponse>::const_iterator>();
    const auto& cpp_key = typed_iter->first;
    const auto& cpp_value = typed_iter->second;
    *key = google::protobuf::rust_internal::PtrAndLen(cpp_key.data(), cpp_key.size());
    *value = &cpp_value;
  }
}

