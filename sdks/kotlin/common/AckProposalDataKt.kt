// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/amqp.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializeackProposalData")
public inline fun ackProposalData(block: common.AckProposalDataKt.Dsl.() -> kotlin.Unit): common.Amqp.AckProposalData =
  common.AckProposalDataKt.Dsl._create(common.Amqp.AckProposalData.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * {
 * "participant": "zParticipantPublicKey",
 * "contract": {
 * "urn": "urn:knox:swap:001",
 * "id": "CONTRACT_ID",
 * "commitments": [
 * {
 * "sender": "zSender1PublicKey",
 * "recipient": "zRecipient1PublicKey",
 * "amount": {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * }
 * },
 * {
 * "sender": "zSender2PublicKey",
 * "recipient": "zRecipient2PublicKey",
 * "amount": {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * }
 * }
 * ],
 * "conditions": [
 * {
 * "condition": {
 * "timeout": 1687180000
 * }
 * }
 * ],
 * "signatories": {
 * "Key1": "BYTES=",
 * "Key2": "BYTES="
 * },
 * "memo": "AtomicAssetSwap"
 * },
 * "originator": "zOriginatorPublicKey"
 * }
 * ```
 *
 * Protobuf type `common.AckProposalData`
 */
public object AckProposalDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.Amqp.AckProposalData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.Amqp.AckProposalData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.Amqp.AckProposalData = _builder.build()

    /**
     * ```
     * Participant Public Key.
     * ```
     *
     * `string participant = 1;`
     */
    public var participant: kotlin.String
      @JvmName("getParticipant")
      get() = _builder.getParticipant()
      @JvmName("setParticipant")
      set(value) {
        _builder.setParticipant(value)
      }
    /**
     * ```
     * Participant Public Key.
     * ```
     *
     * `string participant = 1;`
     */
    public fun clearParticipant() {
      _builder.clearParticipant()
    }

    /**
     * ```
     * Contract.
     * ```
     *
     * `.common.Contract contract = 2;`
     */
    public var contract: common.PacketOuterClass.Contract
      @JvmName("getContract")
      get() = _builder.getContract()
      @JvmName("setContract")
      set(value) {
        _builder.setContract(value)
      }
    /**
     * ```
     * Contract.
     * ```
     *
     * `.common.Contract contract = 2;`
     */
    public fun clearContract() {
      _builder.clearContract()
    }
    /**
     * ```
     * Contract.
     * ```
     *
     * `.common.Contract contract = 2;`
     * @return Whether the contract field is set.
     */
    public fun hasContract(): kotlin.Boolean {
      return _builder.hasContract()
    }
    public val AckProposalDataKt.Dsl.contractOrNull: common.PacketOuterClass.Contract?
      get() = _builder.contractOrNull

    /**
     * ```
     * Originator Public Key.
     * ```
     *
     * `string originator = 3;`
     */
    public var originator: kotlin.String
      @JvmName("getOriginator")
      get() = _builder.getOriginator()
      @JvmName("setOriginator")
      set(value) {
        _builder.setOriginator(value)
      }
    /**
     * ```
     * Originator Public Key.
     * ```
     *
     * `string originator = 3;`
     */
    public fun clearOriginator() {
      _builder.clearOriginator()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.Amqp.AckProposalData.copy(block: `common`.AckProposalDataKt.Dsl.() -> kotlin.Unit): common.Amqp.AckProposalData =
  `common`.AckProposalDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val common.Amqp.AckProposalDataOrBuilder.contractOrNull: common.PacketOuterClass.Contract?
  get() = if (hasContract()) getContract() else null

