// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializerole")
public inline fun role(block: common.RoleKt.Dsl.() -> kotlin.Unit): common.Common.Role =
  common.RoleKt.Dsl._create(common.Common.Role.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "verifier": "VerifierLengthVariesByAlgo",
 * "role_enum": {
 * "issue_permissions": {
 * "inner": [
 * {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * },
 * {
 * "currency_code":"USD",
 * "amount":500,
 * "decimals":2
 * }
 * ]
 * }
 * }
 * }
 * ```
 *
 * Protobuf type `common.Role`
 */
public object RoleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.Common.Role.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.Common.Role.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.Common.Role = _builder.build()

    /**
     * ```
     * MultibaseVerifier.
     * ```
     *
     * `string verifier = 1;`
     */
    public var verifier: kotlin.String
      @JvmName("getVerifier")
      get() = _builder.getVerifier()
      @JvmName("setVerifier")
      set(value) {
        _builder.setVerifier(value)
      }
    /**
     * ```
     * MultibaseVerifier.
     * ```
     *
     * `string verifier = 1;`
     */
    public fun clearVerifier() {
      _builder.clearVerifier()
    }

    /**
     * ```
     * Authorized Role allows authorized keys to request a challenge nonce. Authorized keys must have additional role
     * permissions to use signed challenge nonce.
     * ```
     *
     * `bool authorized = 3;`
     */
    public var authorized: kotlin.Boolean
      @JvmName("getAuthorized")
      get() = _builder.getAuthorized()
      @JvmName("setAuthorized")
      set(value) {
        _builder.setAuthorized(value)
      }
    /**
     * ```
     * Authorized Role allows authorized keys to request a challenge nonce. Authorized keys must have additional role
     * permissions to use signed challenge nonce.
     * ```
     *
     * `bool authorized = 3;`
     */
    public fun clearAuthorized() {
      _builder.clearAuthorized()
    }
    /**
     * ```
     * Authorized Role allows authorized keys to request a challenge nonce. Authorized keys must have additional role
     * permissions to use signed challenge nonce.
     * ```
     *
     * `bool authorized = 3;`
     * @return Whether the authorized field is set.
     */
    public fun hasAuthorized(): kotlin.Boolean {
      return _builder.hasAuthorized()
    }

    /**
     * ```
     * Issuer Role Permissions.
     * ```
     *
     * `.common.Role.IssuePermissions issue_permissions = 4;`
     */
    public var issuePermissions: common.Common.Role.IssuePermissions
      @JvmName("getIssuePermissions")
      get() = _builder.getIssuePermissions()
      @JvmName("setIssuePermissions")
      set(value) {
        _builder.setIssuePermissions(value)
      }
    /**
     * ```
     * Issuer Role Permissions.
     * ```
     *
     * `.common.Role.IssuePermissions issue_permissions = 4;`
     */
    public fun clearIssuePermissions() {
      _builder.clearIssuePermissions()
    }
    /**
     * ```
     * Issuer Role Permissions.
     * ```
     *
     * `.common.Role.IssuePermissions issue_permissions = 4;`
     * @return Whether the issuePermissions field is set.
     */
    public fun hasIssuePermissions(): kotlin.Boolean {
      return _builder.hasIssuePermissions()
    }
    public val roleEnumCase: common.Common.Role.RoleEnumCase
      @JvmName("getRoleEnumCase")
      get() = _builder.getRoleEnumCase()

    public fun clearRoleEnum() {
      _builder.clearRoleEnum()
    }
  }
  @kotlin.jvm.JvmName("-initializeissuePermissions")
  public inline fun issuePermissions(block: common.RoleKt.IssuePermissionsKt.Dsl.() -> kotlin.Unit): common.Common.Role.IssuePermissions =
    common.RoleKt.IssuePermissionsKt.Dsl._create(common.Common.Role.IssuePermissions.newBuilder()).apply { block() }._build()
  /**
   * ```
   * [Example]
   * {
   * "inner": [
   * {
   * "currency_code":"USD",
   * "amount":100,
   * "decimals":2
   * },
   * {
   * "currency_code":"USD",
   * "amount":500,
   * "decimals":2
   * }
   * ]
   * }
   * ```
   *
   * Protobuf type `common.Role.IssuePermissions`
   */
  public object IssuePermissionsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: common.Common.Role.IssuePermissions.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: common.Common.Role.IssuePermissions.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): common.Common.Role.IssuePermissions = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class InnerProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       */
       public val inner: com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getInnerList()
        )
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       * @param value The inner to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addInner")
      public fun com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>.add(value: common.Common.Amount) {
        _builder.addInner(value)
      }
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       * @param value The inner to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignInner")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>.plusAssign(value: common.Common.Amount) {
        add(value)
      }
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       * @param values The inner to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllInner")
      public fun com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>.addAll(values: kotlin.collections.Iterable<common.Common.Amount>) {
        _builder.addAllInner(values)
      }
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       * @param values The inner to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllInner")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>.plusAssign(values: kotlin.collections.Iterable<common.Common.Amount>) {
        addAll(values)
      }
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       * @param index The index to set the value at.
       * @param value The inner to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setInner")
      public operator fun com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>.set(index: kotlin.Int, value: common.Common.Amount) {
        _builder.setInner(index, value)
      }
      /**
       * ```
       * The amounts up to which issuance is authorized in respective currencies.
       * ```
       *
       * `repeated .common.Amount inner = 2;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearInner")
      public fun com.google.protobuf.kotlin.DslList<common.Common.Amount, InnerProxy>.clear() {
        _builder.clearInner()
      }

    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.Common.Role.copy(block: `common`.RoleKt.Dsl.() -> kotlin.Unit): common.Common.Role =
  `common`.RoleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun common.Common.Role.IssuePermissions.copy(block: `common`.RoleKt.IssuePermissionsKt.Dsl.() -> kotlin.Unit): common.Common.Role.IssuePermissions =
  `common`.RoleKt.IssuePermissionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val common.Common.RoleOrBuilder.issuePermissionsOrNull: common.Common.Role.IssuePermissions?
  get() = if (hasIssuePermissions()) getIssuePermissions() else null

