// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/packet.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializefundsChangeNack")
public inline fun fundsChangeNack(block: common.FundsChangeNackKt.Dsl.() -> kotlin.Unit): common.PacketOuterClass.FundsChangeNack =
  common.FundsChangeNackKt.Dsl._create(common.PacketOuterClass.FundsChangeNack.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "rejection_reason": 0,
 * "other": "OTHER"
 * }
 * ```
 *
 * Protobuf type `common.FundsChangeNack`
 */
public object FundsChangeNackKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.PacketOuterClass.FundsChangeNack.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.PacketOuterClass.FundsChangeNack.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.PacketOuterClass.FundsChangeNack = _builder.build()

    /**
     * ```
     * Rejection Reason.
     * ```
     *
     * `.common.FundsChangeNack.RejectionReason rejection_reason = 1;`
     */
    public var rejectionReason: common.PacketOuterClass.FundsChangeNack.RejectionReason
      @JvmName("getRejectionReason")
      get() = _builder.getRejectionReason()
      @JvmName("setRejectionReason")
      set(value) {
        _builder.setRejectionReason(value)
      }
    public var rejectionReasonValue: kotlin.Int
      @JvmName("getRejectionReasonValue")
      get() = _builder.getRejectionReasonValue()
      @JvmName("setRejectionReasonValue")
      set(value) {
        _builder.setRejectionReasonValue(value)
      }
    /**
     * ```
     * Rejection Reason.
     * ```
     *
     * `.common.FundsChangeNack.RejectionReason rejection_reason = 1;`
     */
    public fun clearRejectionReason() {
      _builder.clearRejectionReason()
    }

    /**
     * ```
     * If Rejection Reason "Other", Message
     * ```
     *
     * `string other = 2;`
     */
    public var other: kotlin.String
      @JvmName("getOther")
      get() = _builder.getOther()
      @JvmName("setOther")
      set(value) {
        _builder.setOther(value)
      }
    /**
     * ```
     * If Rejection Reason "Other", Message
     * ```
     *
     * `string other = 2;`
     */
    public fun clearOther() {
      _builder.clearOther()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.PacketOuterClass.FundsChangeNack.copy(block: `common`.FundsChangeNackKt.Dsl.() -> kotlin.Unit): common.PacketOuterClass.FundsChangeNack =
  `common`.FundsChangeNackKt.Dsl._create(this.toBuilder()).apply { block() }._build()

