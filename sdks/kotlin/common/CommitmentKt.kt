// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/packet.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializecommitment")
public inline fun commitment(block: common.CommitmentKt.Dsl.() -> kotlin.Unit): common.PacketOuterClass.Commitment =
  common.CommitmentKt.Dsl._create(common.PacketOuterClass.Commitment.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "sender": "zSenderPublicKey",
 * "recipient": "zRecipientPublicKey",
 * "amount": {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * }
 * }
 * ```
 *
 * Protobuf type `common.Commitment`
 */
public object CommitmentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.PacketOuterClass.Commitment.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.PacketOuterClass.Commitment.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.PacketOuterClass.Commitment = _builder.build()

    /**
     * ```
     * Sender Public Key
     * ```
     *
     * `string sender = 1;`
     */
    public var sender: kotlin.String
      @JvmName("getSender")
      get() = _builder.getSender()
      @JvmName("setSender")
      set(value) {
        _builder.setSender(value)
      }
    /**
     * ```
     * Sender Public Key
     * ```
     *
     * `string sender = 1;`
     */
    public fun clearSender() {
      _builder.clearSender()
    }

    /**
     * ```
     * Recipient Public Key
     * ```
     *
     * `string recipient = 2;`
     */
    public var recipient: kotlin.String
      @JvmName("getRecipient")
      get() = _builder.getRecipient()
      @JvmName("setRecipient")
      set(value) {
        _builder.setRecipient(value)
      }
    /**
     * ```
     * Recipient Public Key
     * ```
     *
     * `string recipient = 2;`
     */
    public fun clearRecipient() {
      _builder.clearRecipient()
    }

    /**
     * ```
     * Amount of Commitment
     * ```
     *
     * `.common.Amount amount = 3;`
     */
    public var amount: common.Common.Amount
      @JvmName("getAmount")
      get() = _builder.getAmount()
      @JvmName("setAmount")
      set(value) {
        _builder.setAmount(value)
      }
    /**
     * ```
     * Amount of Commitment
     * ```
     *
     * `.common.Amount amount = 3;`
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }
    /**
     * ```
     * Amount of Commitment
     * ```
     *
     * `.common.Amount amount = 3;`
     * @return Whether the amount field is set.
     */
    public fun hasAmount(): kotlin.Boolean {
      return _builder.hasAmount()
    }
    public val CommitmentKt.Dsl.amountOrNull: common.Common.Amount?
      get() = _builder.amountOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.PacketOuterClass.Commitment.copy(block: `common`.CommitmentKt.Dsl.() -> kotlin.Unit): common.PacketOuterClass.Commitment =
  `common`.CommitmentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val common.PacketOuterClass.CommitmentOrBuilder.amountOrNull: common.Common.Amount?
  get() = if (hasAmount()) getAmount() else null

