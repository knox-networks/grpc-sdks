// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/amqp.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializepayload")
public inline fun payload(block: common.PayloadKt.Dsl.() -> kotlin.Unit): common.Amqp.Payload =
  common.PayloadKt.Dsl._create(common.Amqp.Payload.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "payload_type": 1,
 * "data": "xDATAxBYTES="
 * }
 * ```
 *
 * Protobuf type `common.Payload`
 */
public object PayloadKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.Amqp.Payload.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.Amqp.Payload.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.Amqp.Payload = _builder.build()

    /**
     * ```
     * Payload type.
     * ```
     *
     * `.common.PayloadType payload_type = 1;`
     */
    public var payloadType: common.Amqp.PayloadType
      @JvmName("getPayloadType")
      get() = _builder.getPayloadType()
      @JvmName("setPayloadType")
      set(value) {
        _builder.setPayloadType(value)
      }
    public var payloadTypeValue: kotlin.Int
      @JvmName("getPayloadTypeValue")
      get() = _builder.getPayloadTypeValue()
      @JvmName("setPayloadTypeValue")
      set(value) {
        _builder.setPayloadTypeValue(value)
      }
    /**
     * ```
     * Payload type.
     * ```
     *
     * `.common.PayloadType payload_type = 1;`
     */
    public fun clearPayloadType() {
      _builder.clearPayloadType()
    }

    /**
     * ```
     * Payload data.
     * ```
     *
     * `bytes data = 2;`
     */
    public var data: com.google.protobuf.ByteString
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * ```
     * Payload data.
     * ```
     *
     * `bytes data = 2;`
     */
    public fun clearData() {
      _builder.clearData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.Amqp.Payload.copy(block: `common`.PayloadKt.Dsl.() -> kotlin.Unit): common.Amqp.Payload =
  `common`.PayloadKt.Dsl._create(this.toBuilder()).apply { block() }._build()

