// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializeconnectionRequest")
public inline fun connectionRequest(block: common.ConnectionRequestKt.Dsl.() -> kotlin.Unit): common.Common.ConnectionRequest =
  common.ConnectionRequestKt.Dsl._create(common.Common.ConnectionRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "one": {},
 * "signature": {
 * "verifier": {
 * "signature_system": 1,
 * "verifier": "VerifierLengthChangesByAlgo="
 * },
 * "signature": "ByteLengthSignatureVariesByAlgo="
 * },
 * "connection_id": "CONNECTION_ID"
 * }
 * ```
 *
 * Protobuf type `common.ConnectionRequest`
 */
public object ConnectionRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.Common.ConnectionRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.Common.ConnectionRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.Common.ConnectionRequest = _builder.build()

    /**
     * ```
     * The connection request is of type OneConnection.
     * ```
     *
     * `.common.OneConnection one = 1;`
     */
    public var one: common.Common.OneConnection
      @JvmName("getOne")
      get() = _builder.getOne()
      @JvmName("setOne")
      set(value) {
        _builder.setOne(value)
      }
    /**
     * ```
     * The connection request is of type OneConnection.
     * ```
     *
     * `.common.OneConnection one = 1;`
     */
    public fun clearOne() {
      _builder.clearOne()
    }
    /**
     * ```
     * The connection request is of type OneConnection.
     * ```
     *
     * `.common.OneConnection one = 1;`
     * @return Whether the one field is set.
     */
    public fun hasOne(): kotlin.Boolean {
      return _builder.hasOne()
    }

    /**
     * ```
     * The connection request is of type ManyVerifierConnection.
     * ```
     *
     * `.common.ManyVerifierConnection many_verifier = 2;`
     */
    public var manyVerifier: common.Common.ManyVerifierConnection
      @JvmName("getManyVerifier")
      get() = _builder.getManyVerifier()
      @JvmName("setManyVerifier")
      set(value) {
        _builder.setManyVerifier(value)
      }
    /**
     * ```
     * The connection request is of type ManyVerifierConnection.
     * ```
     *
     * `.common.ManyVerifierConnection many_verifier = 2;`
     */
    public fun clearManyVerifier() {
      _builder.clearManyVerifier()
    }
    /**
     * ```
     * The connection request is of type ManyVerifierConnection.
     * ```
     *
     * `.common.ManyVerifierConnection many_verifier = 2;`
     * @return Whether the manyVerifier field is set.
     */
    public fun hasManyVerifier(): kotlin.Boolean {
      return _builder.hasManyVerifier()
    }

    /**
     * ```
     * The connection request is of type ManyUetrConnection.
     * ```
     *
     * `.common.ManyUetrConnection many_uetr = 3;`
     */
    public var manyUetr: common.Common.ManyUetrConnection
      @JvmName("getManyUetr")
      get() = _builder.getManyUetr()
      @JvmName("setManyUetr")
      set(value) {
        _builder.setManyUetr(value)
      }
    /**
     * ```
     * The connection request is of type ManyUetrConnection.
     * ```
     *
     * `.common.ManyUetrConnection many_uetr = 3;`
     */
    public fun clearManyUetr() {
      _builder.clearManyUetr()
    }
    /**
     * ```
     * The connection request is of type ManyUetrConnection.
     * ```
     *
     * `.common.ManyUetrConnection many_uetr = 3;`
     * @return Whether the manyUetr field is set.
     */
    public fun hasManyUetr(): kotlin.Boolean {
      return _builder.hasManyUetr()
    }

    /**
     * ```
     * The crypto signature and signers public key.
     * ```
     *
     * `.common.AuthenticationSignature signature = 4;`
     */
    public var signature: common.Common.AuthenticationSignature
      @JvmName("getSignature")
      get() = _builder.getSignature()
      @JvmName("setSignature")
      set(value) {
        _builder.setSignature(value)
      }
    /**
     * ```
     * The crypto signature and signers public key.
     * ```
     *
     * `.common.AuthenticationSignature signature = 4;`
     */
    public fun clearSignature() {
      _builder.clearSignature()
    }
    /**
     * ```
     * The crypto signature and signers public key.
     * ```
     *
     * `.common.AuthenticationSignature signature = 4;`
     * @return Whether the signature field is set.
     */
    public fun hasSignature(): kotlin.Boolean {
      return _builder.hasSignature()
    }
    public val ConnectionRequestKt.Dsl.signatureOrNull: common.Common.AuthenticationSignature?
      get() = _builder.signatureOrNull

    /**
     * ```
     * UUID representing a distinct gateway client.
     * ```
     *
     * `string connection_id = 5;`
     */
    public var connectionId: kotlin.String
      @JvmName("getConnectionId")
      get() = _builder.getConnectionId()
      @JvmName("setConnectionId")
      set(value) {
        _builder.setConnectionId(value)
      }
    /**
     * ```
     * UUID representing a distinct gateway client.
     * ```
     *
     * `string connection_id = 5;`
     */
    public fun clearConnectionId() {
      _builder.clearConnectionId()
    }
    public val requestTypeCase: common.Common.ConnectionRequest.RequestTypeCase
      @JvmName("getRequestTypeCase")
      get() = _builder.getRequestTypeCase()

    public fun clearRequestType() {
      _builder.clearRequestType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.Common.ConnectionRequest.copy(block: `common`.ConnectionRequestKt.Dsl.() -> kotlin.Unit): common.Common.ConnectionRequest =
  `common`.ConnectionRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val common.Common.ConnectionRequestOrBuilder.oneOrNull: common.Common.OneConnection?
  get() = if (hasOne()) getOne() else null

public val common.Common.ConnectionRequestOrBuilder.manyVerifierOrNull: common.Common.ManyVerifierConnection?
  get() = if (hasManyVerifier()) getManyVerifier() else null

public val common.Common.ConnectionRequestOrBuilder.manyUetrOrNull: common.Common.ManyUetrConnection?
  get() = if (hasManyUetr()) getManyUetr() else null

public val common.Common.ConnectionRequestOrBuilder.signatureOrNull: common.Common.AuthenticationSignature?
  get() = if (hasSignature()) getSignature() else null

