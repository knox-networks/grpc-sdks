// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializeamount")
public inline fun amount(block: common.AmountKt.Dsl.() -> kotlin.Unit): common.Common.Amount =
  common.AmountKt.Dsl._create(common.Common.Amount.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * }
 * ```
 *
 * Protobuf type `common.Amount`
 */
public object AmountKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.Common.Amount.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.Common.Amount.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.Common.Amount = _builder.build()

    /**
     * ```
     * ISO-4217 currency code to denote remitting Digital Banknotes in a specific currency.
     * ```
     *
     * `string currency_code = 1;`
     */
    public var currencyCode: kotlin.String
      @JvmName("getCurrencyCode")
      get() = _builder.getCurrencyCode()
      @JvmName("setCurrencyCode")
      set(value) {
        _builder.setCurrencyCode(value)
      }
    /**
     * ```
     * ISO-4217 currency code to denote remitting Digital Banknotes in a specific currency.
     * ```
     *
     * `string currency_code = 1;`
     */
    public fun clearCurrencyCode() {
      _builder.clearCurrencyCode()
    }

    /**
     * ```
     * Signed 64 bit representation of the significand.
     * ```
     *
     * `int64 amount = 2;`
     */
    public var amount: kotlin.Long
      @JvmName("getAmount")
      get() = _builder.getAmount()
      @JvmName("setAmount")
      set(value) {
        _builder.setAmount(value)
      }
    /**
     * ```
     * Signed 64 bit representation of the significand.
     * ```
     *
     * `int64 amount = 2;`
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }

    /**
     * ```
     * Unsigned 32 bit representation of the decimal precision, i.e. the inverse of the exponent. The allowed value is
     * determined by the rust_decimal crate, which allows a scale (decimal) between 0-28 inclusive. e.g. amount = 10,
     * decimals = 2 => value 0.01.
     * ```
     *
     * `uint32 decimals = 3;`
     */
    public var decimals: kotlin.Int
      @JvmName("getDecimals")
      get() = _builder.getDecimals()
      @JvmName("setDecimals")
      set(value) {
        _builder.setDecimals(value)
      }
    /**
     * ```
     * Unsigned 32 bit representation of the decimal precision, i.e. the inverse of the exponent. The allowed value is
     * determined by the rust_decimal crate, which allows a scale (decimal) between 0-28 inclusive. e.g. amount = 10,
     * decimals = 2 => value 0.01.
     * ```
     *
     * `uint32 decimals = 3;`
     */
    public fun clearDecimals() {
      _builder.clearDecimals()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.Common.Amount.copy(block: `common`.AmountKt.Dsl.() -> kotlin.Unit): common.Common.Amount =
  `common`.AmountKt.Dsl._create(this.toBuilder()).apply { block() }._build()

