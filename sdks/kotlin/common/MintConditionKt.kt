// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/packet.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializemintCondition")
public inline fun mintCondition(block: common.MintConditionKt.Dsl.() -> kotlin.Unit): common.PacketOuterClass.MintCondition =
  common.MintConditionKt.Dsl._create(common.PacketOuterClass.MintCondition.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "issuer": "zIssuerPublicKey",
 * "distribution": {
 * "value": [
 * {
 * "key": 20,
 * "value": 2
 * }
 * ]
 * }
 * }
 * ```
 *
 * Protobuf type `common.MintCondition`
 */
public object MintConditionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.PacketOuterClass.MintCondition.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.PacketOuterClass.MintCondition.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.PacketOuterClass.MintCondition = _builder.build()

    /**
     * ```
     * Public key of the issuer
     * ```
     *
     * `string issuer = 1;`
     */
    public var issuer: kotlin.String
      @JvmName("getIssuer")
      get() = _builder.getIssuer()
      @JvmName("setIssuer")
      set(value) {
        _builder.setIssuer(value)
      }
    /**
     * ```
     * Public key of the issuer
     * ```
     *
     * `string issuer = 1;`
     */
    public fun clearIssuer() {
      _builder.clearIssuer()
    }

    /**
     * ```
     * Sum must match corresponding amount in the commitment
     * ```
     *
     * `.common.Distribution distribution = 2;`
     */
    public var distribution: common.Common.Distribution
      @JvmName("getDistribution")
      get() = _builder.getDistribution()
      @JvmName("setDistribution")
      set(value) {
        _builder.setDistribution(value)
      }
    /**
     * ```
     * Sum must match corresponding amount in the commitment
     * ```
     *
     * `.common.Distribution distribution = 2;`
     */
    public fun clearDistribution() {
      _builder.clearDistribution()
    }
    /**
     * ```
     * Sum must match corresponding amount in the commitment
     * ```
     *
     * `.common.Distribution distribution = 2;`
     * @return Whether the distribution field is set.
     */
    public fun hasDistribution(): kotlin.Boolean {
      return _builder.hasDistribution()
    }
    public val MintConditionKt.Dsl.distributionOrNull: common.Common.Distribution?
      get() = _builder.distributionOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.PacketOuterClass.MintCondition.copy(block: `common`.MintConditionKt.Dsl.() -> kotlin.Unit): common.PacketOuterClass.MintCondition =
  `common`.MintConditionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val common.PacketOuterClass.MintConditionOrBuilder.distributionOrNull: common.Common.Distribution?
  get() = if (hasDistribution()) getDistribution() else null

