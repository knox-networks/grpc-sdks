// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package common;

@kotlin.jvm.JvmName("-initializestartFundsChangeRequest")
public inline fun startFundsChangeRequest(block: common.StartFundsChangeRequestKt.Dsl.() -> kotlin.Unit): common.Common.StartFundsChangeRequest =
  common.StartFundsChangeRequestKt.Dsl._create(common.Common.StartFundsChangeRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "amount": {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * },
 * "promissory": "PROMISSORY_ID_1",
 * "user_reference": "USER_PROVIDED_REFERENCE"
 * }
 * ```
 *
 * Protobuf type `common.StartFundsChangeRequest`
 */
public object StartFundsChangeRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: common.Common.StartFundsChangeRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: common.Common.StartFundsChangeRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): common.Common.StartFundsChangeRequest = _builder.build()

    /**
     * ```
     * The specific amount that the returned change must be able to make a payment of. Inclusive of currency.
     * ```
     *
     * `.common.Amount amount = 1;`
     */
    public var amount: common.Common.Amount
      @JvmName("getAmount")
      get() = _builder.getAmount()
      @JvmName("setAmount")
      set(value) {
        _builder.setAmount(value)
      }
    /**
     * ```
     * The specific amount that the returned change must be able to make a payment of. Inclusive of currency.
     * ```
     *
     * `.common.Amount amount = 1;`
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }
    /**
     * ```
     * The specific amount that the returned change must be able to make a payment of. Inclusive of currency.
     * ```
     *
     * `.common.Amount amount = 1;`
     * @return Whether the amount field is set.
     */
    public fun hasAmount(): kotlin.Boolean {
      return _builder.hasAmount()
    }
    public val StartFundsChangeRequestKt.Dsl.amountOrNull: common.Common.Amount?
      get() = _builder.amountOrNull

    /**
     * ```
     * The Digital Banknote to be replaced by other denominations. The  change returned will be a number of digital
     * banknotes totalling the same value as this digital banknote.
     * ```
     *
     * `string promissory = 2;`
     */
    public var promissory: kotlin.String
      @JvmName("getPromissory")
      get() = _builder.getPromissory()
      @JvmName("setPromissory")
      set(value) {
        _builder.setPromissory(value)
      }
    /**
     * ```
     * The Digital Banknote to be replaced by other denominations. The  change returned will be a number of digital
     * banknotes totalling the same value as this digital banknote.
     * ```
     *
     * `string promissory = 2;`
     */
    public fun clearPromissory() {
      _builder.clearPromissory()
    }

    /**
     * ```
     * User provided reference.
     * ```
     *
     * `string user_reference = 3;`
     */
    public var userReference: kotlin.String
      @JvmName("getUserReference")
      get() = _builder.getUserReference()
      @JvmName("setUserReference")
      set(value) {
        _builder.setUserReference(value)
      }
    /**
     * ```
     * User provided reference.
     * ```
     *
     * `string user_reference = 3;`
     */
    public fun clearUserReference() {
      _builder.clearUserReference()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun common.Common.StartFundsChangeRequest.copy(block: `common`.StartFundsChangeRequestKt.Dsl.() -> kotlin.Unit): common.Common.StartFundsChangeRequest =
  `common`.StartFundsChangeRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val common.Common.StartFundsChangeRequestOrBuilder.amountOrNull: common.Common.Amount?
  get() = if (hasAmount()) getAmount() else null

