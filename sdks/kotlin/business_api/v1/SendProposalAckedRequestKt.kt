// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: business_api/v1/business.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package business_api.v1;

@kotlin.jvm.JvmName("-initializesendProposalAckedRequest")
public inline fun sendProposalAckedRequest(block: business_api.v1.SendProposalAckedRequestKt.Dsl.() -> kotlin.Unit): business_api.v1.BusinessOuterClass.SendProposalAckedRequest =
  business_api.v1.SendProposalAckedRequestKt.Dsl._create(business_api.v1.BusinessOuterClass.SendProposalAckedRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "participant": "zParticipantPublicKey",
 * "contract_id": "a18f7224-a7c1-41f8-b14f-75e920b8ea81",
 * "hash": "a692da1c23c3b557b80604555d38648ca49abdcd7ad3a833c32b070c55b3de8e",
 * "algorithm": 0
 * }
 * ```
 *
 * Protobuf type `business_api.v1.SendProposalAckedRequest`
 */
public object SendProposalAckedRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: business_api.v1.BusinessOuterClass.SendProposalAckedRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: business_api.v1.BusinessOuterClass.SendProposalAckedRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): business_api.v1.BusinessOuterClass.SendProposalAckedRequest = _builder.build()

    /**
     * ```
     * Participant Public Key.
     * ```
     *
     * `string participant = 1;`
     */
    public var participant: kotlin.String
      @JvmName("getParticipant")
      get() = _builder.getParticipant()
      @JvmName("setParticipant")
      set(value) {
        _builder.setParticipant(value)
      }
    /**
     * ```
     * Participant Public Key.
     * ```
     *
     * `string participant = 1;`
     */
    public fun clearParticipant() {
      _builder.clearParticipant()
    }

    /**
     * ```
     * Contract ID.
     * ```
     *
     * `string contract_id = 2;`
     */
    public var contractId: kotlin.String
      @JvmName("getContractId")
      get() = _builder.getContractId()
      @JvmName("setContractId")
      set(value) {
        _builder.setContractId(value)
      }
    /**
     * ```
     * Contract ID.
     * ```
     *
     * `string contract_id = 2;`
     */
    public fun clearContractId() {
      _builder.clearContractId()
    }

    /**
     * ```
     * Hash of preimage in hex format
     * ```
     *
     * `string hash = 3;`
     */
    public var hash: kotlin.String
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * ```
     * Hash of preimage in hex format
     * ```
     *
     * `string hash = 3;`
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * ```
     * Hash Algorithm.
     * ```
     *
     * `.common.HashAlgorithm algorithm = 4;`
     */
    public var algorithm: common.PacketOuterClass.HashAlgorithm
      @JvmName("getAlgorithm")
      get() = _builder.getAlgorithm()
      @JvmName("setAlgorithm")
      set(value) {
        _builder.setAlgorithm(value)
      }
    public var algorithmValue: kotlin.Int
      @JvmName("getAlgorithmValue")
      get() = _builder.getAlgorithmValue()
      @JvmName("setAlgorithmValue")
      set(value) {
        _builder.setAlgorithmValue(value)
      }
    /**
     * ```
     * Hash Algorithm.
     * ```
     *
     * `.common.HashAlgorithm algorithm = 4;`
     */
    public fun clearAlgorithm() {
      _builder.clearAlgorithm()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun business_api.v1.BusinessOuterClass.SendProposalAckedRequest.copy(block: `business_api.v1`.SendProposalAckedRequestKt.Dsl.() -> kotlin.Unit): business_api.v1.BusinessOuterClass.SendProposalAckedRequest =
  `business_api.v1`.SendProposalAckedRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

