// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: business_api/v1/business.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package business_api.v1;

@kotlin.jvm.JvmName("-initializesendPayloadRequest")
public inline fun sendPayloadRequest(block: business_api.v1.SendPayloadRequestKt.Dsl.() -> kotlin.Unit): business_api.v1.BusinessOuterClass.SendPayloadRequest =
  business_api.v1.SendPayloadRequestKt.Dsl._create(business_api.v1.BusinessOuterClass.SendPayloadRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "payload": {
 * "payload_type": 1,
 * "data": "xDATAxBYTES="
 * }
 * }
 * ```
 *
 * Protobuf type `business_api.v1.SendPayloadRequest`
 */
public object SendPayloadRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: business_api.v1.BusinessOuterClass.SendPayloadRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: business_api.v1.BusinessOuterClass.SendPayloadRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): business_api.v1.BusinessOuterClass.SendPayloadRequest = _builder.build()

    /**
     * ```
     * Payload
     * ```
     *
     * `.common.Payload payload = 1;`
     */
    public var payload: common.Amqp.Payload
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * ```
     * Payload
     * ```
     *
     * `.common.Payload payload = 1;`
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * ```
     * Payload
     * ```
     *
     * `.common.Payload payload = 1;`
     * @return Whether the payload field is set.
     */
    public fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }
    public val SendPayloadRequestKt.Dsl.payloadOrNull: common.Amqp.Payload?
      get() = _builder.payloadOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun business_api.v1.BusinessOuterClass.SendPayloadRequest.copy(block: `business_api.v1`.SendPayloadRequestKt.Dsl.() -> kotlin.Unit): business_api.v1.BusinessOuterClass.SendPayloadRequest =
  `business_api.v1`.SendPayloadRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val business_api.v1.BusinessOuterClass.SendPayloadRequestOrBuilder.payloadOrNull: common.Amqp.Payload?
  get() = if (hasPayload()) getPayload() else null

