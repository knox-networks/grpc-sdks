// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: treasury/v1/treasury.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package treasury;

@kotlin.jvm.JvmName("-initializedenominationCount")
public inline fun denominationCount(block: treasury.DenominationCountKt.Dsl.() -> kotlin.Unit): treasury.TreasuryOuterClass.DenominationCount =
  treasury.DenominationCountKt.Dsl._create(treasury.TreasuryOuterClass.DenominationCount.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "denomination": {
 * "currency_code":"USD",
 * "amount":2000,
 * "decimals":2
 * },
 * "count": 5,
 * "total": {
 * "currency_code":"USD",
 * "amount":10000,
 * "decimals":2
 * }
 * }
 * ```
 *
 * Protobuf type `treasury.DenominationCount`
 */
public object DenominationCountKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: treasury.TreasuryOuterClass.DenominationCount.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: treasury.TreasuryOuterClass.DenominationCount.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): treasury.TreasuryOuterClass.DenominationCount = _builder.build()

    /**
     * ```
     * The amount of the denomination.
     * ```
     *
     * `.common.Amount denomination = 1;`
     */
    public var denomination: common.Common.Amount
      @JvmName("getDenomination")
      get() = _builder.getDenomination()
      @JvmName("setDenomination")
      set(value) {
        _builder.setDenomination(value)
      }
    /**
     * ```
     * The amount of the denomination.
     * ```
     *
     * `.common.Amount denomination = 1;`
     */
    public fun clearDenomination() {
      _builder.clearDenomination()
    }
    /**
     * ```
     * The amount of the denomination.
     * ```
     *
     * `.common.Amount denomination = 1;`
     * @return Whether the denomination field is set.
     */
    public fun hasDenomination(): kotlin.Boolean {
      return _builder.hasDenomination()
    }
    public val DenominationCountKt.Dsl.denominationOrNull: common.Common.Amount?
      get() = _builder.denominationOrNull

    /**
     * ```
     * The number of digital banknotes of this amount held in supply.
     * ```
     *
     * `uint32 count = 2;`
     */
    public var count: kotlin.Int
      @JvmName("getCount")
      get() = _builder.getCount()
      @JvmName("setCount")
      set(value) {
        _builder.setCount(value)
      }
    /**
     * ```
     * The number of digital banknotes of this amount held in supply.
     * ```
     *
     * `uint32 count = 2;`
     */
    public fun clearCount() {
      _builder.clearCount()
    }

    /**
     * ```
     * The total value represented by digital banknotes of this denomination.
     * ```
     *
     * `.common.Amount total = 3;`
     */
    public var total: common.Common.Amount
      @JvmName("getTotal")
      get() = _builder.getTotal()
      @JvmName("setTotal")
      set(value) {
        _builder.setTotal(value)
      }
    /**
     * ```
     * The total value represented by digital banknotes of this denomination.
     * ```
     *
     * `.common.Amount total = 3;`
     */
    public fun clearTotal() {
      _builder.clearTotal()
    }
    /**
     * ```
     * The total value represented by digital banknotes of this denomination.
     * ```
     *
     * `.common.Amount total = 3;`
     * @return Whether the total field is set.
     */
    public fun hasTotal(): kotlin.Boolean {
      return _builder.hasTotal()
    }
    public val DenominationCountKt.Dsl.totalOrNull: common.Common.Amount?
      get() = _builder.totalOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun treasury.TreasuryOuterClass.DenominationCount.copy(block: `treasury`.DenominationCountKt.Dsl.() -> kotlin.Unit): treasury.TreasuryOuterClass.DenominationCount =
  `treasury`.DenominationCountKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val treasury.TreasuryOuterClass.DenominationCountOrBuilder.denominationOrNull: common.Common.Amount?
  get() = if (hasDenomination()) getDenomination() else null

public val treasury.TreasuryOuterClass.DenominationCountOrBuilder.totalOrNull: common.Common.Amount?
  get() = if (hasTotal()) getTotal() else null

