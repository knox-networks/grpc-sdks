// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: user_api/v1/user.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package user_api.v1;

@kotlin.jvm.JvmName("-initializecreateAuthnBrowserWithWalletChallengeResponse")
public inline fun createAuthnBrowserWithWalletChallengeResponse(block: user_api.v1.CreateAuthnBrowserWithWalletChallengeResponseKt.Dsl.() -> kotlin.Unit): user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse =
  user_api.v1.CreateAuthnBrowserWithWalletChallengeResponseKt.Dsl._create(user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "did_start": { 
 * "nonce": "NONCE" 
 * }
 * } 
 * ```
 *
 * Protobuf type `user_api.v1.CreateAuthnBrowserWithWalletChallengeResponse`
 */
public object CreateAuthnBrowserWithWalletChallengeResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse = _builder.build()

    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     */
    public var nonce: kotlin.String
      @JvmName("getNonce")
      get() = _builder.getNonce()
      @JvmName("setNonce")
      set(value) {
        _builder.setNonce(value)
      }
    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     */
    public fun clearNonce() {
      _builder.clearNonce()
    }
    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     * @return Whether the nonce field is set.
     */
    public fun hasNonce(): kotlin.Boolean {
      return _builder.hasNonce()
    }

    /**
     * ```
     * OAuth2 RFC6749 Access Token.
     * ```
     *
     * `.user_api.v1.AuthTokenResponse auth_token = 2;`
     */
    public var authToken: user_api.v1.UserOuterClass.AuthTokenResponse
      @JvmName("getAuthToken")
      get() = _builder.getAuthToken()
      @JvmName("setAuthToken")
      set(value) {
        _builder.setAuthToken(value)
      }
    /**
     * ```
     * OAuth2 RFC6749 Access Token.
     * ```
     *
     * `.user_api.v1.AuthTokenResponse auth_token = 2;`
     */
    public fun clearAuthToken() {
      _builder.clearAuthToken()
    }
    /**
     * ```
     * OAuth2 RFC6749 Access Token.
     * ```
     *
     * `.user_api.v1.AuthTokenResponse auth_token = 2;`
     * @return Whether the authToken field is set.
     */
    public fun hasAuthToken(): kotlin.Boolean {
      return _builder.hasAuthToken()
    }
    public val didStartCase: user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse.DidStartCase
      @JvmName("getDidStartCase")
      get() = _builder.getDidStartCase()

    public fun clearDidStart() {
      _builder.clearDidStart()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse.copy(block: `user_api.v1`.CreateAuthnBrowserWithWalletChallengeResponseKt.Dsl.() -> kotlin.Unit): user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponse =
  `user_api.v1`.CreateAuthnBrowserWithWalletChallengeResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val user_api.v1.UserOuterClass.CreateAuthnBrowserWithWalletChallengeResponseOrBuilder.authTokenOrNull: user_api.v1.UserOuterClass.AuthTokenResponse?
  get() = if (hasAuthToken()) getAuthToken() else null

