// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wallet_api/v1/wallet.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package wallet_api.v1;

@kotlin.jvm.JvmName("-initializepreparePaymentWithImplicitFundsChangeRequest")
public inline fun preparePaymentWithImplicitFundsChangeRequest(block: wallet_api.v1.PreparePaymentWithImplicitFundsChangeRequestKt.Dsl.() -> kotlin.Unit): wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest =
  wallet_api.v1.PreparePaymentWithImplicitFundsChangeRequestKt.Dsl._create(wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "amount": {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * },
 * "recipient": "zRecipientPublicKey",
 * "user_reference": "TRANSACTION_REFERENCE",
 * "wallet_id": "UUID",
 * "api_key": "API_KEY"
 * }
 * ```
 *
 * Protobuf type `wallet_api.v1.PreparePaymentWithImplicitFundsChangeRequest`
 */
public object PreparePaymentWithImplicitFundsChangeRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest = _builder.build()

    /**
     * ```
     * [MultibaseVerifier] Recipient of payment funds
     * ```
     *
     * `string recipient = 1;`
     */
    public var recipient: kotlin.String
      @JvmName("getRecipient")
      get() = _builder.getRecipient()
      @JvmName("setRecipient")
      set(value) {
        _builder.setRecipient(value)
      }
    /**
     * ```
     * [MultibaseVerifier] Recipient of payment funds
     * ```
     *
     * `string recipient = 1;`
     */
    public fun clearRecipient() {
      _builder.clearRecipient()
    }

    /**
     * ```
     * Amount to send to recipient
     * ```
     *
     * `.common.Amount amount = 2;`
     */
    public var amount: common.Common.Amount
      @JvmName("getAmount")
      get() = _builder.getAmount()
      @JvmName("setAmount")
      set(value) {
        _builder.setAmount(value)
      }
    /**
     * ```
     * Amount to send to recipient
     * ```
     *
     * `.common.Amount amount = 2;`
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }
    /**
     * ```
     * Amount to send to recipient
     * ```
     *
     * `.common.Amount amount = 2;`
     * @return Whether the amount field is set.
     */
    public fun hasAmount(): kotlin.Boolean {
      return _builder.hasAmount()
    }
    public val PreparePaymentWithImplicitFundsChangeRequestKt.Dsl.amountOrNull: common.Common.Amount?
      get() = _builder.amountOrNull

    /**
     * ```
     * Human-readable memo field
     * ```
     *
     * `string user_reference = 3;`
     */
    public var userReference: kotlin.String
      @JvmName("getUserReference")
      get() = _builder.getUserReference()
      @JvmName("setUserReference")
      set(value) {
        _builder.setUserReference(value)
      }
    /**
     * ```
     * Human-readable memo field
     * ```
     *
     * `string user_reference = 3;`
     */
    public fun clearUserReference() {
      _builder.clearUserReference()
    }

    /**
     * ```
     * UUID of the wallet.
     * ```
     *
     * `string wallet_id = 4;`
     */
    public var walletId: kotlin.String
      @JvmName("getWalletId")
      get() = _builder.getWalletId()
      @JvmName("setWalletId")
      set(value) {
        _builder.setWalletId(value)
      }
    /**
     * ```
     * UUID of the wallet.
     * ```
     *
     * `string wallet_id = 4;`
     */
    public fun clearWalletId() {
      _builder.clearWalletId()
    }

    /**
     * ```
     * API key given to the wallet owner at the time of owner creation.
     * ```
     *
     * `string api_key = 5;`
     */
    public var apiKey: kotlin.String
      @JvmName("getApiKey")
      get() = _builder.getApiKey()
      @JvmName("setApiKey")
      set(value) {
        _builder.setApiKey(value)
      }
    /**
     * ```
     * API key given to the wallet owner at the time of owner creation.
     * ```
     *
     * `string api_key = 5;`
     */
    public fun clearApiKey() {
      _builder.clearApiKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest.copy(block: `wallet_api.v1`.PreparePaymentWithImplicitFundsChangeRequestKt.Dsl.() -> kotlin.Unit): wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequest =
  `wallet_api.v1`.PreparePaymentWithImplicitFundsChangeRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val wallet_api.v1.WalletOuterClass.PreparePaymentWithImplicitFundsChangeRequestOrBuilder.amountOrNull: common.Common.Amount?
  get() = if (hasAmount()) getAmount() else null

