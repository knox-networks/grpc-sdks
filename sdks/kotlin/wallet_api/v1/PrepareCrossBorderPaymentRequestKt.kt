// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wallet_api/v1/wallet.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package wallet_api.v1;

@kotlin.jvm.JvmName("-initializeprepareCrossBorderPaymentRequest")
public inline fun prepareCrossBorderPaymentRequest(block: wallet_api.v1.PrepareCrossBorderPaymentRequestKt.Dsl.() -> kotlin.Unit): wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest =
  wallet_api.v1.PrepareCrossBorderPaymentRequestKt.Dsl._create(wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "api_key": "API_KEY",
 * "wallet_id": "UUID",
 * "treasury": "zTreasuryPublicKey",
 * "respondent": "zRespondentPublicKey",
 * "amount": {
 * "currency_code":"USD",
 * "amount":100,
 * "decimals":2
 * },
 * "respondent_amount": {
 * "currency_code":"MXN",
 * "amount":100,
 * "decimals":2
 * },
 * "memo": "Cross border to MX",
 * "timeout": 30
 * }
 * ```
 *
 * Protobuf type `wallet_api.v1.PrepareCrossBorderPaymentRequest`
 */
public object PrepareCrossBorderPaymentRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest = _builder.build()

    /**
     * ```
     * API key given to the wallet owner at the time of owner creation.
     * ```
     *
     * `string api_key = 1;`
     */
    public var apiKey: kotlin.String
      @JvmName("getApiKey")
      get() = _builder.getApiKey()
      @JvmName("setApiKey")
      set(value) {
        _builder.setApiKey(value)
      }
    /**
     * ```
     * API key given to the wallet owner at the time of owner creation.
     * ```
     *
     * `string api_key = 1;`
     */
    public fun clearApiKey() {
      _builder.clearApiKey()
    }

    /**
     * ```
     * UUID of the wallet.
     * ```
     *
     * `string wallet_id = 2;`
     */
    public var walletId: kotlin.String
      @JvmName("getWalletId")
      get() = _builder.getWalletId()
      @JvmName("setWalletId")
      set(value) {
        _builder.setWalletId(value)
      }
    /**
     * ```
     * UUID of the wallet.
     * ```
     *
     * `string wallet_id = 2;`
     */
    public fun clearWalletId() {
      _builder.clearWalletId()
    }

    /**
     * ```
     * [MultibaseVerifier] Participant that will act as exchange.
     * ```
     *
     * `string treasury = 3;`
     */
    public var treasury: kotlin.String
      @JvmName("getTreasury")
      get() = _builder.getTreasury()
      @JvmName("setTreasury")
      set(value) {
        _builder.setTreasury(value)
      }
    /**
     * ```
     * [MultibaseVerifier] Participant that will act as exchange.
     * ```
     *
     * `string treasury = 3;`
     */
    public fun clearTreasury() {
      _builder.clearTreasury()
    }

    /**
     * ```
     * [Amount] Amount to transfer from this wallet to the treasury.
     * ```
     *
     * `.common.Amount amount = 4;`
     */
    public var amount: common.Common.Amount
      @JvmName("getAmount")
      get() = _builder.getAmount()
      @JvmName("setAmount")
      set(value) {
        _builder.setAmount(value)
      }
    /**
     * ```
     * [Amount] Amount to transfer from this wallet to the treasury.
     * ```
     *
     * `.common.Amount amount = 4;`
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }
    /**
     * ```
     * [Amount] Amount to transfer from this wallet to the treasury.
     * ```
     *
     * `.common.Amount amount = 4;`
     * @return Whether the amount field is set.
     */
    public fun hasAmount(): kotlin.Boolean {
      return _builder.hasAmount()
    }
    public val PrepareCrossBorderPaymentRequestKt.Dsl.amountOrNull: common.Common.Amount?
      get() = _builder.amountOrNull

    /**
     * ```
     * [MultibaseVerifier] Participant that receives funds and is responsible for Hash generation.
     * ```
     *
     * `string respondent = 5;`
     */
    public var respondent: kotlin.String
      @JvmName("getRespondent")
      get() = _builder.getRespondent()
      @JvmName("setRespondent")
      set(value) {
        _builder.setRespondent(value)
      }
    /**
     * ```
     * [MultibaseVerifier] Participant that receives funds and is responsible for Hash generation.
     * ```
     *
     * `string respondent = 5;`
     */
    public fun clearRespondent() {
      _builder.clearRespondent()
    }

    /**
     * ```
     * [Amount] Amount to transfer from the treasury to the respondent.
     * ```
     *
     * `.common.Amount respondent_amount = 6;`
     */
    public var respondentAmount: common.Common.Amount
      @JvmName("getRespondentAmount")
      get() = _builder.getRespondentAmount()
      @JvmName("setRespondentAmount")
      set(value) {
        _builder.setRespondentAmount(value)
      }
    /**
     * ```
     * [Amount] Amount to transfer from the treasury to the respondent.
     * ```
     *
     * `.common.Amount respondent_amount = 6;`
     */
    public fun clearRespondentAmount() {
      _builder.clearRespondentAmount()
    }
    /**
     * ```
     * [Amount] Amount to transfer from the treasury to the respondent.
     * ```
     *
     * `.common.Amount respondent_amount = 6;`
     * @return Whether the respondentAmount field is set.
     */
    public fun hasRespondentAmount(): kotlin.Boolean {
      return _builder.hasRespondentAmount()
    }
    public val PrepareCrossBorderPaymentRequestKt.Dsl.respondentAmountOrNull: common.Common.Amount?
      get() = _builder.respondentAmountOrNull

    /**
     * ```
     * Human-readable memo field.
     * ```
     *
     * `string memo = 7;`
     */
    public var memo: kotlin.String
      @JvmName("getMemo")
      get() = _builder.getMemo()
      @JvmName("setMemo")
      set(value) {
        _builder.setMemo(value)
      }
    /**
     * ```
     * Human-readable memo field.
     * ```
     *
     * `string memo = 7;`
     */
    public fun clearMemo() {
      _builder.clearMemo()
    }

    /**
     * ```
     * [Seconds] The duration in which this request should be completed in.
     * ```
     *
     * `uint32 timeout = 8;`
     */
    public var timeout: kotlin.Int
      @JvmName("getTimeout")
      get() = _builder.getTimeout()
      @JvmName("setTimeout")
      set(value) {
        _builder.setTimeout(value)
      }
    /**
     * ```
     * [Seconds] The duration in which this request should be completed in.
     * ```
     *
     * `uint32 timeout = 8;`
     */
    public fun clearTimeout() {
      _builder.clearTimeout()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest.copy(block: `wallet_api.v1`.PrepareCrossBorderPaymentRequestKt.Dsl.() -> kotlin.Unit): wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequest =
  `wallet_api.v1`.PrepareCrossBorderPaymentRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequestOrBuilder.amountOrNull: common.Common.Amount?
  get() = if (hasAmount()) getAmount() else null

public val wallet_api.v1.WalletOuterClass.PrepareCrossBorderPaymentRequestOrBuilder.respondentAmountOrNull: common.Common.Amount?
  get() = if (hasRespondentAmount()) getRespondentAmount() else null

