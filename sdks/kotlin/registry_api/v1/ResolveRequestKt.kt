// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: registry_api/v1/registry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package registry_api.v1;

@kotlin.jvm.JvmName("-initializeresolveRequest")
public inline fun resolveRequest(block: registry_api.v1.ResolveRequestKt.Dsl.() -> kotlin.Unit): registry_api.v1.Registry.ResolveRequest =
  registry_api.v1.ResolveRequestKt.Dsl._create(registry_api.v1.Registry.ResolveRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "did": "did:method-name:zDIDMultibase58Encoded",
 * "resolutionOption": {
 * "accept": 0
 * }
 * }
 * ```
 *
 * Protobuf type `registry_api.v1.ResolveRequest`
 */
public object ResolveRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: registry_api.v1.Registry.ResolveRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: registry_api.v1.Registry.ResolveRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): registry_api.v1.Registry.ResolveRequest = _builder.build()

    /**
     * ```
     * W3C Decentralized Identifier (DID) of the wallet.
     * ```
     *
     * `string did = 1;`
     */
    public var did: kotlin.String
      @JvmName("getDid")
      get() = _builder.getDid()
      @JvmName("setDid")
      set(value) {
        _builder.setDid(value)
      }
    /**
     * ```
     * W3C Decentralized Identifier (DID) of the wallet.
     * ```
     *
     * `string did = 1;`
     */
    public fun clearDid() {
      _builder.clearDid()
    }

    /**
     * ```
     * W3C metadata structure for did resolution
     * ```
     *
     * `.registry_api.v1.ResolutionOption resolutionOption = 2;`
     */
    public var resolutionOption: registry_api.v1.Registry.ResolutionOption
      @JvmName("getResolutionOption")
      get() = _builder.getResolutionOption()
      @JvmName("setResolutionOption")
      set(value) {
        _builder.setResolutionOption(value)
      }
    /**
     * ```
     * W3C metadata structure for did resolution
     * ```
     *
     * `.registry_api.v1.ResolutionOption resolutionOption = 2;`
     */
    public fun clearResolutionOption() {
      _builder.clearResolutionOption()
    }
    /**
     * ```
     * W3C metadata structure for did resolution
     * ```
     *
     * `.registry_api.v1.ResolutionOption resolutionOption = 2;`
     * @return Whether the resolutionOption field is set.
     */
    public fun hasResolutionOption(): kotlin.Boolean {
      return _builder.hasResolutionOption()
    }
    public val ResolveRequestKt.Dsl.resolutionOptionOrNull: registry_api.v1.Registry.ResolutionOption?
      get() = _builder.resolutionOptionOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun registry_api.v1.Registry.ResolveRequest.copy(block: `registry_api.v1`.ResolveRequestKt.Dsl.() -> kotlin.Unit): registry_api.v1.Registry.ResolveRequest =
  `registry_api.v1`.ResolveRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val registry_api.v1.Registry.ResolveRequestOrBuilder.resolutionOptionOrNull: registry_api.v1.Registry.ResolutionOption?
  get() = if (hasResolutionOption()) getResolutionOption() else null

