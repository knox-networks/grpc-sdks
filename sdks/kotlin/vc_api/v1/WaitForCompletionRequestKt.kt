// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vc_api/v1/vc.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package vc_api.v1;

@kotlin.jvm.JvmName("-initializewaitForCompletionRequest")
public inline fun waitForCompletionRequest(block: vc_api.v1.WaitForCompletionRequestKt.Dsl.() -> kotlin.Unit): vc_api.v1.Vc.WaitForCompletionRequest =
  vc_api.v1.WaitForCompletionRequestKt.Dsl._create(vc_api.v1.Vc.WaitForCompletionRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "nonce": "NonceLengthVariesByAlgo"
 * }
 * ```
 *
 * Protobuf type `vc_api.v1.WaitForCompletionRequest`
 */
public object WaitForCompletionRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vc_api.v1.Vc.WaitForCompletionRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vc_api.v1.Vc.WaitForCompletionRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vc_api.v1.Vc.WaitForCompletionRequest = _builder.build()

    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     */
    public var nonce: kotlin.String
      @JvmName("getNonce")
      get() = _builder.getNonce()
      @JvmName("setNonce")
      set(value) {
        _builder.setNonce(value)
      }
    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     */
    public fun clearNonce() {
      _builder.clearNonce()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun vc_api.v1.Vc.WaitForCompletionRequest.copy(block: `vc_api.v1`.WaitForCompletionRequestKt.Dsl.() -> kotlin.Unit): vc_api.v1.Vc.WaitForCompletionRequest =
  `vc_api.v1`.WaitForCompletionRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

