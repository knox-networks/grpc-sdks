// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vc_api/v1/vc.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package vc_api.v1;

@kotlin.jvm.JvmName("-initializecreateIssuanceChallengeResponse")
public inline fun createIssuanceChallengeResponse(block: vc_api.v1.CreateIssuanceChallengeResponseKt.Dsl.() -> kotlin.Unit): vc_api.v1.Vc.CreateIssuanceChallengeResponse =
  vc_api.v1.CreateIssuanceChallengeResponseKt.Dsl._create(vc_api.v1.Vc.CreateIssuanceChallengeResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * [Example]
 * {
 * "nonce": "NonceLengthVariesByAlgo", 
 * "endpoint": "QR_URL_ENDPOINT", 
 * "credential_type": 1
 * }
 * ```
 *
 * Protobuf type `vc_api.v1.CreateIssuanceChallengeResponse`
 */
public object CreateIssuanceChallengeResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vc_api.v1.Vc.CreateIssuanceChallengeResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vc_api.v1.Vc.CreateIssuanceChallengeResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vc_api.v1.Vc.CreateIssuanceChallengeResponse = _builder.build()

    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     */
    public var nonce: kotlin.String
      @JvmName("getNonce")
      get() = _builder.getNonce()
      @JvmName("setNonce")
      set(value) {
        _builder.setNonce(value)
      }
    /**
     * ```
     * Value used for the challenge.
     * ```
     *
     * `string nonce = 1;`
     */
    public fun clearNonce() {
      _builder.clearNonce()
    }

    /**
     * ```
     * Used by browser to construct URL for QR generation.
     * ```
     *
     * `string endpoint = 2;`
     */
    public var endpoint: kotlin.String
      @JvmName("getEndpoint")
      get() = _builder.getEndpoint()
      @JvmName("setEndpoint")
      set(value) {
        _builder.setEndpoint(value)
      }
    /**
     * ```
     * Used by browser to construct URL for QR generation.
     * ```
     *
     * `string endpoint = 2;`
     */
    public fun clearEndpoint() {
      _builder.clearEndpoint()
    }

    /**
     * ```
     * Type of the verifiable credential being requested for issuance.
     * ```
     *
     * `.vc_api.v1.CredentialType credential_type = 3;`
     */
    public var credentialType: vc_api.v1.Vc.CredentialType
      @JvmName("getCredentialType")
      get() = _builder.getCredentialType()
      @JvmName("setCredentialType")
      set(value) {
        _builder.setCredentialType(value)
      }
    public var credentialTypeValue: kotlin.Int
      @JvmName("getCredentialTypeValue")
      get() = _builder.getCredentialTypeValue()
      @JvmName("setCredentialTypeValue")
      set(value) {
        _builder.setCredentialTypeValue(value)
      }
    /**
     * ```
     * Type of the verifiable credential being requested for issuance.
     * ```
     *
     * `.vc_api.v1.CredentialType credential_type = 3;`
     */
    public fun clearCredentialType() {
      _builder.clearCredentialType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun vc_api.v1.Vc.CreateIssuanceChallengeResponse.copy(block: `vc_api.v1`.CreateIssuanceChallengeResponseKt.Dsl.() -> kotlin.Unit): vc_api.v1.Vc.CreateIssuanceChallengeResponse =
  `vc_api.v1`.CreateIssuanceChallengeResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

